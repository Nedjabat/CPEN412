680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 25 Jan 2024      Time: 01:27:35          Source: C:\M68K\PARTB-MYPROGRAM\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  05FA 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2CDA      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  226E      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68K\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; #define StartOfExceptionVectorTable 0x08030000
                     473   ; //#define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; #define TopOfStack 0x08040000
                     476   ; //#define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; // for disassembly of program
                     495   ; char    Instruction[100] ;
                     496   ; char    TempString[100] ;
                     497   ; /************************************************************************************
                     498   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     499   ; ************************************************************************************/
                     500   ; void Wait1ms(void)
                     501   ; {
                     502   _Wait1ms:
00000932  2F02       503          move.l    D2,-(A7)
                     504   ; long int  i ;
                     505   ; for(i = 0; i < 1000; i ++)
00000934  4282       506          clr.l     D2
                     507   Wait1ms_1:
00000936  0C82 0000  508          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       509          bge.s     Wait1ms_3
0000093E  5282       510          addq.l    #1,D2
00000940  60F4       511          bra       Wait1ms_1
                     512   Wait1ms_3:
00000942  241F       513          move.l    (A7)+,D2
00000944  4E75       514          rts
                     515   ; ;
                     516   ; }
                     517   ; /************************************************************************************
                     518   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     519   ; **************************************************************************************/
                     520   ; void Wait3ms(void)
                     521   ; {
                     522   _Wait3ms:
00000946  2F02       523          move.l    D2,-(A7)
                     524   ; int i ;
                     525   ; for(i = 0; i < 3; i++)
00000948  4282       526          clr.l     D2
                     527   Wait3ms_1:
0000094A  0C82 0000  528          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       529          bge.s     Wait3ms_3
                     530   ; Wait1ms() ;
00000952  4EB8 0932  531          jsr       _Wait1ms
00000956  5282       532          addq.l    #1,D2
00000958  60F0       533          bra       Wait3ms_1
                     534   Wait3ms_3:
0000095A  241F       535          move.l    (A7)+,D2
0000095C  4E75       536          rts
                     537   ; }
                     538   ; /*********************************************************************************************
                     539   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     540   ; *********************************************************************************************/
                     541   ; void Init_LCD(void)
                     542   ; {
                     543   _Init_LCD:
                     544   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  545          move.b    #12,4194336
00000962  0040 0020 
                     546   ; Wait3ms() ;
00000966  4EB8 0946  547          jsr       _Wait3ms
                     548   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  549          move.b    #56,4194336
0000096E  0040 0020 
                     550   ; Wait3ms() ;
00000972  4EB8 0946  551          jsr       _Wait3ms
00000976  4E75       552          rts
                     553   ; }
                     554   ; /******************************************************************************
                     555   ; *subroutine to output a single character held in d1 to the LCD display
                     556   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     557   ; *current cursor position
                     558   ; *******************************************************************************/
                     559   ; void Outchar(int c)
                     560   ; {
                     561   _Outchar:
00000978  4E56 0000  562          link      A6,#0
                     563   ; LCDdata = (char)(c);
0000097C  202E 0008  564          move.l    8(A6),D0
00000980  13C0 0040  565          move.b    D0,4194338
00000984  0022      
                     566   ; Wait1ms() ;
00000986  4EB8 0932  567          jsr       _Wait1ms
0000098A  4E5E       568          unlk      A6
0000098C  4E75       569          rts
                     570   ; }
                     571   ; /**********************************************************************************
                     572   ; *subroutine to output a message at the current cursor position of the LCD display
                     573   ; ************************************************************************************/
                     574   ; void OutMess(char *theMessage)
                     575   ; {
                     576   _OutMess:
0000098E  4E56 FFFC  577          link      A6,#-4
                     578   ; char c ;
                     579   ; while((c = *theMessage++) != (char)(0))
                     580   OutMess_1:
00000992  206E 0008  581          move.l    8(A6),A0
00000996  52AE 0008  582          addq.l    #1,8(A6)
0000099A  1D50 FFFF  583          move.b    (A0),-1(A6)
0000099E  1010       584          move.b    (A0),D0
000009A0  6712       585          beq.s     OutMess_3
                     586   ; Outchar(c) ;
000009A2  122E FFFF  587          move.b    -1(A6),D1
000009A6  4881       588          ext.w     D1
000009A8  48C1       589          ext.l     D1
000009AA  2F01       590          move.l    D1,-(A7)
000009AC  4EB8 0978  591          jsr       _Outchar
000009B0  584F       592          addq.w    #4,A7
000009B2  60DE       593          bra       OutMess_1
                     594   OutMess_3:
000009B4  4E5E       595          unlk      A6
000009B6  4E75       596          rts
                     597   ; }
                     598   ; /******************************************************************************
                     599   ; *subroutine to clear the line by issuing 24 space characters
                     600   ; *******************************************************************************/
                     601   ; void Clearln(void)
                     602   ; {
                     603   _Clearln:
000009B8  2F02       604          move.l    D2,-(A7)
                     605   ; unsigned char i ;
                     606   ; for(i = 0; i < 24; i ++)
000009BA  4202       607          clr.b     D2
                     608   Clearln_1:
000009BC  0C02 0018  609          cmp.b     #24,D2
000009C0  640E       610          bhs.s     Clearln_3
                     611   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  612          pea       32
000009C6  4EB8 0978  613          jsr       _Outchar
000009CA  584F       614          addq.w    #4,A7
000009CC  5202       615          addq.b    #1,D2
000009CE  60EC       616          bra       Clearln_1
                     617   Clearln_3:
000009D0  241F       618          move.l    (A7)+,D2
000009D2  4E75       619          rts
                     620   ; }
                     621   ; /******************************************************************************
                     622   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     623   ; *******************************************************************************/
                     624   ; void Oline0(char *theMessage)
                     625   ; {
                     626   _Oline0:
000009D4  4E56 0000  627          link      A6,#0
                     628   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  629          move.b    #128,4194336
000009DC  0040 0020 
                     630   ; Wait3ms();
000009E0  4EB8 0946  631          jsr       _Wait3ms
                     632   ; Clearln() ;
000009E4  4EB8 09B8  633          jsr       _Clearln
                     634   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  635          move.b    #128,4194336
000009EC  0040 0020 
                     636   ; Wait3ms() ;
000009F0  4EB8 0946  637          jsr       _Wait3ms
                     638   ; OutMess(theMessage) ;
000009F4  2F2E 0008  639          move.l    8(A6),-(A7)
000009F8  4EB8 098E  640          jsr       _OutMess
000009FC  584F       641          addq.w    #4,A7
000009FE  4E5E       642          unlk      A6
00000A00  4E75       643          rts
                     644   ; }
                     645   ; /******************************************************************************
                     646   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     647   ; *******************************************************************************/
                     648   ; void Oline1(char *theMessage)
                     649   ; {
                     650   _Oline1:
00000A02  4E56 0000  651          link      A6,#0
                     652   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  653          move.b    #192,4194336
00000A0A  0040 0020 
                     654   ; Wait3ms();
00000A0E  4EB8 0946  655          jsr       _Wait3ms
                     656   ; Clearln() ;
00000A12  4EB8 09B8  657          jsr       _Clearln
                     658   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  659          move.b    #192,4194336
00000A1A  0040 0020 
                     660   ; Wait3ms() ;
00000A1E  4EB8 0946  661          jsr       _Wait3ms
                     662   ; OutMess(theMessage) ;
00000A22  2F2E 0008  663          move.l    8(A6),-(A7)
00000A26  4EB8 098E  664          jsr       _OutMess
00000A2A  584F       665          addq.w    #4,A7
00000A2C  4E5E       666          unlk      A6
00000A2E  4E75       667          rts
                     668   ; }
                     669   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     670   ; {
                     671   _InstallExceptionHandler:
00000A30  4E56 FFFC  672          link      A6,#-4
                     673   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0803  674          move.l    #134414336,-4(A6)
00000A38  0000 FFFC 
                     675   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  676          move.l    -4(A6),A0
00000A40  202E 000C  677          move.l    12(A6),D0
00000A44  E588       678          lsl.l     #2,D0
00000A46  21AE 0008  679          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       680          unlk      A6
00000A4E  4E75       681          rts
                     682   ; }
                     683   ; void TestLEDS(void)
                     684   ; {
                     685   _TestLEDS:
00000A50  48E7 3000  686          movem.l   D2/D3,-(A7)
                     687   ; int delay ;
                     688   ; unsigned char count = 0 ;
00000A54  4202       689          clr.b     D2
                     690   ; while(1)    {
                     691   TestLEDS_1:
                     692   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       693          move.b    D2,D0
00000A58  E908       694          lsl.b     #4,D0
00000A5A  1202       695          move.b    D2,D1
00000A5C  C23C 000F  696          and.b     #15,D1
00000A60  D001       697          add.b     D1,D0
00000A62  13C0 0040  698          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  699          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  700          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  701          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  702          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  703          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  704          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  705          move.b    D0,4194304
00000A90  0000      
                     706   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       707          clr.l     D3
                     708   TestLEDS_4:
00000A94  0C83 0003  709          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       710          bge.s     TestLEDS_6
00000A9C  5283       711          addq.l    #1,D3
00000A9E  60F4       712          bra       TestLEDS_4
                     713   TestLEDS_6:
                     714   ; ;
                     715   ; count ++;
00000AA0  5202       716          addq.b    #1,D2
00000AA2  60B2       717          bra       TestLEDS_1
                     718   ; }
                     719   ; }
                     720   ; void SwitchTest(void)
                     721   ; {
                     722   _SwitchTest:
00000AA4  48E7 3020  723          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  724          lea       _printf.L,A2
00000AAC  5968      
                     725   ; int i, switches = 0 ;
00000AAE  4283       726          clr.l     D3
                     727   ; printf("\r\n") ;
00000AB0  4879 0000  728          pea       @m68kde~2_1.L
00000AB4  6BDA      
00000AB6  4E92       729          jsr       (A2)
00000AB8  584F       730          addq.w    #4,A7
                     731   ; while(1)    {
                     732   SwitchTest_1:
                     733   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  734          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  735          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       736          lsl.l     #8,D0
00000AC8  1239 0040  737          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  738          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       739          or.l      D1,D0
00000AD6  2600       740          move.l    D0,D3
                     741   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  742          pea       @m68kde~2_2.L
00000ADC  6BDE      
00000ADE  4E92       743          jsr       (A2)
00000AE0  584F       744          addq.w    #4,A7
                     745   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  746          move.l    #128,D2
00000AE6  0080      
                     747   SwitchTest_4:
00000AE8  0C82 0000  748          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       749          ble.s     SwitchTest_6
                     750   ; if((switches & i) == 0)
00000AF0  2003       751          move.l    D3,D0
00000AF2  C082       752          and.l     D2,D0
00000AF4  660C       753          bne.s     SwitchTest_7
                     754   ; printf("0") ;
00000AF6  4879 0000  755          pea       @m68kde~2_3.L
00000AFA  6BF4      
00000AFC  4E92       756          jsr       (A2)
00000AFE  584F       757          addq.w    #4,A7
00000B00  600A       758          bra.s     SwitchTest_8
                     759   SwitchTest_7:
                     760   ; else
                     761   ; printf("1") ;
00000B02  4879 0000  762          pea       @m68kde~2_4.L
00000B06  6BF6      
00000B08  4E92       763          jsr       (A2)
00000B0A  584F       764          addq.w    #4,A7
                     765   SwitchTest_8:
00000B0C  E282       766          asr.l     #1,D2
00000B0E  60D8       767          bra       SwitchTest_4
                     768   SwitchTest_6:
00000B10  60A8       769          bra       SwitchTest_1
                     770   ; }
                     771   ; }
                     772   ; }
                     773   ; /*********************************************************************************************
                     774   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     775   ; *********************************************************************************************/
                     776   ; void Init_RS232(void)
                     777   ; {
                     778   _Init_RS232:
                     779   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  780          move.b    #21,4194368
00000B16  0040 0040 
                     781   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  782          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       783          rts
                     784   ; }
                     785   ; int kbhit(void)
                     786   ; {
                     787   _kbhit:
                     788   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  789          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  790          and.b     #1,D0
00000B2E  0C00 0001  791          cmp.b     #1,D0
00000B32  6604       792          bne.s     kbhit_1
                     793   ; return 1 ;
00000B34  7001       794          moveq     #1,D0
00000B36  6002       795          bra.s     kbhit_3
                     796   kbhit_1:
                     797   ; else
                     798   ; return 0 ;
00000B38  4280       799          clr.l     D0
                     800   kbhit_3:
00000B3A  4E75       801          rts
                     802   ; }
                     803   ; /*********************************************************************************************************
                     804   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     805   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     806   ; **  to allow the board to communicate with HyperTerminal Program
                     807   ; **
                     808   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     809   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     810   ; **  call _putch() also
                     811   ; *********************************************************************************************************/
                     812   ; int _putch( int c)
                     813   ; {
                     814   __putch:
00000B3C  4E56 0000  815          link      A6,#0
                     816   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     817   _putch_1:
00000B40  1039 0040  818          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  819          and.b     #2,D0
00000B4A  0C00 0002  820          cmp.b     #2,D0
00000B4E  6702       821          beq.s     _putch_3
00000B50  60EE       822          bra       _putch_1
                     823   _putch_3:
                     824   ; ;
                     825   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  826          move.l    8(A6),D0
00000B56  C03C 007F  827          and.b     #127,D0
00000B5A  13C0 0040  828          move.b    D0,4194370
00000B5E  0042      
                     829   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  830          move.l    8(A6),D0
00000B64  4E5E       831          unlk      A6
00000B66  4E75       832          rts
                     833   ; }
                     834   ; /*********************************************************************************************************
                     835   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     836   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     837   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     838   ; **
                     839   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     840   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     841   ; **  call _getch() also
                     842   ; *********************************************************************************************************/
                     843   ; int _getch( void )
                     844   ; {
                     845   __getch:
00000B68  2F02       846          move.l    D2,-(A7)
                     847   ; int c ;
                     848   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     849   _getch_1:
00000B6A  1039 0040  850          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  851          and.b     #1,D0
00000B74  0C00 0001  852          cmp.b     #1,D0
00000B78  6702       853          beq.s     _getch_3
00000B7A  60EE       854          bra       _getch_1
                     855   _getch_3:
                     856   ; ;
                     857   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  858          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  859          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  860          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       861          move.l    D0,D2
                     862   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     863   ; if(Echo)
00000B90  4AB9 0803  864          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       865          beq.s     _getch_4
                     866   ; _putch(c);
00000B98  2F02       867          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  868          jsr       __putch
00000B9E  584F       869          addq.w    #4,A7
                     870   _getch_4:
                     871   ; return c ;
00000BA0  2002       872          move.l    D2,D0
00000BA2  241F       873          move.l    (A7)+,D2
00000BA4  4E75       874          rts
                     875   ; }
                     876   ; // flush the input stream for any unread characters
                     877   ; void FlushKeyboard(void)
                     878   ; {
                     879   _FlushKeyboard:
00000BA6  4E56 FFFC  880          link      A6,#-4
                     881   ; char c ;
                     882   ; while(1)    {
                     883   FlushKeyboard_1:
                     884   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  885          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  886          and.b     #1,D0
00000BB4  0C00 0001  887          cmp.b     #1,D0
00000BB8  6610       888          bne.s     FlushKeyboard_4
                     889   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  890          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  891          and.b     #127,D0
00000BC4  1D40 FFFF  892          move.b    D0,-1(A6)
00000BC8  6002       893          bra.s     FlushKeyboard_5
                     894   FlushKeyboard_4:
                     895   ; else
                     896   ; return ;
00000BCA  6002       897          bra.s     FlushKeyboard_6
                     898   FlushKeyboard_5:
00000BCC  60DC       899          bra       FlushKeyboard_1
                     900   FlushKeyboard_6:
00000BCE  4E5E       901          unlk      A6
00000BD0  4E75       902          rts
                     903   ; }
                     904   ; }
                     905   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     906   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     907   ; char xtod(int c)
                     908   ; {
                     909   _xtod:
00000BD2  4E56 0000  910          link      A6,#0
00000BD6  2F02       911          move.l    D2,-(A7)
00000BD8  242E 0008  912          move.l    8(A6),D2
                     913   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  914          cmp.b     #57,D2
00000BE0  6E08       915          bgt.s     xtod_1
                     916   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       917          move.b    D2,D0
00000BE4  0400 0030  918          sub.b     #48,D0
00000BE8  6014       919          bra.s     xtod_3
                     920   xtod_1:
                     921   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  922          cmp.b     #70,D2
00000BEE  6F08       923          ble.s     xtod_4
                     924   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       925          move.b    D2,D0
00000BF2  0400 0057  926          sub.b     #87,D0
00000BF6  6006       927          bra.s     xtod_3
                     928   xtod_4:
                     929   ; else
                     930   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       931          move.b    D2,D0
00000BFA  0400 0037  932          sub.b     #55,D0
                     933   xtod_3:
00000BFE  241F       934          move.l    (A7)+,D2
00000C00  4E5E       935          unlk      A6
00000C02  4E75       936          rts
                     937   ; }
                     938   ; int Get2HexDigits(char *CheckSumPtr)
                     939   ; {
                     940   _Get2HexDigits:
00000C04  4E56 0000  941          link      A6,#0
00000C08  2F02       942          move.l    D2,-(A7)
                     943   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       944          move.l    D0,-(A7)
00000C0C  4EB8 0B68  945          jsr       __getch
00000C10  2200       946          move.l    D0,D1
00000C12  201F       947          move.l    (A7)+,D0
00000C14  2F01       948          move.l    D1,-(A7)
00000C16  4EB8 0BD2  949          jsr       _xtod
00000C1A  584F       950          addq.w    #4,A7
00000C1C  C0BC 0000  951          and.l     #255,D0
00000C20  00FF      
00000C22  E980       952          asl.l     #4,D0
00000C24  2F00       953          move.l    D0,-(A7)
00000C26  2F01       954          move.l    D1,-(A7)
00000C28  4EB8 0B68  955          jsr       __getch
00000C2C  221F       956          move.l    (A7)+,D1
00000C2E  2F00       957          move.l    D0,-(A7)
00000C30  4EB8 0BD2  958          jsr       _xtod
00000C34  584F       959          addq.w    #4,A7
00000C36  2200       960          move.l    D0,D1
00000C38  201F       961          move.l    (A7)+,D0
00000C3A  C2BC 0000  962          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       963          or.l      D1,D0
00000C42  2400       964          move.l    D0,D2
                     965   ; if(CheckSumPtr)
00000C44  4AAE 0008  966          tst.l     8(A6)
00000C48  6706       967          beq.s     Get2HexDigits_1
                     968   ; *CheckSumPtr += i ;
00000C4A  206E 0008  969          move.l    8(A6),A0
00000C4E  D510       970          add.b     D2,(A0)
                     971   Get2HexDigits_1:
                     972   ; return i ;
00000C50  2002       973          move.l    D2,D0
00000C52  241F       974          move.l    (A7)+,D2
00000C54  4E5E       975          unlk      A6
00000C56  4E75       976          rts
                     977   ; }
                     978   ; int Get4HexDigits(char *CheckSumPtr)
                     979   ; {
                     980   _Get4HexDigits:
00000C58  4E56 0000  981          link      A6,#0
                     982   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  983          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  984          jsr       _Get2HexDigits
00000C64  584F       985          addq.w    #4,A7
00000C66  E180       986          asl.l     #8,D0
00000C68  2F00       987          move.l    D0,-(A7)
00000C6A  2F2E 0008  988          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  989          jsr       _Get2HexDigits
00000C72  584F       990          addq.w    #4,A7
00000C74  2200       991          move.l    D0,D1
00000C76  201F       992          move.l    (A7)+,D0
00000C78  8081       993          or.l      D1,D0
00000C7A  4E5E       994          unlk      A6
00000C7C  4E75       995          rts
                     996   ; }
                     997   ; int Get6HexDigits(char *CheckSumPtr)
                     998   ; {
                     999   _Get6HexDigits:
00000C7E  4E56 0000 1000          link      A6,#0
                    1001   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1002          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1003          jsr       _Get4HexDigits
00000C8A  584F      1004          addq.w    #4,A7
00000C8C  E180      1005          asl.l     #8,D0
00000C8E  2F00      1006          move.l    D0,-(A7)
00000C90  2F2E 0008 1007          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1008          jsr       _Get2HexDigits
00000C98  584F      1009          addq.w    #4,A7
00000C9A  2200      1010          move.l    D0,D1
00000C9C  201F      1011          move.l    (A7)+,D0
00000C9E  8081      1012          or.l      D1,D0
00000CA0  4E5E      1013          unlk      A6
00000CA2  4E75      1014          rts
                    1015   ; }
                    1016   ; int Get8HexDigits(char *CheckSumPtr)
                    1017   ; {
                    1018   _Get8HexDigits:
00000CA4  4E56 0000 1019          link      A6,#0
                    1020   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1021          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1022          jsr       _Get4HexDigits
00000CB0  584F      1023          addq.w    #4,A7
00000CB2  E180      1024          asl.l     #8,D0
00000CB4  E180      1025          asl.l     #8,D0
00000CB6  2F00      1026          move.l    D0,-(A7)
00000CB8  2F2E 0008 1027          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1028          jsr       _Get4HexDigits
00000CC0  584F      1029          addq.w    #4,A7
00000CC2  2200      1030          move.l    D0,D1
00000CC4  201F      1031          move.l    (A7)+,D0
00000CC6  8081      1032          or.l      D1,D0
00000CC8  4E5E      1033          unlk      A6
00000CCA  4E75      1034          rts
                    1035   ; }
                    1036   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1037   _strcatInstruction:
00000CCC  4E56 0000 1038          link      A6,#0
00000CD0  2F2E 0008 1039          move.l    8(A6),-(A7)
00000CD4  4879 0803 1040          pea       _Instruction.L
00000CD8  04E2      
00000CDA  4EB9 0000 1041          jsr       _strcat
00000CDE  5906      
00000CE0  504F      1042          addq.w    #8,A7
00000CE2  4E5E      1043          unlk      A6
00000CE4  4E75      1044          rts
                    1045   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1046   _strcpyInstruction:
00000CE6  4E56 0000 1047          link      A6,#0
00000CEA  2F2E 0008 1048          move.l    8(A6),-(A7)
00000CEE  4879 0803 1049          pea       _Instruction.L
00000CF2  04E2      
00000CF4  4EB9 0000 1050          jsr       _strcpy
00000CF8  5766      
00000CFA  504F      1051          addq.w    #8,A7
00000CFC  4E5E      1052          unlk      A6
00000CFE  4E75      1053          rts
                    1054   ; void DisassembleProgram(void )
                    1055   ; {
                    1056   _DisassembleProgram:
00000D00  4E56 FFF8 1057          link      A6,#-8
00000D04  48E7 3038 1058          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D08  45F9 0803 1059          lea       _InstructionSize.L,A2
00000D0C  017E      
00000D0E  47F9 0000 1060          lea       _printf.L,A3
00000D12  5968      
00000D14  49F9 0803 1061          lea       _Instruction.L,A4
00000D18  04E2      
                    1062   ; char c ;
                    1063   ; int i, j ;
                    1064   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1065   ; printf("\r\nEnter Start Address: ") ;
00000D1A  4879 0000 1066          pea       @m68kde~2_5.L
00000D1E  6BF8      
00000D20  4E93      1067          jsr       (A3)
00000D22  584F      1068          addq.w    #4,A7
                    1069   ; ProgramPtr = Get8HexDigits(0) ;
00000D24  42A7      1070          clr.l     -(A7)
00000D26  4EB8 0CA4 1071          jsr       _Get8HexDigits
00000D2A  584F      1072          addq.w    #4,A7
00000D2C  2400      1073          move.l    D0,D2
                    1074   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000D2E  4879 0000 1075          pea       @m68kde~2_6.L
00000D32  6C10      
00000D34  4E93      1076          jsr       (A3)
00000D36  584F      1077          addq.w    #4,A7
                    1078   ; while(1)    {
                    1079   DisassembleProgram_1:
                    1080   ; for(i = 0; i < 20; i ++)
00000D38  4283      1081          clr.l     D3
                    1082   DisassembleProgram_4:
00000D3A  0C83 0000 1083          cmp.l     #20,D3
00000D3E  0014      
00000D40  6C00 017E 1084          bge       DisassembleProgram_6
                    1085   ; {
                    1086   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000D44  24BC 0000 1087          move.l    #1,(A2)
00000D48  0001      
                    1088   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000D4A  2F02      1089          move.l    D2,-(A7)
00000D4C  4EB9 0000 1090          jsr       _DisassembleInstruction
00000D50  38C4      
00000D52  584F      1091          addq.w    #4,A7
                    1092   ; if(InstructionSize == 1)
00000D54  2012      1093          move.l    (A2),D0
00000D56  0C80 0000 1094          cmp.l     #1,D0
00000D5A  0001      
00000D5C  6620      1095          bne.s     DisassembleProgram_7
                    1096   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000D5E  2F0C      1097          move.l    A4,-(A7)
00000D60  2042      1098          move.l    D2,A0
00000D62  3210      1099          move.w    (A0),D1
00000D64  C2BC 0000 1100          and.l     #65535,D1
00000D68  FFFF      
00000D6A  2F01      1101          move.l    D1,-(A7)
00000D6C  2F02      1102          move.l    D2,-(A7)
00000D6E  4879 0000 1103          pea       @m68kde~2_7.L
00000D72  6C34      
00000D74  4E93      1104          jsr       (A3)
00000D76  DEFC 0010 1105          add.w     #16,A7
00000D7A  6000 0138 1106          bra       DisassembleProgram_15
                    1107   DisassembleProgram_7:
                    1108   ; else if(InstructionSize == 2)
00000D7E  2012      1109          move.l    (A2),D0
00000D80  0C80 0000 1110          cmp.l     #2,D0
00000D84  0002      
00000D86  662E      1111          bne.s     DisassembleProgram_9
                    1112   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000D88  2F0C      1113          move.l    A4,-(A7)
00000D8A  2042      1114          move.l    D2,A0
00000D8C  3228 0002 1115          move.w    2(A0),D1
00000D90  C2BC 0000 1116          and.l     #65535,D1
00000D94  FFFF      
00000D96  2F01      1117          move.l    D1,-(A7)
00000D98  2042      1118          move.l    D2,A0
00000D9A  3210      1119          move.w    (A0),D1
00000D9C  C2BC 0000 1120          and.l     #65535,D1
00000DA0  FFFF      
00000DA2  2F01      1121          move.l    D1,-(A7)
00000DA4  2F02      1122          move.l    D2,-(A7)
00000DA6  4879 0000 1123          pea       @m68kde~2_8.L
00000DAA  6C5C      
00000DAC  4E93      1124          jsr       (A3)
00000DAE  DEFC 0014 1125          add.w     #20,A7
00000DB2  6000 0100 1126          bra       DisassembleProgram_15
                    1127   DisassembleProgram_9:
                    1128   ; else if(InstructionSize == 3)
00000DB6  2012      1129          move.l    (A2),D0
00000DB8  0C80 0000 1130          cmp.l     #3,D0
00000DBC  0003      
00000DBE  6600 003E 1131          bne       DisassembleProgram_11
                    1132   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000DC2  2F0C      1133          move.l    A4,-(A7)
00000DC4  2042      1134          move.l    D2,A0
00000DC6  3228 0004 1135          move.w    4(A0),D1
00000DCA  C2BC 0000 1136          and.l     #65535,D1
00000DCE  FFFF      
00000DD0  2F01      1137          move.l    D1,-(A7)
00000DD2  2042      1138          move.l    D2,A0
00000DD4  3228 0002 1139          move.w    2(A0),D1
00000DD8  C2BC 0000 1140          and.l     #65535,D1
00000DDC  FFFF      
00000DDE  2F01      1141          move.l    D1,-(A7)
00000DE0  2042      1142          move.l    D2,A0
00000DE2  3210      1143          move.w    (A0),D1
00000DE4  C2BC 0000 1144          and.l     #65535,D1
00000DE8  FFFF      
00000DEA  2F01      1145          move.l    D1,-(A7)
00000DEC  2F02      1146          move.l    D2,-(A7)
00000DEE  4879 0000 1147          pea       @m68kde~2_9.L
00000DF2  6C84      
00000DF4  4E93      1148          jsr       (A3)
00000DF6  DEFC 0018 1149          add.w     #24,A7
00000DFA  6000 00B8 1150          bra       DisassembleProgram_15
                    1151   DisassembleProgram_11:
                    1152   ; else if(InstructionSize == 4)
00000DFE  2012      1153          move.l    (A2),D0
00000E00  0C80 0000 1154          cmp.l     #4,D0
00000E04  0004      
00000E06  6600 004C 1155          bne       DisassembleProgram_13
                    1156   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E0A  2F0C      1157          move.l    A4,-(A7)
00000E0C  2042      1158          move.l    D2,A0
00000E0E  3228 0006 1159          move.w    6(A0),D1
00000E12  C2BC 0000 1160          and.l     #65535,D1
00000E16  FFFF      
00000E18  2F01      1161          move.l    D1,-(A7)
00000E1A  2042      1162          move.l    D2,A0
00000E1C  3228 0004 1163          move.w    4(A0),D1
00000E20  C2BC 0000 1164          and.l     #65535,D1
00000E24  FFFF      
00000E26  2F01      1165          move.l    D1,-(A7)
00000E28  2042      1166          move.l    D2,A0
00000E2A  3228 0002 1167          move.w    2(A0),D1
00000E2E  C2BC 0000 1168          and.l     #65535,D1
00000E32  FFFF      
00000E34  2F01      1169          move.l    D1,-(A7)
00000E36  2042      1170          move.l    D2,A0
00000E38  3210      1171          move.w    (A0),D1
00000E3A  C2BC 0000 1172          and.l     #65535,D1
00000E3E  FFFF      
00000E40  2F01      1173          move.l    D1,-(A7)
00000E42  2F02      1174          move.l    D2,-(A7)
00000E44  4879 0000 1175          pea       @m68kde~2_10.L
00000E48  6CAC      
00000E4A  4E93      1176          jsr       (A3)
00000E4C  DEFC 001C 1177          add.w     #28,A7
00000E50  6000 0062 1178          bra       DisassembleProgram_15
                    1179   DisassembleProgram_13:
                    1180   ; else if(InstructionSize == 5)
00000E54  2012      1181          move.l    (A2),D0
00000E56  0C80 0000 1182          cmp.l     #5,D0
00000E5A  0005      
00000E5C  6600 0056 1183          bne       DisassembleProgram_15
                    1184   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000E60  2F0C      1185          move.l    A4,-(A7)
00000E62  2042      1186          move.l    D2,A0
00000E64  3228 0008 1187          move.w    8(A0),D1
00000E68  C2BC 0000 1188          and.l     #65535,D1
00000E6C  FFFF      
00000E6E  2F01      1189          move.l    D1,-(A7)
00000E70  2042      1190          move.l    D2,A0
00000E72  3228 0006 1191          move.w    6(A0),D1
00000E76  C2BC 0000 1192          and.l     #65535,D1
00000E7A  FFFF      
00000E7C  2F01      1193          move.l    D1,-(A7)
00000E7E  2042      1194          move.l    D2,A0
00000E80  3228 0004 1195          move.w    4(A0),D1
00000E84  C2BC 0000 1196          and.l     #65535,D1
00000E88  FFFF      
00000E8A  2F01      1197          move.l    D1,-(A7)
00000E8C  2042      1198          move.l    D2,A0
00000E8E  3228 0002 1199          move.w    2(A0),D1
00000E92  C2BC 0000 1200          and.l     #65535,D1
00000E96  FFFF      
00000E98  2F01      1201          move.l    D1,-(A7)
00000E9A  2042      1202          move.l    D2,A0
00000E9C  3210      1203          move.w    (A0),D1
00000E9E  C2BC 0000 1204          and.l     #65535,D1
00000EA2  FFFF      
00000EA4  2F01      1205          move.l    D1,-(A7)
00000EA6  2F02      1206          move.l    D2,-(A7)
00000EA8  4879 0000 1207          pea       @m68kde~2_11.L
00000EAC  6CD4      
00000EAE  4E93      1208          jsr       (A3)
00000EB0  DEFC 0020 1209          add.w     #32,A7
                    1210   DisassembleProgram_15:
                    1211   ; ProgramPtr += InstructionSize ;
00000EB4  2012      1212          move.l    (A2),D0
00000EB6  E388      1213          lsl.l     #1,D0
00000EB8  D480      1214          add.l     D0,D2
00000EBA  5283      1215          addq.l    #1,D3
00000EBC  6000 FE7C 1216          bra       DisassembleProgram_4
                    1217   DisassembleProgram_6:
                    1218   ; }
                    1219   ; c = _getch() ;
00000EC0  4EB8 0B68 1220          jsr       __getch
00000EC4  1D40 FFFB 1221          move.b    D0,-5(A6)
                    1222   ; if(c == 0x1b)          // break on ESC
00000EC8  102E FFFB 1223          move.b    -5(A6),D0
00000ECC  0C00 001B 1224          cmp.b     #27,D0
00000ED0  6602      1225          bne.s     DisassembleProgram_17
                    1226   ; return ;
00000ED2  6004      1227          bra.s     DisassembleProgram_19
                    1228   DisassembleProgram_17:
00000ED4  6000 FE62 1229          bra       DisassembleProgram_1
                    1230   DisassembleProgram_19:
00000ED8  4CDF 1C0C 1231          movem.l   (A7)+,D2/D3/A2/A3/A4
00000EDC  4E5E      1232          unlk      A6
00000EDE  4E75      1233          rts
                    1234   ; }
                    1235   ; }
                    1236   ; void DumpMemory(void)   // simple dump memory fn
                    1237   ; {
                    1238   _DumpMemory:
00000EE0  48E7 3C30 1239          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000EE4  45F9 0000 1240          lea       _printf.L,A2
00000EE8  5968      
00000EEA  47F9 0000 1241          lea       _putch.L,A3
00000EEE  5854      
                    1242   ; int i, j ;
                    1243   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1244   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000EF0  4879 0000 1245          pea       @m68kde~2_12.L
00000EF4  6CFC      
00000EF6  4E92      1246          jsr       (A2)
00000EF8  584F      1247          addq.w    #4,A7
                    1248   ; printf("\r\nEnter Start Address: ") ;
00000EFA  4879 0000 1249          pea       @m68kde~2_5.L
00000EFE  6BF8      
00000F00  4E92      1250          jsr       (A2)
00000F02  584F      1251          addq.w    #4,A7
                    1252   ; RamPtr = Get8HexDigits(0) ;
00000F04  42A7      1253          clr.l     -(A7)
00000F06  4EB8 0CA4 1254          jsr       _Get8HexDigits
00000F0A  584F      1255          addq.w    #4,A7
00000F0C  2600      1256          move.l    D0,D3
                    1257   ; while(1)    {
                    1258   DumpMemory_1:
                    1259   ; for(i = 0; i < 16; i ++)    {
00000F0E  4285      1260          clr.l     D5
                    1261   DumpMemory_4:
00000F10  0C85 0000 1262          cmp.l     #16,D5
00000F14  0010      
00000F16  6C00 0096 1263          bge       DumpMemory_6
                    1264   ; printf("\r\n%08x ", RamPtr) ;
00000F1A  2F03      1265          move.l    D3,-(A7)
00000F1C  4879 0000 1266          pea       @m68kde~2_13.L
00000F20  6D36      
00000F22  4E92      1267          jsr       (A2)
00000F24  504F      1268          addq.w    #8,A7
                    1269   ; for(j=0; j < 16; j ++)  {
00000F26  4282      1270          clr.l     D2
                    1271   DumpMemory_7:
00000F28  0C82 0000 1272          cmp.l     #16,D2
00000F2C  0010      
00000F2E  6C24      1273          bge.s     DumpMemory_9
                    1274   ; printf("%02X",RamPtr[j]) ;
00000F30  2043      1275          move.l    D3,A0
00000F32  1230 2800 1276          move.b    0(A0,D2.L),D1
00000F36  C2BC 0000 1277          and.l     #255,D1
00000F3A  00FF      
00000F3C  2F01      1278          move.l    D1,-(A7)
00000F3E  4879 0000 1279          pea       @m68kde~2_14.L
00000F42  6D3E      
00000F44  4E92      1280          jsr       (A2)
00000F46  504F      1281          addq.w    #8,A7
                    1282   ; putchar(' ') ;
00000F48  4878 0020 1283          pea       32
00000F4C  4E93      1284          jsr       (A3)
00000F4E  584F      1285          addq.w    #4,A7
00000F50  5282      1286          addq.l    #1,D2
00000F52  60D4      1287          bra       DumpMemory_7
                    1288   DumpMemory_9:
                    1289   ; }
                    1290   ; // now display the data as ASCII at the end
                    1291   ; printf("  ") ;
00000F54  4879 0000 1292          pea       @m68kde~2_15.L
00000F58  6D44      
00000F5A  4E92      1293          jsr       (A2)
00000F5C  584F      1294          addq.w    #4,A7
                    1295   ; for(j = 0; j < 16; j++) {
00000F5E  4282      1296          clr.l     D2
                    1297   DumpMemory_10:
00000F60  0C82 0000 1298          cmp.l     #16,D2
00000F64  0010      
00000F66  6C00 003A 1299          bge       DumpMemory_12
                    1300   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000F6A  2043      1301          move.l    D3,A0
00000F6C  1030 2800 1302          move.b    0(A0,D2.L),D0
00000F70  C03C 007F 1303          and.b     #127,D0
00000F74  1800      1304          move.b    D0,D4
                    1305   ; if((c > (char)(0x7f)) || (c < ' '))
00000F76  0C04 007F 1306          cmp.b     #127,D4
00000F7A  6206      1307          bhi.s     DumpMemory_15
00000F7C  0C04 0020 1308          cmp.b     #32,D4
00000F80  640A      1309          bhs.s     DumpMemory_13
                    1310   DumpMemory_15:
                    1311   ; putchar('.') ;
00000F82  4878 002E 1312          pea       46
00000F86  4E93      1313          jsr       (A3)
00000F88  584F      1314          addq.w    #4,A7
00000F8A  6012      1315          bra.s     DumpMemory_14
                    1316   DumpMemory_13:
                    1317   ; else
                    1318   ; putchar(RamPtr[j]) ;
00000F8C  2043      1319          move.l    D3,A0
00000F8E  1230 2800 1320          move.b    0(A0,D2.L),D1
00000F92  C2BC 0000 1321          and.l     #255,D1
00000F96  00FF      
00000F98  2F01      1322          move.l    D1,-(A7)
00000F9A  4E93      1323          jsr       (A3)
00000F9C  584F      1324          addq.w    #4,A7
                    1325   DumpMemory_14:
00000F9E  5282      1326          addq.l    #1,D2
00000FA0  60BE      1327          bra       DumpMemory_10
                    1328   DumpMemory_12:
                    1329   ; }
                    1330   ; RamPtr = RamPtr + 16 ;
00000FA2  0683 0000 1331          add.l     #16,D3
00000FA6  0010      
00000FA8  5285      1332          addq.l    #1,D5
00000FAA  6000 FF64 1333          bra       DumpMemory_4
                    1334   DumpMemory_6:
                    1335   ; }
                    1336   ; printf("\r\n") ;
00000FAE  4879 0000 1337          pea       @m68kde~2_1.L
00000FB2  6BDA      
00000FB4  4E92      1338          jsr       (A2)
00000FB6  584F      1339          addq.w    #4,A7
                    1340   ; c = _getch() ;
00000FB8  4EB8 0B68 1341          jsr       __getch
00000FBC  1800      1342          move.b    D0,D4
                    1343   ; if(c == 0x1b)          // break on ESC
00000FBE  0C04 001B 1344          cmp.b     #27,D4
00000FC2  6602      1345          bne.s     DumpMemory_16
                    1346   ; break ;
00000FC4  6004      1347          bra.s     DumpMemory_3
                    1348   DumpMemory_16:
00000FC6  6000 FF46 1349          bra       DumpMemory_1
                    1350   DumpMemory_3:
00000FCA  4CDF 0C3C 1351          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000FCE  4E75      1352          rts
                    1353   ; }
                    1354   ; }
                    1355   ; void FillMemory()
                    1356   ; {
                    1357   _FillMemory:
00000FD0  48E7 3820 1358          movem.l   D2/D3/D4/A2,-(A7)
00000FD4  45F9 0000 1359          lea       _printf.L,A2
00000FD8  5968      
                    1360   ; char *StartRamPtr, *EndRamPtr ;
                    1361   ; unsigned char FillData ;
                    1362   ; printf("\r\nFill Memory Block") ;
00000FDA  4879 0000 1363          pea       @m68kde~2_16.L
00000FDE  6D48      
00000FE0  4E92      1364          jsr       (A2)
00000FE2  584F      1365          addq.w    #4,A7
                    1366   ; printf("\r\nEnter Start Address: ") ;
00000FE4  4879 0000 1367          pea       @m68kde~2_5.L
00000FE8  6BF8      
00000FEA  4E92      1368          jsr       (A2)
00000FEC  584F      1369          addq.w    #4,A7
                    1370   ; StartRamPtr = Get8HexDigits(0) ;
00000FEE  42A7      1371          clr.l     -(A7)
00000FF0  4EB8 0CA4 1372          jsr       _Get8HexDigits
00000FF4  584F      1373          addq.w    #4,A7
00000FF6  2400      1374          move.l    D0,D2
                    1375   ; printf("\r\nEnter End Address: ") ;
00000FF8  4879 0000 1376          pea       @m68kde~2_17.L
00000FFC  6D5C      
00000FFE  4E92      1377          jsr       (A2)
00001000  584F      1378          addq.w    #4,A7
                    1379   ; EndRamPtr = Get8HexDigits(0) ;
00001002  42A7      1380          clr.l     -(A7)
00001004  4EB8 0CA4 1381          jsr       _Get8HexDigits
00001008  584F      1382          addq.w    #4,A7
0000100A  2800      1383          move.l    D0,D4
                    1384   ; printf("\r\nEnter Fill Data: ") ;
0000100C  4879 0000 1385          pea       @m68kde~2_18.L
00001010  6D72      
00001012  4E92      1386          jsr       (A2)
00001014  584F      1387          addq.w    #4,A7
                    1388   ; FillData = Get2HexDigits(0) ;
00001016  42A7      1389          clr.l     -(A7)
00001018  4EB8 0C04 1390          jsr       _Get2HexDigits
0000101C  584F      1391          addq.w    #4,A7
0000101E  1600      1392          move.b    D0,D3
                    1393   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001020  C6BC 0000 1394          and.l     #255,D3
00001024  00FF      
00001026  2F03      1395          move.l    D3,-(A7)
00001028  2F04      1396          move.l    D4,-(A7)
0000102A  2F02      1397          move.l    D2,-(A7)
0000102C  4879 0000 1398          pea       @m68kde~2_19.L
00001030  6D86      
00001032  4E92      1399          jsr       (A2)
00001034  DEFC 0010 1400          add.w     #16,A7
                    1401   ; while(StartRamPtr < EndRamPtr)
                    1402   FillMemory_1:
00001038  B484      1403          cmp.l     D4,D2
0000103A  6408      1404          bhs.s     FillMemory_3
                    1405   ; *StartRamPtr++ = FillData ;
0000103C  2042      1406          move.l    D2,A0
0000103E  5282      1407          addq.l    #1,D2
00001040  1083      1408          move.b    D3,(A0)
00001042  60F4      1409          bra       FillMemory_1
                    1410   FillMemory_3:
00001044  4CDF 041C 1411          movem.l   (A7)+,D2/D3/D4/A2
00001048  4E75      1412          rts
                    1413   ; }
                    1414   ; void Load_SRecordFile()
                    1415   ; {
                    1416   _Load_SRecordFile:
0000104A  4E56 FFDC 1417          link      A6,#-36
0000104E  48E7 3F3C 1418          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001052  45EE FFFA 1419          lea       -6(A6),A2
00001056  47F8 0C04 1420          lea       _Get2HexDigits.L,A3
0000105A  49F9 0000 1421          lea       _printf.L,A4
0000105E  5968      
                    1422   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00001060  42AE FFEE 1423          clr.l     -18(A6)
00001064  3A7C 0000 1424          move.w    #0,A5
                    1425   ; int result, ByteCount ;
                    1426   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1427   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1428   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00001068  7E00      1429          moveq     #0,D7
                    1430   ; AddressFail = 0 ;
0000106A  42AE FFEA 1431          clr.l     -22(A6)
                    1432   ; Echo = 0 ;                              // don't echo S records during download
0000106E  42B9 0803 1433          clr.l     _Echo.L
00001072  00E0      
                    1434   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00001074  4879 0000 1435          pea       @m68kde~2_20.L
00001078  6DB6      
0000107A  4E94      1436          jsr       (A4)
0000107C  584F      1437          addq.w    #4,A7
                    1438   ; while(1)    {
                    1439   Load_SRecordFile_1:
                    1440   ; CheckSum = 0 ;
0000107E  4212      1441          clr.b     (A2)
                    1442   ; do {
                    1443   Load_SRecordFile_4:
                    1444   ; c = toupper(_getch()) ;
00001080  2F00      1445          move.l    D0,-(A7)
00001082  4EB8 0B68 1446          jsr       __getch
00001086  2200      1447          move.l    D0,D1
00001088  201F      1448          move.l    (A7)+,D0
0000108A  2F01      1449          move.l    D1,-(A7)
0000108C  4EB9 0000 1450          jsr       _toupper
00001090  591C      
00001092  584F      1451          addq.w    #4,A7
00001094  1C00      1452          move.b    D0,D6
                    1453   ; if(c == 0x1b )      // if break
00001096  0C06 001B 1454          cmp.b     #27,D6
0000109A  6604      1455          bne.s     Load_SRecordFile_6
                    1456   ; return;
0000109C  6000 0132 1457          bra       Load_SRecordFile_8
                    1458   Load_SRecordFile_6:
000010A0  0C06 0053 1459          cmp.b     #83,D6
000010A4  66DA      1460          bne       Load_SRecordFile_4
                    1461   ; }while(c != (char)('S'));   // wait for S start of header
                    1462   ; HeaderType = _getch() ;
000010A6  4EB8 0B68 1463          jsr       __getch
000010AA  1600      1464          move.b    D0,D3
                    1465   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
000010AC  0C03 0030 1466          cmp.b     #48,D3
000010B0  6706      1467          beq.s     Load_SRecordFile_11
000010B2  0C03 0035 1468          cmp.b     #53,D3
000010B6  6604      1469          bne.s     Load_SRecordFile_9
                    1470   Load_SRecordFile_11:
                    1471   ; continue ;
000010B8  6000 00D2 1472          bra       Load_SRecordFile_23
                    1473   Load_SRecordFile_9:
                    1474   ; if(HeaderType >= (char)('7'))
000010BC  0C03 0037 1475          cmp.b     #55,D3
000010C0  6D04      1476          blt.s     Load_SRecordFile_12
                    1477   ; break ;                 // end load on s7,s8,s9 records
000010C2  6000 00CC 1478          bra       Load_SRecordFile_3
                    1479   Load_SRecordFile_12:
                    1480   ; // get the bytecount
                    1481   ; ByteCount = Get2HexDigits(&CheckSum) ;
000010C6  2F0A      1482          move.l    A2,-(A7)
000010C8  4E93      1483          jsr       (A3)
000010CA  584F      1484          addq.w    #4,A7
000010CC  2D40 FFF6 1485          move.l    D0,-10(A6)
                    1486   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1487   ; if(HeaderType == (char)('1')) {
000010D0  0C03 0031 1488          cmp.b     #49,D3
000010D4  660E      1489          bne.s     Load_SRecordFile_14
                    1490   ; AddressSize = 2 ;       // 2 byte address
000010D6  7A02      1491          moveq     #2,D5
                    1492   ; Address = Get4HexDigits(&CheckSum);
000010D8  2F0A      1493          move.l    A2,-(A7)
000010DA  4EB8 0C58 1494          jsr       _Get4HexDigits
000010DE  584F      1495          addq.w    #4,A7
000010E0  2800      1496          move.l    D0,D4
000010E2  6020      1497          bra.s     Load_SRecordFile_17
                    1498   Load_SRecordFile_14:
                    1499   ; }
                    1500   ; else if (HeaderType == (char)('2')) {
000010E4  0C03 0032 1501          cmp.b     #50,D3
000010E8  660E      1502          bne.s     Load_SRecordFile_16
                    1503   ; AddressSize = 3 ;       // 3 byte address
000010EA  7A03      1504          moveq     #3,D5
                    1505   ; Address = Get6HexDigits(&CheckSum) ;
000010EC  2F0A      1506          move.l    A2,-(A7)
000010EE  4EB8 0C7E 1507          jsr       _Get6HexDigits
000010F2  584F      1508          addq.w    #4,A7
000010F4  2800      1509          move.l    D0,D4
000010F6  600C      1510          bra.s     Load_SRecordFile_17
                    1511   Load_SRecordFile_16:
                    1512   ; }
                    1513   ; else    {
                    1514   ; AddressSize = 4 ;       // 4 byte address
000010F8  7A04      1515          moveq     #4,D5
                    1516   ; Address = Get8HexDigits(&CheckSum) ;
000010FA  2F0A      1517          move.l    A2,-(A7)
000010FC  4EB8 0CA4 1518          jsr       _Get8HexDigits
00001100  584F      1519          addq.w    #4,A7
00001102  2800      1520          move.l    D0,D4
                    1521   Load_SRecordFile_17:
                    1522   ; }
                    1523   ; RamPtr = (char *)(Address) ;                            // point to download area
00001104  2D44 FFFC 1524          move.l    D4,-4(A6)
                    1525   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00001108  202E FFF6 1526          move.l    -10(A6),D0
0000110C  9085      1527          sub.l     D5,D0
0000110E  5380      1528          subq.l    #1,D0
00001110  2D40 FFE2 1529          move.l    D0,-30(A6)
                    1530   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001114  4282      1531          clr.l     D2
                    1532   Load_SRecordFile_18:
00001116  B4AE FFE2 1533          cmp.l     -30(A6),D2
0000111A  6C1E      1534          bge.s     Load_SRecordFile_20
                    1535   ; DataByte = Get2HexDigits(&CheckSum) ;
0000111C  2F0A      1536          move.l    A2,-(A7)
0000111E  4E93      1537          jsr       (A3)
00001120  584F      1538          addq.w    #4,A7
00001122  2D40 FFDE 1539          move.l    D0,-34(A6)
                    1540   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00001126  202E FFDE 1541          move.l    -34(A6),D0
0000112A  206E FFFC 1542          move.l    -4(A6),A0
0000112E  52AE FFFC 1543          addq.l    #1,-4(A6)
00001132  1080      1544          move.b    D0,(A0)
                    1545   ; ByteTotal++;
00001134  524D      1546          addq.w    #1,A5
00001136  5282      1547          addq.l    #1,D2
00001138  60DC      1548          bra       Load_SRecordFile_18
                    1549   Load_SRecordFile_20:
                    1550   ; }
                    1551   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1552   ; ReadCheckSum = Get2HexDigits(0) ;
0000113A  42A7      1553          clr.l     -(A7)
0000113C  4E93      1554          jsr       (A3)
0000113E  584F      1555          addq.w    #4,A7
00001140  1D40 FFFB 1556          move.b    D0,-5(A6)
                    1557   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00001144  1012      1558          move.b    (A2),D0
00001146  4600      1559          not.b     D0
00001148  4880      1560          ext.w     D0
0000114A  C07C 00FF 1561          and.w     #255,D0
0000114E  122E FFFB 1562          move.b    -5(A6),D1
00001152  4881      1563          ext.w     D1
00001154  C27C 00FF 1564          and.w     #255,D1
00001158  B041      1565          cmp.w     D1,D0
0000115A  6708      1566          beq.s     Load_SRecordFile_21
                    1567   ; LoadFailed = 1 ;
0000115C  7E01      1568          moveq     #1,D7
                    1569   ; FailedAddress = Address ;
0000115E  2D44 FFE6 1570          move.l    D4,-26(A6)
                    1571   ; break;
00001162  602C      1572          bra.s     Load_SRecordFile_3
                    1573   Load_SRecordFile_21:
                    1574   ; }
                    1575   ; SRecordCount++ ;
00001164  52AE FFEE 1576          addq.l    #1,-18(A6)
                    1577   ; // display feedback on progress
                    1578   ; if(SRecordCount % 25 == 0)
00001168  2F2E FFEE 1579          move.l    -18(A6),-(A7)
0000116C  4878 0019 1580          pea       25
00001170  4EB9 0000 1581          jsr       LDIV
00001174  5788      
00001176  202F 0004 1582          move.l    4(A7),D0
0000117A  504F      1583          addq.w    #8,A7
0000117C  4A80      1584          tst.l     D0
0000117E  660C      1585          bne.s     Load_SRecordFile_23
                    1586   ; putchar('.') ;
00001180  4878 002E 1587          pea       46
00001184  4EB9 0000 1588          jsr       _putch
00001188  5854      
0000118A  584F      1589          addq.w    #4,A7
                    1590   Load_SRecordFile_23:
0000118C  6000 FEF0 1591          bra       Load_SRecordFile_1
                    1592   Load_SRecordFile_3:
                    1593   ; }
                    1594   ; if(LoadFailed == 1) {
00001190  0C87 0000 1595          cmp.l     #1,D7
00001194  0001      
00001196  6610      1596          bne.s     Load_SRecordFile_25
                    1597   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00001198  2F2E FFE6 1598          move.l    -26(A6),-(A7)
0000119C  4879 0000 1599          pea       @m68kde~2_21.L
000011A0  6DE6      
000011A2  4E94      1600          jsr       (A4)
000011A4  504F      1601          addq.w    #8,A7
000011A6  600C      1602          bra.s     Load_SRecordFile_26
                    1603   Load_SRecordFile_25:
                    1604   ; }
                    1605   ; else
                    1606   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
000011A8  2F0D      1607          move.l    A5,-(A7)
000011AA  4879 0000 1608          pea       @m68kde~2_22.L
000011AE  6E0C      
000011B0  4E94      1609          jsr       (A4)
000011B2  504F      1610          addq.w    #8,A7
                    1611   Load_SRecordFile_26:
                    1612   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1613   ; for(i = 0; i < 400000; i ++)
000011B4  4282      1614          clr.l     D2
                    1615   Load_SRecordFile_27:
000011B6  0C82 0006 1616          cmp.l     #400000,D2
000011BA  1A80      
000011BC  6C04      1617          bge.s     Load_SRecordFile_29
000011BE  5282      1618          addq.l    #1,D2
000011C0  60F4      1619          bra       Load_SRecordFile_27
                    1620   Load_SRecordFile_29:
                    1621   ; ;
                    1622   ; FlushKeyboard() ;
000011C2  4EB8 0BA6 1623          jsr       _FlushKeyboard
                    1624   ; Echo = 1;
000011C6  23FC 0000 1625          move.l    #1,_Echo.L
000011CA  0001 0803 
000011CE  00E0      
                    1626   Load_SRecordFile_8:
000011D0  4CDF 3CFC 1627          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000011D4  4E5E      1628          unlk      A6
000011D6  4E75      1629          rts
                    1630   ; }
                    1631   ; void MemoryChange(void)
                    1632   ; {
                    1633   _MemoryChange:
000011D8  48E7 3820 1634          movem.l   D2/D3/D4/A2,-(A7)
000011DC  45F9 0000 1635          lea       _printf.L,A2
000011E0  5968      
                    1636   ; unsigned char *RamPtr,c ; // pointer to memory
                    1637   ; int Data ;
                    1638   ; printf("\r\nExamine and Change Memory") ;
000011E2  4879 0000 1639          pea       @m68kde~2_23.L
000011E6  6E2E      
000011E8  4E92      1640          jsr       (A2)
000011EA  584F      1641          addq.w    #4,A7
                    1642   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
000011EC  4879 0000 1643          pea       @m68kde~2_24.L
000011F0  6E4A      
000011F2  4E92      1644          jsr       (A2)
000011F4  584F      1645          addq.w    #4,A7
                    1646   ; printf("\r\nEnter Address: ") ;
000011F6  4879 0000 1647          pea       @m68kde~2_25.L
000011FA  6E90      
000011FC  4E92      1648          jsr       (A2)
000011FE  584F      1649          addq.w    #4,A7
                    1650   ; RamPtr = Get8HexDigits(0) ;
00001200  42A7      1651          clr.l     -(A7)
00001202  4EB8 0CA4 1652          jsr       _Get8HexDigits
00001206  584F      1653          addq.w    #4,A7
00001208  2600      1654          move.l    D0,D3
                    1655   ; while(1)    {
                    1656   MemoryChange_1:
                    1657   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000120A  2043      1658          move.l    D3,A0
0000120C  1210      1659          move.b    (A0),D1
0000120E  C2BC 0000 1660          and.l     #255,D1
00001212  00FF      
00001214  2F01      1661          move.l    D1,-(A7)
00001216  2F03      1662          move.l    D3,-(A7)
00001218  4879 0000 1663          pea       @m68kde~2_26.L
0000121C  6EA2      
0000121E  4E92      1664          jsr       (A2)
00001220  DEFC 000C 1665          add.w     #12,A7
                    1666   ; c = tolower(_getch()) ;
00001224  2F00      1667          move.l    D0,-(A7)
00001226  4EB8 0B68 1668          jsr       __getch
0000122A  2200      1669          move.l    D0,D1
0000122C  201F      1670          move.l    (A7)+,D0
0000122E  2F01      1671          move.l    D1,-(A7)
00001230  4EB9 0000 1672          jsr       _tolower
00001234  58B8      
00001236  584F      1673          addq.w    #4,A7
00001238  1400      1674          move.b    D0,D2
                    1675   ; if(c == (char)(0x1b))
0000123A  0C02 001B 1676          cmp.b     #27,D2
0000123E  6604      1677          bne.s     MemoryChange_4
                    1678   ; return ;                                // abort on escape
00001240  6000 0090 1679          bra       MemoryChange_6
                    1680   MemoryChange_4:
                    1681   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001244  0C02 0030 1682          cmp.b     #48,D2
00001248  6506      1683          blo.s     MemoryChange_10
0000124A  0C02 0039 1684          cmp.b     #57,D2
0000124E  6310      1685          bls.s     MemoryChange_9
                    1686   MemoryChange_10:
00001250  0C02 0061 1687          cmp.b     #97,D2
00001254  6500 006E 1688          blo       MemoryChange_7
00001258  0C02 0066 1689          cmp.b     #102,D2
0000125C  6200 0066 1690          bhi       MemoryChange_7
                    1691   MemoryChange_9:
                    1692   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001260  C4BC 0000 1693          and.l     #255,D2
00001264  00FF      
00001266  2F02      1694          move.l    D2,-(A7)
00001268  4EB8 0BD2 1695          jsr       _xtod
0000126C  584F      1696          addq.w    #4,A7
0000126E  C0BC 0000 1697          and.l     #255,D0
00001272  00FF      
00001274  E980      1698          asl.l     #4,D0
00001276  2F00      1699          move.l    D0,-(A7)
00001278  2F01      1700          move.l    D1,-(A7)
0000127A  4EB8 0B68 1701          jsr       __getch
0000127E  221F      1702          move.l    (A7)+,D1
00001280  2F00      1703          move.l    D0,-(A7)
00001282  4EB8 0BD2 1704          jsr       _xtod
00001286  584F      1705          addq.w    #4,A7
00001288  2200      1706          move.l    D0,D1
0000128A  201F      1707          move.l    (A7)+,D0
0000128C  C2BC 0000 1708          and.l     #255,D1
00001290  00FF      
00001292  8081      1709          or.l      D1,D0
00001294  2800      1710          move.l    D0,D4
                    1711   ; *RamPtr = (char)(Data) ;
00001296  2043      1712          move.l    D3,A0
00001298  1084      1713          move.b    D4,(A0)
                    1714   ; if(*RamPtr != Data) {
0000129A  2043      1715          move.l    D3,A0
0000129C  1010      1716          move.b    (A0),D0
0000129E  C0BC 0000 1717          and.l     #255,D0
000012A2  00FF      
000012A4  B084      1718          cmp.l     D4,D0
000012A6  671A      1719          beq.s     MemoryChange_11
                    1720   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000012A8  2043      1721          move.l    D3,A0
000012AA  1210      1722          move.b    (A0),D1
000012AC  C2BC 0000 1723          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1724          move.l    D1,-(A7)
000012B4  2F04      1725          move.l    D4,-(A7)
000012B6  4879 0000 1726          pea       @m68kde~2_27.L
000012BA  6EB4      
000012BC  4E92      1727          jsr       (A2)
000012BE  DEFC 000C 1728          add.w     #12,A7
                    1729   MemoryChange_11:
000012C2  6008      1730          bra.s     MemoryChange_13
                    1731   MemoryChange_7:
                    1732   ; }
                    1733   ; }
                    1734   ; else if(c == (char)('-'))
000012C4  0C02 002D 1735          cmp.b     #45,D2
000012C8  6602      1736          bne.s     MemoryChange_13
                    1737   ; RamPtr -= 2 ; ;
000012CA  5583      1738          subq.l    #2,D3
                    1739   MemoryChange_13:
                    1740   ; RamPtr ++ ;
000012CC  5283      1741          addq.l    #1,D3
000012CE  6000 FF3A 1742          bra       MemoryChange_1
                    1743   MemoryChange_6:
000012D2  4CDF 041C 1744          movem.l   (A7)+,D2/D3/D4/A2
000012D6  4E75      1745          rts
                    1746   ; }
                    1747   ; }
                    1748   ; /*******************************************************************
                    1749   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1750   ; ********************************************************************/
                    1751   ; void ProgramFlashChip(void)
                    1752   ; {
                    1753   _ProgramFlashChip:
000012D8  4E75      1754          rts
                    1755   ; //
                    1756   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1757   ; // TODO : then verify by reading it back and comparing to memory
                    1758   ; //
                    1759   ; }
                    1760   ; /*************************************************************************
                    1761   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1762   ; **************************************************************************/
                    1763   ; void LoadFromFlashChip(void)
                    1764   ; {
                    1765   _LoadFromFlashChip:
                    1766   ; printf("\r\nLoading Program From SPI Flash....") ;
000012DA  4879 0000 1767          pea       @m68kde~2_28.L
000012DE  6EE8      
000012E0  4EB9 0000 1768          jsr       _printf
000012E4  5968      
000012E6  584F      1769          addq.w    #4,A7
000012E8  4E75      1770          rts
                    1771   ; //
                    1772   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1773   ; //
                    1774   ; }
                    1775   ; // get rid of excess spaces
                    1776   ; void FormatInstructionForTrace(void)
                    1777   ; {
                    1778   _FormatInstructionForTrace:
000012EA  4E56 FF9C 1779          link      A6,#-100
000012EE  48E7 3C20 1780          movem.l   D2/D3/D4/D5/A2,-(A7)
000012F2  45EE FF9C 1781          lea       -100(A6),A2
                    1782   ; unsigned short int i ;
                    1783   ; char c, temp[100], *iptr, *tempptr ;
                    1784   ; for(i=0; i < 100; i++)
000012F6  4244      1785          clr.w     D4
                    1786   FormatInstructionForTrace_1:
000012F8  0C44 0064 1787          cmp.w     #100,D4
000012FC  640E      1788          bhs.s     FormatInstructionForTrace_3
                    1789   ; temp[i] = 0 ;
000012FE  C8BC 0000 1790          and.l     #65535,D4
00001302  FFFF      
00001304  4232 4800 1791          clr.b     0(A2,D4.L)
00001308  5244      1792          addq.w    #1,D4
0000130A  60EC      1793          bra       FormatInstructionForTrace_1
                    1794   FormatInstructionForTrace_3:
                    1795   ; iptr = Instruction ;
0000130C  41F9 0803 1796          lea       _Instruction.L,A0
00001310  04E2      
00001312  2408      1797          move.l    A0,D2
                    1798   ; tempptr = temp ;
00001314  2A0A      1799          move.l    A2,D5
                    1800   ; do{
                    1801   FormatInstructionForTrace_4:
                    1802   ; c = *iptr++ ;
00001316  2042      1803          move.l    D2,A0
00001318  5282      1804          addq.l    #1,D2
0000131A  1610      1805          move.b    (A0),D3
                    1806   ; *tempptr++ = c ;  // copy chars over
0000131C  2045      1807          move.l    D5,A0
0000131E  5285      1808          addq.l    #1,D5
00001320  1083      1809          move.b    D3,(A0)
                    1810   ; if(c == ' ')  {   // if copied space
00001322  0C03 0020 1811          cmp.b     #32,D3
00001326  6622      1812          bne.s     FormatInstructionForTrace_6
                    1813   ; while(*iptr == ' ') {
                    1814   FormatInstructionForTrace_8:
00001328  2042      1815          move.l    D2,A0
0000132A  1010      1816          move.b    (A0),D0
0000132C  0C00 0020 1817          cmp.b     #32,D0
00001330  660C      1818          bne.s     FormatInstructionForTrace_10
                    1819   ; if(*iptr == 0)  // if end of string then done
00001332  2042      1820          move.l    D2,A0
00001334  1010      1821          move.b    (A0),D0
00001336  6602      1822          bne.s     FormatInstructionForTrace_11
                    1823   ; break ;
00001338  6004      1824          bra.s     FormatInstructionForTrace_10
                    1825   FormatInstructionForTrace_11:
                    1826   ; iptr++ ; // skip over remaining spaces
0000133A  5282      1827          addq.l    #1,D2
0000133C  60EA      1828          bra       FormatInstructionForTrace_8
                    1829   FormatInstructionForTrace_10:
                    1830   ; }
                    1831   ; strcat(tempptr,iptr) ;
0000133E  2F02      1832          move.l    D2,-(A7)
00001340  2F05      1833          move.l    D5,-(A7)
00001342  4EB9 0000 1834          jsr       _strcat
00001346  5906      
00001348  504F      1835          addq.w    #8,A7
                    1836   FormatInstructionForTrace_6:
0000134A  4A03      1837          tst.b     D3
0000134C  66C8      1838          bne       FormatInstructionForTrace_4
                    1839   ; }
                    1840   ; }while(c != 0) ;
                    1841   ; strcpyInstruction(temp) ;
0000134E  2F0A      1842          move.l    A2,-(A7)
00001350  4EB8 0CE6 1843          jsr       _strcpyInstruction
00001354  584F      1844          addq.w    #4,A7
00001356  4CDF 043C 1845          movem.l   (A7)+,D2/D3/D4/D5/A2
0000135A  4E5E      1846          unlk      A6
0000135C  4E75      1847          rts
                    1848   ; }
                    1849   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1850   ; // IMPORTANT
                    1851   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1852   ; // has to be done with an interrupt (IRQ Level 6)
                    1853   ; //
                    1854   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1855   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1856   ; //
                    1857   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1858   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1859   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1860   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1861   ; // program area
                    1862   ; //
                    1863   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1864   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1865   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1866   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1867   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1868   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1869   ; void DumpRegisters()
                    1870   ; {
                    1871   _DumpRegisters:
0000135E  48E7 3F3C 1872          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001362  45F9 0000 1873          lea       _putch.L,A2
00001366  5854      
00001368  47F9 0000 1874          lea       _printf.L,A3
0000136C  5968      
0000136E  49F9 0803 1875          lea       _SR.L,A4
00001372  012C      
00001374  4BF9 0803 1876          lea       _WatchPointString.L,A5
00001378  01C2      
                    1877   ; short i, x, j, k ;
                    1878   ; unsigned char c, *BytePointer;
                    1879   ; // buld up strings for displaying watchpoints
                    1880   ; for(x = 0; x < (short)(8); x++)
0000137A  4242      1881          clr.w     D2
                    1882   DumpRegisters_1:
0000137C  0C42 0008 1883          cmp.w     #8,D2
00001380  6C00 01C6 1884          bge       DumpRegisters_3
                    1885   ; {
                    1886   ; if(WatchPointSetOrCleared[x] == 1)
00001384  48C2      1887          ext.l     D2
00001386  2002      1888          move.l    D2,D0
00001388  E588      1889          lsl.l     #2,D0
0000138A  41F9 0803 1890          lea       _WatchPointSetOrCleared.L,A0
0000138E  01A2      
00001390  2030 0800 1891          move.l    0(A0,D0.L),D0
00001394  0C80 0000 1892          cmp.l     #1,D0
00001398  0001      
0000139A  6600 0186 1893          bne       DumpRegisters_4
                    1894   ; {
                    1895   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000139E  48C2      1896          ext.l     D2
000013A0  2202      1897          move.l    D2,D1
000013A2  E589      1898          lsl.l     #2,D1
000013A4  41F9 0803 1899          lea       _WatchPointAddress.L,A0
000013A8  0182      
000013AA  2F30 1800 1900          move.l    0(A0,D1.L),-(A7)
000013AE  4879 0000 1901          pea       @m68kde~2_29.L
000013B2  6F0E      
000013B4  220D      1902          move.l    A5,D1
000013B6  48C2      1903          ext.l     D2
000013B8  2F00      1904          move.l    D0,-(A7)
000013BA  2002      1905          move.l    D2,D0
000013BC  C1FC 0064 1906          muls      #100,D0
000013C0  D280      1907          add.l     D0,D1
000013C2  201F      1908          move.l    (A7)+,D0
000013C4  2F01      1909          move.l    D1,-(A7)
000013C6  4EB9 0000 1910          jsr       _sprintf
000013CA  58D4      
000013CC  DEFC 000C 1911          add.w     #12,A7
                    1912   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000013D0  48C2      1913          ext.l     D2
000013D2  2002      1914          move.l    D2,D0
000013D4  E588      1915          lsl.l     #2,D0
000013D6  41F9 0803 1916          lea       _WatchPointAddress.L,A0
000013DA  0182      
000013DC  2A30 0800 1917          move.l    0(A0,D0.L),D5
                    1918   ; for(j = 0; j < (short)(16); j+=2)
000013E0  4243      1919          clr.w     D3
                    1920   DumpRegisters_6:
000013E2  0C43 0010 1921          cmp.w     #16,D3
000013E6  6C00 0082 1922          bge       DumpRegisters_8
                    1923   ; {
                    1924   ; for(k = 0; k < (short)(2); k++)
000013EA  4246      1925          clr.w     D6
                    1926   DumpRegisters_9:
000013EC  0C46 0002 1927          cmp.w     #2,D6
000013F0  6C00 0052 1928          bge       DumpRegisters_11
                    1929   ; {
                    1930   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
000013F4  2045      1931          move.l    D5,A0
000013F6  48C3      1932          ext.l     D3
000013F8  2203      1933          move.l    D3,D1
000013FA  48C6      1934          ext.l     D6
000013FC  D286      1935          add.l     D6,D1
000013FE  1230 1800 1936          move.b    0(A0,D1.L),D1
00001402  C2BC 0000 1937          and.l     #255,D1
00001406  00FF      
00001408  2F01      1938          move.l    D1,-(A7)
0000140A  4879 0000 1939          pea       @m68kde~2_14.L
0000140E  6D3E      
00001410  4879 0803 1940          pea       _TempString.L
00001414  0546      
00001416  4EB9 0000 1941          jsr       _sprintf
0000141A  58D4      
0000141C  DEFC 000C 1942          add.w     #12,A7
                    1943   ; strcat(WatchPointString[x], TempString) ;
00001420  4879 0803 1944          pea       _TempString.L
00001424  0546      
00001426  220D      1945          move.l    A5,D1
00001428  48C2      1946          ext.l     D2
0000142A  2F00      1947          move.l    D0,-(A7)
0000142C  2002      1948          move.l    D2,D0
0000142E  C1FC 0064 1949          muls      #100,D0
00001432  D280      1950          add.l     D0,D1
00001434  201F      1951          move.l    (A7)+,D0
00001436  2F01      1952          move.l    D1,-(A7)
00001438  4EB9 0000 1953          jsr       _strcat
0000143C  5906      
0000143E  504F      1954          addq.w    #8,A7
00001440  5246      1955          addq.w    #1,D6
00001442  60A8      1956          bra       DumpRegisters_9
                    1957   DumpRegisters_11:
                    1958   ; }
                    1959   ; strcat(WatchPointString[x]," ") ;
00001444  4879 0000 1960          pea       @m68kde~2_30.L
00001448  6F16      
0000144A  220D      1961          move.l    A5,D1
0000144C  48C2      1962          ext.l     D2
0000144E  2F00      1963          move.l    D0,-(A7)
00001450  2002      1964          move.l    D2,D0
00001452  C1FC 0064 1965          muls      #100,D0
00001456  D280      1966          add.l     D0,D1
00001458  201F      1967          move.l    (A7)+,D0
0000145A  2F01      1968          move.l    D1,-(A7)
0000145C  4EB9 0000 1969          jsr       _strcat
00001460  5906      
00001462  504F      1970          addq.w    #8,A7
00001464  5443      1971          addq.w    #2,D3
00001466  6000 FF7A 1972          bra       DumpRegisters_6
                    1973   DumpRegisters_8:
                    1974   ; }
                    1975   ; strcat(WatchPointString[x], "  ") ;
0000146A  4879 0000 1976          pea       @m68kde~2_15.L
0000146E  6D44      
00001470  220D      1977          move.l    A5,D1
00001472  48C2      1978          ext.l     D2
00001474  2F00      1979          move.l    D0,-(A7)
00001476  2002      1980          move.l    D2,D0
00001478  C1FC 0064 1981          muls      #100,D0
0000147C  D280      1982          add.l     D0,D1
0000147E  201F      1983          move.l    (A7)+,D0
00001480  2F01      1984          move.l    D1,-(A7)
00001482  4EB9 0000 1985          jsr       _strcat
00001486  5906      
00001488  504F      1986          addq.w    #8,A7
                    1987   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000148A  48C2      1988          ext.l     D2
0000148C  2002      1989          move.l    D2,D0
0000148E  E588      1990          lsl.l     #2,D0
00001490  41F9 0803 1991          lea       _WatchPointAddress.L,A0
00001494  0182      
00001496  2A30 0800 1992          move.l    0(A0,D0.L),D5
                    1993   ; for(j = 0; j < (short)(16); j++)
0000149A  4243      1994          clr.w     D3
                    1995   DumpRegisters_12:
0000149C  0C43 0010 1996          cmp.w     #16,D3
000014A0  6C00 007E 1997          bge       DumpRegisters_14
                    1998   ; {
                    1999   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000014A4  2045      2000          move.l    D5,A0
000014A6  48C3      2001          ext.l     D3
000014A8  1030 3800 2002          move.b    0(A0,D3.L),D0
000014AC  C03C 007F 2003          and.b     #127,D0
000014B0  1E00      2004          move.b    D0,D7
                    2005   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000014B2  0C07 007F 2006          cmp.b     #127,D7
000014B6  6206      2007          bhi.s     DumpRegisters_17
000014B8  0C07 0020 2008          cmp.b     #32,D7
000014BC  6416      2009          bhs.s     DumpRegisters_15
                    2010   DumpRegisters_17:
                    2011   ; sprintf(TempString, ".") ;
000014BE  4879 0000 2012          pea       @m68kde~2_31.L
000014C2  6F18      
000014C4  4879 0803 2013          pea       _TempString.L
000014C8  0546      
000014CA  4EB9 0000 2014          jsr       _sprintf
000014CE  58D4      
000014D0  504F      2015          addq.w    #8,A7
000014D2  6026      2016          bra.s     DumpRegisters_16
                    2017   DumpRegisters_15:
                    2018   ; else
                    2019   ; sprintf(TempString, "%c", BytePointer[j]) ;
000014D4  2045      2020          move.l    D5,A0
000014D6  48C3      2021          ext.l     D3
000014D8  1230 3800 2022          move.b    0(A0,D3.L),D1
000014DC  C2BC 0000 2023          and.l     #255,D1
000014E0  00FF      
000014E2  2F01      2024          move.l    D1,-(A7)
000014E4  4879 0000 2025          pea       @m68kde~2_32.L
000014E8  6F1A      
000014EA  4879 0803 2026          pea       _TempString.L
000014EE  0546      
000014F0  4EB9 0000 2027          jsr       _sprintf
000014F4  58D4      
000014F6  DEFC 000C 2028          add.w     #12,A7
                    2029   DumpRegisters_16:
                    2030   ; strcat(WatchPointString[x], TempString) ;
000014FA  4879 0803 2031          pea       _TempString.L
000014FE  0546      
00001500  220D      2032          move.l    A5,D1
00001502  48C2      2033          ext.l     D2
00001504  2F00      2034          move.l    D0,-(A7)
00001506  2002      2035          move.l    D2,D0
00001508  C1FC 0064 2036          muls      #100,D0
0000150C  D280      2037          add.l     D0,D1
0000150E  201F      2038          move.l    (A7)+,D0
00001510  2F01      2039          move.l    D1,-(A7)
00001512  4EB9 0000 2040          jsr       _strcat
00001516  5906      
00001518  504F      2041          addq.w    #8,A7
0000151A  5243      2042          addq.w    #1,D3
0000151C  6000 FF7E 2043          bra       DumpRegisters_12
                    2044   DumpRegisters_14:
00001520  6020      2045          bra.s     DumpRegisters_5
                    2046   DumpRegisters_4:
                    2047   ; }
                    2048   ; }
                    2049   ; else
                    2050   ; strcpy(WatchPointString[x], "") ;
00001522  4879 0000 2051          pea       @m68kde~2_33.L
00001526  6F1E      
00001528  220D      2052          move.l    A5,D1
0000152A  48C2      2053          ext.l     D2
0000152C  2F00      2054          move.l    D0,-(A7)
0000152E  2002      2055          move.l    D2,D0
00001530  C1FC 0064 2056          muls      #100,D0
00001534  D280      2057          add.l     D0,D1
00001536  201F      2058          move.l    (A7)+,D0
00001538  2F01      2059          move.l    D1,-(A7)
0000153A  4EB9 0000 2060          jsr       _strcpy
0000153E  5766      
00001540  504F      2061          addq.w    #8,A7
                    2062   DumpRegisters_5:
00001542  5242      2063          addq.w    #1,D2
00001544  6000 FE36 2064          bra       DumpRegisters_1
                    2065   DumpRegisters_3:
                    2066   ; }
                    2067   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001548  2F39 0803 2068          move.l    _a0.L,-(A7)
0000154C  0104      
0000154E  2F39 0803 2069          move.l    _d0.L,-(A7)
00001552  00E4      
00001554  4879 0000 2070          pea       @m68kde~2_34.L
00001558  6F20      
0000155A  4E93      2071          jsr       (A3)
0000155C  DEFC 000C 2072          add.w     #12,A7
                    2073   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001560  2F39 0803 2074          move.l    _a1.L,-(A7)
00001564  0108      
00001566  2F39 0803 2075          move.l    _d1.L,-(A7)
0000156A  00E8      
0000156C  4879 0000 2076          pea       @m68kde~2_35.L
00001570  6F3C      
00001572  4E93      2077          jsr       (A3)
00001574  DEFC 000C 2078          add.w     #12,A7
                    2079   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001578  2F39 0803 2080          move.l    _a2.L,-(A7)
0000157C  010C      
0000157E  2F39 0803 2081          move.l    _d2.L,-(A7)
00001582  00EC      
00001584  4879 0000 2082          pea       @m68kde~2_36.L
00001588  6F56      
0000158A  4E93      2083          jsr       (A3)
0000158C  DEFC 000C 2084          add.w     #12,A7
                    2085   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001590  2F39 0803 2086          move.l    _a3.L,-(A7)
00001594  0110      
00001596  2F39 0803 2087          move.l    _d3.L,-(A7)
0000159A  00F0      
0000159C  4879 0000 2088          pea       @m68kde~2_37.L
000015A0  6F70      
000015A2  4E93      2089          jsr       (A3)
000015A4  DEFC 000C 2090          add.w     #12,A7
                    2091   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000015A8  2F39 0803 2092          move.l    _a4.L,-(A7)
000015AC  0114      
000015AE  2F39 0803 2093          move.l    _d4.L,-(A7)
000015B2  00F4      
000015B4  4879 0000 2094          pea       @m68kde~2_38.L
000015B8  6F8A      
000015BA  4E93      2095          jsr       (A3)
000015BC  DEFC 000C 2096          add.w     #12,A7
                    2097   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000015C0  2F39 0803 2098          move.l    _a5.L,-(A7)
000015C4  0118      
000015C6  2F39 0803 2099          move.l    _d5.L,-(A7)
000015CA  00F8      
000015CC  4879 0000 2100          pea       @m68kde~2_39.L
000015D0  6FA4      
000015D2  4E93      2101          jsr       (A3)
000015D4  DEFC 000C 2102          add.w     #12,A7
                    2103   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000015D8  2F39 0803 2104          move.l    _a6.L,-(A7)
000015DC  011C      
000015DE  2F39 0803 2105          move.l    _d6.L,-(A7)
000015E2  00FC      
000015E4  4879 0000 2106          pea       @m68kde~2_40.L
000015E8  6FBE      
000015EA  4E93      2107          jsr       (A3)
000015EC  DEFC 000C 2108          add.w     #12,A7
                    2109   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
000015F0  3214      2110          move.w    (A4),D1
000015F2  C27C 2000 2111          and.w     #8192,D1
000015F6  0C41 2000 2112          cmp.w     #8192,D1
000015FA  6608      2113          bne.s     DumpRegisters_18
000015FC  2239 0803 2114          move.l    _SSP.L,D1
00001600  0124      
00001602  6006      2115          bra.s     DumpRegisters_19
                    2116   DumpRegisters_18:
00001604  2239 0803 2117          move.l    _USP.L,D1
00001608  0128      
                    2118   DumpRegisters_19:
0000160A  2F01      2119          move.l    D1,-(A7)
0000160C  2F39 0803 2120          move.l    _d7.L,-(A7)
00001610  0100      
00001612  4879 0000 2121          pea       @m68kde~2_41.L
00001616  6FD8      
00001618  4E93      2122          jsr       (A3)
0000161A  DEFC 000C 2123          add.w     #12,A7
                    2124   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000161E  2F39 0803 2125          move.l    _USP.L,-(A7)
00001622  0128      
00001624  4879 0000 2126          pea       @m68kde~2_42.L
00001628  6FF2      
0000162A  4E93      2127          jsr       (A3)
0000162C  504F      2128          addq.w    #8,A7
                    2129   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
0000162E  2F39 0803 2130          move.l    _SSP.L,-(A7)
00001632  0124      
00001634  4879 0000 2131          pea       @m68kde~2_43.L
00001638  7010      
0000163A  4E93      2132          jsr       (A3)
0000163C  504F      2133          addq.w    #8,A7
                    2134   ; printf("\r\n SR = $%04X   ",SR) ;
0000163E  3214      2135          move.w    (A4),D1
00001640  C2BC 0000 2136          and.l     #65535,D1
00001644  FFFF      
00001646  2F01      2137          move.l    D1,-(A7)
00001648  4879 0000 2138          pea       @m68kde~2_44.L
0000164C  7032      
0000164E  4E93      2139          jsr       (A3)
00001650  504F      2140          addq.w    #8,A7
                    2141   ; // display the status word in characters etc.
                    2142   ; printf("   [") ;
00001652  4879 0000 2143          pea       @m68kde~2_45.L
00001656  7044      
00001658  4E93      2144          jsr       (A3)
0000165A  584F      2145          addq.w    #4,A7
                    2146   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
0000165C  3014      2147          move.w    (A4),D0
0000165E  C07C 8000 2148          and.w     #32768,D0
00001662  0C40 8000 2149          cmp.w     #32768,D0
00001666  660A      2150          bne.s     DumpRegisters_20
00001668  4878 0054 2151          pea       84
0000166C  4E92      2152          jsr       (A2)
0000166E  584F      2153          addq.w    #4,A7
00001670  6008      2154          bra.s     DumpRegisters_21
                    2155   DumpRegisters_20:
00001672  4878 002D 2156          pea       45
00001676  4E92      2157          jsr       (A2)
00001678  584F      2158          addq.w    #4,A7
                    2159   DumpRegisters_21:
                    2160   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000167A  3014      2161          move.w    (A4),D0
0000167C  C07C 2000 2162          and.w     #8192,D0
00001680  0C40 2000 2163          cmp.w     #8192,D0
00001684  660A      2164          bne.s     DumpRegisters_22
00001686  4878 0053 2165          pea       83
0000168A  4E92      2166          jsr       (A2)
0000168C  584F      2167          addq.w    #4,A7
0000168E  6008      2168          bra.s     DumpRegisters_23
                    2169   DumpRegisters_22:
00001690  4878 0055 2170          pea       85
00001694  4E92      2171          jsr       (A2)
00001696  584F      2172          addq.w    #4,A7
                    2173   DumpRegisters_23:
                    2174   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001698  3014      2175          move.w    (A4),D0
0000169A  C07C 0400 2176          and.w     #1024,D0
0000169E  0C40 0400 2177          cmp.w     #1024,D0
000016A2  660A      2178          bne.s     DumpRegisters_24
000016A4  4878 0031 2179          pea       49
000016A8  4E92      2180          jsr       (A2)
000016AA  584F      2181          addq.w    #4,A7
000016AC  6008      2182          bra.s     DumpRegisters_25
                    2183   DumpRegisters_24:
000016AE  4878 0030 2184          pea       48
000016B2  4E92      2185          jsr       (A2)
000016B4  584F      2186          addq.w    #4,A7
                    2187   DumpRegisters_25:
                    2188   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000016B6  3014      2189          move.w    (A4),D0
000016B8  C07C 0200 2190          and.w     #512,D0
000016BC  0C40 0200 2191          cmp.w     #512,D0
000016C0  660A      2192          bne.s     DumpRegisters_26
000016C2  4878 0031 2193          pea       49
000016C6  4E92      2194          jsr       (A2)
000016C8  584F      2195          addq.w    #4,A7
000016CA  6008      2196          bra.s     DumpRegisters_27
                    2197   DumpRegisters_26:
000016CC  4878 0030 2198          pea       48
000016D0  4E92      2199          jsr       (A2)
000016D2  584F      2200          addq.w    #4,A7
                    2201   DumpRegisters_27:
                    2202   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000016D4  3014      2203          move.w    (A4),D0
000016D6  C07C 0100 2204          and.w     #256,D0
000016DA  0C40 0100 2205          cmp.w     #256,D0
000016DE  660A      2206          bne.s     DumpRegisters_28
000016E0  4878 0031 2207          pea       49
000016E4  4E92      2208          jsr       (A2)
000016E6  584F      2209          addq.w    #4,A7
000016E8  6008      2210          bra.s     DumpRegisters_29
                    2211   DumpRegisters_28:
000016EA  4878 0030 2212          pea       48
000016EE  4E92      2213          jsr       (A2)
000016F0  584F      2214          addq.w    #4,A7
                    2215   DumpRegisters_29:
                    2216   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
000016F2  3014      2217          move.w    (A4),D0
000016F4  C07C 0010 2218          and.w     #16,D0
000016F8  0C40 0010 2219          cmp.w     #16,D0
000016FC  660A      2220          bne.s     DumpRegisters_30
000016FE  4878 0058 2221          pea       88
00001702  4E92      2222          jsr       (A2)
00001704  584F      2223          addq.w    #4,A7
00001706  6008      2224          bra.s     DumpRegisters_31
                    2225   DumpRegisters_30:
00001708  4878 002D 2226          pea       45
0000170C  4E92      2227          jsr       (A2)
0000170E  584F      2228          addq.w    #4,A7
                    2229   DumpRegisters_31:
                    2230   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001710  3014      2231          move.w    (A4),D0
00001712  C07C 0008 2232          and.w     #8,D0
00001716  0C40 0008 2233          cmp.w     #8,D0
0000171A  660A      2234          bne.s     DumpRegisters_32
0000171C  4878 004E 2235          pea       78
00001720  4E92      2236          jsr       (A2)
00001722  584F      2237          addq.w    #4,A7
00001724  6008      2238          bra.s     DumpRegisters_33
                    2239   DumpRegisters_32:
00001726  4878 002D 2240          pea       45
0000172A  4E92      2241          jsr       (A2)
0000172C  584F      2242          addq.w    #4,A7
                    2243   DumpRegisters_33:
                    2244   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
0000172E  3014      2245          move.w    (A4),D0
00001730  C07C 0004 2246          and.w     #4,D0
00001734  0C40 0004 2247          cmp.w     #4,D0
00001738  660A      2248          bne.s     DumpRegisters_34
0000173A  4878 005A 2249          pea       90
0000173E  4E92      2250          jsr       (A2)
00001740  584F      2251          addq.w    #4,A7
00001742  6008      2252          bra.s     DumpRegisters_35
                    2253   DumpRegisters_34:
00001744  4878 002D 2254          pea       45
00001748  4E92      2255          jsr       (A2)
0000174A  584F      2256          addq.w    #4,A7
                    2257   DumpRegisters_35:
                    2258   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
0000174C  3014      2259          move.w    (A4),D0
0000174E  C07C 0002 2260          and.w     #2,D0
00001752  0C40 0002 2261          cmp.w     #2,D0
00001756  660A      2262          bne.s     DumpRegisters_36
00001758  4878 0056 2263          pea       86
0000175C  4E92      2264          jsr       (A2)
0000175E  584F      2265          addq.w    #4,A7
00001760  6008      2266          bra.s     DumpRegisters_37
                    2267   DumpRegisters_36:
00001762  4878 002D 2268          pea       45
00001766  4E92      2269          jsr       (A2)
00001768  584F      2270          addq.w    #4,A7
                    2271   DumpRegisters_37:
                    2272   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000176A  3014      2273          move.w    (A4),D0
0000176C  C07C 0001 2274          and.w     #1,D0
00001770  0C40 0001 2275          cmp.w     #1,D0
00001774  660A      2276          bne.s     DumpRegisters_38
00001776  4878 0043 2277          pea       67
0000177A  4E92      2278          jsr       (A2)
0000177C  584F      2279          addq.w    #4,A7
0000177E  6008      2280          bra.s     DumpRegisters_39
                    2281   DumpRegisters_38:
00001780  4878 002D 2282          pea       45
00001784  4E92      2283          jsr       (A2)
00001786  584F      2284          addq.w    #4,A7
                    2285   DumpRegisters_39:
                    2286   ; putchar(']') ;
00001788  4878 005D 2287          pea       93
0000178C  4E92      2288          jsr       (A2)
0000178E  584F      2289          addq.w    #4,A7
                    2290   ; printf("\r\n PC = $%08X  ", PC) ;
00001790  2F39 0803 2291          move.l    _PC.L,-(A7)
00001794  0120      
00001796  4879 0000 2292          pea       @m68kde~2_46.L
0000179A  704A      
0000179C  4E93      2293          jsr       (A3)
0000179E  504F      2294          addq.w    #8,A7
                    2295   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
000017A0  2039 0803 2296          move.l    _PC.L,D0
000017A4  0120      
000017A6  2040      2297          move.l    D0,A0
000017A8  3010      2298          move.w    (A0),D0
000017AA  0C40 4E4E 2299          cmp.w     #20046,D0
000017AE  6724      2300          beq.s     DumpRegisters_40
                    2301   ; DisassembleInstruction(PC) ;
000017B0  2F39 0803 2302          move.l    _PC.L,-(A7)
000017B4  0120      
000017B6  4EB9 0000 2303          jsr       _DisassembleInstruction
000017BA  38C4      
000017BC  584F      2304          addq.w    #4,A7
                    2305   ; FormatInstructionForTrace() ;
000017BE  4EB8 12EA 2306          jsr       _FormatInstructionForTrace
                    2307   ; printf("%s", Instruction) ;
000017C2  4879 0803 2308          pea       _Instruction.L
000017C6  04E2      
000017C8  4879 0000 2309          pea       @m68kde~2_47.L
000017CC  705A      
000017CE  4E93      2310          jsr       (A3)
000017D0  504F      2311          addq.w    #8,A7
000017D2  600A      2312          bra.s     DumpRegisters_41
                    2313   DumpRegisters_40:
                    2314   ; }
                    2315   ; else
                    2316   ; printf("[BREAKPOINT]") ;
000017D4  4879 0000 2317          pea       @m68kde~2_48.L
000017D8  705E      
000017DA  4E93      2318          jsr       (A3)
000017DC  584F      2319          addq.w    #4,A7
                    2320   DumpRegisters_41:
                    2321   ; printf("\r\n") ;
000017DE  4879 0000 2322          pea       @m68kde~2_1.L
000017E2  6BDA      
000017E4  4E93      2323          jsr       (A3)
000017E6  584F      2324          addq.w    #4,A7
                    2325   ; for(i=0; i < 8; i++)    {
000017E8  4244      2326          clr.w     D4
                    2327   DumpRegisters_42:
000017EA  0C44 0008 2328          cmp.w     #8,D4
000017EE  6C00 0040 2329          bge       DumpRegisters_44
                    2330   ; if(WatchPointSetOrCleared[i] == 1)
000017F2  48C4      2331          ext.l     D4
000017F4  2004      2332          move.l    D4,D0
000017F6  E588      2333          lsl.l     #2,D0
000017F8  41F9 0803 2334          lea       _WatchPointSetOrCleared.L,A0
000017FC  01A2      
000017FE  2030 0800 2335          move.l    0(A0,D0.L),D0
00001802  0C80 0000 2336          cmp.l     #1,D0
00001806  0001      
00001808  6622      2337          bne.s     DumpRegisters_45
                    2338   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000180A  220D      2339          move.l    A5,D1
0000180C  48C4      2340          ext.l     D4
0000180E  2F00      2341          move.l    D0,-(A7)
00001810  2004      2342          move.l    D4,D0
00001812  C1FC 0064 2343          muls      #100,D0
00001816  D280      2344          add.l     D0,D1
00001818  201F      2345          move.l    (A7)+,D0
0000181A  2F01      2346          move.l    D1,-(A7)
0000181C  48C4      2347          ext.l     D4
0000181E  2F04      2348          move.l    D4,-(A7)
00001820  4879 0000 2349          pea       @m68kde~2_49.L
00001824  706C      
00001826  4E93      2350          jsr       (A3)
00001828  DEFC 000C 2351          add.w     #12,A7
                    2352   DumpRegisters_45:
0000182C  5244      2353          addq.w    #1,D4
0000182E  60BA      2354          bra       DumpRegisters_42
                    2355   DumpRegisters_44:
00001830  4CDF 3CFC 2356          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001834  4E75      2357          rts
                    2358   ; }
                    2359   ; }
                    2360   ; // Trace Exception Handler
                    2361   ; void DumpRegistersandPause(void)
                    2362   ; {
                    2363   _DumpRegistersandPause:
00001836  2F0A      2364          move.l    A2,-(A7)
00001838  45F9 0000 2365          lea       _printf.L,A2
0000183C  5968      
                    2366   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000183E  4879 0000 2367          pea       @m68kde~2_50.L
00001842  7078      
00001844  4E92      2368          jsr       (A2)
00001846  584F      2369          addq.w    #4,A7
                    2370   ; printf("\r\nBreak Points :[Disabled]") ;
00001848  4879 0000 2371          pea       @m68kde~2_51.L
0000184C  7098      
0000184E  4E92      2372          jsr       (A2)
00001850  584F      2373          addq.w    #4,A7
                    2374   ; DumpRegisters() ;
00001852  4EB8 135E 2375          jsr       _DumpRegisters
                    2376   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001856  4879 0000 2377          pea       @m68kde~2_52.L
0000185A  70B4      
0000185C  4E92      2378          jsr       (A2)
0000185E  584F      2379          addq.w    #4,A7
                    2380   ; printf("\r\nPress <ESC> to Resume Program") ;
00001860  4879 0000 2381          pea       @m68kde~2_53.L
00001864  70E0      
00001866  4E92      2382          jsr       (A2)
00001868  584F      2383          addq.w    #4,A7
                    2384   ; menu() ;
0000186A  4EB9 0000 2385          jsr       _menu
0000186E  24A0      
00001870  245F      2386          move.l    (A7)+,A2
00001872  4E75      2387          rts
                    2388   ; }
                    2389   ; void ChangeRegisters(void)
                    2390   ; {
                    2391   _ChangeRegisters:
00001874  4E56 FFFC 2392          link      A6,#-4
00001878  48E7 303C 2393          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000187C  45F9 0000 2394          lea       _printf.L,A2
00001880  5968      
00001882  47EE FFFC 2395          lea       -4(A6),A3
00001886  49F8 0CA4 2396          lea       _Get8HexDigits.L,A4
0000188A  4BF8 0B68 2397          lea       __getch.L,A5
                    2398   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2399   ; int reg_val ;
                    2400   ; char c, reg[3] ;
                    2401   ; reg[0] = tolower(_getch()) ;
0000188E  2F00      2402          move.l    D0,-(A7)
00001890  4E95      2403          jsr       (A5)
00001892  2200      2404          move.l    D0,D1
00001894  201F      2405          move.l    (A7)+,D0
00001896  2F01      2406          move.l    D1,-(A7)
00001898  4EB9 0000 2407          jsr       _tolower
0000189C  58B8      
0000189E  584F      2408          addq.w    #4,A7
000018A0  1680      2409          move.b    D0,(A3)
                    2410   ; reg[1] = c = tolower(_getch()) ;
000018A2  2F00      2411          move.l    D0,-(A7)
000018A4  4E95      2412          jsr       (A5)
000018A6  2200      2413          move.l    D0,D1
000018A8  201F      2414          move.l    (A7)+,D0
000018AA  2F01      2415          move.l    D1,-(A7)
000018AC  4EB9 0000 2416          jsr       _tolower
000018B0  58B8      
000018B2  584F      2417          addq.w    #4,A7
000018B4  1400      2418          move.b    D0,D2
000018B6  1740 0001 2419          move.b    D0,1(A3)
                    2420   ; if(reg[0] == (char)('d'))  {    // change data register
000018BA  1013      2421          move.b    (A3),D0
000018BC  0C00 0064 2422          cmp.b     #100,D0
000018C0  6600 00AE 2423          bne       ChangeRegisters_1
                    2424   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000018C4  102B 0001 2425          move.b    1(A3),D0
000018C8  0C00 0037 2426          cmp.b     #55,D0
000018CC  6E0A      2427          bgt.s     ChangeRegisters_5
000018CE  102B 0001 2428          move.b    1(A3),D0
000018D2  0C00 0030 2429          cmp.b     #48,D0
000018D6  6C0E      2430          bge.s     ChangeRegisters_3
                    2431   ChangeRegisters_5:
                    2432   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000018D8  4879 0000 2433          pea       @m68kde~2_54.L
000018DC  7100      
000018DE  4E92      2434          jsr       (A2)
000018E0  584F      2435          addq.w    #4,A7
                    2436   ; return ;
000018E2  6000 0244 2437          bra       ChangeRegisters_6
                    2438   ChangeRegisters_3:
                    2439   ; }
                    2440   ; else {
                    2441   ; printf("\r\nD%c = ", c) ;
000018E6  4882      2442          ext.w     D2
000018E8  48C2      2443          ext.l     D2
000018EA  2F02      2444          move.l    D2,-(A7)
000018EC  4879 0000 2445          pea       @m68kde~2_55.L
000018F0  712C      
000018F2  4E92      2446          jsr       (A2)
000018F4  504F      2447          addq.w    #8,A7
                    2448   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000018F6  42A7      2449          clr.l     -(A7)
000018F8  4E94      2450          jsr       (A4)
000018FA  584F      2451          addq.w    #4,A7
000018FC  2600      2452          move.l    D0,D3
                    2453   ; }
                    2454   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2455   ; if(c == (char)('0'))
000018FE  0C02 0030 2456          cmp.b     #48,D2
00001902  660A      2457          bne.s     ChangeRegisters_7
                    2458   ; d0 = reg_val ;
00001904  23C3 0803 2459          move.l    D3,_d0.L
00001908  00E4      
0000190A  6000 0060 2460          bra       ChangeRegisters_20
                    2461   ChangeRegisters_7:
                    2462   ; else if(c == (char)('1'))
0000190E  0C02 0031 2463          cmp.b     #49,D2
00001912  660A      2464          bne.s     ChangeRegisters_9
                    2465   ; d1 = reg_val ;
00001914  23C3 0803 2466          move.l    D3,_d1.L
00001918  00E8      
0000191A  6000 0050 2467          bra       ChangeRegisters_20
                    2468   ChangeRegisters_9:
                    2469   ; else if(c == (char)('2'))
0000191E  0C02 0032 2470          cmp.b     #50,D2
00001922  660A      2471          bne.s     ChangeRegisters_11
                    2472   ; d2 = reg_val ;
00001924  23C3 0803 2473          move.l    D3,_d2.L
00001928  00EC      
0000192A  6000 0040 2474          bra       ChangeRegisters_20
                    2475   ChangeRegisters_11:
                    2476   ; else if(c == (char)('3'))
0000192E  0C02 0033 2477          cmp.b     #51,D2
00001932  6608      2478          bne.s     ChangeRegisters_13
                    2479   ; d3 = reg_val ;
00001934  23C3 0803 2480          move.l    D3,_d3.L
00001938  00F0      
0000193A  6030      2481          bra.s     ChangeRegisters_20
                    2482   ChangeRegisters_13:
                    2483   ; else if(c == (char)('4'))
0000193C  0C02 0034 2484          cmp.b     #52,D2
00001940  6608      2485          bne.s     ChangeRegisters_15
                    2486   ; d4 = reg_val ;
00001942  23C3 0803 2487          move.l    D3,_d4.L
00001946  00F4      
00001948  6022      2488          bra.s     ChangeRegisters_20
                    2489   ChangeRegisters_15:
                    2490   ; else if(c == (char)('5'))
0000194A  0C02 0035 2491          cmp.b     #53,D2
0000194E  6608      2492          bne.s     ChangeRegisters_17
                    2493   ; d5 = reg_val ;
00001950  23C3 0803 2494          move.l    D3,_d5.L
00001954  00F8      
00001956  6014      2495          bra.s     ChangeRegisters_20
                    2496   ChangeRegisters_17:
                    2497   ; else if(c == (char)('6'))
00001958  0C02 0036 2498          cmp.b     #54,D2
0000195C  6608      2499          bne.s     ChangeRegisters_19
                    2500   ; d6 = reg_val ;
0000195E  23C3 0803 2501          move.l    D3,_d6.L
00001962  00FC      
00001964  6006      2502          bra.s     ChangeRegisters_20
                    2503   ChangeRegisters_19:
                    2504   ; else
                    2505   ; d7 = reg_val ;
00001966  23C3 0803 2506          move.l    D3,_d7.L
0000196A  0100      
                    2507   ChangeRegisters_20:
0000196C  6000 01B6 2508          bra       ChangeRegisters_51
                    2509   ChangeRegisters_1:
                    2510   ; }
                    2511   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001970  1013      2512          move.b    (A3),D0
00001972  0C00 0061 2513          cmp.b     #97,D0
00001976  6600 00A6 2514          bne       ChangeRegisters_21
                    2515   ; if((c > (char)('7')) || (c < (char)('0'))) {
0000197A  0C02 0037 2516          cmp.b     #55,D2
0000197E  6E06      2517          bgt.s     ChangeRegisters_25
00001980  0C02 0030 2518          cmp.b     #48,D2
00001984  6C0E      2519          bge.s     ChangeRegisters_23
                    2520   ChangeRegisters_25:
                    2521   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001986  4879 0000 2522          pea       @m68kde~2_56.L
0000198A  7136      
0000198C  4E92      2523          jsr       (A2)
0000198E  584F      2524          addq.w    #4,A7
                    2525   ; return ;
00001990  6000 0196 2526          bra       ChangeRegisters_6
                    2527   ChangeRegisters_23:
                    2528   ; }
                    2529   ; else {
                    2530   ; printf("\r\nA%c = ", c) ;
00001994  4882      2531          ext.w     D2
00001996  48C2      2532          ext.l     D2
00001998  2F02      2533          move.l    D2,-(A7)
0000199A  4879 0000 2534          pea       @m68kde~2_57.L
0000199E  7164      
000019A0  4E92      2535          jsr       (A2)
000019A2  504F      2536          addq.w    #8,A7
                    2537   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019A4  42A7      2538          clr.l     -(A7)
000019A6  4E94      2539          jsr       (A4)
000019A8  584F      2540          addq.w    #4,A7
000019AA  2600      2541          move.l    D0,D3
                    2542   ; }
                    2543   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2544   ; if(c == (char)('0'))
000019AC  0C02 0030 2545          cmp.b     #48,D2
000019B0  660A      2546          bne.s     ChangeRegisters_26
                    2547   ; a0 = reg_val ;
000019B2  23C3 0803 2548          move.l    D3,_a0.L
000019B6  0104      
000019B8  6000 0060 2549          bra       ChangeRegisters_39
                    2550   ChangeRegisters_26:
                    2551   ; else if(c == (char)('1'))
000019BC  0C02 0031 2552          cmp.b     #49,D2
000019C0  660A      2553          bne.s     ChangeRegisters_28
                    2554   ; a1 = reg_val ;
000019C2  23C3 0803 2555          move.l    D3,_a1.L
000019C6  0108      
000019C8  6000 0050 2556          bra       ChangeRegisters_39
                    2557   ChangeRegisters_28:
                    2558   ; else if(c == (char)('2'))
000019CC  0C02 0032 2559          cmp.b     #50,D2
000019D0  660A      2560          bne.s     ChangeRegisters_30
                    2561   ; a2 = reg_val ;
000019D2  23C3 0803 2562          move.l    D3,_a2.L
000019D6  010C      
000019D8  6000 0040 2563          bra       ChangeRegisters_39
                    2564   ChangeRegisters_30:
                    2565   ; else if(c == (char)('3'))
000019DC  0C02 0033 2566          cmp.b     #51,D2
000019E0  6608      2567          bne.s     ChangeRegisters_32
                    2568   ; a3 = reg_val ;
000019E2  23C3 0803 2569          move.l    D3,_a3.L
000019E6  0110      
000019E8  6030      2570          bra.s     ChangeRegisters_39
                    2571   ChangeRegisters_32:
                    2572   ; else if(c == (char)('4'))
000019EA  0C02 0034 2573          cmp.b     #52,D2
000019EE  6608      2574          bne.s     ChangeRegisters_34
                    2575   ; a4 = reg_val ;
000019F0  23C3 0803 2576          move.l    D3,_a4.L
000019F4  0114      
000019F6  6022      2577          bra.s     ChangeRegisters_39
                    2578   ChangeRegisters_34:
                    2579   ; else if(c == (char)('5'))
000019F8  0C02 0035 2580          cmp.b     #53,D2
000019FC  6608      2581          bne.s     ChangeRegisters_36
                    2582   ; a5 = reg_val ;
000019FE  23C3 0803 2583          move.l    D3,_a5.L
00001A02  0118      
00001A04  6014      2584          bra.s     ChangeRegisters_39
                    2585   ChangeRegisters_36:
                    2586   ; else if(c == (char)('6'))
00001A06  0C02 0036 2587          cmp.b     #54,D2
00001A0A  6608      2588          bne.s     ChangeRegisters_38
                    2589   ; a6 = reg_val ;
00001A0C  23C3 0803 2590          move.l    D3,_a6.L
00001A10  011C      
00001A12  6006      2591          bra.s     ChangeRegisters_39
                    2592   ChangeRegisters_38:
                    2593   ; else
                    2594   ; USP = reg_val ;
00001A14  23C3 0803 2595          move.l    D3,_USP.L
00001A18  0128      
                    2596   ChangeRegisters_39:
00001A1A  6000 0108 2597          bra       ChangeRegisters_51
                    2598   ChangeRegisters_21:
                    2599   ; }
                    2600   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001A1E  1013      2601          move.b    (A3),D0
00001A20  0C00 0075 2602          cmp.b     #117,D0
00001A24  6600 004E 2603          bne       ChangeRegisters_40
00001A28  0C02 0073 2604          cmp.b     #115,D2
00001A2C  6600 0046 2605          bne       ChangeRegisters_40
                    2606   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001A30  2F00      2607          move.l    D0,-(A7)
00001A32  4E95      2608          jsr       (A5)
00001A34  2200      2609          move.l    D0,D1
00001A36  201F      2610          move.l    (A7)+,D0
00001A38  2F01      2611          move.l    D1,-(A7)
00001A3A  4EB9 0000 2612          jsr       _tolower
00001A3E  58B8      
00001A40  584F      2613          addq.w    #4,A7
00001A42  0C80 0000 2614          cmp.l     #112,D0
00001A46  0070      
00001A48  6618      2615          bne.s     ChangeRegisters_42
                    2616   ; printf("\r\nUser SP = ") ;
00001A4A  4879 0000 2617          pea       @m68kde~2_58.L
00001A4E  716E      
00001A50  4E92      2618          jsr       (A2)
00001A52  584F      2619          addq.w    #4,A7
                    2620   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A54  42A7      2621          clr.l     -(A7)
00001A56  4E94      2622          jsr       (A4)
00001A58  584F      2623          addq.w    #4,A7
00001A5A  23C0 0803 2624          move.l    D0,_USP.L
00001A5E  0128      
00001A60  600E      2625          bra.s     ChangeRegisters_43
                    2626   ChangeRegisters_42:
                    2627   ; }
                    2628   ; else {
                    2629   ; printf("\r\nIllegal Register....") ;
00001A62  4879 0000 2630          pea       @m68kde~2_59.L
00001A66  717C      
00001A68  4E92      2631          jsr       (A2)
00001A6A  584F      2632          addq.w    #4,A7
                    2633   ; return ;
00001A6C  6000 00BA 2634          bra       ChangeRegisters_6
                    2635   ChangeRegisters_43:
00001A70  6000 00B2 2636          bra       ChangeRegisters_51
                    2637   ChangeRegisters_40:
                    2638   ; }
                    2639   ; }
                    2640   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001A74  1013      2641          move.b    (A3),D0
00001A76  0C00 0073 2642          cmp.b     #115,D0
00001A7A  6600 004E 2643          bne       ChangeRegisters_44
00001A7E  0C02 0073 2644          cmp.b     #115,D2
00001A82  6600 0046 2645          bne       ChangeRegisters_44
                    2646   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001A86  2F00      2647          move.l    D0,-(A7)
00001A88  4E95      2648          jsr       (A5)
00001A8A  2200      2649          move.l    D0,D1
00001A8C  201F      2650          move.l    (A7)+,D0
00001A8E  2F01      2651          move.l    D1,-(A7)
00001A90  4EB9 0000 2652          jsr       _tolower
00001A94  58B8      
00001A96  584F      2653          addq.w    #4,A7
00001A98  0C80 0000 2654          cmp.l     #112,D0
00001A9C  0070      
00001A9E  6618      2655          bne.s     ChangeRegisters_46
                    2656   ; printf("\r\nSystem SP = ") ;
00001AA0  4879 0000 2657          pea       @m68kde~2_60.L
00001AA4  7194      
00001AA6  4E92      2658          jsr       (A2)
00001AA8  584F      2659          addq.w    #4,A7
                    2660   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AAA  42A7      2661          clr.l     -(A7)
00001AAC  4E94      2662          jsr       (A4)
00001AAE  584F      2663          addq.w    #4,A7
00001AB0  23C0 0803 2664          move.l    D0,_SSP.L
00001AB4  0124      
00001AB6  600E      2665          bra.s     ChangeRegisters_47
                    2666   ChangeRegisters_46:
                    2667   ; }
                    2668   ; else {
                    2669   ; printf("\r\nIllegal Register....") ;
00001AB8  4879 0000 2670          pea       @m68kde~2_59.L
00001ABC  717C      
00001ABE  4E92      2671          jsr       (A2)
00001AC0  584F      2672          addq.w    #4,A7
                    2673   ; return ;
00001AC2  6000 0064 2674          bra       ChangeRegisters_6
                    2675   ChangeRegisters_47:
00001AC6  6000 005C 2676          bra       ChangeRegisters_51
                    2677   ChangeRegisters_44:
                    2678   ; }
                    2679   ; }
                    2680   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001ACA  1013      2681          move.b    (A3),D0
00001ACC  0C00 0070 2682          cmp.b     #112,D0
00001AD0  6620      2683          bne.s     ChangeRegisters_48
00001AD2  0C02 0063 2684          cmp.b     #99,D2
00001AD6  661A      2685          bne.s     ChangeRegisters_48
                    2686   ; printf("\r\nPC = ") ;
00001AD8  4879 0000 2687          pea       @m68kde~2_61.L
00001ADC  71A4      
00001ADE  4E92      2688          jsr       (A2)
00001AE0  584F      2689          addq.w    #4,A7
                    2690   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AE2  42A7      2691          clr.l     -(A7)
00001AE4  4E94      2692          jsr       (A4)
00001AE6  584F      2693          addq.w    #4,A7
00001AE8  23C0 0803 2694          move.l    D0,_PC.L
00001AEC  0120      
00001AEE  6000 0034 2695          bra       ChangeRegisters_51
                    2696   ChangeRegisters_48:
                    2697   ; }
                    2698   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001AF2  1013      2699          move.b    (A3),D0
00001AF4  0C00 0073 2700          cmp.b     #115,D0
00001AF8  6620      2701          bne.s     ChangeRegisters_50
00001AFA  0C02 0072 2702          cmp.b     #114,D2
00001AFE  661A      2703          bne.s     ChangeRegisters_50
                    2704   ; printf("\r\nSR = ") ;
00001B00  4879 0000 2705          pea       @m68kde~2_62.L
00001B04  71AC      
00001B06  4E92      2706          jsr       (A2)
00001B08  584F      2707          addq.w    #4,A7
                    2708   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001B0A  42A7      2709          clr.l     -(A7)
00001B0C  4EB8 0C58 2710          jsr       _Get4HexDigits
00001B10  584F      2711          addq.w    #4,A7
00001B12  33C0 0803 2712          move.w    D0,_SR.L
00001B16  012C      
00001B18  600A      2713          bra.s     ChangeRegisters_51
                    2714   ChangeRegisters_50:
                    2715   ; }
                    2716   ; else
                    2717   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001B1A  4879 0000 2718          pea       @m68kde~2_63.L
00001B1E  71B4      
00001B20  4E92      2719          jsr       (A2)
00001B22  584F      2720          addq.w    #4,A7
                    2721   ChangeRegisters_51:
                    2722   ; DumpRegisters() ;
00001B24  4EB8 135E 2723          jsr       _DumpRegisters
                    2724   ChangeRegisters_6:
00001B28  4CDF 3C0C 2725          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001B2C  4E5E      2726          unlk      A6
00001B2E  4E75      2727          rts
                    2728   ; }
                    2729   ; void BreakPointDisplay(void)
                    2730   ; {
                    2731   _BreakPointDisplay:
00001B30  48E7 3030 2732          movem.l   D2/D3/A2/A3,-(A7)
00001B34  45F9 0000 2733          lea       _printf.L,A2
00001B38  5968      
00001B3A  47F9 0803 2734          lea       _BreakPointAddress.L,A3
00001B3E  012E      
                    2735   ; int i, BreakPointsSet = 0 ;
00001B40  4283      2736          clr.l     D3
                    2737   ; // any break points  set
                    2738   ; for(i = 0; i < 8; i++)  {
00001B42  4282      2739          clr.l     D2
                    2740   BreakPointDisplay_1:
00001B44  0C82 0000 2741          cmp.l     #8,D2
00001B48  0008      
00001B4A  6C1C      2742          bge.s     BreakPointDisplay_3
                    2743   ; if(BreakPointSetOrCleared[i] == 1)
00001B4C  2002      2744          move.l    D2,D0
00001B4E  E588      2745          lsl.l     #2,D0
00001B50  41F9 0803 2746          lea       _BreakPointSetOrCleared.L,A0
00001B54  015E      
00001B56  2030 0800 2747          move.l    0(A0,D0.L),D0
00001B5A  0C80 0000 2748          cmp.l     #1,D0
00001B5E  0001      
00001B60  6602      2749          bne.s     BreakPointDisplay_4
                    2750   ; BreakPointsSet = 1;
00001B62  7601      2751          moveq     #1,D3
                    2752   BreakPointDisplay_4:
00001B64  5282      2753          addq.l    #1,D2
00001B66  60DC      2754          bra       BreakPointDisplay_1
                    2755   BreakPointDisplay_3:
                    2756   ; }
                    2757   ; if(BreakPointsSet == 1) {
00001B68  0C83 0000 2758          cmp.l     #1,D3
00001B6C  0001      
00001B6E  6616      2759          bne.s     BreakPointDisplay_6
                    2760   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001B70  4879 0000 2761          pea       @m68kde~2_64.L
00001B74  71F0      
00001B76  4E92      2762          jsr       (A2)
00001B78  584F      2763          addq.w    #4,A7
                    2764   ; printf("\r\n---     ---------    -----------") ;
00001B7A  4879 0000 2765          pea       @m68kde~2_65.L
00001B7E  7216      
00001B80  4E92      2766          jsr       (A2)
00001B82  584F      2767          addq.w    #4,A7
00001B84  600A      2768          bra.s     BreakPointDisplay_7
                    2769   BreakPointDisplay_6:
                    2770   ; }
                    2771   ; else
                    2772   ; printf("\r\nNo BreakPoints Set") ;
00001B86  4879 0000 2773          pea       @m68kde~2_66.L
00001B8A  723A      
00001B8C  4E92      2774          jsr       (A2)
00001B8E  584F      2775          addq.w    #4,A7
                    2776   BreakPointDisplay_7:
                    2777   ; for(i = 0; i < 8; i++)  {
00001B90  4282      2778          clr.l     D2
                    2779   BreakPointDisplay_8:
00001B92  0C82 0000 2780          cmp.l     #8,D2
00001B96  0008      
00001B98  6C00 0080 2781          bge       BreakPointDisplay_10
                    2782   ; // put opcode back to disassemble it, then put break point back
                    2783   ; if(BreakPointSetOrCleared[i] == 1)  {
00001B9C  2002      2784          move.l    D2,D0
00001B9E  E588      2785          lsl.l     #2,D0
00001BA0  41F9 0803 2786          lea       _BreakPointSetOrCleared.L,A0
00001BA4  015E      
00001BA6  2030 0800 2787          move.l    0(A0,D0.L),D0
00001BAA  0C80 0000 2788          cmp.l     #1,D0
00001BAE  0001      
00001BB0  6600 0062 2789          bne       BreakPointDisplay_11
                    2790   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001BB4  2002      2791          move.l    D2,D0
00001BB6  E388      2792          lsl.l     #1,D0
00001BB8  41F9 0803 2793          lea       _BreakPointInstruction.L,A0
00001BBC  014E      
00001BBE  2202      2794          move.l    D2,D1
00001BC0  E589      2795          lsl.l     #2,D1
00001BC2  2233 1800 2796          move.l    0(A3,D1.L),D1
00001BC6  2241      2797          move.l    D1,A1
00001BC8  32B0 0800 2798          move.w    0(A0,D0.L),(A1)
                    2799   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001BCC  2202      2800          move.l    D2,D1
00001BCE  E589      2801          lsl.l     #2,D1
00001BD0  2F33 1800 2802          move.l    0(A3,D1.L),-(A7)
00001BD4  4EB9 0000 2803          jsr       _DisassembleInstruction
00001BD8  38C4      
00001BDA  584F      2804          addq.w    #4,A7
                    2805   ; FormatInstructionForTrace() ;
00001BDC  4EB8 12EA 2806          jsr       _FormatInstructionForTrace
                    2807   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001BE0  2002      2808          move.l    D2,D0
00001BE2  E588      2809          lsl.l     #2,D0
00001BE4  2033 0800 2810          move.l    0(A3,D0.L),D0
00001BE8  2040      2811          move.l    D0,A0
00001BEA  30BC 4E4E 2812          move.w    #20046,(A0)
                    2813   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001BEE  2202      2814          move.l    D2,D1
00001BF0  E589      2815          lsl.l     #2,D1
00001BF2  2F33 1800 2816          move.l    0(A3,D1.L),-(A7)
00001BF6  2F02      2817          move.l    D2,-(A7)
00001BF8  4879 0000 2818          pea       @m68kde~2_67.L
00001BFC  7250      
00001BFE  4E92      2819          jsr       (A2)
00001C00  DEFC 000C 2820          add.w     #12,A7
                    2821   ; printf("    %s", Instruction);
00001C04  4879 0803 2822          pea       _Instruction.L
00001C08  04E2      
00001C0A  4879 0000 2823          pea       @m68kde~2_68.L
00001C0E  7260      
00001C10  4E92      2824          jsr       (A2)
00001C12  504F      2825          addq.w    #8,A7
                    2826   BreakPointDisplay_11:
00001C14  5282      2827          addq.l    #1,D2
00001C16  6000 FF7A 2828          bra       BreakPointDisplay_8
                    2829   BreakPointDisplay_10:
                    2830   ; }
                    2831   ; }
                    2832   ; printf("\r\n") ;
00001C1A  4879 0000 2833          pea       @m68kde~2_1.L
00001C1E  6BDA      
00001C20  4E92      2834          jsr       (A2)
00001C22  584F      2835          addq.w    #4,A7
00001C24  4CDF 0C0C 2836          movem.l   (A7)+,D2/D3/A2/A3
00001C28  4E75      2837          rts
                    2838   ; }
                    2839   ; void WatchPointDisplay(void)
                    2840   ; {
                    2841   _WatchPointDisplay:
00001C2A  48E7 3020 2842          movem.l   D2/D3/A2,-(A7)
00001C2E  45F9 0000 2843          lea       _printf.L,A2
00001C32  5968      
                    2844   ; int i ;
                    2845   ; int WatchPointsSet = 0 ;
00001C34  4283      2846          clr.l     D3
                    2847   ; // any watchpoints set
                    2848   ; for(i = 0; i < 8; i++)  {
00001C36  4282      2849          clr.l     D2
                    2850   WatchPointDisplay_1:
00001C38  0C82 0000 2851          cmp.l     #8,D2
00001C3C  0008      
00001C3E  6C1C      2852          bge.s     WatchPointDisplay_3
                    2853   ; if(WatchPointSetOrCleared[i] == 1)
00001C40  2002      2854          move.l    D2,D0
00001C42  E588      2855          lsl.l     #2,D0
00001C44  41F9 0803 2856          lea       _WatchPointSetOrCleared.L,A0
00001C48  01A2      
00001C4A  2030 0800 2857          move.l    0(A0,D0.L),D0
00001C4E  0C80 0000 2858          cmp.l     #1,D0
00001C52  0001      
00001C54  6602      2859          bne.s     WatchPointDisplay_4
                    2860   ; WatchPointsSet = 1;
00001C56  7601      2861          moveq     #1,D3
                    2862   WatchPointDisplay_4:
00001C58  5282      2863          addq.l    #1,D2
00001C5A  60DC      2864          bra       WatchPointDisplay_1
                    2865   WatchPointDisplay_3:
                    2866   ; }
                    2867   ; if(WatchPointsSet == 1) {
00001C5C  0C83 0000 2868          cmp.l     #1,D3
00001C60  0001      
00001C62  6616      2869          bne.s     WatchPointDisplay_6
                    2870   ; printf("\r\nNum     Address") ;
00001C64  4879 0000 2871          pea       @m68kde~2_69.L
00001C68  7268      
00001C6A  4E92      2872          jsr       (A2)
00001C6C  584F      2873          addq.w    #4,A7
                    2874   ; printf("\r\n---     ---------") ;
00001C6E  4879 0000 2875          pea       @m68kde~2_70.L
00001C72  727A      
00001C74  4E92      2876          jsr       (A2)
00001C76  584F      2877          addq.w    #4,A7
00001C78  600A      2878          bra.s     WatchPointDisplay_7
                    2879   WatchPointDisplay_6:
                    2880   ; }
                    2881   ; else
                    2882   ; printf("\r\nNo WatchPoints Set") ;
00001C7A  4879 0000 2883          pea       @m68kde~2_71.L
00001C7E  728E      
00001C80  4E92      2884          jsr       (A2)
00001C82  584F      2885          addq.w    #4,A7
                    2886   WatchPointDisplay_7:
                    2887   ; for(i = 0; i < 8; i++)  {
00001C84  4282      2888          clr.l     D2
                    2889   WatchPointDisplay_8:
00001C86  0C82 0000 2890          cmp.l     #8,D2
00001C8A  0008      
00001C8C  6C00 0038 2891          bge       WatchPointDisplay_10
                    2892   ; if(WatchPointSetOrCleared[i] == 1)
00001C90  2002      2893          move.l    D2,D0
00001C92  E588      2894          lsl.l     #2,D0
00001C94  41F9 0803 2895          lea       _WatchPointSetOrCleared.L,A0
00001C98  01A2      
00001C9A  2030 0800 2896          move.l    0(A0,D0.L),D0
00001C9E  0C80 0000 2897          cmp.l     #1,D0
00001CA2  0001      
00001CA4  661C      2898          bne.s     WatchPointDisplay_11
                    2899   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001CA6  2202      2900          move.l    D2,D1
00001CA8  E589      2901          lsl.l     #2,D1
00001CAA  41F9 0803 2902          lea       _WatchPointAddress.L,A0
00001CAE  0182      
00001CB0  2F30 1800 2903          move.l    0(A0,D1.L),-(A7)
00001CB4  2F02      2904          move.l    D2,-(A7)
00001CB6  4879 0000 2905          pea       @m68kde~2_67.L
00001CBA  7250      
00001CBC  4E92      2906          jsr       (A2)
00001CBE  DEFC 000C 2907          add.w     #12,A7
                    2908   WatchPointDisplay_11:
00001CC2  5282      2909          addq.l    #1,D2
00001CC4  60C0      2910          bra       WatchPointDisplay_8
                    2911   WatchPointDisplay_10:
                    2912   ; }
                    2913   ; printf("\r\n") ;
00001CC6  4879 0000 2914          pea       @m68kde~2_1.L
00001CCA  6BDA      
00001CCC  4E92      2915          jsr       (A2)
00001CCE  584F      2916          addq.w    #4,A7
00001CD0  4CDF 040C 2917          movem.l   (A7)+,D2/D3/A2
00001CD4  4E75      2918          rts
                    2919   ; }
                    2920   ; void BreakPointClear(void)
                    2921   ; {
                    2922   _BreakPointClear:
00001CD6  4E56 FFFC 2923          link      A6,#-4
00001CDA  48E7 2020 2924          movem.l   D2/A2,-(A7)
00001CDE  45F9 0000 2925          lea       _printf.L,A2
00001CE2  5968      
                    2926   ; unsigned int i ;
                    2927   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2928   ; BreakPointDisplay() ;
00001CE4  4EB8 1B30 2929          jsr       _BreakPointDisplay
                    2930   ; printf("\r\nEnter Break Point Number: ") ;
00001CE8  4879 0000 2931          pea       @m68kde~2_72.L
00001CEC  72A4      
00001CEE  4E92      2932          jsr       (A2)
00001CF0  584F      2933          addq.w    #4,A7
                    2934   ; i = xtod(_getch()) ;           // get break pointer number
00001CF2  2F00      2935          move.l    D0,-(A7)
00001CF4  4EB8 0B68 2936          jsr       __getch
00001CF8  2200      2937          move.l    D0,D1
00001CFA  201F      2938          move.l    (A7)+,D0
00001CFC  2F01      2939          move.l    D1,-(A7)
00001CFE  4EB8 0BD2 2940          jsr       _xtod
00001D02  584F      2941          addq.w    #4,A7
00001D04  C0BC 0000 2942          and.l     #255,D0
00001D08  00FF      
00001D0A  2400      2943          move.l    D0,D2
                    2944   ; if((i < 0) || (i > 7))   {
00001D0C  0C82 0000 2945          cmp.l     #0,D2
00001D10  0000      
00001D12  6508      2946          blo.s     BreakPointClear_3
00001D14  0C82 0000 2947          cmp.l     #7,D2
00001D18  0007      
00001D1A  630E      2948          bls.s     BreakPointClear_1
                    2949   BreakPointClear_3:
                    2950   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D1C  4879 0000 2951          pea       @m68kde~2_73.L
00001D20  72C2      
00001D22  4E92      2952          jsr       (A2)
00001D24  584F      2953          addq.w    #4,A7
                    2954   ; return ;
00001D26  6000 0080 2955          bra       BreakPointClear_4
                    2956   BreakPointClear_1:
                    2957   ; }
                    2958   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001D2A  2002      2959          move.l    D2,D0
00001D2C  E588      2960          lsl.l     #2,D0
00001D2E  41F9 0803 2961          lea       _BreakPointSetOrCleared.L,A0
00001D32  015E      
00001D34  2030 0800 2962          move.l    0(A0,D0.L),D0
00001D38  0C80 0000 2963          cmp.l     #1,D0
00001D3C  0001      
00001D3E  6600 005A 2964          bne       BreakPointClear_5
                    2965   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001D42  2002      2966          move.l    D2,D0
00001D44  E588      2967          lsl.l     #2,D0
00001D46  41F9 0803 2968          lea       _BreakPointAddress.L,A0
00001D4A  012E      
00001D4C  2D70 0800 2969          move.l    0(A0,D0.L),-4(A6)
00001D50  FFFC      
                    2970   ; BreakPointAddress[i] = 0 ;
00001D52  2002      2971          move.l    D2,D0
00001D54  E588      2972          lsl.l     #2,D0
00001D56  41F9 0803 2973          lea       _BreakPointAddress.L,A0
00001D5A  012E      
00001D5C  42B0 0800 2974          clr.l     0(A0,D0.L)
                    2975   ; BreakPointSetOrCleared[i] = 0 ;
00001D60  2002      2976          move.l    D2,D0
00001D62  E588      2977          lsl.l     #2,D0
00001D64  41F9 0803 2978          lea       _BreakPointSetOrCleared.L,A0
00001D68  015E      
00001D6A  42B0 0800 2979          clr.l     0(A0,D0.L)
                    2980   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D6E  2002      2981          move.l    D2,D0
00001D70  E388      2982          lsl.l     #1,D0
00001D72  41F9 0803 2983          lea       _BreakPointInstruction.L,A0
00001D76  014E      
00001D78  226E FFFC 2984          move.l    -4(A6),A1
00001D7C  32B0 0800 2985          move.w    0(A0,D0.L),(A1)
                    2986   ; BreakPointInstruction[i] = 0 ;
00001D80  2002      2987          move.l    D2,D0
00001D82  E388      2988          lsl.l     #1,D0
00001D84  41F9 0803 2989          lea       _BreakPointInstruction.L,A0
00001D88  014E      
00001D8A  4270 0800 2990          clr.w     0(A0,D0.L)
                    2991   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001D8E  4879 0000 2992          pea       @m68kde~2_74.L
00001D92  72DE      
00001D94  4E92      2993          jsr       (A2)
00001D96  584F      2994          addq.w    #4,A7
00001D98  600A      2995          bra.s     BreakPointClear_6
                    2996   BreakPointClear_5:
                    2997   ; }
                    2998   ; else
                    2999   ; printf("\r\nBreak Point wasn't Set.....") ;
00001D9A  4879 0000 3000          pea       @m68kde~2_75.L
00001D9E  72FC      
00001DA0  4E92      3001          jsr       (A2)
00001DA2  584F      3002          addq.w    #4,A7
                    3003   BreakPointClear_6:
                    3004   ; BreakPointDisplay() ;
00001DA4  4EB8 1B30 3005          jsr       _BreakPointDisplay
                    3006   ; return ;
                    3007   BreakPointClear_4:
00001DA8  4CDF 0404 3008          movem.l   (A7)+,D2/A2
00001DAC  4E5E      3009          unlk      A6
00001DAE  4E75      3010          rts
                    3011   ; }
                    3012   ; void WatchPointClear(void)
                    3013   ; {
                    3014   _WatchPointClear:
00001DB0  48E7 2020 3015          movem.l   D2/A2,-(A7)
00001DB4  45F9 0000 3016          lea       _printf.L,A2
00001DB8  5968      
                    3017   ; unsigned int i ;
                    3018   ; WatchPointDisplay() ;
00001DBA  4EB8 1C2A 3019          jsr       _WatchPointDisplay
                    3020   ; printf("\r\nEnter Watch Point Number: ") ;
00001DBE  4879 0000 3021          pea       @m68kde~2_76.L
00001DC2  731A      
00001DC4  4E92      3022          jsr       (A2)
00001DC6  584F      3023          addq.w    #4,A7
                    3024   ; i = xtod(_getch()) ;           // get watch pointer number
00001DC8  2F00      3025          move.l    D0,-(A7)
00001DCA  4EB8 0B68 3026          jsr       __getch
00001DCE  2200      3027          move.l    D0,D1
00001DD0  201F      3028          move.l    (A7)+,D0
00001DD2  2F01      3029          move.l    D1,-(A7)
00001DD4  4EB8 0BD2 3030          jsr       _xtod
00001DD8  584F      3031          addq.w    #4,A7
00001DDA  C0BC 0000 3032          and.l     #255,D0
00001DDE  00FF      
00001DE0  2400      3033          move.l    D0,D2
                    3034   ; if((i < 0) || (i > 7))   {
00001DE2  0C82 0000 3035          cmp.l     #0,D2
00001DE6  0000      
00001DE8  6508      3036          blo.s     WatchPointClear_3
00001DEA  0C82 0000 3037          cmp.l     #7,D2
00001DEE  0007      
00001DF0  630E      3038          bls.s     WatchPointClear_1
                    3039   WatchPointClear_3:
                    3040   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001DF2  4879 0000 3041          pea       @m68kde~2_73.L
00001DF6  72C2      
00001DF8  4E92      3042          jsr       (A2)
00001DFA  584F      3043          addq.w    #4,A7
                    3044   ; return ;
00001DFC  6000 004E 3045          bra       WatchPointClear_4
                    3046   WatchPointClear_1:
                    3047   ; }
                    3048   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001E00  2002      3049          move.l    D2,D0
00001E02  E588      3050          lsl.l     #2,D0
00001E04  41F9 0803 3051          lea       _WatchPointSetOrCleared.L,A0
00001E08  01A2      
00001E0A  2030 0800 3052          move.l    0(A0,D0.L),D0
00001E0E  0C80 0000 3053          cmp.l     #1,D0
00001E12  0001      
00001E14  6628      3054          bne.s     WatchPointClear_5
                    3055   ; WatchPointAddress[i] = 0 ;
00001E16  2002      3056          move.l    D2,D0
00001E18  E588      3057          lsl.l     #2,D0
00001E1A  41F9 0803 3058          lea       _WatchPointAddress.L,A0
00001E1E  0182      
00001E20  42B0 0800 3059          clr.l     0(A0,D0.L)
                    3060   ; WatchPointSetOrCleared[i] = 0 ;
00001E24  2002      3061          move.l    D2,D0
00001E26  E588      3062          lsl.l     #2,D0
00001E28  41F9 0803 3063          lea       _WatchPointSetOrCleared.L,A0
00001E2C  01A2      
00001E2E  42B0 0800 3064          clr.l     0(A0,D0.L)
                    3065   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001E32  4879 0000 3066          pea       @m68kde~2_77.L
00001E36  7338      
00001E38  4E92      3067          jsr       (A2)
00001E3A  584F      3068          addq.w    #4,A7
00001E3C  600A      3069          bra.s     WatchPointClear_6
                    3070   WatchPointClear_5:
                    3071   ; }
                    3072   ; else
                    3073   ; printf("\r\nWatch Point Was not Set.....") ;
00001E3E  4879 0000 3074          pea       @m68kde~2_78.L
00001E42  7356      
00001E44  4E92      3075          jsr       (A2)
00001E46  584F      3076          addq.w    #4,A7
                    3077   WatchPointClear_6:
                    3078   ; WatchPointDisplay() ;
00001E48  4EB8 1C2A 3079          jsr       _WatchPointDisplay
                    3080   ; return ;
                    3081   WatchPointClear_4:
00001E4C  4CDF 0404 3082          movem.l   (A7)+,D2/A2
00001E50  4E75      3083          rts
                    3084   ; }
                    3085   ; void DisableBreakPoints(void)
                    3086   ; {
                    3087   _DisableBreakPoints:
00001E52  4E56 FFFC 3088          link      A6,#-4
00001E56  2F02      3089          move.l    D2,-(A7)
                    3090   ; int i ;
                    3091   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3092   ; for(i = 0; i < 8; i++)  {
00001E58  4282      3093          clr.l     D2
                    3094   DisableBreakPoints_1:
00001E5A  0C82 0000 3095          cmp.l     #8,D2
00001E5E  0008      
00001E60  6C00 003E 3096          bge       DisableBreakPoints_3
                    3097   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001E64  2002      3098          move.l    D2,D0
00001E66  E588      3099          lsl.l     #2,D0
00001E68  41F9 0803 3100          lea       _BreakPointSetOrCleared.L,A0
00001E6C  015E      
00001E6E  2030 0800 3101          move.l    0(A0,D0.L),D0
00001E72  0C80 0000 3102          cmp.l     #1,D0
00001E76  0001      
00001E78  6622      3103          bne.s     DisableBreakPoints_4
                    3104   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E7A  2002      3105          move.l    D2,D0
00001E7C  E588      3106          lsl.l     #2,D0
00001E7E  41F9 0803 3107          lea       _BreakPointAddress.L,A0
00001E82  012E      
00001E84  2D70 0800 3108          move.l    0(A0,D0.L),-4(A6)
00001E88  FFFC      
                    3109   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001E8A  2002      3110          move.l    D2,D0
00001E8C  E388      3111          lsl.l     #1,D0
00001E8E  41F9 0803 3112          lea       _BreakPointInstruction.L,A0
00001E92  014E      
00001E94  226E FFFC 3113          move.l    -4(A6),A1
00001E98  32B0 0800 3114          move.w    0(A0,D0.L),(A1)
                    3115   DisableBreakPoints_4:
00001E9C  5282      3116          addq.l    #1,D2
00001E9E  60BA      3117          bra       DisableBreakPoints_1
                    3118   DisableBreakPoints_3:
00001EA0  241F      3119          move.l    (A7)+,D2
00001EA2  4E5E      3120          unlk      A6
00001EA4  4E75      3121          rts
                    3122   ; }
                    3123   ; }
                    3124   ; }
                    3125   ; void EnableBreakPoints(void)
                    3126   ; {
                    3127   _EnableBreakPoints:
00001EA6  4E56 FFFC 3128          link      A6,#-4
00001EAA  2F02      3129          move.l    D2,-(A7)
                    3130   ; int i ;
                    3131   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3132   ; for(i = 0; i < 8; i++)  {
00001EAC  4282      3133          clr.l     D2
                    3134   EnableBreakPoints_1:
00001EAE  0C82 0000 3135          cmp.l     #8,D2
00001EB2  0008      
00001EB4  6C32      3136          bge.s     EnableBreakPoints_3
                    3137   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001EB6  2002      3138          move.l    D2,D0
00001EB8  E588      3139          lsl.l     #2,D0
00001EBA  41F9 0803 3140          lea       _BreakPointSetOrCleared.L,A0
00001EBE  015E      
00001EC0  2030 0800 3141          move.l    0(A0,D0.L),D0
00001EC4  0C80 0000 3142          cmp.l     #1,D0
00001EC8  0001      
00001ECA  6618      3143          bne.s     EnableBreakPoints_4
                    3144   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001ECC  2002      3145          move.l    D2,D0
00001ECE  E588      3146          lsl.l     #2,D0
00001ED0  41F9 0803 3147          lea       _BreakPointAddress.L,A0
00001ED4  012E      
00001ED6  2D70 0800 3148          move.l    0(A0,D0.L),-4(A6)
00001EDA  FFFC      
                    3149   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001EDC  206E FFFC 3150          move.l    -4(A6),A0
00001EE0  30BC 4E4E 3151          move.w    #20046,(A0)
                    3152   EnableBreakPoints_4:
00001EE4  5282      3153          addq.l    #1,D2
00001EE6  60C6      3154          bra       EnableBreakPoints_1
                    3155   EnableBreakPoints_3:
00001EE8  241F      3156          move.l    (A7)+,D2
00001EEA  4E5E      3157          unlk      A6
00001EEC  4E75      3158          rts
                    3159   ; }
                    3160   ; }
                    3161   ; }
                    3162   ; void KillAllBreakPoints(void)
                    3163   ; {
                    3164   _KillAllBreakPoints:
00001EEE  4E56 FFFC 3165          link      A6,#-4
00001EF2  2F02      3166          move.l    D2,-(A7)
                    3167   ; int i ;
                    3168   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3169   ; for(i = 0; i < 8; i++)  {
00001EF4  4282      3170          clr.l     D2
                    3171   KillAllBreakPoints_1:
00001EF6  0C82 0000 3172          cmp.l     #8,D2
00001EFA  0008      
00001EFC  6C00 0052 3173          bge       KillAllBreakPoints_3
                    3174   ; // clear BP
                    3175   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001F00  2002      3176          move.l    D2,D0
00001F02  E588      3177          lsl.l     #2,D0
00001F04  41F9 0803 3178          lea       _BreakPointAddress.L,A0
00001F08  012E      
00001F0A  2D70 0800 3179          move.l    0(A0,D0.L),-4(A6)
00001F0E  FFFC      
                    3180   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001F10  2002      3181          move.l    D2,D0
00001F12  E388      3182          lsl.l     #1,D0
00001F14  41F9 0803 3183          lea       _BreakPointInstruction.L,A0
00001F18  014E      
00001F1A  226E FFFC 3184          move.l    -4(A6),A1
00001F1E  32B0 0800 3185          move.w    0(A0,D0.L),(A1)
                    3186   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F22  2002      3187          move.l    D2,D0
00001F24  E588      3188          lsl.l     #2,D0
00001F26  41F9 0803 3189          lea       _BreakPointAddress.L,A0
00001F2A  012E      
00001F2C  42B0 0800 3190          clr.l     0(A0,D0.L)
                    3191   ; BreakPointInstruction[i] = 0 ;
00001F30  2002      3192          move.l    D2,D0
00001F32  E388      3193          lsl.l     #1,D0
00001F34  41F9 0803 3194          lea       _BreakPointInstruction.L,A0
00001F38  014E      
00001F3A  4270 0800 3195          clr.w     0(A0,D0.L)
                    3196   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F3E  2002      3197          move.l    D2,D0
00001F40  E588      3198          lsl.l     #2,D0
00001F42  41F9 0803 3199          lea       _BreakPointSetOrCleared.L,A0
00001F46  015E      
00001F48  42B0 0800 3200          clr.l     0(A0,D0.L)
00001F4C  5282      3201          addq.l    #1,D2
00001F4E  60A6      3202          bra       KillAllBreakPoints_1
                    3203   KillAllBreakPoints_3:
00001F50  241F      3204          move.l    (A7)+,D2
00001F52  4E5E      3205          unlk      A6
00001F54  4E75      3206          rts
                    3207   ; }
                    3208   ; //BreakPointDisplay() ;       // display the break points
                    3209   ; }
                    3210   ; void KillAllWatchPoints(void)
                    3211   ; {
                    3212   _KillAllWatchPoints:
00001F56  2F02      3213          move.l    D2,-(A7)
                    3214   ; int i ;
                    3215   ; for(i = 0; i < 8; i++)  {
00001F58  4282      3216          clr.l     D2
                    3217   KillAllWatchPoints_1:
00001F5A  0C82 0000 3218          cmp.l     #8,D2
00001F5E  0008      
00001F60  6C20      3219          bge.s     KillAllWatchPoints_3
                    3220   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F62  2002      3221          move.l    D2,D0
00001F64  E588      3222          lsl.l     #2,D0
00001F66  41F9 0803 3223          lea       _WatchPointAddress.L,A0
00001F6A  0182      
00001F6C  42B0 0800 3224          clr.l     0(A0,D0.L)
                    3225   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F70  2002      3226          move.l    D2,D0
00001F72  E588      3227          lsl.l     #2,D0
00001F74  41F9 0803 3228          lea       _WatchPointSetOrCleared.L,A0
00001F78  01A2      
00001F7A  42B0 0800 3229          clr.l     0(A0,D0.L)
00001F7E  5282      3230          addq.l    #1,D2
00001F80  60D8      3231          bra       KillAllWatchPoints_1
                    3232   KillAllWatchPoints_3:
00001F82  241F      3233          move.l    (A7)+,D2
00001F84  4E75      3234          rts
                    3235   ; }
                    3236   ; //WatchPointDisplay() ;       // display the break points
                    3237   ; }
                    3238   ; void SetBreakPoint(void)
                    3239   ; {
                    3240   _SetBreakPoint:
00001F86  4E56 FFFC 3241          link      A6,#-4
00001F8A  48E7 3830 3242          movem.l   D2/D3/D4/A2/A3,-(A7)
00001F8E  45F9 0000 3243          lea       _printf.L,A2
00001F92  5968      
00001F94  47F9 0803 3244          lea       _BreakPointSetOrCleared.L,A3
00001F98  015E      
                    3245   ; int i ;
                    3246   ; int BPNumber;
                    3247   ; int BPAddress;
                    3248   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3249   ; // see if any free break points
                    3250   ; for(i = 0; i < 8; i ++) {
00001F9A  4282      3251          clr.l     D2
                    3252   SetBreakPoint_1:
00001F9C  0C82 0000 3253          cmp.l     #8,D2
00001FA0  0008      
00001FA2  6C10      3254          bge.s     SetBreakPoint_3
                    3255   ; if( BreakPointSetOrCleared[i] == 0)
00001FA4  2002      3256          move.l    D2,D0
00001FA6  E588      3257          lsl.l     #2,D0
00001FA8  2033 0800 3258          move.l    0(A3,D0.L),D0
00001FAC  6602      3259          bne.s     SetBreakPoint_4
                    3260   ; break ;         // if spare BP found allow user to set it
00001FAE  6004      3261          bra.s     SetBreakPoint_3
                    3262   SetBreakPoint_4:
00001FB0  5282      3263          addq.l    #1,D2
00001FB2  60E8      3264          bra       SetBreakPoint_1
                    3265   SetBreakPoint_3:
                    3266   ; }
                    3267   ; if(i == 8) {
00001FB4  0C82 0000 3268          cmp.l     #8,D2
00001FB8  0008      
00001FBA  660E      3269          bne.s     SetBreakPoint_6
                    3270   ; printf("\r\nNo FREE Break Points.....") ;
00001FBC  4879 0000 3271          pea       @m68kde~2_79.L
00001FC0  7376      
00001FC2  4E92      3272          jsr       (A2)
00001FC4  584F      3273          addq.w    #4,A7
                    3274   ; return ;
00001FC6  6000 00EC 3275          bra       SetBreakPoint_15
                    3276   SetBreakPoint_6:
                    3277   ; }
                    3278   ; printf("\r\nBreak Point Address: ") ;
00001FCA  4879 0000 3279          pea       @m68kde~2_80.L
00001FCE  7392      
00001FD0  4E92      3280          jsr       (A2)
00001FD2  584F      3281          addq.w    #4,A7
                    3282   ; BPAddress = Get8HexDigits(0) ;
00001FD4  42A7      3283          clr.l     -(A7)
00001FD6  4EB8 0CA4 3284          jsr       _Get8HexDigits
00001FDA  584F      3285          addq.w    #4,A7
00001FDC  2600      3286          move.l    D0,D3
                    3287   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001FDE  2803      3288          move.l    D3,D4
                    3289   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001FE0  2003      3290          move.l    D3,D0
00001FE2  C0BC 0000 3291          and.l     #1,D0
00001FE6  0001      
00001FE8  0C80 0000 3292          cmp.l     #1,D0
00001FEC  0001      
00001FEE  660E      3293          bne.s     SetBreakPoint_9
                    3294   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001FF0  4879 0000 3295          pea       @m68kde~2_81.L
00001FF4  73AA      
00001FF6  4E92      3296          jsr       (A2)
00001FF8  584F      3297          addq.w    #4,A7
                    3298   ; return ;
00001FFA  6000 00B8 3299          bra       SetBreakPoint_15
                    3300   SetBreakPoint_9:
                    3301   ; }
                    3302   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001FFE  0C83 0000 3303          cmp.l     #32768,D3
00002002  8000      
00002004  640E      3304          bhs.s     SetBreakPoint_11
                    3305   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002006  4879 0000 3306          pea       @m68kde~2_82.L
0000200A  73E0      
0000200C  4E92      3307          jsr       (A2)
0000200E  584F      3308          addq.w    #4,A7
                    3309   ; return ;
00002010  6000 00A2 3310          bra       SetBreakPoint_15
                    3311   SetBreakPoint_11:
                    3312   ; }
                    3313   ; // search for first free bp or existing same BP
                    3314   ; for(i = 0; i < 8; i++)  {
00002014  4282      3315          clr.l     D2
                    3316   SetBreakPoint_13:
00002016  0C82 0000 3317          cmp.l     #8,D2
0000201A  0008      
0000201C  6C00 0096 3318          bge       SetBreakPoint_15
                    3319   ; if(BreakPointAddress[i] == BPAddress)   {
00002020  2002      3320          move.l    D2,D0
00002022  E588      3321          lsl.l     #2,D0
00002024  41F9 0803 3322          lea       _BreakPointAddress.L,A0
00002028  012E      
0000202A  B6B0 0800 3323          cmp.l     0(A0,D0.L),D3
0000202E  6610      3324          bne.s     SetBreakPoint_16
                    3325   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002030  2F03      3326          move.l    D3,-(A7)
00002032  4879 0000 3327          pea       @m68kde~2_83.L
00002036  7428      
00002038  4E92      3328          jsr       (A2)
0000203A  504F      3329          addq.w    #8,A7
                    3330   ; return ;
0000203C  6000 0076 3331          bra       SetBreakPoint_15
                    3332   SetBreakPoint_16:
                    3333   ; }
                    3334   ; if(BreakPointSetOrCleared[i] == 0) {
00002040  2002      3335          move.l    D2,D0
00002042  E588      3336          lsl.l     #2,D0
00002044  2033 0800 3337          move.l    0(A3,D0.L),D0
00002048  6600 0064 3338          bne       SetBreakPoint_18
                    3339   ; // set BP here
                    3340   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
0000204C  2002      3341          move.l    D2,D0
0000204E  E588      3342          lsl.l     #2,D0
00002050  27BC 0000 3343          move.l    #1,0(A3,D0.L)
00002054  0001 0800 
                    3344   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002058  2044      3345          move.l    D4,A0
0000205A  2002      3346          move.l    D2,D0
0000205C  E388      3347          lsl.l     #1,D0
0000205E  43F9 0803 3348          lea       _BreakPointInstruction.L,A1
00002062  014E      
00002064  3390 0800 3349          move.w    (A0),0(A1,D0.L)
                    3350   ; DisassembleInstruction(ProgramBreakPointAddress) ;
00002068  2F04      3351          move.l    D4,-(A7)
0000206A  4EB9 0000 3352          jsr       _DisassembleInstruction
0000206E  38C4      
00002070  584F      3353          addq.w    #4,A7
                    3354   ; FormatInstructionForTrace() ;
00002072  4EB8 12EA 3355          jsr       _FormatInstructionForTrace
                    3356   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
00002076  4879 0803 3357          pea       _Instruction.L
0000207A  04E2      
0000207C  2F04      3358          move.l    D4,-(A7)
0000207E  4879 0000 3359          pea       @m68kde~2_84.L
00002082  7460      
00002084  4E92      3360          jsr       (A2)
00002086  DEFC 000C 3361          add.w     #12,A7
                    3362   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000208A  2044      3363          move.l    D4,A0
0000208C  30BC 4E4E 3364          move.w    #20046,(A0)
                    3365   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002090  2002      3366          move.l    D2,D0
00002092  E588      3367          lsl.l     #2,D0
00002094  41F9 0803 3368          lea       _BreakPointAddress.L,A0
00002098  012E      
0000209A  2183 0800 3369          move.l    D3,0(A0,D0.L)
                    3370   ; printf("\r\n") ;
0000209E  4879 0000 3371          pea       @m68kde~2_1.L
000020A2  6BDA      
000020A4  4E92      3372          jsr       (A2)
000020A6  584F      3373          addq.w    #4,A7
                    3374   ; BreakPointDisplay() ;       // display the break points
000020A8  4EB8 1B30 3375          jsr       _BreakPointDisplay
                    3376   ; return ;
000020AC  6006      3377          bra.s     SetBreakPoint_15
                    3378   SetBreakPoint_18:
000020AE  5282      3379          addq.l    #1,D2
000020B0  6000 FF64 3380          bra       SetBreakPoint_13
                    3381   SetBreakPoint_15:
000020B4  4CDF 0C1C 3382          movem.l   (A7)+,D2/D3/D4/A2/A3
000020B8  4E5E      3383          unlk      A6
000020BA  4E75      3384          rts
                    3385   ; }
                    3386   ; }
                    3387   ; }
                    3388   ; void SetWatchPoint(void)
                    3389   ; {
                    3390   _SetWatchPoint:
000020BC  4E56 FFF8 3391          link      A6,#-8
000020C0  48E7 3030 3392          movem.l   D2/D3/A2/A3,-(A7)
000020C4  45F9 0000 3393          lea       _printf.L,A2
000020C8  5968      
000020CA  47F9 0803 3394          lea       _WatchPointSetOrCleared.L,A3
000020CE  01A2      
                    3395   ; int i ;
                    3396   ; int WPNumber;
                    3397   ; int WPAddress;
                    3398   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3399   ; // see if any free break points
                    3400   ; for(i = 0; i < 8; i ++) {
000020D0  4282      3401          clr.l     D2
                    3402   SetWatchPoint_1:
000020D2  0C82 0000 3403          cmp.l     #8,D2
000020D6  0008      
000020D8  6C10      3404          bge.s     SetWatchPoint_3
                    3405   ; if( WatchPointSetOrCleared[i] == 0)
000020DA  2002      3406          move.l    D2,D0
000020DC  E588      3407          lsl.l     #2,D0
000020DE  2033 0800 3408          move.l    0(A3,D0.L),D0
000020E2  6602      3409          bne.s     SetWatchPoint_4
                    3410   ; break ;         // if spare WP found allow user to set it
000020E4  6004      3411          bra.s     SetWatchPoint_3
                    3412   SetWatchPoint_4:
000020E6  5282      3413          addq.l    #1,D2
000020E8  60E8      3414          bra       SetWatchPoint_1
                    3415   SetWatchPoint_3:
                    3416   ; }
                    3417   ; if(i == 8) {
000020EA  0C82 0000 3418          cmp.l     #8,D2
000020EE  0008      
000020F0  660E      3419          bne.s     SetWatchPoint_6
                    3420   ; printf("\r\nNo FREE Watch Points.....") ;
000020F2  4879 0000 3421          pea       @m68kde~2_85.L
000020F6  7498      
000020F8  4E92      3422          jsr       (A2)
000020FA  584F      3423          addq.w    #4,A7
                    3424   ; return ;
000020FC  6000 008C 3425          bra       SetWatchPoint_11
                    3426   SetWatchPoint_6:
                    3427   ; }
                    3428   ; printf("\r\nWatch Point Address: ") ;
00002100  4879 0000 3429          pea       @m68kde~2_86.L
00002104  74B4      
00002106  4E92      3430          jsr       (A2)
00002108  584F      3431          addq.w    #4,A7
                    3432   ; WPAddress = Get8HexDigits(0) ;
0000210A  42A7      3433          clr.l     -(A7)
0000210C  4EB8 0CA4 3434          jsr       _Get8HexDigits
00002110  584F      3435          addq.w    #4,A7
00002112  2600      3436          move.l    D0,D3
                    3437   ; // search for first free wp or existing same wp
                    3438   ; for(i = 0; i < 8; i++)  {
00002114  4282      3439          clr.l     D2
                    3440   SetWatchPoint_9:
00002116  0C82 0000 3441          cmp.l     #8,D2
0000211A  0008      
0000211C  6C00 006C 3442          bge       SetWatchPoint_11
                    3443   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002120  2002      3444          move.l    D2,D0
00002122  E588      3445          lsl.l     #2,D0
00002124  41F9 0803 3446          lea       _WatchPointAddress.L,A0
00002128  0182      
0000212A  B6B0 0800 3447          cmp.l     0(A0,D0.L),D3
0000212E  6614      3448          bne.s     SetWatchPoint_12
00002130  4A83      3449          tst.l     D3
00002132  6710      3450          beq.s     SetWatchPoint_12
                    3451   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002134  2F03      3452          move.l    D3,-(A7)
00002136  4879 0000 3453          pea       @m68kde~2_87.L
0000213A  74CC      
0000213C  4E92      3454          jsr       (A2)
0000213E  504F      3455          addq.w    #8,A7
                    3456   ; return ;
00002140  6000 0048 3457          bra       SetWatchPoint_11
                    3458   SetWatchPoint_12:
                    3459   ; }
                    3460   ; if(WatchPointSetOrCleared[i] == 0) {
00002144  2002      3461          move.l    D2,D0
00002146  E588      3462          lsl.l     #2,D0
00002148  2033 0800 3463          move.l    0(A3,D0.L),D0
0000214C  6600 0038 3464          bne       SetWatchPoint_14
                    3465   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002150  2002      3466          move.l    D2,D0
00002152  E588      3467          lsl.l     #2,D0
00002154  27BC 0000 3468          move.l    #1,0(A3,D0.L)
00002158  0001 0800 
                    3469   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000215C  2F03      3470          move.l    D3,-(A7)
0000215E  4879 0000 3471          pea       @m68kde~2_88.L
00002162  7502      
00002164  4E92      3472          jsr       (A2)
00002166  504F      3473          addq.w    #8,A7
                    3474   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002168  2002      3475          move.l    D2,D0
0000216A  E588      3476          lsl.l     #2,D0
0000216C  41F9 0803 3477          lea       _WatchPointAddress.L,A0
00002170  0182      
00002172  2183 0800 3478          move.l    D3,0(A0,D0.L)
                    3479   ; printf("\r\n") ;
00002176  4879 0000 3480          pea       @m68kde~2_1.L
0000217A  6BDA      
0000217C  4E92      3481          jsr       (A2)
0000217E  584F      3482          addq.w    #4,A7
                    3483   ; WatchPointDisplay() ;       // display the break points
00002180  4EB8 1C2A 3484          jsr       _WatchPointDisplay
                    3485   ; return ;
00002184  6004      3486          bra.s     SetWatchPoint_11
                    3487   SetWatchPoint_14:
00002186  5282      3488          addq.l    #1,D2
00002188  608C      3489          bra       SetWatchPoint_9
                    3490   SetWatchPoint_11:
0000218A  4CDF 0C0C 3491          movem.l   (A7)+,D2/D3/A2/A3
0000218E  4E5E      3492          unlk      A6
00002190  4E75      3493          rts
                    3494   ; }
                    3495   ; }
                    3496   ; }
                    3497   ; void HandleBreakPoint(void)
                    3498   ; {
                    3499   _HandleBreakPoint:
00002192  4E56 FFFC 3500          link      A6,#-4
00002196  48E7 0038 3501          movem.l   A2/A3/A4,-(A7)
0000219A  45F9 0803 3502          lea       _i.L,A2
0000219E  00C4      
000021A0  47F9 0000 3503          lea       _printf.L,A3
000021A4  5968      
000021A6  49F9 0803 3504          lea       _PC.L,A4
000021AA  0120      
                    3505   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3506   ; // now we have to put the break point back to run the instruction
                    3507   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3508   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000021AC  5594      3509          subq.l    #2,(A4)
                    3510   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000021AE  4879 0000 3511          pea       @m68kde~2_89.L
000021B2  7528      
000021B4  4E93      3512          jsr       (A3)
000021B6  584F      3513          addq.w    #4,A7
                    3514   ; printf("\r\nSingle Step : [ON]") ;
000021B8  4879 0000 3515          pea       @m68kde~2_90.L
000021BC  753C      
000021BE  4E93      3516          jsr       (A3)
000021C0  584F      3517          addq.w    #4,A7
                    3518   ; printf("\r\nBreakPoints : [Enabled]") ;
000021C2  4879 0000 3519          pea       @m68kde~2_91.L
000021C6  7552      
000021C8  4E93      3520          jsr       (A3)
000021CA  584F      3521          addq.w    #4,A7
                    3522   ; // now clear the break point (put original instruction back)
                    3523   ; ProgramBreakPointAddress = PC ;
000021CC  2D54 FFFC 3524          move.l    (A4),-4(A6)
                    3525   ; for(i = 0; i < 8; i ++) {
000021D0  4292      3526          clr.l     (A2)
                    3527   HandleBreakPoint_1:
000021D2  2012      3528          move.l    (A2),D0
000021D4  0C80 0000 3529          cmp.l     #8,D0
000021D8  0008      
000021DA  6400 0056 3530          bhs       HandleBreakPoint_3
                    3531   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000021DE  2012      3532          move.l    (A2),D0
000021E0  E588      3533          lsl.l     #2,D0
000021E2  41F9 0803 3534          lea       _BreakPointAddress.L,A0
000021E6  012E      
000021E8  2230 0800 3535          move.l    0(A0,D0.L),D1
000021EC  B294      3536          cmp.l     (A4),D1
000021EE  6600 003E 3537          bne       HandleBreakPoint_4
                    3538   ; BreakPointAddress[i] = 0 ;
000021F2  2012      3539          move.l    (A2),D0
000021F4  E588      3540          lsl.l     #2,D0
000021F6  41F9 0803 3541          lea       _BreakPointAddress.L,A0
000021FA  012E      
000021FC  42B0 0800 3542          clr.l     0(A0,D0.L)
                    3543   ; BreakPointSetOrCleared[i] = 0 ;
00002200  2012      3544          move.l    (A2),D0
00002202  E588      3545          lsl.l     #2,D0
00002204  41F9 0803 3546          lea       _BreakPointSetOrCleared.L,A0
00002208  015E      
0000220A  42B0 0800 3547          clr.l     0(A0,D0.L)
                    3548   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000220E  2012      3549          move.l    (A2),D0
00002210  E388      3550          lsl.l     #1,D0
00002212  41F9 0803 3551          lea       _BreakPointInstruction.L,A0
00002216  014E      
00002218  226E FFFC 3552          move.l    -4(A6),A1
0000221C  32B0 0800 3553          move.w    0(A0,D0.L),(A1)
                    3554   ; BreakPointInstruction[i] = 0 ;
00002220  2012      3555          move.l    (A2),D0
00002222  E388      3556          lsl.l     #1,D0
00002224  41F9 0803 3557          lea       _BreakPointInstruction.L,A0
00002228  014E      
0000222A  4270 0800 3558          clr.w     0(A0,D0.L)
                    3559   HandleBreakPoint_4:
0000222E  5292      3560          addq.l    #1,(A2)
00002230  60A0      3561          bra       HandleBreakPoint_1
                    3562   HandleBreakPoint_3:
                    3563   ; }
                    3564   ; }
                    3565   ; DumpRegisters() ;
00002232  4EB8 135E 3566          jsr       _DumpRegisters
                    3567   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002236  4879 0000 3568          pea       @m68kde~2_52.L
0000223A  70B4      
0000223C  4E93      3569          jsr       (A3)
0000223E  584F      3570          addq.w    #4,A7
                    3571   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002240  4879 0000 3572          pea       @m68kde~2_92.L
00002244  756C      
00002246  4E93      3573          jsr       (A3)
00002248  584F      3574          addq.w    #4,A7
                    3575   ; menu() ;
0000224A  4EB9 0000 3576          jsr       _menu
0000224E  24A0      
00002250  4CDF 1C00 3577          movem.l   (A7)+,A2/A3/A4
00002254  4E5E      3578          unlk      A6
00002256  4E75      3579          rts
                    3580   ; }
                    3581   ; void UnknownCommand()
                    3582   ; {
                    3583   _UnknownCommand:
                    3584   ; printf("\r\nUnknown Command.....\r\n") ;
00002258  4879 0000 3585          pea       @m68kde~2_93.L
0000225C  7594      
0000225E  4EB9 0000 3586          jsr       _printf
00002262  5968      
00002264  584F      3587          addq.w    #4,A7
                    3588   ; Help() ;
00002266  4EB9 0000 3589          jsr       _Help
0000226A  23BC      
0000226C  4E75      3590          rts
                    3591   ; }
                    3592   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3593   ; void CallDebugMonitor(void)
                    3594   ; {
                    3595   _CallDebugMonitor:
                    3596   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000226E  4879 0000 3597          pea       @m68kde~2_94.L
00002272  75AE      
00002274  4EB9 0000 3598          jsr       _printf
00002278  5968      
0000227A  584F      3599          addq.w    #4,A7
                    3600   ; menu();
0000227C  4EB9 0000 3601          jsr       _menu
00002280  24A0      
00002282  4E75      3602          rts
                    3603   ; }
                    3604   ; void Breakpoint(void)
                    3605   ; {
                    3606   _Breakpoint:
00002284  2F02      3607          move.l    D2,-(A7)
                    3608   ; char c;
                    3609   ; c = toupper(_getch());
00002286  2F00      3610          move.l    D0,-(A7)
00002288  4EB8 0B68 3611          jsr       __getch
0000228C  2200      3612          move.l    D0,D1
0000228E  201F      3613          move.l    (A7)+,D0
00002290  2F01      3614          move.l    D1,-(A7)
00002292  4EB9 0000 3615          jsr       _toupper
00002296  591C      
00002298  584F      3616          addq.w    #4,A7
0000229A  1400      3617          move.b    D0,D2
                    3618   ; if( c == (char)('D'))                                      // BreakPoint Display
0000229C  0C02 0044 3619          cmp.b     #68,D2
000022A0  6608      3620          bne.s     Breakpoint_1
                    3621   ; BreakPointDisplay() ;
000022A2  4EB8 1B30 3622          jsr       _BreakPointDisplay
000022A6  6000 0054 3623          bra       Breakpoint_10
                    3624   Breakpoint_1:
                    3625   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000022AA  0C02 004B 3626          cmp.b     #75,D2
000022AE  6630      3627          bne.s     Breakpoint_3
                    3628   ; printf("\r\nKill All Break Points...(y/n)?") ;
000022B0  4879 0000 3629          pea       @m68kde~2_95.L
000022B4  75CE      
000022B6  4EB9 0000 3630          jsr       _printf
000022BA  5968      
000022BC  584F      3631          addq.w    #4,A7
                    3632   ; c = toupper(_getch());
000022BE  2F00      3633          move.l    D0,-(A7)
000022C0  4EB8 0B68 3634          jsr       __getch
000022C4  2200      3635          move.l    D0,D1
000022C6  201F      3636          move.l    (A7)+,D0
000022C8  2F01      3637          move.l    D1,-(A7)
000022CA  4EB9 0000 3638          jsr       _toupper
000022CE  591C      
000022D0  584F      3639          addq.w    #4,A7
000022D2  1400      3640          move.b    D0,D2
                    3641   ; if(c == (char)('Y'))
000022D4  0C02 0059 3642          cmp.b     #89,D2
000022D8  6604      3643          bne.s     Breakpoint_5
                    3644   ; KillAllBreakPoints() ;
000022DA  4EB8 1EEE 3645          jsr       _KillAllBreakPoints
                    3646   Breakpoint_5:
000022DE  601C      3647          bra.s     Breakpoint_10
                    3648   Breakpoint_3:
                    3649   ; }
                    3650   ; else if(c == (char)('S')) {
000022E0  0C02 0053 3651          cmp.b     #83,D2
000022E4  6606      3652          bne.s     Breakpoint_7
                    3653   ; SetBreakPoint() ;
000022E6  4EB8 1F86 3654          jsr       _SetBreakPoint
000022EA  6010      3655          bra.s     Breakpoint_10
                    3656   Breakpoint_7:
                    3657   ; }
                    3658   ; else if(c == (char)('C')) {
000022EC  0C02 0043 3659          cmp.b     #67,D2
000022F0  6606      3660          bne.s     Breakpoint_9
                    3661   ; BreakPointClear() ;
000022F2  4EB8 1CD6 3662          jsr       _BreakPointClear
000022F6  6004      3663          bra.s     Breakpoint_10
                    3664   Breakpoint_9:
                    3665   ; }
                    3666   ; else
                    3667   ; UnknownCommand() ;
000022F8  4EB8 2258 3668          jsr       _UnknownCommand
                    3669   Breakpoint_10:
000022FC  241F      3670          move.l    (A7)+,D2
000022FE  4E75      3671          rts
                    3672   ; }
                    3673   ; void Watchpoint(void)
                    3674   ; {
                    3675   _Watchpoint:
00002300  2F02      3676          move.l    D2,-(A7)
                    3677   ; char c;
                    3678   ; c = toupper(_getch());
00002302  2F00      3679          move.l    D0,-(A7)
00002304  4EB8 0B68 3680          jsr       __getch
00002308  2200      3681          move.l    D0,D1
0000230A  201F      3682          move.l    (A7)+,D0
0000230C  2F01      3683          move.l    D1,-(A7)
0000230E  4EB9 0000 3684          jsr       _toupper
00002312  591C      
00002314  584F      3685          addq.w    #4,A7
00002316  1400      3686          move.b    D0,D2
                    3687   ; if( c == (char)('D'))                                      // WatchPoint Display
00002318  0C02 0044 3688          cmp.b     #68,D2
0000231C  6608      3689          bne.s     Watchpoint_1
                    3690   ; WatchPointDisplay() ;
0000231E  4EB8 1C2A 3691          jsr       _WatchPointDisplay
00002322  6000 0054 3692          bra       Watchpoint_10
                    3693   Watchpoint_1:
                    3694   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002326  0C02 004B 3695          cmp.b     #75,D2
0000232A  6630      3696          bne.s     Watchpoint_3
                    3697   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000232C  4879 0000 3698          pea       @m68kde~2_96.L
00002330  75F0      
00002332  4EB9 0000 3699          jsr       _printf
00002336  5968      
00002338  584F      3700          addq.w    #4,A7
                    3701   ; c = toupper(_getch());
0000233A  2F00      3702          move.l    D0,-(A7)
0000233C  4EB8 0B68 3703          jsr       __getch
00002340  2200      3704          move.l    D0,D1
00002342  201F      3705          move.l    (A7)+,D0
00002344  2F01      3706          move.l    D1,-(A7)
00002346  4EB9 0000 3707          jsr       _toupper
0000234A  591C      
0000234C  584F      3708          addq.w    #4,A7
0000234E  1400      3709          move.b    D0,D2
                    3710   ; if(c == (char)('Y'))
00002350  0C02 0059 3711          cmp.b     #89,D2
00002354  6604      3712          bne.s     Watchpoint_5
                    3713   ; KillAllWatchPoints() ;
00002356  4EB8 1F56 3714          jsr       _KillAllWatchPoints
                    3715   Watchpoint_5:
0000235A  601C      3716          bra.s     Watchpoint_10
                    3717   Watchpoint_3:
                    3718   ; }
                    3719   ; else if(c == (char)('S')) {
0000235C  0C02 0053 3720          cmp.b     #83,D2
00002360  6606      3721          bne.s     Watchpoint_7
                    3722   ; SetWatchPoint() ;
00002362  4EB8 20BC 3723          jsr       _SetWatchPoint
00002366  6010      3724          bra.s     Watchpoint_10
                    3725   Watchpoint_7:
                    3726   ; }
                    3727   ; else if(c == (char)('C')) {
00002368  0C02 0043 3728          cmp.b     #67,D2
0000236C  6606      3729          bne.s     Watchpoint_9
                    3730   ; WatchPointClear() ;
0000236E  4EB8 1DB0 3731          jsr       _WatchPointClear
00002372  6004      3732          bra.s     Watchpoint_10
                    3733   Watchpoint_9:
                    3734   ; }
                    3735   ; else
                    3736   ; UnknownCommand() ;
00002374  4EB8 2258 3737          jsr       _UnknownCommand
                    3738   Watchpoint_10:
00002378  241F      3739          move.l    (A7)+,D2
0000237A  4E75      3740          rts
                    3741   ; }
                    3742   ; void DMenu(void)
                    3743   ; {
                    3744   _DMenu:
0000237C  2F02      3745          move.l    D2,-(A7)
                    3746   ; char c;
                    3747   ; c = toupper(_getch());
0000237E  2F00      3748          move.l    D0,-(A7)
00002380  4EB8 0B68 3749          jsr       __getch
00002384  2200      3750          move.l    D0,D1
00002386  201F      3751          move.l    (A7)+,D0
00002388  2F01      3752          move.l    D1,-(A7)
0000238A  4EB9 0000 3753          jsr       _toupper
0000238E  591C      
00002390  584F      3754          addq.w    #4,A7
00002392  1400      3755          move.b    D0,D2
                    3756   ; if( c == (char)('U'))                                     // Dump Memory
00002394  0C02 0055 3757          cmp.b     #85,D2
00002398  6606      3758          bne.s     DMenu_1
                    3759   ; DumpMemory() ;
0000239A  4EB8 0EE0 3760          jsr       _DumpMemory
0000239E  6018      3761          bra.s     DMenu_4
                    3762   DMenu_1:
                    3763   ; else if(c == (char)('I'))   {
000023A0  0C02 0049 3764          cmp.b     #73,D2
000023A4  660E      3765          bne.s     DMenu_3
                    3766   ; DisableBreakPoints() ;
000023A6  4EB8 1E52 3767          jsr       _DisableBreakPoints
                    3768   ; DisassembleProgram() ;
000023AA  4EB8 0D00 3769          jsr       _DisassembleProgram
                    3770   ; EnableBreakPoints() ;
000023AE  4EB8 1EA6 3771          jsr       _EnableBreakPoints
000023B2  6004      3772          bra.s     DMenu_4
                    3773   DMenu_3:
                    3774   ; }
                    3775   ; else
                    3776   ; UnknownCommand() ;
000023B4  4EB8 2258 3777          jsr       _UnknownCommand
                    3778   DMenu_4:
000023B8  241F      3779          move.l    (A7)+,D2
000023BA  4E75      3780          rts
                    3781   ; }
                    3782   ; void Help(void)
                    3783   ; {
                    3784   _Help:
000023BC  48E7 2020 3785          movem.l   D2/A2,-(A7)
000023C0  45F9 0000 3786          lea       _printf.L,A2
000023C4  5968      
                    3787   ; char *banner = "\r\n----------------------------------------------------------------" ;
000023C6  41F9 0000 3788          lea       @m68kde~2_97.L,A0
000023CA  7612      
000023CC  2408      3789          move.l    A0,D2
                    3790   ; printf(banner) ;
000023CE  2F02      3791          move.l    D2,-(A7)
000023D0  4E92      3792          jsr       (A2)
000023D2  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\n  Debugger Command Summary") ;
000023D4  4879 0000 3795          pea       @m68kde~2_98.L
000023D8  7656      
000023DA  4E92      3796          jsr       (A2)
000023DC  584F      3797          addq.w    #4,A7
                    3798   ; printf(banner) ;
000023DE  2F02      3799          move.l    D2,-(A7)
000023E0  4E92      3800          jsr       (A2)
000023E2  584F      3801          addq.w    #4,A7
                    3802   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000023E4  4879 0000 3803          pea       @m68kde~2_99.L
000023E8  7674      
000023EA  4E92      3804          jsr       (A2)
000023EC  584F      3805          addq.w    #4,A7
                    3806   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000023EE  4879 0000 3807          pea       @m68kde~2_100.L
000023F2  76B8      
000023F4  4E92      3808          jsr       (A2)
000023F6  584F      3809          addq.w    #4,A7
                    3810   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000023F8  4879 0000 3811          pea       @m68kde~2_101.L
000023FC  76F0      
000023FE  4E92      3812          jsr       (A2)
00002400  584F      3813          addq.w    #4,A7
                    3814   ; printf("\r\n  DI           - Disassemble Program");
00002402  4879 0000 3815          pea       @m68kde~2_102.L
00002406  772A      
00002408  4E92      3816          jsr       (A2)
0000240A  584F      3817          addq.w    #4,A7
                    3818   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
0000240C  4879 0000 3819          pea       @m68kde~2_103.L
00002410  7752      
00002412  4E92      3820          jsr       (A2)
00002414  584F      3821          addq.w    #4,A7
                    3822   ; printf("\r\n  E            - Enter String into Memory") ;
00002416  4879 0000 3823          pea       @m68kde~2_104.L
0000241A  7784      
0000241C  4E92      3824          jsr       (A2)
0000241E  584F      3825          addq.w    #4,A7
                    3826   ; printf("\r\n  F            - Fill Memory with Data") ;
00002420  4879 0000 3827          pea       @m68kde~2_105.L
00002424  77B0      
00002426  4E92      3828          jsr       (A2)
00002428  584F      3829          addq.w    #4,A7
                    3830   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
0000242A  2F39 0803 3831          move.l    _PC.L,-(A7)
0000242E  0120      
00002430  4879 0000 3832          pea       @m68kde~2_106.L
00002434  77DA      
00002436  4E92      3833          jsr       (A2)
00002438  504F      3834          addq.w    #8,A7
                    3835   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
0000243A  4879 0000 3836          pea       @m68kde~2_107.L
0000243E  7814      
00002440  4E92      3837          jsr       (A2)
00002442  584F      3838          addq.w    #4,A7
                    3839   ; printf("\r\n  M            - Memory Examine and Change");
00002444  4879 0000 3840          pea       @m68kde~2_108.L
00002448  784C      
0000244A  4E92      3841          jsr       (A2)
0000244C  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000244E  4879 0000 3844          pea       @m68kde~2_109.L
00002452  787A      
00002454  4E92      3845          jsr       (A2)
00002456  584F      3846          addq.w    #4,A7
                    3847   ; printf("\r\n  R            - Display 68000 Registers") ;
00002458  4879 0000 3848          pea       @m68kde~2_110.L
0000245C  78B4      
0000245E  4E92      3849          jsr       (A2)
00002460  584F      3850          addq.w    #4,A7
                    3851   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002462  4879 0000 3852          pea       @m68kde~2_111.L
00002466  78E0      
00002468  4E92      3853          jsr       (A2)
0000246A  584F      3854          addq.w    #4,A7
                    3855   ; printf("\r\n  TM           - Test Memory") ;
0000246C  4879 0000 3856          pea       @m68kde~2_112.L
00002470  7912      
00002472  4E92      3857          jsr       (A2)
00002474  584F      3858          addq.w    #4,A7
                    3859   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002476  4879 0000 3860          pea       @m68kde~2_113.L
0000247A  7932      
0000247C  4E92      3861          jsr       (A2)
0000247E  584F      3862          addq.w    #4,A7
                    3863   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002480  4879 0000 3864          pea       @m68kde~2_114.L
00002484  795A      
00002486  4E92      3865          jsr       (A2)
00002488  584F      3866          addq.w    #4,A7
                    3867   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000248A  4879 0000 3868          pea       @m68kde~2_115.L
0000248E  7990      
00002490  4E92      3869          jsr       (A2)
00002492  584F      3870          addq.w    #4,A7
                    3871   ; printf(banner) ;
00002494  2F02      3872          move.l    D2,-(A7)
00002496  4E92      3873          jsr       (A2)
00002498  584F      3874          addq.w    #4,A7
0000249A  4CDF 0404 3875          movem.l   (A7)+,D2/A2
0000249E  4E75      3876          rts
                    3877   ; }
                    3878   ; void menu(void)
                    3879   ; {
                    3880   _menu:
000024A0  48E7 303C 3881          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000024A4  45F9 0000 3882          lea       _printf.L,A2
000024A8  5968      
000024AA  47F9 0803 3883          lea       _Trace.L,A3
000024AE  00D8      
000024B0  49F9 0803 3884          lea       _x.L,A4
000024B4  00C8      
000024B6  4BF9 0803 3885          lea       _SR.L,A5
000024BA  012C      
                    3886   ; char c,c1 ;
                    3887   ; while(1)    {
                    3888   menu_1:
                    3889   ; FlushKeyboard() ;               // dump unread characters from keyboard
000024BC  4EB8 0BA6 3890          jsr       _FlushKeyboard
                    3891   ; printf("\r\n#") ;
000024C0  4879 0000 3892          pea       @m68kde~2_116.L
000024C4  79C8      
000024C6  4E92      3893          jsr       (A2)
000024C8  584F      3894          addq.w    #4,A7
                    3895   ; c = toupper(_getch());
000024CA  2F00      3896          move.l    D0,-(A7)
000024CC  4EB8 0B68 3897          jsr       __getch
000024D0  2200      3898          move.l    D0,D1
000024D2  201F      3899          move.l    (A7)+,D0
000024D4  2F01      3900          move.l    D1,-(A7)
000024D6  4EB9 0000 3901          jsr       _toupper
000024DA  591C      
000024DC  584F      3902          addq.w    #4,A7
000024DE  1400      3903          move.b    D0,D2
                    3904   ; if( c == (char)('L'))                  // load s record file
000024E0  0C02 004C 3905          cmp.b     #76,D2
000024E4  6608      3906          bne.s     menu_4
                    3907   ; Load_SRecordFile() ;
000024E6  4EB8 104A 3908          jsr       _Load_SRecordFile
000024EA  6000 021E 3909          bra       menu_46
                    3910   menu_4:
                    3911   ; else if( c == (char)('D'))             // dump memory
000024EE  0C02 0044 3912          cmp.b     #68,D2
000024F2  6608      3913          bne.s     menu_6
                    3914   ; DMenu() ;
000024F4  4EB8 237C 3915          jsr       _DMenu
000024F8  6000 0210 3916          bra       menu_46
                    3917   menu_6:
                    3918   ; else if( c == (char)('E'))             // Enter String into memory
000024FC  0C02 0045 3919          cmp.b     #69,D2
00002500  660A      3920          bne.s     menu_8
                    3921   ; EnterString() ;
00002502  4EB9 0000 3922          jsr       _EnterString
00002506  2852      
00002508  6000 0200 3923          bra       menu_46
                    3924   menu_8:
                    3925   ; else if( c == (char)('F'))             // fill memory
0000250C  0C02 0046 3926          cmp.b     #70,D2
00002510  6608      3927          bne.s     menu_10
                    3928   ; FillMemory() ;
00002512  4EB8 0FD0 3929          jsr       _FillMemory
00002516  6000 01F2 3930          bra       menu_46
                    3931   menu_10:
                    3932   ; else if( c == (char)('G'))  {           // go user program
0000251A  0C02 0047 3933          cmp.b     #71,D2
0000251E  6626      3934          bne.s     menu_12
                    3935   ; printf("\r\nProgram Running.....") ;
00002520  4879 0000 3936          pea       @m68kde~2_117.L
00002524  79CC      
00002526  4E92      3937          jsr       (A2)
00002528  584F      3938          addq.w    #4,A7
                    3939   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000252A  4879 0000 3940          pea       @m68kde~2_118.L
0000252E  79E4      
00002530  4E92      3941          jsr       (A2)
00002532  584F      3942          addq.w    #4,A7
                    3943   ; GoFlag = 1 ;
00002534  23FC 0000 3944          move.l    #1,_GoFlag.L
00002538  0001 0803 
0000253C  00DC      
                    3945   ; go() ;
0000253E  4EB8 08B8 3946          jsr       _go
00002542  6000 01C6 3947          bra       menu_46
                    3948   menu_12:
                    3949   ; }
                    3950   ; else if( c == (char)('M'))           // memory examine and modify
00002546  0C02 004D 3951          cmp.b     #77,D2
0000254A  6608      3952          bne.s     menu_14
                    3953   ; MemoryChange() ;
0000254C  4EB8 11D8 3954          jsr       _MemoryChange
00002550  6000 01B8 3955          bra       menu_46
                    3956   menu_14:
                    3957   ; else if( c == (char)('P'))            // Program Flash Chip
00002554  0C02 0050 3958          cmp.b     #80,D2
00002558  6608      3959          bne.s     menu_16
                    3960   ; ProgramFlashChip() ;
0000255A  4EB8 12D8 3961          jsr       _ProgramFlashChip
0000255E  6000 01AA 3962          bra       menu_46
                    3963   menu_16:
                    3964   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002562  0C02 0043 3965          cmp.b     #67,D2
00002566  6608      3966          bne.s     menu_18
                    3967   ; LoadFromFlashChip();
00002568  4EB8 12DA 3968          jsr       _LoadFromFlashChip
0000256C  6000 019C 3969          bra       menu_46
                    3970   menu_18:
                    3971   ; else if( c == (char)('R'))             // dump registers
00002570  0C02 0052 3972          cmp.b     #82,D2
00002574  6608      3973          bne.s     menu_20
                    3974   ; DumpRegisters() ;
00002576  4EB8 135E 3975          jsr       _DumpRegisters
0000257A  6000 018E 3976          bra       menu_46
                    3977   menu_20:
                    3978   ; else if( c == (char)('.'))           // change registers
0000257E  0C02 002E 3979          cmp.b     #46,D2
00002582  6608      3980          bne.s     menu_22
                    3981   ; ChangeRegisters() ;
00002584  4EB8 1874 3982          jsr       _ChangeRegisters
00002588  6000 0180 3983          bra       menu_46
                    3984   menu_22:
                    3985   ; else if( c == (char)('B'))              // breakpoint command
0000258C  0C02 0042 3986          cmp.b     #66,D2
00002590  6608      3987          bne.s     menu_24
                    3988   ; Breakpoint() ;
00002592  4EB8 2284 3989          jsr       _Breakpoint
00002596  6000 0172 3990          bra       menu_46
                    3991   menu_24:
                    3992   ; else if( c == (char)('T'))  {          // Test command
0000259A  0C02 0054 3993          cmp.b     #84,D2
0000259E  6600 0046 3994          bne       menu_26
                    3995   ; c1 = toupper(_getch()) ;
000025A2  2F00      3996          move.l    D0,-(A7)
000025A4  4EB8 0B68 3997          jsr       __getch
000025A8  2200      3998          move.l    D0,D1
000025AA  201F      3999          move.l    (A7)+,D0
000025AC  2F01      4000          move.l    D1,-(A7)
000025AE  4EB9 0000 4001          jsr       _toupper
000025B2  591C      
000025B4  584F      4002          addq.w    #4,A7
000025B6  1600      4003          move.b    D0,D3
                    4004   ; if(c1 == (char)('M'))                    // memory test
000025B8  0C03 004D 4005          cmp.b     #77,D3
000025BC  6608      4006          bne.s     menu_28
                    4007   ; MemoryTest() ;
000025BE  4EB9 0000 4008          jsr       _MemoryTest
000025C2  28A2      
000025C4  601C      4009          bra.s     menu_33
                    4010   menu_28:
                    4011   ; else if( c1 == (char)('S'))              // Switch Test command
000025C6  0C03 0053 4012          cmp.b     #83,D3
000025CA  6606      4013          bne.s     menu_30
                    4014   ; SwitchTest() ;
000025CC  4EB8 0AA4 4015          jsr       _SwitchTest
000025D0  6010      4016          bra.s     menu_33
                    4017   menu_30:
                    4018   ; else if( c1 == (char)('D'))              // display Test command
000025D2  0C03 0044 4019          cmp.b     #68,D3
000025D6  6606      4020          bne.s     menu_32
                    4021   ; TestLEDS() ;
000025D8  4EB8 0A50 4022          jsr       _TestLEDS
000025DC  6004      4023          bra.s     menu_33
                    4024   menu_32:
                    4025   ; else
                    4026   ; UnknownCommand() ;
000025DE  4EB8 2258 4027          jsr       _UnknownCommand
                    4028   menu_33:
000025E2  6000 0126 4029          bra       menu_46
                    4030   menu_26:
                    4031   ; }
                    4032   ; else if( c == (char)(' ')) {             // Next instruction command
000025E6  0C02 0020 4033          cmp.b     #32,D2
000025EA  6636      4034          bne.s     menu_34
                    4035   ; DisableBreakPoints() ;
000025EC  4EB8 1E52 4036          jsr       _DisableBreakPoints
                    4037   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000025F0  2013      4038          move.l    (A3),D0
000025F2  0C80 0000 4039          cmp.l     #1,D0
000025F6  0001      
000025F8  661A      4040          bne.s     menu_36
000025FA  2039 0803 4041          move.l    _GoFlag.L,D0
000025FE  00DC      
00002600  0C80 0000 4042          cmp.l     #1,D0
00002604  0001      
00002606  660C      4043          bne.s     menu_36
                    4044   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002608  13FC 0001 4045          move.b    #1,4194314
0000260C  0040 000A 
                    4046   ; return ;
00002610  6000 00FC 4047          bra       menu_38
                    4048   menu_36:
                    4049   ; }
                    4050   ; else
                    4051   ; printf("\r\nError: Press 'G' first to start program") ;
00002614  4879 0000 4052          pea       @m68kde~2_119.L
00002618  7A12      
0000261A  4E92      4053          jsr       (A2)
0000261C  584F      4054          addq.w    #4,A7
0000261E  6000 00EA 4055          bra       menu_46
                    4056   menu_34:
                    4057   ; }
                    4058   ; else if( c == (char)('S')) {             // single step
00002622  0C02 0053 4059          cmp.b     #83,D2
00002626  6600 008C 4060          bne       menu_39
                    4061   ; if(Trace == 0) {
0000262A  2013      4062          move.l    (A3),D0
0000262C  6600 0050 4063          bne       menu_41
                    4064   ; DisableBreakPoints() ;
00002630  4EB8 1E52 4065          jsr       _DisableBreakPoints
                    4066   ; printf("\r\nSingle Step  :[ON]") ;
00002634  4879 0000 4067          pea       @m68kde~2_120.L
00002638  7A3C      
0000263A  4E92      4068          jsr       (A2)
0000263C  584F      4069          addq.w    #4,A7
                    4070   ; printf("\r\nBreak Points :[Disabled]") ;
0000263E  4879 0000 4071          pea       @m68kde~2_51.L
00002642  7098      
00002644  4E92      4072          jsr       (A2)
00002646  584F      4073          addq.w    #4,A7
                    4074   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002648  0055 8000 4075          or.w      #32768,(A5)
                    4076   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000264C  2F39 0803 4077          move.l    _PC.L,-(A7)
00002650  0120      
00002652  4879 0000 4078          pea       @m68kde~2_121.L
00002656  7A52      
00002658  4E92      4079          jsr       (A2)
0000265A  504F      4080          addq.w    #8,A7
                    4081   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000265C  4879 0000 4082          pea       @m68kde~2_122.L
00002660  7A86      
00002662  4E92      4083          jsr       (A2)
00002664  584F      4084          addq.w    #4,A7
                    4085   ; DumpRegisters() ;
00002666  4EB8 135E 4086          jsr       _DumpRegisters
                    4087   ; Trace = 1;
0000266A  26BC 0000 4088          move.l    #1,(A3)
0000266E  0001      
                    4089   ; TraceException = 1;
00002670  13FC 0001 4090          move.b    #1,4194314
00002674  0040 000A 
                    4091   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002678  28B8 0074 4092          move.l    116,(A4)
0000267C  6032      4093          bra.s     menu_42
                    4094   menu_41:
                    4095   ; }
                    4096   ; else {
                    4097   ; Trace = 0 ;
0000267E  4293      4098          clr.l     (A3)
                    4099   ; TraceException = 0 ;
00002680  4239 0040 4100          clr.b     4194314
00002684  000A      
                    4101   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002686  28B8 0074 4102          move.l    116,(A4)
                    4103   ; EnableBreakPoints() ;
0000268A  4EB8 1EA6 4104          jsr       _EnableBreakPoints
                    4105   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000268E  0255 7FFF 4106          and.w     #32767,(A5)
                    4107   ; printf("\r\nSingle Step : [OFF]") ;
00002692  4879 0000 4108          pea       @m68kde~2_123.L
00002696  7AAA      
00002698  4E92      4109          jsr       (A2)
0000269A  584F      4110          addq.w    #4,A7
                    4111   ; printf("\r\nBreak Points :[Enabled]") ;
0000269C  4879 0000 4112          pea       @m68kde~2_124.L
000026A0  7AC0      
000026A2  4E92      4113          jsr       (A2)
000026A4  584F      4114          addq.w    #4,A7
                    4115   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000026A6  4879 0000 4116          pea       @m68kde~2_125.L
000026AA  7ADA      
000026AC  4E92      4117          jsr       (A2)
000026AE  584F      4118          addq.w    #4,A7
                    4119   menu_42:
000026B0  6000 0058 4120          bra       menu_46
                    4121   menu_39:
                    4122   ; }
                    4123   ; }
                    4124   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000026B4  0C02 001B 4125          cmp.b     #27,D2
000026B8  6600 0040 4126          bne       menu_43
                    4127   ; Trace = 0;
000026BC  4293      4128          clr.l     (A3)
                    4129   ; TraceException = 0;
000026BE  4239 0040 4130          clr.b     4194314
000026C2  000A      
                    4131   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000026C4  28B8 0074 4132          move.l    116,(A4)
                    4133   ; EnableBreakPoints() ;
000026C8  4EB8 1EA6 4134          jsr       _EnableBreakPoints
                    4135   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000026CC  0255 7FFF 4136          and.w     #32767,(A5)
                    4137   ; printf("\r\nSingle Step  :[OFF]") ;
000026D0  4879 0000 4138          pea       @m68kde~2_126.L
000026D4  7B04      
000026D6  4E92      4139          jsr       (A2)
000026D8  584F      4140          addq.w    #4,A7
                    4141   ; printf("\r\nBreak Points :[Enabled]");
000026DA  4879 0000 4142          pea       @m68kde~2_124.L
000026DE  7AC0      
000026E0  4E92      4143          jsr       (A2)
000026E2  584F      4144          addq.w    #4,A7
                    4145   ; printf("\r\nProgram Running.....") ;
000026E4  4879 0000 4146          pea       @m68kde~2_117.L
000026E8  79CC      
000026EA  4E92      4147          jsr       (A2)
000026EC  584F      4148          addq.w    #4,A7
                    4149   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000026EE  4879 0000 4150          pea       @m68kde~2_118.L
000026F2  79E4      
000026F4  4E92      4151          jsr       (A2)
000026F6  584F      4152          addq.w    #4,A7
                    4153   ; return ;
000026F8  6014      4154          bra.s     menu_38
                    4155   menu_43:
                    4156   ; }
                    4157   ; else if( c == (char)('W'))              // Watchpoint command
000026FA  0C02 0057 4158          cmp.b     #87,D2
000026FE  6606      4159          bne.s     menu_45
                    4160   ; Watchpoint() ;
00002700  4EB8 2300 4161          jsr       _Watchpoint
00002704  6004      4162          bra.s     menu_46
                    4163   menu_45:
                    4164   ; else
                    4165   ; UnknownCommand() ;
00002706  4EB8 2258 4166          jsr       _UnknownCommand
                    4167   menu_46:
0000270A  6000 FDB0 4168          bra       menu_1
                    4169   menu_38:
0000270E  4CDF 3C0C 4170          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002712  4E75      4171          rts
                    4172   ; }
                    4173   ; }
                    4174   ; void PrintErrorMessageandAbort(char *string) {
                    4175   _PrintErrorMessageandAbort:
00002714  4E56 0000 4176          link      A6,#0
                    4177   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002718  4879 0000 4178          pea       @m68kde~2_127.L
0000271C  7B1A      
0000271E  4EB9 0000 4179          jsr       _printf
00002722  5968      
00002724  584F      4180          addq.w    #4,A7
                    4181   ; printf("%s\r\n", string) ;
00002726  2F2E 0008 4182          move.l    8(A6),-(A7)
0000272A  4879 0000 4183          pea       @m68kde~2_128.L
0000272E  7B36      
00002730  4EB9 0000 4184          jsr       _printf
00002734  5968      
00002736  504F      4185          addq.w    #8,A7
                    4186   ; menu() ;
00002738  4EB8 24A0 4187          jsr       _menu
0000273C  4E5E      4188          unlk      A6
0000273E  4E75      4189          rts
                    4190   ; }
                    4191   ; void IRQMessage(int level) {
                    4192   _IRQMessage:
00002740  4E56 0000 4193          link      A6,#0
                    4194   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002744  4879 0000 4195          pea       @m68kde~2_129.L
00002748  7B3C      
0000274A  4EB9 0000 4196          jsr       _printf
0000274E  5968      
00002750  584F      4197          addq.w    #4,A7
                    4198   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002752  2F2E 0008 4199          move.l    8(A6),-(A7)
00002756  4879 0000 4200          pea       @m68kde~2_130.L
0000275A  7B54      
0000275C  4EB9 0000 4201          jsr       _printf
00002760  5968      
00002762  504F      4202          addq.w    #8,A7
                    4203   ; menu() ;
00002764  4EB8 24A0 4204          jsr       _menu
00002768  4E5E      4205          unlk      A6
0000276A  4E75      4206          rts
                    4207   ; }
                    4208   ; void UnhandledIRQ1(void) {
                    4209   _UnhandledIRQ1:
                    4210   ; IRQMessage(1);
0000276C  4878 0001 4211          pea       1
00002770  4EB8 2740 4212          jsr       _IRQMessage
00002774  584F      4213          addq.w    #4,A7
00002776  4E75      4214          rts
                    4215   ; }
                    4216   ; void UnhandledIRQ2(void) {
                    4217   _UnhandledIRQ2:
                    4218   ; IRQMessage(2);
00002778  4878 0002 4219          pea       2
0000277C  4EB8 2740 4220          jsr       _IRQMessage
00002780  584F      4221          addq.w    #4,A7
00002782  4E75      4222          rts
                    4223   ; }
                    4224   ; void UnhandledIRQ3(void){
                    4225   _UnhandledIRQ3:
                    4226   ; IRQMessage(3);
00002784  4878 0003 4227          pea       3
00002788  4EB8 2740 4228          jsr       _IRQMessage
0000278C  584F      4229          addq.w    #4,A7
0000278E  4E75      4230          rts
                    4231   ; }
                    4232   ; void UnhandledIRQ4(void) {
                    4233   _UnhandledIRQ4:
                    4234   ; IRQMessage(4);
00002790  4878 0004 4235          pea       4
00002794  4EB8 2740 4236          jsr       _IRQMessage
00002798  584F      4237          addq.w    #4,A7
0000279A  4E75      4238          rts
                    4239   ; }
                    4240   ; void UnhandledIRQ5(void) {
                    4241   _UnhandledIRQ5:
                    4242   ; IRQMessage(5);
0000279C  4878 0005 4243          pea       5
000027A0  4EB8 2740 4244          jsr       _IRQMessage
000027A4  584F      4245          addq.w    #4,A7
000027A6  4E75      4246          rts
                    4247   ; }
                    4248   ; void UnhandledIRQ6(void) {
                    4249   _UnhandledIRQ6:
                    4250   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000027A8  4879 0000 4251          pea       @m68kde~2_131.L
000027AC  7B78      
000027AE  4EB8 2714 4252          jsr       _PrintErrorMessageandAbort
000027B2  584F      4253          addq.w    #4,A7
                    4254   ; menu() ;
000027B4  4EB8 24A0 4255          jsr       _menu
000027B8  4E75      4256          rts
                    4257   ; }
                    4258   ; void UnhandledIRQ7(void) {
                    4259   _UnhandledIRQ7:
                    4260   ; IRQMessage(7);
000027BA  4878 0007 4261          pea       7
000027BE  4EB8 2740 4262          jsr       _IRQMessage
000027C2  584F      4263          addq.w    #4,A7
000027C4  4E75      4264          rts
                    4265   ; }
                    4266   ; void UnhandledTrap(void) {
                    4267   _UnhandledTrap:
                    4268   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000027C6  4879 0000 4269          pea       @m68kde~2_132.L
000027CA  7BB8      
000027CC  4EB8 2714 4270          jsr       _PrintErrorMessageandAbort
000027D0  584F      4271          addq.w    #4,A7
000027D2  4E75      4272          rts
                    4273   ; }
                    4274   ; void BusError() {
                    4275   _BusError:
                    4276   ; PrintErrorMessageandAbort("BUS Error!") ;
000027D4  4879 0000 4277          pea       @m68kde~2_133.L
000027D8  7BCE      
000027DA  4EB8 2714 4278          jsr       _PrintErrorMessageandAbort
000027DE  584F      4279          addq.w    #4,A7
000027E0  4E75      4280          rts
                    4281   ; }
                    4282   ; void AddressError() {
                    4283   _AddressError:
                    4284   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000027E2  4879 0000 4285          pea       @m68kde~2_134.L
000027E6  7BDA      
000027E8  4EB8 2714 4286          jsr       _PrintErrorMessageandAbort
000027EC  584F      4287          addq.w    #4,A7
000027EE  4E75      4288          rts
                    4289   ; }
                    4290   ; void IllegalInstruction() {
                    4291   _IllegalInstruction:
                    4292   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000027F0  4879 0000 4293          pea       @m68kde~2_135.L
000027F4  7BEA      
000027F6  4EB8 2714 4294          jsr       _PrintErrorMessageandAbort
000027FA  584F      4295          addq.w    #4,A7
000027FC  4E75      4296          rts
                    4297   ; }
                    4298   ; void Dividebyzero() {
                    4299   _Dividebyzero:
                    4300   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000027FE  4879 0000 4301          pea       @m68kde~2_136.L
00002802  7BFE      
00002804  4EB8 2714 4302          jsr       _PrintErrorMessageandAbort
00002808  584F      4303          addq.w    #4,A7
0000280A  4E75      4304          rts
                    4305   ; }
                    4306   ; void Check() {
                    4307   _Check:
                    4308   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
0000280C  4879 0000 4309          pea       @m68kde~2_137.L
00002810  7C0E      
00002812  4EB8 2714 4310          jsr       _PrintErrorMessageandAbort
00002816  584F      4311          addq.w    #4,A7
00002818  4E75      4312          rts
                    4313   ; }
                    4314   ; void Trapv() {
                    4315   _Trapv:
                    4316   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
0000281A  4879 0000 4317          pea       @m68kde~2_138.L
0000281E  7C20      
00002820  4EB8 2714 4318          jsr       _PrintErrorMessageandAbort
00002824  584F      4319          addq.w    #4,A7
00002826  4E75      4320          rts
                    4321   ; }
                    4322   ; void PrivError() {
                    4323   _PrivError:
                    4324   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002828  4879 0000 4325          pea       @m68kde~2_139.L
0000282C  7C32      
0000282E  4EB8 2714 4326          jsr       _PrintErrorMessageandAbort
00002832  584F      4327          addq.w    #4,A7
00002834  4E75      4328          rts
                    4329   ; }
                    4330   ; void UnitIRQ() {
                    4331   _UnitIRQ:
                    4332   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002836  4879 0000 4333          pea       @m68kde~2_140.L
0000283A  7C46      
0000283C  4EB8 2714 4334          jsr       _PrintErrorMessageandAbort
00002840  584F      4335          addq.w    #4,A7
00002842  4E75      4336          rts
                    4337   ; }
                    4338   ; void Spurious() {
                    4339   _Spurious:
                    4340   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002844  4879 0000 4341          pea       @m68kde~2_141.L
00002848  7C58      
0000284A  4EB8 2714 4342          jsr       _PrintErrorMessageandAbort
0000284E  584F      4343          addq.w    #4,A7
00002850  4E75      4344          rts
                    4345   ; }
                    4346   ; void EnterString(void)
                    4347   ; {
                    4348   _EnterString:
00002852  4E56 FFFC 4349          link      A6,#-4
00002856  2F02      4350          move.l    D2,-(A7)
                    4351   ; unsigned char *Start;
                    4352   ; unsigned char c;
                    4353   ; printf("\r\nStart Address in Memory: ") ;
00002858  4879 0000 4354          pea       @m68kde~2_142.L
0000285C  7C66      
0000285E  4EB9 0000 4355          jsr       _printf
00002862  5968      
00002864  584F      4356          addq.w    #4,A7
                    4357   ; Start = Get8HexDigits(0) ;
00002866  42A7      4358          clr.l     -(A7)
00002868  4EB8 0CA4 4359          jsr       _Get8HexDigits
0000286C  584F      4360          addq.w    #4,A7
0000286E  2400      4361          move.l    D0,D2
                    4362   ; printf("\r\nEnter String (ESC to end) :") ;
00002870  4879 0000 4363          pea       @m68kde~2_143.L
00002874  7C82      
00002876  4EB9 0000 4364          jsr       _printf
0000287A  5968      
0000287C  584F      4365          addq.w    #4,A7
                    4366   ; while((c = getchar()) != 0x1b)
                    4367   EnterString_1:
0000287E  4EB9 0000 4368          jsr       _getch
00002882  5880      
00002884  1D40 FFFF 4369          move.b    D0,-1(A6)
00002888  0C00 001B 4370          cmp.b     #27,D0
0000288C  670A      4371          beq.s     EnterString_3
                    4372   ; *Start++ = c ;
0000288E  2042      4373          move.l    D2,A0
00002890  5282      4374          addq.l    #1,D2
00002892  10AE FFFF 4375          move.b    -1(A6),(A0)
00002896  60E6      4376          bra       EnterString_1
                    4377   EnterString_3:
                    4378   ; *Start = 0x00;  // terminate with a null
00002898  2042      4379          move.l    D2,A0
0000289A  4210      4380          clr.b     (A0)
0000289C  241F      4381          move.l    (A7)+,D2
0000289E  4E5E      4382          unlk      A6
000028A0  4E75      4383          rts
                    4384   ; }
                    4385   ; void MemoryTest(void)
                    4386   ; {
                    4387   _MemoryTest:
000028A2  4E56 FFF0 4388          link      A6,#-16
000028A6  48E7 3E30 4389          movem.l   D2/D3/D4/D5/D6/A2/A3,-(A7)
000028AA  45F9 0000 4390          lea       _printf.L,A2
000028AE  5968      
000028B0  47F9 0000 4391          lea       _scanf.L,A3
000028B4  5938      
                    4392   ; unsigned int test_option = 0;
000028B6  42AE FFF0 4393          clr.l     -16(A6)
                    4394   ; unsigned int bit_num = 0;
000028BA  4286      4395          clr.l     D6
                    4396   ; unsigned int test_pattern = 0;
000028BC  4283      4397          clr.l     D3
                    4398   ; unsigned int select_pattern = 0;
000028BE  42AE FFF4 4399          clr.l     -12(A6)
                    4400   ; unsigned int write_data = 0;
000028C2  4285      4401          clr.l     D5
                    4402   ; unsigned int start_addr = 0;
000028C4  42AE FFF8 4403          clr.l     -8(A6)
                    4404   ; unsigned int end_addr = 0;
000028C8  42AE FFFC 4405          clr.l     -4(A6)
                    4406   ; unsigned int *addr_point = NULL;
000028CC  4282      4407          clr.l     D2
                    4408   ; unsigned int counter = 2000;
000028CE  283C 0000 4409          move.l    #2000,D4
000028D2  07D0      
                    4410   ; //prompting user for test option BYTES, WORDS, or LONG WORDS
                    4411   ; while(!test_option){
                    4412   MemoryTest_1:
000028D4  4AAE FFF0 4413          tst.l     -16(A6)
000028D8  6600 0054 4414          bne       MemoryTest_3
                    4415   ; printf("\r\nPlease enter a number to choose one of the following test options:"
000028DC  4879 0000 4416          pea       @m68kde~2_144.L
000028E0  7CA0      
000028E2  4E92      4417          jsr       (A2)
000028E4  584F      4418          addq.w    #4,A7
                    4419   ; "\r\n1 - Bytes"
                    4420   ; "\r\n2 - Words"
                    4421   ; "\r\n3 - Long Words\r\n");
                    4422   ; scanf("%d", &test_option);
000028E6  486E FFF0 4423          pea       -16(A6)
000028EA  4879 0000 4424          pea       @m68kde~2_145.L
000028EE  7D0E      
000028F0  4E93      4425          jsr       (A3)
000028F2  504F      4426          addq.w    #8,A7
                    4427   ; if((test_option != 1 && test_option != 2 && test_option != 3) || test_option == 0){
000028F4  202E FFF0 4428          move.l    -16(A6),D0
000028F8  0C80 0000 4429          cmp.l     #1,D0
000028FC  0001      
000028FE  6718      4430          beq.s     MemoryTest_7
00002900  202E FFF0 4431          move.l    -16(A6),D0
00002904  0C80 0000 4432          cmp.l     #2,D0
00002908  0002      
0000290A  670C      4433          beq.s     MemoryTest_7
0000290C  202E FFF0 4434          move.l    -16(A6),D0
00002910  0C80 0000 4435          cmp.l     #3,D0
00002914  0003      
00002916  6606      4436          bne.s     MemoryTest_6
                    4437   MemoryTest_7:
00002918  202E FFF0 4438          move.l    -16(A6),D0
0000291C  660E      4439          bne.s     MemoryTest_4
                    4440   MemoryTest_6:
                    4441   ; printf("\r\nInvalid Selection\r\n");
0000291E  4879 0000 4442          pea       @m68kde~2_146.L
00002922  7D12      
00002924  4E92      4443          jsr       (A2)
00002926  584F      4444          addq.w    #4,A7
                    4445   ; test_option = 0;
00002928  42AE FFF0 4446          clr.l     -16(A6)
                    4447   MemoryTest_4:
0000292C  60A6      4448          bra       MemoryTest_1
                    4449   MemoryTest_3:
                    4450   ; }
                    4451   ; }
                    4452   ; //assigning bit_num based on test_option
                    4453   ; switch(test_option){
0000292E  202E FFF0 4454          move.l    -16(A6),D0
00002932  0C80 0000 4455          cmp.l     #2,D0
00002936  0002      
00002938  6726      4456          beq.s     MemoryTest_11
0000293A  620C      4457          bhi.s     MemoryTest_14
0000293C  0C80 0000 4458          cmp.l     #1,D0
00002940  0001      
00002942  670E      4459          beq.s     MemoryTest_10
00002944  6000 0036 4460          bra       MemoryTest_8
                    4461   MemoryTest_14:
00002948  0C80 0000 4462          cmp.l     #3,D0
0000294C  0003      
0000294E  671E      4463          beq.s     MemoryTest_12
00002950  602A      4464          bra.s     MemoryTest_8
                    4465   MemoryTest_10:
                    4466   ; case 1:
                    4467   ; printf("\r\nYou have selected test option BYTES\r\n");
00002952  4879 0000 4468          pea       @m68kde~2_147.L
00002956  7D28      
00002958  4E92      4469          jsr       (A2)
0000295A  584F      4470          addq.w    #4,A7
                    4471   ; bit_num = 8;
0000295C  7C08      4472          moveq     #8,D6
                    4473   ; break;
0000295E  6026      4474          bra.s     MemoryTest_9
                    4475   MemoryTest_11:
                    4476   ; case 2:
                    4477   ; printf("\r\nYou have selected test option WORDS\r\n");
00002960  4879 0000 4478          pea       @m68kde~2_148.L
00002964  7D50      
00002966  4E92      4479          jsr       (A2)
00002968  584F      4480          addq.w    #4,A7
                    4481   ; bit_num = 16;
0000296A  7C10      4482          moveq     #16,D6
                    4483   ; break;
0000296C  6018      4484          bra.s     MemoryTest_9
                    4485   MemoryTest_12:
                    4486   ; case 3:
                    4487   ; printf("\r\nYou have selected test option LONG WORDS\r\n");
0000296E  4879 0000 4488          pea       @m68kde~2_149.L
00002972  7D78      
00002974  4E92      4489          jsr       (A2)
00002976  584F      4490          addq.w    #4,A7
                    4491   ; bit_num = 32;
00002978  7C20      4492          moveq     #32,D6
                    4493   ; break;
0000297A  600A      4494          bra.s     MemoryTest_9
                    4495   MemoryTest_8:
                    4496   ; default:
                    4497   ; printf("\r\nException - invalid test option\r\n");
0000297C  4879 0000 4498          pea       @m68kde~2_150.L
00002980  7DA6      
00002982  4E92      4499          jsr       (A2)
00002984  584F      4500          addq.w    #4,A7
                    4501   ; break;
                    4502   MemoryTest_9:
                    4503   ; }
                    4504   ; //prompting user to enter test pattern
                    4505   ; while(!select_pattern){
                    4506   MemoryTest_15:
00002986  4AAE FFF4 4507          tst.l     -12(A6)
0000298A  6600 0060 4508          bne       MemoryTest_17
                    4509   ; printf("\r\nPlease enter a number to choose one of the following test patterns:"
0000298E  4879 0000 4510          pea       @m68kde~2_151.L
00002992  7DCA      
00002994  4E92      4511          jsr       (A2)
00002996  584F      4512          addq.w    #4,A7
                    4513   ; "\r\n1 - 55"
                    4514   ; "\r\n2 - AA"
                    4515   ; "\r\n3 - FF"
                    4516   ; "\r\n4 - 00\r\n");
                    4517   ; scanf("%d", &select_pattern);
00002998  486E FFF4 4518          pea       -12(A6)
0000299C  4879 0000 4519          pea       @m68kde~2_145.L
000029A0  7D0E      
000029A2  4E93      4520          jsr       (A3)
000029A4  504F      4521          addq.w    #8,A7
                    4522   ; if((select_pattern != 1 && select_pattern != 2 && select_pattern != 3 && select_pattern != 4) || select_pattern == 0){
000029A6  202E FFF4 4523          move.l    -12(A6),D0
000029AA  0C80 0000 4524          cmp.l     #1,D0
000029AE  0001      
000029B0  6724      4525          beq.s     MemoryTest_21
000029B2  202E FFF4 4526          move.l    -12(A6),D0
000029B6  0C80 0000 4527          cmp.l     #2,D0
000029BA  0002      
000029BC  6718      4528          beq.s     MemoryTest_21
000029BE  202E FFF4 4529          move.l    -12(A6),D0
000029C2  0C80 0000 4530          cmp.l     #3,D0
000029C6  0003      
000029C8  670C      4531          beq.s     MemoryTest_21
000029CA  202E FFF4 4532          move.l    -12(A6),D0
000029CE  0C80 0000 4533          cmp.l     #4,D0
000029D2  0004      
000029D4  6606      4534          bne.s     MemoryTest_20
                    4535   MemoryTest_21:
000029D6  202E FFF4 4536          move.l    -12(A6),D0
000029DA  660E      4537          bne.s     MemoryTest_18
                    4538   MemoryTest_20:
                    4539   ; printf("\r\nInvalid Selection\r\n");
000029DC  4879 0000 4540          pea       @m68kde~2_146.L
000029E0  7D12      
000029E2  4E92      4541          jsr       (A2)
000029E4  584F      4542          addq.w    #4,A7
                    4543   ; select_pattern = 0;
000029E6  42AE FFF4 4544          clr.l     -12(A6)
                    4545   MemoryTest_18:
000029EA  609A      4546          bra       MemoryTest_15
                    4547   MemoryTest_17:
                    4548   ; }
                    4549   ; }
                    4550   ; //assigning write_data based on test_pattern
                    4551   ; switch(select_pattern){
000029EC  202E FFF4 4552          move.l    -12(A6),D0
000029F0  5380      4553          subq.l    #1,D0
000029F2  6500 005E 4554          blo       MemoryTest_22
000029F6  0C80 0000 4555          cmp.l     #4,D0
000029FA  0004      
000029FC  6400 0054 4556          bhs       MemoryTest_22
00002A00  E380      4557          asl.l     #1,D0
00002A02  303B 0806 4558          move.w    MemoryTest_24(PC,D0.L),D0
00002A06  4EFB 0002 4559          jmp       MemoryTest_24(PC,D0.W)
                    4560   MemoryTest_24:
00002A0A  0008      4561          dc.w      MemoryTest_25-MemoryTest_24
00002A0C  0018      4562          dc.w      MemoryTest_26-MemoryTest_24
00002A0E  002A      4563          dc.w      MemoryTest_27-MemoryTest_24
00002A10  003C      4564          dc.w      MemoryTest_28-MemoryTest_24
                    4565   MemoryTest_25:
                    4566   ; case 1:
                    4567   ; printf("\r\nYou have selected test pattern 55\r\n");
00002A12  4879 0000 4568          pea       @m68kde~2_152.L
00002A16  7E32      
00002A18  4E92      4569          jsr       (A2)
00002A1A  584F      4570          addq.w    #4,A7
                    4571   ; test_pattern = 0x55;
00002A1C  7655      4572          moveq     #85,D3
                    4573   ; break;
00002A1E  6000 003C 4574          bra       MemoryTest_23
                    4575   MemoryTest_26:
                    4576   ; case 2:
                    4577   ; printf("\r\nYou have selected test pattern AA\r\n");
00002A22  4879 0000 4578          pea       @m68kde~2_153.L
00002A26  7E58      
00002A28  4E92      4579          jsr       (A2)
00002A2A  584F      4580          addq.w    #4,A7
                    4581   ; test_pattern = 0xAA;
00002A2C  263C 0000 4582          move.l    #170,D3
00002A30  00AA      
                    4583   ; break;
00002A32  6028      4584          bra.s     MemoryTest_23
                    4585   MemoryTest_27:
                    4586   ; case 3:
                    4587   ; printf("\r\nYou have selected test pattern FF\r\n");
00002A34  4879 0000 4588          pea       @m68kde~2_154.L
00002A38  7E7E      
00002A3A  4E92      4589          jsr       (A2)
00002A3C  584F      4590          addq.w    #4,A7
                    4591   ; test_pattern = 0xFF;
00002A3E  263C 0000 4592          move.l    #255,D3
00002A42  00FF      
                    4593   ; break;
00002A44  6016      4594          bra.s     MemoryTest_23
                    4595   MemoryTest_28:
                    4596   ; case 4:
                    4597   ; printf("\r\nYou have selected test pattern 00\r\n");
00002A46  4879 0000 4598          pea       @m68kde~2_155.L
00002A4A  7EA4      
00002A4C  4E92      4599          jsr       (A2)
00002A4E  584F      4600          addq.w    #4,A7
                    4601   ; test_pattern = 0x00;
00002A50  4283      4602          clr.l     D3
                    4603   MemoryTest_22:
                    4604   ; default:
                    4605   ; printf("\r\nException - invalid test pattern\r\n");
00002A52  4879 0000 4606          pea       @m68kde~2_156.L
00002A56  7ECA      
00002A58  4E92      4607          jsr       (A2)
00002A5A  584F      4608          addq.w    #4,A7
                    4609   ; break;
                    4610   MemoryTest_23:
                    4611   ; }
                    4612   ; //create appropriate data set based on select_pattern and test_option
                    4613   ; // ie, if select_pattern is AA and test_option is BYTES, write_data must be AAAA
                    4614   ; switch(test_option){
00002A5C  202E FFF0 4615          move.l    -16(A6),D0
00002A60  0C80 0000 4616          cmp.l     #2,D0
00002A64  0002      
00002A66  6720      4617          beq.s     MemoryTest_33
00002A68  620C      4618          bhi.s     MemoryTest_36
00002A6A  0C80 0000 4619          cmp.l     #1,D0
00002A6E  0001      
00002A70  6710      4620          beq.s     MemoryTest_32
00002A72  6000 0040 4621          bra       MemoryTest_30
                    4622   MemoryTest_36:
00002A76  0C80 0000 4623          cmp.l     #3,D0
00002A7A  0003      
00002A7C  6718      4624          beq.s     MemoryTest_34
00002A7E  6000 0034 4625          bra       MemoryTest_30
                    4626   MemoryTest_32:
                    4627   ; case 1:
                    4628   ; write_data = test_pattern;
00002A82  2A03      4629          move.l    D3,D5
                    4630   ; break;
00002A84  6000 0038 4631          bra       MemoryTest_31
                    4632   MemoryTest_33:
                    4633   ; case 2:
                    4634   ; write_data = test_pattern | test_pattern << 8;
00002A88  2003      4635          move.l    D3,D0
00002A8A  2203      4636          move.l    D3,D1
00002A8C  E189      4637          lsl.l     #8,D1
00002A8E  8081      4638          or.l      D1,D0
00002A90  2A00      4639          move.l    D0,D5
                    4640   ; break;
00002A92  6000 002A 4641          bra       MemoryTest_31
                    4642   MemoryTest_34:
                    4643   ; case 3:
                    4644   ; write_data = test_pattern | test_pattern << 8 | test_pattern << 16 | test_pattern << 24;
00002A96  2003      4645          move.l    D3,D0
00002A98  2203      4646          move.l    D3,D1
00002A9A  E189      4647          lsl.l     #8,D1
00002A9C  8081      4648          or.l      D1,D0
00002A9E  2203      4649          move.l    D3,D1
00002AA0  E189      4650          lsl.l     #8,D1
00002AA2  E189      4651          lsl.l     #8,D1
00002AA4  8081      4652          or.l      D1,D0
00002AA6  2203      4653          move.l    D3,D1
00002AA8  E189      4654          lsl.l     #8,D1
00002AAA  E189      4655          lsl.l     #8,D1
00002AAC  E189      4656          lsl.l     #8,D1
00002AAE  8081      4657          or.l      D1,D0
00002AB0  2A00      4658          move.l    D0,D5
                    4659   ; break;
00002AB2  600A      4660          bra.s     MemoryTest_31
                    4661   MemoryTest_30:
                    4662   ; default:
                    4663   ; printf("\r\nException - could not generate write_data\r\n");
00002AB4  4879 0000 4664          pea       @m68kde~2_157.L
00002AB8  7EF0      
00002ABA  4E92      4665          jsr       (A2)
00002ABC  584F      4666          addq.w    #4,A7
                    4667   ; break;
                    4668   MemoryTest_31:
                    4669   ; }
                    4670   ; //prompting user to enter start address
                    4671   ; while(!start_addr){
                    4672   MemoryTest_37:
00002ABE  4AAE FFF8 4673          tst.l     -8(A6)
00002AC2  6600 0086 4674          bne       MemoryTest_39
                    4675   ; printf("\r\nPlease enter a starting address from 08020000 to 08030000\r\n");
00002AC6  4879 0000 4676          pea       @m68kde~2_158.L
00002ACA  7F1E      
00002ACC  4E92      4677          jsr       (A2)
00002ACE  584F      4678          addq.w    #4,A7
                    4679   ; scanf("%x", &start_addr);
00002AD0  486E FFF8 4680          pea       -8(A6)
00002AD4  4879 0000 4681          pea       @m68kde~2_159.L
00002AD8  7F5C      
00002ADA  4E93      4682          jsr       (A3)
00002ADC  504F      4683          addq.w    #8,A7
                    4684   ; if(start_addr<0x08020000 || start_addr>0x08030000){
00002ADE  202E FFF8 4685          move.l    -8(A6),D0
00002AE2  0C80 0802 4686          cmp.l     #134348800,D0
00002AE6  0000      
00002AE8  650C      4687          blo.s     MemoryTest_42
00002AEA  202E FFF8 4688          move.l    -8(A6),D0
00002AEE  0C80 0803 4689          cmp.l     #134414336,D0
00002AF2  0000      
00002AF4  6312      4690          bls.s     MemoryTest_40
                    4691   MemoryTest_42:
                    4692   ; printf("\r\nStart address is invalid\r\n");
00002AF6  4879 0000 4693          pea       @m68kde~2_160.L
00002AFA  7F60      
00002AFC  4E92      4694          jsr       (A2)
00002AFE  584F      4695          addq.w    #4,A7
                    4696   ; start_addr = 0;
00002B00  42AE FFF8 4697          clr.l     -8(A6)
00002B04  6000 0040 4698          bra       MemoryTest_44
                    4699   MemoryTest_40:
                    4700   ; } else if(bit_num>8 && start_addr % 2 != 0){
00002B08  0C86 0000 4701          cmp.l     #8,D6
00002B0C  0008      
00002B0E  6328      4702          bls.s     MemoryTest_43
00002B10  2F2E FFF8 4703          move.l    -8(A6),-(A7)
00002B14  4878 0002 4704          pea       2
00002B18  4EB9 0000 4705          jsr       ULDIV
00002B1C  5776      
00002B1E  202F 0004 4706          move.l    4(A7),D0
00002B22  504F      4707          addq.w    #8,A7
00002B24  4A80      4708          tst.l     D0
00002B26  6710      4709          beq.s     MemoryTest_43
                    4710   ; printf("\r\nFor words or long words, please enter an even numbered address\r\n");
00002B28  4879 0000 4711          pea       @m68kde~2_161.L
00002B2C  7F7E      
00002B2E  4E92      4712          jsr       (A2)
00002B30  584F      4713          addq.w    #4,A7
                    4714   ; end_addr = 0;
00002B32  42AE FFFC 4715          clr.l     -4(A6)
00002B36  600E      4716          bra.s     MemoryTest_44
                    4717   MemoryTest_43:
                    4718   ; } else{
                    4719   ; printf("\r\nThe chosen starting address is: %x\r\n", start_addr);
00002B38  2F2E FFF8 4720          move.l    -8(A6),-(A7)
00002B3C  4879 0000 4721          pea       @m68kde~2_162.L
00002B40  7FC2      
00002B42  4E92      4722          jsr       (A2)
00002B44  504F      4723          addq.w    #8,A7
                    4724   MemoryTest_44:
00002B46  6000 FF76 4725          bra       MemoryTest_37
                    4726   MemoryTest_39:
                    4727   ; }
                    4728   ; }
                    4729   ; //prompting user to enter end address
                    4730   ; while(!end_addr){
                    4731   MemoryTest_45:
00002B4A  4AAE FFFC 4732          tst.l     -4(A6)
00002B4E  6600 0088 4733          bne       MemoryTest_47
                    4734   ; printf("\r\nPlease enter an end address from %x to 08030000\r\n", start_addr);
00002B52  2F2E FFF8 4735          move.l    -8(A6),-(A7)
00002B56  4879 0000 4736          pea       @m68kde~2_163.L
00002B5A  7FEA      
00002B5C  4E92      4737          jsr       (A2)
00002B5E  504F      4738          addq.w    #8,A7
                    4739   ; scanf("%x", &end_addr);
00002B60  486E FFFC 4740          pea       -4(A6)
00002B64  4879 0000 4741          pea       @m68kde~2_159.L
00002B68  7F5C      
00002B6A  4E93      4742          jsr       (A3)
00002B6C  504F      4743          addq.w    #8,A7
                    4744   ; if(end_addr<start_addr || end_addr>0x08030000){
00002B6E  202E FFFC 4745          move.l    -4(A6),D0
00002B72  B0AE FFF8 4746          cmp.l     -8(A6),D0
00002B76  650C      4747          blo.s     MemoryTest_50
00002B78  202E FFFC 4748          move.l    -4(A6),D0
00002B7C  0C80 0803 4749          cmp.l     #134414336,D0
00002B80  0000      
00002B82  6312      4750          bls.s     MemoryTest_48
                    4751   MemoryTest_50:
                    4752   ; printf("\r\nEnd address is invalid\r\n");
00002B84  4879 0000 4753          pea       @m68kde~2_164.L
00002B88  801E      
00002B8A  4E92      4754          jsr       (A2)
00002B8C  584F      4755          addq.w    #4,A7
                    4756   ; end_addr = 0;
00002B8E  42AE FFFC 4757          clr.l     -4(A6)
00002B92  6000 0040 4758          bra       MemoryTest_52
                    4759   MemoryTest_48:
                    4760   ; } else if(bit_num>8 && end_addr % 2 != 0){
00002B96  0C86 0000 4761          cmp.l     #8,D6
00002B9A  0008      
00002B9C  6328      4762          bls.s     MemoryTest_51
00002B9E  2F2E FFFC 4763          move.l    -4(A6),-(A7)
00002BA2  4878 0002 4764          pea       2
00002BA6  4EB9 0000 4765          jsr       ULDIV
00002BAA  5776      
00002BAC  202F 0004 4766          move.l    4(A7),D0
00002BB0  504F      4767          addq.w    #8,A7
00002BB2  4A80      4768          tst.l     D0
00002BB4  6710      4769          beq.s     MemoryTest_51
                    4770   ; printf("\r\nFor words or long words, please enter an even numbered address\r\n");
00002BB6  4879 0000 4771          pea       @m68kde~2_161.L
00002BBA  7F7E      
00002BBC  4E92      4772          jsr       (A2)
00002BBE  584F      4773          addq.w    #4,A7
                    4774   ; end_addr = 0;
00002BC0  42AE FFFC 4775          clr.l     -4(A6)
00002BC4  600E      4776          bra.s     MemoryTest_52
                    4777   MemoryTest_51:
                    4778   ; } else{
                    4779   ; printf("\r\nThe chosen ending address is: %x\r\n", end_addr);
00002BC6  2F2E FFFC 4780          move.l    -4(A6),-(A7)
00002BCA  4879 0000 4781          pea       @m68kde~2_165.L
00002BCE  803A      
00002BD0  4E92      4782          jsr       (A2)
00002BD2  504F      4783          addq.w    #8,A7
                    4784   MemoryTest_52:
00002BD4  6000 FF74 4785          bra       MemoryTest_45
                    4786   MemoryTest_47:
                    4787   ; }
                    4788   ; }
                    4789   ; //set address pointer to start pointer
                    4790   ; addr_point = start_addr;
00002BD8  242E FFF8 4791          move.l    -8(A6),D2
                    4792   ; //writing data
                    4793   ; while(addr_point<end_addr){
                    4794   MemoryTest_53:
00002BDC  B4AE FFFC 4795          cmp.l     -4(A6),D2
00002BE0  6400 0058 4796          bhs       MemoryTest_55
                    4797   ; *addr_point = write_data;
00002BE4  2042      4798          move.l    D2,A0
00002BE6  2085      4799          move.l    D5,(A0)
                    4800   ; counter++;
00002BE8  5284      4801          addq.l    #1,D4
                    4802   ; if(counter >= 2000){
00002BEA  0C84 0000 4803          cmp.l     #2000,D4
00002BEE  07D0      
00002BF0  6514      4804          blo.s     MemoryTest_56
                    4805   ; printf("\r\nWriting %x into address %x\r\n", *addr_point, addr_point);
00002BF2  2F02      4806          move.l    D2,-(A7)
00002BF4  2042      4807          move.l    D2,A0
00002BF6  2F10      4808          move.l    (A0),-(A7)
00002BF8  4879 0000 4809          pea       @m68kde~2_166.L
00002BFC  8060      
00002BFE  4E92      4810          jsr       (A2)
00002C00  DEFC 000C 4811          add.w     #12,A7
                    4812   ; counter = 1;
00002C04  7801      4813          moveq     #1,D4
                    4814   MemoryTest_56:
                    4815   ; }
                    4816   ; //need to increment address pointer according to test option chosen (bytes, words, long words)
                    4817   ; if(test_option == 1){
00002C06  202E FFF0 4818          move.l    -16(A6),D0
00002C0A  0C80 0000 4819          cmp.l     #1,D0
00002C0E  0001      
00002C10  6604      4820          bne.s     MemoryTest_58
                    4821   ; addr_point = addr_point+1;
00002C12  5882      4822          addq.l    #4,D2
00002C14  6022      4823          bra.s     MemoryTest_62
                    4824   MemoryTest_58:
                    4825   ; } else if(test_option == 2){
00002C16  202E FFF0 4826          move.l    -16(A6),D0
00002C1A  0C80 0000 4827          cmp.l     #2,D0
00002C1E  0002      
00002C20  6604      4828          bne.s     MemoryTest_60
                    4829   ; addr_point = addr_point+2;
00002C22  5082      4830          addq.l    #8,D2
00002C24  6012      4831          bra.s     MemoryTest_62
                    4832   MemoryTest_60:
                    4833   ; }else if(test_option == 3){
00002C26  202E FFF0 4834          move.l    -16(A6),D0
00002C2A  0C80 0000 4835          cmp.l     #3,D0
00002C2E  0003      
00002C30  6606      4836          bne.s     MemoryTest_62
                    4837   ; addr_point = addr_point+4;
00002C32  0682 0000 4838          add.l     #16,D2
00002C36  0010      
                    4839   MemoryTest_62:
00002C38  60A2      4840          bra       MemoryTest_53
                    4841   MemoryTest_55:
                    4842   ; }
                    4843   ; }
                    4844   ; printf("\r\nWriting completed. Will now start reading.\r\n");
00002C3A  4879 0000 4845          pea       @m68kde~2_167.L
00002C3E  8080      
00002C40  4E92      4846          jsr       (A2)
00002C42  584F      4847          addq.w    #4,A7
                    4848   ; addr_point = start_addr;
00002C44  242E FFF8 4849          move.l    -8(A6),D2
                    4850   ; counter = 2000;
00002C48  283C 0000 4851          move.l    #2000,D4
00002C4C  07D0      
                    4852   ; //reading data
                    4853   ; while(addr_point<end_addr){
                    4854   MemoryTest_64:
00002C4E  B4AE FFFC 4855          cmp.l     -4(A6),D2
00002C52  6400 007E 4856          bhs       MemoryTest_66
                    4857   ; if(*addr_point != write_data){
00002C56  2042      4858          move.l    D2,A0
00002C58  BA90      4859          cmp.l     (A0),D5
00002C5A  6722      4860          beq.s     MemoryTest_67
                    4861   ; printf("\r\nAn Error has occurred: data at address %x expected to be %x, instead is reading %x\r\n", addr_point, write_data, *addr_point);
00002C5C  2042      4862          move.l    D2,A0
00002C5E  2F10      4863          move.l    (A0),-(A7)
00002C60  2F05      4864          move.l    D5,-(A7)
00002C62  2F02      4865          move.l    D2,-(A7)
00002C64  4879 0000 4866          pea       @m68kde~2_168.L
00002C68  80B0      
00002C6A  4E92      4867          jsr       (A2)
00002C6C  DEFC 0010 4868          add.w     #16,A7
                    4869   ; printf("\r\nMemory test failed.\r\n");
00002C70  4879 0000 4870          pea       @m68kde~2_169.L
00002C74  8108      
00002C76  4E92      4871          jsr       (A2)
00002C78  584F      4872          addq.w    #4,A7
                    4873   ; break;
00002C7A  6000 0056 4874          bra       MemoryTest_66
                    4875   MemoryTest_67:
                    4876   ; }
                    4877   ; counter++;
00002C7E  5284      4878          addq.l    #1,D4
                    4879   ; if(counter >= 2000){
00002C80  0C84 0000 4880          cmp.l     #2000,D4
00002C84  07D0      
00002C86  6514      4881          blo.s     MemoryTest_69
                    4882   ; printf("\r\nReading data value %x from address %x\r\n", *addr_point, addr_point);
00002C88  2F02      4883          move.l    D2,-(A7)
00002C8A  2042      4884          move.l    D2,A0
00002C8C  2F10      4885          move.l    (A0),-(A7)
00002C8E  4879 0000 4886          pea       @m68kde~2_170.L
00002C92  8120      
00002C94  4E92      4887          jsr       (A2)
00002C96  DEFC 000C 4888          add.w     #12,A7
                    4889   ; counter = 1;
00002C9A  7801      4890          moveq     #1,D4
                    4891   MemoryTest_69:
                    4892   ; }
                    4893   ; //need to increment address pointer according to test option chosen (bytes, words, long words)
                    4894   ; if(test_option == 1){
00002C9C  202E FFF0 4895          move.l    -16(A6),D0
00002CA0  0C80 0000 4896          cmp.l     #1,D0
00002CA4  0001      
00002CA6  6604      4897          bne.s     MemoryTest_71
                    4898   ; addr_point = addr_point+1;
00002CA8  5882      4899          addq.l    #4,D2
00002CAA  6022      4900          bra.s     MemoryTest_75
                    4901   MemoryTest_71:
                    4902   ; } else if(test_option == 2){
00002CAC  202E FFF0 4903          move.l    -16(A6),D0
00002CB0  0C80 0000 4904          cmp.l     #2,D0
00002CB4  0002      
00002CB6  6604      4905          bne.s     MemoryTest_73
                    4906   ; addr_point = addr_point+2;
00002CB8  5082      4907          addq.l    #8,D2
00002CBA  6012      4908          bra.s     MemoryTest_75
                    4909   MemoryTest_73:
                    4910   ; }else if(test_option == 3){
00002CBC  202E FFF0 4911          move.l    -16(A6),D0
00002CC0  0C80 0000 4912          cmp.l     #3,D0
00002CC4  0003      
00002CC6  6606      4913          bne.s     MemoryTest_75
                    4914   ; addr_point = addr_point+4;
00002CC8  0682 0000 4915          add.l     #16,D2
00002CCC  0010      
                    4916   MemoryTest_75:
00002CCE  6000 FF7E 4917          bra       MemoryTest_64
                    4918   MemoryTest_66:
00002CD2  4CDF 0C7C 4919          movem.l   (A7)+,D2/D3/D4/D5/D6/A2/A3
00002CD6  4E5E      4920          unlk      A6
00002CD8  4E75      4921          rts
                    4922   ; }
                    4923   ; }
                    4924   ; }
                    4925   ; void main(void)
                    4926   ; {
                    4927   _main:
00002CDA  4E56 FFF4 4928          link      A6,#-12
00002CDE  48E7 3030 4929          movem.l   D2/D3/A2/A3,-(A7)
00002CE2  45F8 0A30 4930          lea       _InstallExceptionHandler.L,A2
00002CE6  47F9 0000 4931          lea       _printf.L,A3
00002CEA  5968      
                    4932   ; char c ;
                    4933   ; int i, j ;
                    4934   ; char *BugMessage = "DE1-68k Bug V1.77";
00002CEC  41F9 0000 4935          lea       @m68kde~2_171.L,A0
00002CF0  814A      
00002CF2  2608      4936          move.l    A0,D3
                    4937   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002CF4  41F9 0000 4938          lea       @m68kde~2_172.L,A0
00002CF8  815C      
00002CFA  2D48 FFFC 4939          move.l    A0,-4(A6)
                    4940   ; KillAllBreakPoints() ;
00002CFE  4EB8 1EEE 4941          jsr       _KillAllBreakPoints
                    4942   ; i = x = y = z = PortA_Count = 0;
00002D02  42B9 0803 4943          clr.l     _PortA_Count.L
00002D06  00D4      
00002D08  42B9 0803 4944          clr.l     _z.L
00002D0C  00D0      
00002D0E  42B9 0803 4945          clr.l     _y.L
00002D12  00CC      
00002D14  42B9 0803 4946          clr.l     _x.L
00002D18  00C8      
00002D1A  4282      4947          clr.l     D2
                    4948   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002D1C  42B9 0803 4949          clr.l     _GoFlag.L
00002D20  00DC      
00002D22  42B9 0803 4950          clr.l     _Trace.L
00002D26  00D8      
                    4951   ; Echo = 1 ;
00002D28  23FC 0000 4952          move.l    #1,_Echo.L
00002D2C  0001 0803 
00002D30  00E0      
                    4953   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002D32  42B9 0803 4954          clr.l     _d7.L
00002D36  0100      
00002D38  42B9 0803 4955          clr.l     _d6.L
00002D3C  00FC      
00002D3E  42B9 0803 4956          clr.l     _d5.L
00002D42  00F8      
00002D44  42B9 0803 4957          clr.l     _d4.L
00002D48  00F4      
00002D4A  42B9 0803 4958          clr.l     _d3.L
00002D4E  00F0      
00002D50  42B9 0803 4959          clr.l     _d2.L
00002D54  00EC      
00002D56  42B9 0803 4960          clr.l     _d1.L
00002D5A  00E8      
00002D5C  42B9 0803 4961          clr.l     _d0.L
00002D60  00E4      
                    4962   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002D62  42B9 0803 4963          clr.l     _a6.L
00002D66  011C      
00002D68  42B9 0803 4964          clr.l     _a5.L
00002D6C  0118      
00002D6E  42B9 0803 4965          clr.l     _a4.L
00002D72  0114      
00002D74  42B9 0803 4966          clr.l     _a3.L
00002D78  0110      
00002D7A  42B9 0803 4967          clr.l     _a2.L
00002D7E  010C      
00002D80  42B9 0803 4968          clr.l     _a1.L
00002D84  0108      
00002D86  42B9 0803 4969          clr.l     _a0.L
00002D8A  0104      
                    4970   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002D8C  23FC 0800 4971          move.l    #134217728,_PC.L
00002D90  0000 0803 
00002D94  0120      
00002D96  23FC 0804 4972          move.l    #134479872,_SSP.L
00002D9A  0000 0803 
00002D9E  0124      
00002DA0  23FC 0804 4973          move.l    #134479872,_USP.L
00002DA4  0000 0803 
00002DA8  0128      
                    4974   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002DAA  33FC 2000 4975          move.w    #8192,_SR.L
00002DAE  0803 012C 
                    4976   ; // Initialise Breakpoint variables
                    4977   ; for(i = 0; i < 8; i++)  {
00002DB2  4282      4978          clr.l     D2
                    4979   main_1:
00002DB4  0C82 0000 4980          cmp.l     #8,D2
00002DB8  0008      
00002DBA  6C00 004C 4981          bge       main_3
                    4982   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002DBE  2002      4983          move.l    D2,D0
00002DC0  E588      4984          lsl.l     #2,D0
00002DC2  41F9 0803 4985          lea       _BreakPointAddress.L,A0
00002DC6  012E      
00002DC8  42B0 0800 4986          clr.l     0(A0,D0.L)
                    4987   ; WatchPointAddress[i] = 0 ;
00002DCC  2002      4988          move.l    D2,D0
00002DCE  E588      4989          lsl.l     #2,D0
00002DD0  41F9 0803 4990          lea       _WatchPointAddress.L,A0
00002DD4  0182      
00002DD6  42B0 0800 4991          clr.l     0(A0,D0.L)
                    4992   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002DDA  2002      4993          move.l    D2,D0
00002DDC  E388      4994          lsl.l     #1,D0
00002DDE  41F9 0803 4995          lea       _BreakPointInstruction.L,A0
00002DE2  014E      
00002DE4  4270 0800 4996          clr.w     0(A0,D0.L)
                    4997   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002DE8  2002      4998          move.l    D2,D0
00002DEA  E588      4999          lsl.l     #2,D0
00002DEC  41F9 0803 5000          lea       _BreakPointSetOrCleared.L,A0
00002DF0  015E      
00002DF2  42B0 0800 5001          clr.l     0(A0,D0.L)
                    5002   ; WatchPointSetOrCleared[i] = 0;
00002DF6  2002      5003          move.l    D2,D0
00002DF8  E588      5004          lsl.l     #2,D0
00002DFA  41F9 0803 5005          lea       _WatchPointSetOrCleared.L,A0
00002DFE  01A2      
00002E00  42B0 0800 5006          clr.l     0(A0,D0.L)
00002E04  5282      5007          addq.l    #1,D2
00002E06  60AC      5008          bra       main_1
                    5009   main_3:
                    5010   ; }
                    5011   ; Init_RS232() ;     // initialise the RS232 port
00002E08  4EB8 0B12 5012          jsr       _Init_RS232
                    5013   ; Init_LCD() ;
00002E0C  4EB8 095E 5014          jsr       _Init_LCD
                    5015   ; for( i = 32; i < 48; i++)
00002E10  7420      5016          moveq     #32,D2
                    5017   main_4:
00002E12  0C82 0000 5018          cmp.l     #48,D2
00002E16  0030      
00002E18  6C0E      5019          bge.s     main_6
                    5020   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002E1A  2F02      5021          move.l    D2,-(A7)
00002E1C  4878 27C6 5022          pea       _UnhandledTrap.L
00002E20  4E92      5023          jsr       (A2)
00002E22  504F      5024          addq.w    #8,A7
00002E24  5282      5025          addq.l    #1,D2
00002E26  60EA      5026          bra       main_4
                    5027   main_6:
                    5028   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002E28  4878 002F 5029          pea       47
00002E2C  4878 24A0 5030          pea       _menu.L
00002E30  4E92      5031          jsr       (A2)
00002E32  504F      5032          addq.w    #8,A7
                    5033   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002E34  4878 0019 5034          pea       25
00002E38  4878 276C 5035          pea       _UnhandledIRQ1.L
00002E3C  4E92      5036          jsr       (A2)
00002E3E  504F      5037          addq.w    #8,A7
                    5038   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002E40  4878 001A 5039          pea       26
00002E44  4878 2778 5040          pea       _UnhandledIRQ2.L
00002E48  4E92      5041          jsr       (A2)
00002E4A  504F      5042          addq.w    #8,A7
                    5043   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002E4C  4878 001B 5044          pea       27
00002E50  4878 2784 5045          pea       _UnhandledIRQ3.L
00002E54  4E92      5046          jsr       (A2)
00002E56  504F      5047          addq.w    #8,A7
                    5048   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002E58  4878 001C 5049          pea       28
00002E5C  4878 2790 5050          pea       _UnhandledIRQ4.L
00002E60  4E92      5051          jsr       (A2)
00002E62  504F      5052          addq.w    #8,A7
                    5053   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002E64  4878 001D 5054          pea       29
00002E68  4878 279C 5055          pea       _UnhandledIRQ5.L
00002E6C  4E92      5056          jsr       (A2)
00002E6E  504F      5057          addq.w    #8,A7
                    5058   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002E70  4878 001E 5059          pea       30
00002E74  4878 27A8 5060          pea       _UnhandledIRQ6.L
00002E78  4E92      5061          jsr       (A2)
00002E7A  504F      5062          addq.w    #8,A7
                    5063   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002E7C  4878 001F 5064          pea       31
00002E80  4878 27BA 5065          pea       _UnhandledIRQ7.L
00002E84  4E92      5066          jsr       (A2)
00002E86  504F      5067          addq.w    #8,A7
                    5068   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002E88  4878 002E 5069          pea       46
00002E8C  4878 2192 5070          pea       _HandleBreakPoint.L
00002E90  4E92      5071          jsr       (A2)
00002E92  504F      5072          addq.w    #8,A7
                    5073   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002E94  4878 001D 5074          pea       29
00002E98  4878 1836 5075          pea       _DumpRegistersandPause.L
00002E9C  4E92      5076          jsr       (A2)
00002E9E  504F      5077          addq.w    #8,A7
                    5078   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002EA0  4878 0002 5079          pea       2
00002EA4  4878 27D4 5080          pea       _BusError.L
00002EA8  4E92      5081          jsr       (A2)
00002EAA  504F      5082          addq.w    #8,A7
                    5083   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002EAC  4878 0003 5084          pea       3
00002EB0  4878 27E2 5085          pea       _AddressError.L
00002EB4  4E92      5086          jsr       (A2)
00002EB6  504F      5087          addq.w    #8,A7
                    5088   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002EB8  4878 0004 5089          pea       4
00002EBC  4878 27F0 5090          pea       _IllegalInstruction.L
00002EC0  4E92      5091          jsr       (A2)
00002EC2  504F      5092          addq.w    #8,A7
                    5093   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002EC4  4878 0005 5094          pea       5
00002EC8  4878 27FE 5095          pea       _Dividebyzero.L
00002ECC  4E92      5096          jsr       (A2)
00002ECE  504F      5097          addq.w    #8,A7
                    5098   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002ED0  4878 0006 5099          pea       6
00002ED4  4878 280C 5100          pea       _Check.L
00002ED8  4E92      5101          jsr       (A2)
00002EDA  504F      5102          addq.w    #8,A7
                    5103   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002EDC  4878 0007 5104          pea       7
00002EE0  4878 281A 5105          pea       _Trapv.L
00002EE4  4E92      5106          jsr       (A2)
00002EE6  504F      5107          addq.w    #8,A7
                    5108   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002EE8  4878 0008 5109          pea       8
00002EEC  4878 2828 5110          pea       _PrivError.L
00002EF0  4E92      5111          jsr       (A2)
00002EF2  504F      5112          addq.w    #8,A7
                    5113   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002EF4  4878 000F 5114          pea       15
00002EF8  4878 2836 5115          pea       _UnitIRQ.L
00002EFC  4E92      5116          jsr       (A2)
00002EFE  504F      5117          addq.w    #8,A7
                    5118   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002F00  4878 0018 5119          pea       24
00002F04  4878 280C 5120          pea       _Check.L
00002F08  4E92      5121          jsr       (A2)
00002F0A  504F      5122          addq.w    #8,A7
                    5123   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002F0C  4EB8 0BA6 5124          jsr       _FlushKeyboard
                    5125   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002F10  4239 0040 5126          clr.b     4194314
00002F14  000A      
                    5127   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5128   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5129   main_7:
00002F16  1039 0040 5130          move.b    4194306,D0
00002F1A  0002      
00002F1C  C03C 0002 5131          and.b     #2,D0
00002F20  0C00 0002 5132          cmp.b     #2,D0
00002F24  662A      5133          bne.s     main_9
                    5134   ; LoadFromFlashChip();
00002F26  4EB8 12DA 5135          jsr       _LoadFromFlashChip
                    5136   ; printf("\r\nRunning.....") ;
00002F2A  4879 0000 5137          pea       @m68kde~2_173.L
00002F2E  817A      
00002F30  4E93      5138          jsr       (A3)
00002F32  584F      5139          addq.w    #4,A7
                    5140   ; Oline1("Running.....") ;
00002F34  4879 0000 5141          pea       @m68kde~2_174.L
00002F38  818A      
00002F3A  4EB8 0A02 5142          jsr       _Oline1
00002F3E  584F      5143          addq.w    #4,A7
                    5144   ; GoFlag = 1;
00002F40  23FC 0000 5145          move.l    #1,_GoFlag.L
00002F44  0001 0803 
00002F48  00DC      
                    5146   ; go() ;
00002F4A  4EB8 08B8 5147          jsr       _go
00002F4E  60C6      5148          bra       main_7
                    5149   main_9:
                    5150   ; }
                    5151   ; // otherwise start the debug monitor
                    5152   ; Oline0(BugMessage) ;
00002F50  2F03      5153          move.l    D3,-(A7)
00002F52  4EB8 09D4 5154          jsr       _Oline0
00002F56  584F      5155          addq.w    #4,A7
                    5156   ; Oline1("By: PJ Davies") ;
00002F58  4879 0000 5157          pea       @m68kde~2_175.L
00002F5C  8198      
00002F5E  4EB8 0A02 5158          jsr       _Oline1
00002F62  584F      5159          addq.w    #4,A7
                    5160   ; printf("\r\n%s", BugMessage) ;
00002F64  2F03      5161          move.l    D3,-(A7)
00002F66  4879 0000 5162          pea       @m68kde~2_176.L
00002F6A  81A6      
00002F6C  4E93      5163          jsr       (A3)
00002F6E  504F      5164          addq.w    #8,A7
                    5165   ; printf("\r\n%s", CopyrightMessage) ;
00002F70  2F2E FFFC 5166          move.l    -4(A6),-(A7)
00002F74  4879 0000 5167          pea       @m68kde~2_176.L
00002F78  81A6      
00002F7A  4E93      5168          jsr       (A3)
00002F7C  504F      5169          addq.w    #8,A7
                    5170   ; menu();
00002F7E  4EB8 24A0 5171          jsr       _menu
00002F82  4CDF 0C0C 5172          movem.l   (A7)+,D2/D3/A2/A3
00002F86  4E5E      5173          unlk      A6
00002F88  4E75      5174          rts
                    5175   ; }
                    5176   ; void FormatInstruction(void)    // for disassembly
                    5177   ; {
                    5178   _FormatInstruction:
00002F8A  4E56 FEC0 5179          link      A6,#-320
00002F8E  48E7 3C20 5180          movem.l   D2/D3/D4/D5/A2,-(A7)
00002F92  45EE FEC0 5181          lea       -320(A6),A2
                    5182   ; short i, ilen = 0 ;
00002F96  4245      5183          clr.w     D5
                    5184   ; char *iptr = Instruction ;
00002F98  41F9 0803 5185          lea       _Instruction.L,A0
00002F9C  04E2      
00002F9E  2608      5186          move.l    A0,D3
                    5187   ; char *Formatted[80], *fptr ;
                    5188   ; fptr = Formatted ;
00002FA0  280A      5189          move.l    A2,D4
                    5190   ; for(i = 0; i < (short)(80); i ++)
00002FA2  4242      5191          clr.w     D2
                    5192   FormatInstruction_1:
00002FA4  0C42 0050 5193          cmp.w     #80,D2
00002FA8  6C0E      5194          bge.s     FormatInstruction_3
                    5195   ; Formatted[i] = (char)(0);          // set formatted string to null
00002FAA  48C2      5196          ext.l     D2
00002FAC  2002      5197          move.l    D2,D0
00002FAE  E588      5198          lsl.l     #2,D0
00002FB0  42B2 0800 5199          clr.l     0(A2,D0.L)
00002FB4  5242      5200          addq.w    #1,D2
00002FB6  60EC      5201          bra       FormatInstruction_1
                    5202   FormatInstruction_3:
                    5203   ; while((*iptr != ' '))   {   // while ot a space char
                    5204   FormatInstruction_4:
00002FB8  2043      5205          move.l    D3,A0
00002FBA  1010      5206          move.b    (A0),D0
00002FBC  0C00 0020 5207          cmp.b     #32,D0
00002FC0  6718      5208          beq.s     FormatInstruction_6
                    5209   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
00002FC2  2043      5210          move.l    D3,A0
00002FC4  5283      5211          addq.l    #1,D3
00002FC6  2244      5212          move.l    D4,A1
00002FC8  5284      5213          addq.l    #1,D4
00002FCA  1290      5214          move.b    (A0),(A1)
                    5215   ; ilen ++ ;               // count length of string as we go
00002FCC  5245      5216          addq.w    #1,D5
                    5217   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
00002FCE  2043      5218          move.l    D3,A0
00002FD0  1010      5219          move.b    (A0),D0
00002FD2  6604      5220          bne.s     FormatInstruction_7
                    5221   ; return ;
00002FD4  6000 003E 5222          bra       FormatInstruction_9
                    5223   FormatInstruction_7:
00002FD8  60DE      5224          bra       FormatInstruction_4
                    5225   FormatInstruction_6:
                    5226   ; }
                    5227   ; // must still be more text to process otherwise we would have returned above if got to the end
                    5228   ; for(i = 0; i < ((short)(8) - ilen); i++)
00002FDA  4242      5229          clr.w     D2
                    5230   FormatInstruction_10:
00002FDC  7008      5231          moveq     #8,D0
00002FDE  4880      5232          ext.w     D0
00002FE0  9045      5233          sub.w     D5,D0
00002FE2  B440      5234          cmp.w     D0,D2
00002FE4  6C0C      5235          bge.s     FormatInstruction_12
                    5236   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
00002FE6  2044      5237          move.l    D4,A0
00002FE8  5284      5238          addq.l    #1,D4
00002FEA  10BC 0020 5239          move.b    #32,(A0)
00002FEE  5242      5240          addq.w    #1,D2
00002FF0  60EA      5241          bra       FormatInstruction_10
                    5242   FormatInstruction_12:
                    5243   ; // now skip over any spaces in original unformatted string before copying the rest
                    5244   ; while((*iptr == ' '))
                    5245   FormatInstruction_13:
00002FF2  2043      5246          move.l    D3,A0
00002FF4  1010      5247          move.b    (A0),D0
00002FF6  0C00 0020 5248          cmp.b     #32,D0
00002FFA  6604      5249          bne.s     FormatInstruction_15
                    5250   ; iptr++ ;
00002FFC  5283      5251          addq.l    #1,D3
00002FFE  60F2      5252          bra       FormatInstruction_13
                    5253   FormatInstruction_15:
                    5254   ; strcat(fptr,iptr) ;
00003000  2F03      5255          move.l    D3,-(A7)
00003002  2F04      5256          move.l    D4,-(A7)
00003004  4EB9 0000 5257          jsr       _strcat
00003008  5906      
0000300A  504F      5258          addq.w    #8,A7
                    5259   ; strcpyInstruction(Formatted) ;
0000300C  2F0A      5260          move.l    A2,-(A7)
0000300E  4EB8 0CE6 5261          jsr       _strcpyInstruction
00003012  584F      5262          addq.w    #4,A7
                    5263   FormatInstruction_9:
00003014  4CDF 043C 5264          movem.l   (A7)+,D2/D3/D4/D5/A2
00003018  4E5E      5265          unlk      A6
0000301A  4E75      5266          rts
                    5267   ; }
                    5268   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    5269   ; {
                    5270   _Decode2BitOperandSize:
0000301C  4E56 0000 5271          link      A6,#0
00003020  48E7 3020 5272          movem.l   D2/D3/A2,-(A7)
00003024  362E 000A 5273          move.w    10(A6),D3
00003028  C6BC 0000 5274          and.l     #65535,D3
0000302C  FFFF      
0000302E  45F8 0CCC 5275          lea       _strcatInstruction.L,A2
                    5276   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    5277   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
00003032  3003      5278          move.w    D3,D0
00003034  C07C 00C0 5279          and.w     #192,D0
00003038  EC48      5280          lsr.w     #6,D0
0000303A  3600      5281          move.w    D0,D3
                    5282   ; if(OpCode == (unsigned short int)(0))   {
0000303C  4A43      5283          tst.w     D3
0000303E  660E      5284          bne.s     Decode2BitOperandSize_1
                    5285   ; strcatInstruction(".B ") ;
00003040  4879 0000 5286          pea       @m68kde~2_177.L
00003044  81AC      
00003046  4E92      5287          jsr       (A2)
00003048  584F      5288          addq.w    #4,A7
                    5289   ; DataSize = 1 ;
0000304A  7401      5290          moveq     #1,D2
0000304C  6020      5291          bra.s     Decode2BitOperandSize_4
                    5292   Decode2BitOperandSize_1:
                    5293   ; }
                    5294   ; else if(OpCode == (unsigned short int)(1)) {
0000304E  0C43 0001 5295          cmp.w     #1,D3
00003052  660E      5296          bne.s     Decode2BitOperandSize_3
                    5297   ; strcatInstruction(".W ") ;
00003054  4879 0000 5298          pea       @m68kde~2_178.L
00003058  81B0      
0000305A  4E92      5299          jsr       (A2)
0000305C  584F      5300          addq.w    #4,A7
                    5301   ; DataSize = 1 ;
0000305E  7401      5302          moveq     #1,D2
00003060  600C      5303          bra.s     Decode2BitOperandSize_4
                    5304   Decode2BitOperandSize_3:
                    5305   ; }
                    5306   ; else {
                    5307   ; strcatInstruction(".L ") ;
00003062  4879 0000 5308          pea       @m68kde~2_179.L
00003066  81B4      
00003068  4E92      5309          jsr       (A2)
0000306A  584F      5310          addq.w    #4,A7
                    5311   ; DataSize = 2 ;
0000306C  7402      5312          moveq     #2,D2
                    5313   Decode2BitOperandSize_4:
                    5314   ; }
                    5315   ; return DataSize;
0000306E  3002      5316          move.w    D2,D0
00003070  4CDF 040C 5317          movem.l   (A7)+,D2/D3/A2
00003074  4E5E      5318          unlk      A6
00003076  4E75      5319          rts
                    5320   ; }
                    5321   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    5322   ; {
                    5323   _Decode3BitDataRegister:
00003078  4E56 FFFC 5324          link      A6,#-4
0000307C  2F0A      5325          move.l    A2,-(A7)
0000307E  45EE FFFC 5326          lea       -4(A6),A2
                    5327   ; unsigned char RegNumber[3] ;
                    5328   ; RegNumber[0] = 'D' ;
00003082  14BC 0044 5329          move.b    #68,(A2)
                    5330   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00003086  7030      5331          moveq     #48,D0
00003088  322E 000A 5332          move.w    10(A6),D1
0000308C  C27C 0E00 5333          and.w     #3584,D1
00003090  E049      5334          lsr.w     #8,D1
00003092  E249      5335          lsr.w     #1,D1
00003094  D001      5336          add.b     D1,D0
00003096  1540 0001 5337          move.b    D0,1(A2)
                    5338   ; RegNumber[2] = 0 ;
0000309A  422A 0002 5339          clr.b     2(A2)
                    5340   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
0000309E  2F0A      5341          move.l    A2,-(A7)
000030A0  4EB8 0CCC 5342          jsr       _strcatInstruction
000030A4  584F      5343          addq.w    #4,A7
000030A6  245F      5344          move.l    (A7)+,A2
000030A8  4E5E      5345          unlk      A6
000030AA  4E75      5346          rts
                    5347   ; }
                    5348   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    5349   ; {
                    5350   _Decode3BitAddressRegister:
000030AC  4E56 FFFC 5351          link      A6,#-4
000030B0  2F0A      5352          move.l    A2,-(A7)
000030B2  45EE FFFC 5353          lea       -4(A6),A2
                    5354   ; unsigned char RegNumber[3];
                    5355   ; RegNumber[0] = 'A' ;
000030B6  14BC 0041 5356          move.b    #65,(A2)
                    5357   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
000030BA  7030      5358          moveq     #48,D0
000030BC  322E 000A 5359          move.w    10(A6),D1
000030C0  D001      5360          add.b     D1,D0
000030C2  1540 0001 5361          move.b    D0,1(A2)
                    5362   ; RegNumber[2] = 0 ;
000030C6  422A 0002 5363          clr.b     2(A2)
                    5364   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
000030CA  2F0A      5365          move.l    A2,-(A7)
000030CC  4EB8 0CCC 5366          jsr       _strcatInstruction
000030D0  584F      5367          addq.w    #4,A7
000030D2  245F      5368          move.l    (A7)+,A2
000030D4  4E5E      5369          unlk      A6
000030D6  4E75      5370          rts
                    5371   ; }
                    5372   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5373   ; // Special function is used to print 8,16, 32 bit operands after move #
                    5374   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5375   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    5376   ; {
                    5377   _DecodeBWLDataAfterOpCodeForMove:
000030D8  4E56 0000 5378          link      A6,#0
000030DC  48E7 3030 5379          movem.l   D2/D3/A2/A3,-(A7)
000030E0  242E 0008 5380          move.l    8(A6),D2
000030E4  45F9 0803 5381          lea       _TempString.L,A2
000030E8  0546      
000030EA  47F9 0000 5382          lea       _sprintf.L,A3
000030EE  58D4      
                    5383   ; unsigned char OperandSize ;
                    5384   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
000030F0  2042      5385          move.l    D2,A0
000030F2  3010      5386          move.w    (A0),D0
000030F4  E048      5387          lsr.w     #8,D0
000030F6  E848      5388          lsr.w     #4,D0
000030F8  C07C 0003 5389          and.w     #3,D0
000030FC  1600      5390          move.b    D0,D3
                    5391   ; InstructionSize += 1;
000030FE  52B9 0803 5392          addq.l    #1,_InstructionSize.L
00003102  017E      
                    5393   ; if(OperandSize == (char)(1))                // #byte value
00003104  0C03 0001 5394          cmp.b     #1,D3
00003108  6620      5395          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    5396   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
0000310A  2042      5397          move.l    D2,A0
0000310C  3228 0002 5398          move.w    2(A0),D1
00003110  C2BC 0000 5399          and.l     #65535,D1
00003114  FFFF      
00003116  2F01      5400          move.l    D1,-(A7)
00003118  4879 0000 5401          pea       @m68kde~2_180.L
0000311C  81B8      
0000311E  2F0A      5402          move.l    A2,-(A7)
00003120  4E93      5403          jsr       (A3)
00003122  DEFC 000C 5404          add.w     #12,A7
00003126  6000 0068 5405          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5406   DecodeBWLDataAfterOpCodeForMove_1:
                    5407   ; else if(OperandSize == (char)(3))          // #word value
0000312A  0C03 0003 5408          cmp.b     #3,D3
0000312E  6620      5409          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    5410   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003130  2042      5411          move.l    D2,A0
00003132  3228 0002 5412          move.w    2(A0),D1
00003136  C2BC 0000 5413          and.l     #65535,D1
0000313A  FFFF      
0000313C  2F01      5414          move.l    D1,-(A7)
0000313E  4879 0000 5415          pea       @m68kde~2_180.L
00003142  81B8      
00003144  2F0A      5416          move.l    A2,-(A7)
00003146  4E93      5417          jsr       (A3)
00003148  DEFC 000C 5418          add.w     #12,A7
0000314C  6000 0042 5419          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5420   DecodeBWLDataAfterOpCodeForMove_3:
                    5421   ; else if(OperandSize == (char)(2)) {                                       // long value
00003150  0C03 0002 5422          cmp.b     #2,D3
00003154  6600 003A 5423          bne       DecodeBWLDataAfterOpCodeForMove_5
                    5424   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
00003158  2042      5425          move.l    D2,A0
0000315A  3228 0002 5426          move.w    2(A0),D1
0000315E  C2BC 0000 5427          and.l     #65535,D1
00003162  FFFF      
00003164  E189      5428          lsl.l     #8,D1
00003166  E189      5429          lsl.l     #8,D1
00003168  2042      5430          move.l    D2,A0
0000316A  2F00      5431          move.l    D0,-(A7)
0000316C  3028 0004 5432          move.w    4(A0),D0
00003170  C0BC 0000 5433          and.l     #65535,D0
00003174  FFFF      
00003176  8280      5434          or.l      D0,D1
00003178  201F      5435          move.l    (A7)+,D0
0000317A  2F01      5436          move.l    D1,-(A7)
0000317C  4879 0000 5437          pea       @m68kde~2_180.L
00003180  81B8      
00003182  2F0A      5438          move.l    A2,-(A7)
00003184  4E93      5439          jsr       (A3)
00003186  DEFC 000C 5440          add.w     #12,A7
                    5441   ; InstructionSize += 1;
0000318A  52B9 0803 5442          addq.l    #1,_InstructionSize.L
0000318E  017E      
                    5443   DecodeBWLDataAfterOpCodeForMove_5:
                    5444   ; }
                    5445   ; strcatInstruction(TempString) ;
00003190  2F0A      5446          move.l    A2,-(A7)
00003192  4EB8 0CCC 5447          jsr       _strcatInstruction
00003196  584F      5448          addq.w    #4,A7
00003198  4CDF 0C0C 5449          movem.l   (A7)+,D2/D3/A2/A3
0000319C  4E5E      5450          unlk      A6
0000319E  4E75      5451          rts
                    5452   ; }
                    5453   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5454   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    5455   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5456   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    5457   ; {
                    5458   _DecodeBWLDataAfterOpCode:
000031A0  4E56 0000 5459          link      A6,#0
000031A4  48E7 3038 5460          movem.l   D2/D3/A2/A3/A4,-(A7)
000031A8  262E 0008 5461          move.l    8(A6),D3
000031AC  45F9 0803 5462          lea       _TempString.L,A2
000031B0  0546      
000031B2  47F9 0000 5463          lea       _sprintf.L,A3
000031B6  58D4      
000031B8  49F9 0803 5464          lea       _InstructionSize.L,A4
000031BC  017E      
                    5465   ; unsigned char OperandSize ;
                    5466   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
000031BE  2043      5467          move.l    D3,A0
000031C0  3010      5468          move.w    (A0),D0
000031C2  C07C 01C0 5469          and.w     #448,D0
000031C6  EC48      5470          lsr.w     #6,D0
000031C8  1400      5471          move.b    D0,D2
                    5472   ; InstructionSize += 1;
000031CA  5294      5473          addq.l    #1,(A4)
                    5474   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
000031CC  4A02      5475          tst.b     D2
000031CE  6706      5476          beq.s     DecodeBWLDataAfterOpCode_3
000031D0  0C02 0004 5477          cmp.b     #4,D2
000031D4  6620      5478          bne.s     DecodeBWLDataAfterOpCode_1
                    5479   DecodeBWLDataAfterOpCode_3:
                    5480   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
000031D6  2043      5481          move.l    D3,A0
000031D8  3228 0002 5482          move.w    2(A0),D1
000031DC  C2BC 0000 5483          and.l     #65535,D1
000031E0  FFFF      
000031E2  2F01      5484          move.l    D1,-(A7)
000031E4  4879 0000 5485          pea       @m68kde~2_180.L
000031E8  81B8      
000031EA  2F0A      5486          move.l    A2,-(A7)
000031EC  4E93      5487          jsr       (A3)
000031EE  DEFC 000C 5488          add.w     #12,A7
000031F2  6000 007C 5489          bra       DecodeBWLDataAfterOpCode_7
                    5490   DecodeBWLDataAfterOpCode_1:
                    5491   ; // #word value 7 is used by divs.w instruction (not divu)
                    5492   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    5493   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    5494   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
000031F6  0C02 0001 5495          cmp.b     #1,D2
000031FA  670C      5496          beq.s     DecodeBWLDataAfterOpCode_6
000031FC  0C02 0005 5497          cmp.b     #5,D2
00003200  6706      5498          beq.s     DecodeBWLDataAfterOpCode_6
00003202  0C02 0003 5499          cmp.b     #3,D2
00003206  6620      5500          bne.s     DecodeBWLDataAfterOpCode_4
                    5501   DecodeBWLDataAfterOpCode_6:
                    5502   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003208  2043      5503          move.l    D3,A0
0000320A  3228 0002 5504          move.w    2(A0),D1
0000320E  C2BC 0000 5505          and.l     #65535,D1
00003212  FFFF      
00003214  2F01      5506          move.l    D1,-(A7)
00003216  4879 0000 5507          pea       @m68kde~2_180.L
0000321A  81B8      
0000321C  2F0A      5508          move.l    A2,-(A7)
0000321E  4E93      5509          jsr       (A3)
00003220  DEFC 000C 5510          add.w     #12,A7
00003224  6000 004A 5511          bra       DecodeBWLDataAfterOpCode_7
                    5512   DecodeBWLDataAfterOpCode_4:
                    5513   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
00003228  0C02 0002 5514          cmp.b     #2,D2
0000322C  670E      5515          beq.s     DecodeBWLDataAfterOpCode_9
0000322E  0C02 0006 5516          cmp.b     #6,D2
00003232  6708      5517          beq.s     DecodeBWLDataAfterOpCode_9
00003234  0C02 0007 5518          cmp.b     #7,D2
00003238  6600 0036 5519          bne       DecodeBWLDataAfterOpCode_7
                    5520   DecodeBWLDataAfterOpCode_9:
                    5521   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
0000323C  2043      5522          move.l    D3,A0
0000323E  3228 0002 5523          move.w    2(A0),D1
00003242  C2BC 0000 5524          and.l     #65535,D1
00003246  FFFF      
00003248  E189      5525          lsl.l     #8,D1
0000324A  E189      5526          lsl.l     #8,D1
0000324C  2043      5527          move.l    D3,A0
0000324E  2F00      5528          move.l    D0,-(A7)
00003250  3028 0004 5529          move.w    4(A0),D0
00003254  C0BC 0000 5530          and.l     #65535,D0
00003258  FFFF      
0000325A  8280      5531          or.l      D0,D1
0000325C  201F      5532          move.l    (A7)+,D0
0000325E  2F01      5533          move.l    D1,-(A7)
00003260  4879 0000 5534          pea       @m68kde~2_180.L
00003264  81B8      
00003266  2F0A      5535          move.l    A2,-(A7)
00003268  4E93      5536          jsr       (A3)
0000326A  DEFC 000C 5537          add.w     #12,A7
                    5538   ; InstructionSize += 1;
0000326E  5294      5539          addq.l    #1,(A4)
                    5540   DecodeBWLDataAfterOpCode_7:
                    5541   ; }
                    5542   ; // special case for divs - bugger!!!
                    5543   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
00003270  2043      5544          move.l    D3,A0
00003272  3010      5545          move.w    (A0),D0
00003274  C07C F1C0 5546          and.w     #61888,D0
00003278  0C40 81C0 5547          cmp.w     #33216,D0
0000327C  6622      5548          bne.s     DecodeBWLDataAfterOpCode_10
                    5549   ; {
                    5550   ; InstructionSize = 2 ;
0000327E  28BC 0000 5551          move.l    #2,(A4)
00003282  0002      
                    5552   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003284  2043      5553          move.l    D3,A0
00003286  3228 0002 5554          move.w    2(A0),D1
0000328A  C2BC 0000 5555          and.l     #65535,D1
0000328E  FFFF      
00003290  2F01      5556          move.l    D1,-(A7)
00003292  4879 0000 5557          pea       @m68kde~2_180.L
00003296  81B8      
00003298  2F0A      5558          move.l    A2,-(A7)
0000329A  4E93      5559          jsr       (A3)
0000329C  DEFC 000C 5560          add.w     #12,A7
                    5561   DecodeBWLDataAfterOpCode_10:
                    5562   ; }
                    5563   ; strcatInstruction(TempString) ;
000032A0  2F0A      5564          move.l    A2,-(A7)
000032A2  4EB8 0CCC 5565          jsr       _strcatInstruction
000032A6  584F      5566          addq.w    #4,A7
000032A8  4CDF 1C0C 5567          movem.l   (A7)+,D2/D3/A2/A3/A4
000032AC  4E5E      5568          unlk      A6
000032AE  4E75      5569          rts
                    5570   ; }
                    5571   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5572   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5573   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5574   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5575   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5576   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5577   ; {
                    5578   _Decode6BitEA:
000032B0  4E56 FFF4 5579          link      A6,#-12
000032B4  48E7 3F3C 5580          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000032B8  45F8 0CCC 5581          lea       _strcatInstruction.L,A2
000032BC  47F9 0803 5582          lea       _TempString.L,A3
000032C0  0546      
000032C2  282E 0008 5583          move.l    8(A6),D4
000032C6  49F9 0000 5584          lea       _sprintf.L,A4
000032CA  58D4      
000032CC  4BF9 0803 5585          lea       _InstructionSize.L,A5
000032D0  017E      
000032D2  3C2E 0012 5586          move.w    18(A6),D6
000032D6  CCBC 0000 5587          and.l     #65535,D6
000032DA  FFFF      
                    5588   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5589   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5590   ; unsigned char RegNumber[3];
                    5591   ; signed char offset ;
                    5592   ; unsigned short int Xn, XnSize ;
                    5593   ; if(EAChoice == 0)   {   // if EA in bits 5-0
000032DC  202E 000C 5594          move.l    12(A6),D0
000032E0  6620      5595          bne.s     Decode6BitEA_1
                    5596   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
000032E2  2044      5597          move.l    D4,A0
000032E4  3010      5598          move.w    (A0),D0
000032E6  E648      5599          lsr.w     #3,D0
000032E8  C07C 00FF 5600          and.w     #255,D0
000032EC  C07C 0007 5601          and.w     #7,D0
000032F0  1A00      5602          move.b    D0,D5
                    5603   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
000032F2  2044      5604          move.l    D4,A0
000032F4  3010      5605          move.w    (A0),D0
000032F6  C07C 00FF 5606          and.w     #255,D0
000032FA  C07C 0007 5607          and.w     #7,D0
000032FE  1600      5608          move.b    D0,D3
00003300  6022      5609          bra.s     Decode6BitEA_2
                    5610   Decode6BitEA_1:
                    5611   ; }
                    5612   ; else    {               // else EA in bits 11-6
                    5613   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
00003302  2044      5614          move.l    D4,A0
00003304  3010      5615          move.w    (A0),D0
00003306  EC48      5616          lsr.w     #6,D0
00003308  C07C 00FF 5617          and.w     #255,D0
0000330C  C07C 0007 5618          and.w     #7,D0
00003310  1A00      5619          move.b    D0,D5
                    5620   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
00003312  2044      5621          move.l    D4,A0
00003314  3010      5622          move.w    (A0),D0
00003316  E048      5623          lsr.w     #8,D0
00003318  E248      5624          lsr.w     #1,D0
0000331A  C07C 00FF 5625          and.w     #255,D0
0000331E  C07C 0007 5626          and.w     #7,D0
00003322  1600      5627          move.b    D0,D3
                    5628   Decode6BitEA_2:
                    5629   ; }
                    5630   ; if(EAChoice == 0)    {
00003324  202E 000C 5631          move.l    12(A6),D0
00003328  6600 0034 5632          bne       Decode6BitEA_3
                    5633   ; ExWord1 = OpCode[1+DataSize] ;
0000332C  2044      5634          move.l    D4,A0
0000332E  7001      5635          moveq     #1,D0
00003330  4880      5636          ext.w     D0
00003332  48C0      5637          ext.l     D0
00003334  CCBC 0000 5638          and.l     #65535,D6
00003338  FFFF      
0000333A  D086      5639          add.l     D6,D0
0000333C  E388      5640          lsl.l     #1,D0
0000333E  3430 0800 5641          move.w    0(A0,D0.L),D2
                    5642   ; ExWord2 = OpCode[2+DataSize] ;
00003342  2044      5643          move.l    D4,A0
00003344  7002      5644          moveq     #2,D0
00003346  4880      5645          ext.w     D0
00003348  48C0      5646          ext.l     D0
0000334A  CCBC 0000 5647          and.l     #65535,D6
0000334E  FFFF      
00003350  D086      5648          add.l     D6,D0
00003352  E388      5649          lsl.l     #1,D0
00003354  3D70 0800 5650          move.w    0(A0,D0.L),-8(A6)
00003358  FFF8      
0000335A  6000 007E 5651          bra       Decode6BitEA_7
                    5652   Decode6BitEA_3:
                    5653   ; }
                    5654   ; else if(EAChoice == 1)   {
0000335E  202E 000C 5655          move.l    12(A6),D0
00003362  0C80 0000 5656          cmp.l     #1,D0
00003366  0001      
00003368  6600 0034 5657          bne       Decode6BitEA_5
                    5658   ; ExWord1 = OpCode[3+DataSize] ;
0000336C  2044      5659          move.l    D4,A0
0000336E  7003      5660          moveq     #3,D0
00003370  4880      5661          ext.w     D0
00003372  48C0      5662          ext.l     D0
00003374  CCBC 0000 5663          and.l     #65535,D6
00003378  FFFF      
0000337A  D086      5664          add.l     D6,D0
0000337C  E388      5665          lsl.l     #1,D0
0000337E  3430 0800 5666          move.w    0(A0,D0.L),D2
                    5667   ; ExWord2 = OpCode[4+DataSize] ;
00003382  2044      5668          move.l    D4,A0
00003384  7004      5669          moveq     #4,D0
00003386  4880      5670          ext.w     D0
00003388  48C0      5671          ext.l     D0
0000338A  CCBC 0000 5672          and.l     #65535,D6
0000338E  FFFF      
00003390  D086      5673          add.l     D6,D0
00003392  E388      5674          lsl.l     #1,D0
00003394  3D70 0800 5675          move.w    0(A0,D0.L),-8(A6)
00003398  FFF8      
0000339A  6000 003E 5676          bra       Decode6BitEA_7
                    5677   Decode6BitEA_5:
                    5678   ; }
                    5679   ; else if(EAChoice == 2)   {  // for move instruction
0000339E  202E 000C 5680          move.l    12(A6),D0
000033A2  0C80 0000 5681          cmp.l     #2,D0
000033A6  0002      
000033A8  6600 0030 5682          bne       Decode6BitEA_7
                    5683   ; ExWord1 = OpCode[1+DataSize] ;
000033AC  2044      5684          move.l    D4,A0
000033AE  7001      5685          moveq     #1,D0
000033B0  4880      5686          ext.w     D0
000033B2  48C0      5687          ext.l     D0
000033B4  CCBC 0000 5688          and.l     #65535,D6
000033B8  FFFF      
000033BA  D086      5689          add.l     D6,D0
000033BC  E388      5690          lsl.l     #1,D0
000033BE  3430 0800 5691          move.w    0(A0,D0.L),D2
                    5692   ; ExWord2 = OpCode[2+DataSize] ;
000033C2  2044      5693          move.l    D4,A0
000033C4  7002      5694          moveq     #2,D0
000033C6  4880      5695          ext.w     D0
000033C8  48C0      5696          ext.l     D0
000033CA  CCBC 0000 5697          and.l     #65535,D6
000033CE  FFFF      
000033D0  D086      5698          add.l     D6,D0
000033D2  E388      5699          lsl.l     #1,D0
000033D4  3D70 0800 5700          move.w    0(A0,D0.L),-8(A6)
000033D8  FFF8      
                    5701   Decode6BitEA_7:
                    5702   ; }
                    5703   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
000033DA  4A05      5704          tst.b     D5
000033DC  661E      5705          bne.s     Decode6BitEA_9
                    5706   ; RegNumber[0] = 'D' ;
000033DE  1D7C 0044 5707          move.b    #68,-6+0(A6)
000033E2  FFFA      
                    5708   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
000033E4  7030      5709          moveq     #48,D0
000033E6  D003      5710          add.b     D3,D0
000033E8  1D40 FFFB 5711          move.b    D0,-6+1(A6)
                    5712   ; RegNumber[2] = 0 ;
000033EC  422E FFFC 5713          clr.b     -6+2(A6)
                    5714   ; strcatInstruction(RegNumber) ;
000033F0  486E FFFA 5715          pea       -6(A6)
000033F4  4E92      5716          jsr       (A2)
000033F6  584F      5717          addq.w    #4,A7
000033F8  6000 02D6 5718          bra       Decode6BitEA_44
                    5719   Decode6BitEA_9:
                    5720   ; }
                    5721   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
000033FC  0C05 0001 5722          cmp.b     #1,D5
00003400  6616      5723          bne.s     Decode6BitEA_11
                    5724   ; Decode3BitAddressRegister(OperandRegister) ;
00003402  C67C 00FF 5725          and.w     #255,D3
00003406  C6BC 0000 5726          and.l     #65535,D3
0000340A  FFFF      
0000340C  2F03      5727          move.l    D3,-(A7)
0000340E  4EB8 30AC 5728          jsr       _Decode3BitAddressRegister
00003412  584F      5729          addq.w    #4,A7
00003414  6000 02BA 5730          bra       Decode6BitEA_44
                    5731   Decode6BitEA_11:
                    5732   ; }
                    5733   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
00003418  0C05 0002 5734          cmp.b     #2,D5
0000341C  662A      5735          bne.s     Decode6BitEA_13
                    5736   ; strcatInstruction("(") ;
0000341E  4879 0000 5737          pea       @m68kde~2_181.L
00003422  81BE      
00003424  4E92      5738          jsr       (A2)
00003426  584F      5739          addq.w    #4,A7
                    5740   ; Decode3BitAddressRegister(OperandRegister) ;
00003428  C67C 00FF 5741          and.w     #255,D3
0000342C  C6BC 0000 5742          and.l     #65535,D3
00003430  FFFF      
00003432  2F03      5743          move.l    D3,-(A7)
00003434  4EB8 30AC 5744          jsr       _Decode3BitAddressRegister
00003438  584F      5745          addq.w    #4,A7
                    5746   ; strcatInstruction(")") ;
0000343A  4879 0000 5747          pea       @m68kde~2_182.L
0000343E  81C0      
00003440  4E92      5748          jsr       (A2)
00003442  584F      5749          addq.w    #4,A7
00003444  6000 028A 5750          bra       Decode6BitEA_44
                    5751   Decode6BitEA_13:
                    5752   ; }
                    5753   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
00003448  0C05 0003 5754          cmp.b     #3,D5
0000344C  662A      5755          bne.s     Decode6BitEA_15
                    5756   ; strcatInstruction("(") ;
0000344E  4879 0000 5757          pea       @m68kde~2_181.L
00003452  81BE      
00003454  4E92      5758          jsr       (A2)
00003456  584F      5759          addq.w    #4,A7
                    5760   ; Decode3BitAddressRegister(OperandRegister) ;
00003458  C67C 00FF 5761          and.w     #255,D3
0000345C  C6BC 0000 5762          and.l     #65535,D3
00003460  FFFF      
00003462  2F03      5763          move.l    D3,-(A7)
00003464  4EB8 30AC 5764          jsr       _Decode3BitAddressRegister
00003468  584F      5765          addq.w    #4,A7
                    5766   ; strcatInstruction(")+") ;
0000346A  4879 0000 5767          pea       @m68kde~2_183.L
0000346E  81C2      
00003470  4E92      5768          jsr       (A2)
00003472  584F      5769          addq.w    #4,A7
00003474  6000 025A 5770          bra       Decode6BitEA_44
                    5771   Decode6BitEA_15:
                    5772   ; }
                    5773   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
00003478  0C05 0004 5774          cmp.b     #4,D5
0000347C  662A      5775          bne.s     Decode6BitEA_17
                    5776   ; strcatInstruction("-(") ;
0000347E  4879 0000 5777          pea       @m68kde~2_184.L
00003482  81C6      
00003484  4E92      5778          jsr       (A2)
00003486  584F      5779          addq.w    #4,A7
                    5780   ; Decode3BitAddressRegister(OperandRegister) ;
00003488  C67C 00FF 5781          and.w     #255,D3
0000348C  C6BC 0000 5782          and.l     #65535,D3
00003490  FFFF      
00003492  2F03      5783          move.l    D3,-(A7)
00003494  4EB8 30AC 5784          jsr       _Decode3BitAddressRegister
00003498  584F      5785          addq.w    #4,A7
                    5786   ; strcatInstruction(")") ;
0000349A  4879 0000 5787          pea       @m68kde~2_182.L
0000349E  81C0      
000034A0  4E92      5788          jsr       (A2)
000034A2  584F      5789          addq.w    #4,A7
000034A4  6000 022A 5790          bra       Decode6BitEA_44
                    5791   Decode6BitEA_17:
                    5792   ; }
                    5793   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
000034A8  0C05 0005 5794          cmp.b     #5,D5
000034AC  6626      5795          bne.s     Decode6BitEA_19
                    5796   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
000034AE  C6BC 0000 5797          and.l     #255,D3
000034B2  00FF      
000034B4  2F03      5798          move.l    D3,-(A7)
000034B6  48C2      5799          ext.l     D2
000034B8  2F02      5800          move.l    D2,-(A7)
000034BA  4879 0000 5801          pea       @m68kde~2_185.L
000034BE  81CA      
000034C0  2F0B      5802          move.l    A3,-(A7)
000034C2  4E94      5803          jsr       (A4)
000034C4  DEFC 0010 5804          add.w     #16,A7
                    5805   ; strcatInstruction(TempString) ;
000034C8  2F0B      5806          move.l    A3,-(A7)
000034CA  4E92      5807          jsr       (A2)
000034CC  584F      5808          addq.w    #4,A7
                    5809   ; InstructionSize += 1;
000034CE  5295      5810          addq.l    #1,(A5)
000034D0  6000 01FE 5811          bra       Decode6BitEA_44
                    5812   Decode6BitEA_19:
                    5813   ; }
                    5814   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
000034D4  0C05 0006 5815          cmp.b     #6,D5
000034D8  6600 00AA 5816          bne       Decode6BitEA_21
                    5817   ; offset = ExWord1 & (short int)(0x00FF);
000034DC  3002      5818          move.w    D2,D0
000034DE  C07C 00FF 5819          and.w     #255,D0
000034E2  1D40 FFFD 5820          move.b    D0,-3(A6)
                    5821   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
000034E6  C6BC 0000 5822          and.l     #255,D3
000034EA  00FF      
000034EC  2F03      5823          move.l    D3,-(A7)
000034EE  122E FFFD 5824          move.b    -3(A6),D1
000034F2  4881      5825          ext.w     D1
000034F4  48C1      5826          ext.l     D1
000034F6  2F01      5827          move.l    D1,-(A7)
000034F8  4879 0000 5828          pea       @m68kde~2_186.L
000034FC  81D2      
000034FE  2F0B      5829          move.l    A3,-(A7)
00003500  4E94      5830          jsr       (A4)
00003502  DEFC 0010 5831          add.w     #16,A7
                    5832   ; strcatInstruction(TempString) ;
00003506  2F0B      5833          move.l    A3,-(A7)
00003508  4E92      5834          jsr       (A2)
0000350A  584F      5835          addq.w    #4,A7
                    5836   ; InstructionSize += 1;
0000350C  5295      5837          addq.l    #1,(A5)
                    5838   ; // decode the Xn bit
                    5839   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
0000350E  3002      5840          move.w    D2,D0
00003510  C07C 8000 5841          and.w     #32768,D0
00003514  660C      5842          bne.s     Decode6BitEA_23
                    5843   ; strcatInstruction("D") ;
00003516  4879 0000 5844          pea       @m68kde~2_187.L
0000351A  81DA      
0000351C  4E92      5845          jsr       (A2)
0000351E  584F      5846          addq.w    #4,A7
00003520  600A      5847          bra.s     Decode6BitEA_24
                    5848   Decode6BitEA_23:
                    5849   ; else
                    5850   ; strcatInstruction("A") ;
00003522  4879 0000 5851          pea       @m68kde~2_188.L
00003526  81DC      
00003528  4E92      5852          jsr       (A2)
0000352A  584F      5853          addq.w    #4,A7
                    5854   Decode6BitEA_24:
                    5855   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
0000352C  3002      5856          move.w    D2,D0
0000352E  C07C 7000 5857          and.w     #28672,D0
00003532  E048      5858          lsr.w     #8,D0
00003534  E848      5859          lsr.w     #4,D0
00003536  3D40 FFFE 5860          move.w    D0,-2(A6)
                    5861   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
0000353A  322E FFFE 5862          move.w    -2(A6),D1
0000353E  C2BC 0000 5863          and.l     #65535,D1
00003542  FFFF      
00003544  2F01      5864          move.l    D1,-(A7)
00003546  4879 0000 5865          pea       @m68kde~2_145.L
0000354A  7D0E      
0000354C  2F0B      5866          move.l    A3,-(A7)
0000354E  4E94      5867          jsr       (A4)
00003550  DEFC 000C 5868          add.w     #12,A7
                    5869   ; strcatInstruction(TempString) ;
00003554  2F0B      5870          move.l    A3,-(A7)
00003556  4E92      5871          jsr       (A2)
00003558  584F      5872          addq.w    #4,A7
                    5873   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
0000355A  3002      5874          move.w    D2,D0
0000355C  C07C 0800 5875          and.w     #2048,D0
00003560  E048      5876          lsr.w     #8,D0
00003562  E648      5877          lsr.w     #3,D0
00003564  3E00      5878          move.w    D0,D7
                    5879   ; if(XnSize == 0)
00003566  4A47      5880          tst.w     D7
00003568  660C      5881          bne.s     Decode6BitEA_25
                    5882   ; strcatInstruction(".W)") ;
0000356A  4879 0000 5883          pea       @m68kde~2_189.L
0000356E  81DE      
00003570  4E92      5884          jsr       (A2)
00003572  584F      5885          addq.w    #4,A7
00003574  600A      5886          bra.s     Decode6BitEA_26
                    5887   Decode6BitEA_25:
                    5888   ; else
                    5889   ; strcatInstruction(".L)") ;
00003576  4879 0000 5890          pea       @m68kde~2_190.L
0000357A  81E2      
0000357C  4E92      5891          jsr       (A2)
0000357E  584F      5892          addq.w    #4,A7
                    5893   Decode6BitEA_26:
00003580  6000 014E 5894          bra       Decode6BitEA_44
                    5895   Decode6BitEA_21:
                    5896   ; }
                    5897   ; else if(OperandMode == (unsigned char)(7)) {
00003584  0C05 0007 5898          cmp.b     #7,D5
00003588  6600 0146 5899          bne       Decode6BitEA_44
                    5900   ; if(OperandRegister == 0) {                               // EA = (xxx).W
0000358C  4A03      5901          tst.b     D3
0000358E  661E      5902          bne.s     Decode6BitEA_29
                    5903   ; sprintf(TempString, "$%X", ExWord1) ;
00003590  48C2      5904          ext.l     D2
00003592  2F02      5905          move.l    D2,-(A7)
00003594  4879 0000 5906          pea       @m68kde~2_191.L
00003598  81E6      
0000359A  2F0B      5907          move.l    A3,-(A7)
0000359C  4E94      5908          jsr       (A4)
0000359E  DEFC 000C 5909          add.w     #12,A7
                    5910   ; strcatInstruction(TempString) ;
000035A2  2F0B      5911          move.l    A3,-(A7)
000035A4  4E92      5912          jsr       (A2)
000035A6  584F      5913          addq.w    #4,A7
                    5914   ; InstructionSize += 1;
000035A8  5295      5915          addq.l    #1,(A5)
000035AA  6000 0124 5916          bra       Decode6BitEA_44
                    5917   Decode6BitEA_29:
                    5918   ; }
                    5919   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
000035AE  0C03 0001 5920          cmp.b     #1,D3
000035B2  6600 0032 5921          bne       Decode6BitEA_31
                    5922   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
000035B6  3202      5923          move.w    D2,D1
000035B8  48C1      5924          ext.l     D1
000035BA  E189      5925          lsl.l     #8,D1
000035BC  E189      5926          lsl.l     #8,D1
000035BE  2F00      5927          move.l    D0,-(A7)
000035C0  302E FFF8 5928          move.w    -8(A6),D0
000035C4  48C0      5929          ext.l     D0
000035C6  8280      5930          or.l      D0,D1
000035C8  201F      5931          move.l    (A7)+,D0
000035CA  2F01      5932          move.l    D1,-(A7)
000035CC  4879 0000 5933          pea       @m68kde~2_191.L
000035D0  81E6      
000035D2  2F0B      5934          move.l    A3,-(A7)
000035D4  4E94      5935          jsr       (A4)
000035D6  DEFC 000C 5936          add.w     #12,A7
                    5937   ; strcatInstruction(TempString) ;
000035DA  2F0B      5938          move.l    A3,-(A7)
000035DC  4E92      5939          jsr       (A2)
000035DE  584F      5940          addq.w    #4,A7
                    5941   ; InstructionSize += 2;
000035E0  5495      5942          addq.l    #2,(A5)
000035E2  6000 00EC 5943          bra       Decode6BitEA_44
                    5944   Decode6BitEA_31:
                    5945   ; }
                    5946   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
000035E6  0C03 0004 5947          cmp.b     #4,D3
000035EA  661C      5948          bne.s     Decode6BitEA_33
                    5949   ; if(IsItMoveInstruction == 0)        //not move instruction
000035EC  302E 0016 5950          move.w    22(A6),D0
000035F0  660A      5951          bne.s     Decode6BitEA_35
                    5952   ; DecodeBWLDataAfterOpCode(OpCode);
000035F2  2F04      5953          move.l    D4,-(A7)
000035F4  4EB8 31A0 5954          jsr       _DecodeBWLDataAfterOpCode
000035F8  584F      5955          addq.w    #4,A7
000035FA  6008      5956          bra.s     Decode6BitEA_36
                    5957   Decode6BitEA_35:
                    5958   ; else
                    5959   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
000035FC  2F04      5960          move.l    D4,-(A7)
000035FE  4EB8 30D8 5961          jsr       _DecodeBWLDataAfterOpCodeForMove
00003602  584F      5962          addq.w    #4,A7
                    5963   Decode6BitEA_36:
00003604  6000 00CA 5964          bra       Decode6BitEA_44
                    5965   Decode6BitEA_33:
                    5966   ; }
                    5967   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
00003608  0C03 0002 5968          cmp.b     #2,D3
0000360C  661E      5969          bne.s     Decode6BitEA_37
                    5970   ; sprintf(TempString, "%d(PC)", ExWord1) ;
0000360E  48C2      5971          ext.l     D2
00003610  2F02      5972          move.l    D2,-(A7)
00003612  4879 0000 5973          pea       @m68kde~2_192.L
00003616  81EA      
00003618  2F0B      5974          move.l    A3,-(A7)
0000361A  4E94      5975          jsr       (A4)
0000361C  DEFC 000C 5976          add.w     #12,A7
                    5977   ; strcatInstruction(TempString) ;
00003620  2F0B      5978          move.l    A3,-(A7)
00003622  4E92      5979          jsr       (A2)
00003624  584F      5980          addq.w    #4,A7
                    5981   ; InstructionSize += 1;
00003626  5295      5982          addq.l    #1,(A5)
00003628  6000 00A6 5983          bra       Decode6BitEA_44
                    5984   Decode6BitEA_37:
                    5985   ; }
                    5986   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
0000362C  0C03 0003 5987          cmp.b     #3,D3
00003630  6600 009E 5988          bne       Decode6BitEA_44
                    5989   ; offset = ExWord1 & (short int)(0x00FF);
00003634  3002      5990          move.w    D2,D0
00003636  C07C 00FF 5991          and.w     #255,D0
0000363A  1D40 FFFD 5992          move.b    D0,-3(A6)
                    5993   ; sprintf(TempString, "%d(PC,", offset ) ;
0000363E  122E FFFD 5994          move.b    -3(A6),D1
00003642  4881      5995          ext.w     D1
00003644  48C1      5996          ext.l     D1
00003646  2F01      5997          move.l    D1,-(A7)
00003648  4879 0000 5998          pea       @m68kde~2_193.L
0000364C  81F2      
0000364E  2F0B      5999          move.l    A3,-(A7)
00003650  4E94      6000          jsr       (A4)
00003652  DEFC 000C 6001          add.w     #12,A7
                    6002   ; strcatInstruction(TempString) ;
00003656  2F0B      6003          move.l    A3,-(A7)
00003658  4E92      6004          jsr       (A2)
0000365A  584F      6005          addq.w    #4,A7
                    6006   ; InstructionSize += 1;
0000365C  5295      6007          addq.l    #1,(A5)
                    6008   ; // decode the Xn bit
                    6009   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
0000365E  3002      6010          move.w    D2,D0
00003660  C07C 8000 6011          and.w     #32768,D0
00003664  660C      6012          bne.s     Decode6BitEA_41
                    6013   ; strcatInstruction("D") ;
00003666  4879 0000 6014          pea       @m68kde~2_187.L
0000366A  81DA      
0000366C  4E92      6015          jsr       (A2)
0000366E  584F      6016          addq.w    #4,A7
00003670  600A      6017          bra.s     Decode6BitEA_42
                    6018   Decode6BitEA_41:
                    6019   ; else
                    6020   ; strcatInstruction("A") ;
00003672  4879 0000 6021          pea       @m68kde~2_188.L
00003676  81DC      
00003678  4E92      6022          jsr       (A2)
0000367A  584F      6023          addq.w    #4,A7
                    6024   Decode6BitEA_42:
                    6025   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
0000367C  3002      6026          move.w    D2,D0
0000367E  C07C 7000 6027          and.w     #28672,D0
00003682  E048      6028          lsr.w     #8,D0
00003684  E848      6029          lsr.w     #4,D0
00003686  3D40 FFFE 6030          move.w    D0,-2(A6)
                    6031   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
0000368A  322E FFFE 6032          move.w    -2(A6),D1
0000368E  C2BC 0000 6033          and.l     #65535,D1
00003692  FFFF      
00003694  2F01      6034          move.l    D1,-(A7)
00003696  4879 0000 6035          pea       @m68kde~2_145.L
0000369A  7D0E      
0000369C  2F0B      6036          move.l    A3,-(A7)
0000369E  4E94      6037          jsr       (A4)
000036A0  DEFC 000C 6038          add.w     #12,A7
                    6039   ; strcatInstruction(TempString) ;
000036A4  2F0B      6040          move.l    A3,-(A7)
000036A6  4E92      6041          jsr       (A2)
000036A8  584F      6042          addq.w    #4,A7
                    6043   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
000036AA  3002      6044          move.w    D2,D0
000036AC  C07C 0800 6045          and.w     #2048,D0
000036B0  E048      6046          lsr.w     #8,D0
000036B2  E648      6047          lsr.w     #3,D0
000036B4  3E00      6048          move.w    D0,D7
                    6049   ; if(XnSize == 0)
000036B6  4A47      6050          tst.w     D7
000036B8  660C      6051          bne.s     Decode6BitEA_43
                    6052   ; strcatInstruction(".W)") ;
000036BA  4879 0000 6053          pea       @m68kde~2_189.L
000036BE  81DE      
000036C0  4E92      6054          jsr       (A2)
000036C2  584F      6055          addq.w    #4,A7
000036C4  600A      6056          bra.s     Decode6BitEA_44
                    6057   Decode6BitEA_43:
                    6058   ; else
                    6059   ; strcatInstruction(".L)") ;
000036C6  4879 0000 6060          pea       @m68kde~2_190.L
000036CA  81E2      
000036CC  4E92      6061          jsr       (A2)
000036CE  584F      6062          addq.w    #4,A7
                    6063   Decode6BitEA_44:
000036D0  4CDF 3CFC 6064          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000036D4  4E5E      6065          unlk      A6
000036D6  4E75      6066          rts
                    6067   ; }
                    6068   ; }
                    6069   ; }
                    6070   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    6071   ; {
                    6072   _Decode3BitOperandMode:
000036D8  4E56 FFFC 6073          link      A6,#-4
000036DC  2F02      6074          move.l    D2,-(A7)
000036DE  242E 0008 6075          move.l    8(A6),D2
                    6076   ; unsigned short int OperandMode;
                    6077   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
000036E2  2042      6078          move.l    D2,A0
000036E4  3010      6079          move.w    (A0),D0
000036E6  C07C 0100 6080          and.w     #256,D0
000036EA  E048      6081          lsr.w     #8,D0
000036EC  3D40 FFFE 6082          move.w    D0,-2(A6)
                    6083   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000036F0  2042      6084          move.l    D2,A0
000036F2  3210      6085          move.w    (A0),D1
000036F4  C2BC 0000 6086          and.l     #65535,D1
000036F8  FFFF      
000036FA  2F01      6087          move.l    D1,-(A7)
000036FC  4EB8 301C 6088          jsr       _Decode2BitOperandSize
00003700  584F      6089          addq.w    #4,A7
                    6090   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
00003702  302E FFFE 6091          move.w    -2(A6),D0
00003706  6600 0032 6092          bne       Decode3BitOperandMode_1
                    6093   ; Decode6BitEA(OpCode,0,0,0) ;
0000370A  42A7      6094          clr.l     -(A7)
0000370C  42A7      6095          clr.l     -(A7)
0000370E  42A7      6096          clr.l     -(A7)
00003710  2F02      6097          move.l    D2,-(A7)
00003712  4EB8 32B0 6098          jsr       _Decode6BitEA
00003716  DEFC 0010 6099          add.w     #16,A7
                    6100   ; strcatInstruction(",") ;
0000371A  4879 0000 6101          pea       @m68kde~2_194.L
0000371E  81FA      
00003720  4EB8 0CCC 6102          jsr       _strcatInstruction
00003724  584F      6103          addq.w    #4,A7
                    6104   ; Decode3BitDataRegister(*OpCode) ;
00003726  2042      6105          move.l    D2,A0
00003728  3210      6106          move.w    (A0),D1
0000372A  C2BC 0000 6107          and.l     #65535,D1
0000372E  FFFF      
00003730  2F01      6108          move.l    D1,-(A7)
00003732  4EB8 3078 6109          jsr       _Decode3BitDataRegister
00003736  584F      6110          addq.w    #4,A7
00003738  602E      6111          bra.s     Decode3BitOperandMode_2
                    6112   Decode3BitOperandMode_1:
                    6113   ; }
                    6114   ; else {                                                         // Destination is in EA
                    6115   ; Decode3BitDataRegister(*OpCode) ;
0000373A  2042      6116          move.l    D2,A0
0000373C  3210      6117          move.w    (A0),D1
0000373E  C2BC 0000 6118          and.l     #65535,D1
00003742  FFFF      
00003744  2F01      6119          move.l    D1,-(A7)
00003746  4EB8 3078 6120          jsr       _Decode3BitDataRegister
0000374A  584F      6121          addq.w    #4,A7
                    6122   ; strcatInstruction(",") ;
0000374C  4879 0000 6123          pea       @m68kde~2_194.L
00003750  81FA      
00003752  4EB8 0CCC 6124          jsr       _strcatInstruction
00003756  584F      6125          addq.w    #4,A7
                    6126   ; Decode6BitEA(OpCode,0,0,0) ;
00003758  42A7      6127          clr.l     -(A7)
0000375A  42A7      6128          clr.l     -(A7)
0000375C  42A7      6129          clr.l     -(A7)
0000375E  2F02      6130          move.l    D2,-(A7)
00003760  4EB8 32B0 6131          jsr       _Decode6BitEA
00003764  DEFC 0010 6132          add.w     #16,A7
                    6133   Decode3BitOperandMode_2:
00003768  241F      6134          move.l    (A7)+,D2
0000376A  4E5E      6135          unlk      A6
0000376C  4E75      6136          rts
                    6137   ; }
                    6138   ; }
                    6139   ; void DecodeBranchCondition(unsigned short int Condition)
                    6140   ; {
                    6141   _DecodeBranchCondition:
0000376E  4E56 0000 6142          link      A6,#0
00003772  48E7 2020 6143          movem.l   D2/A2,-(A7)
00003776  45F8 0CCC 6144          lea       _strcatInstruction.L,A2
0000377A  342E 000A 6145          move.w    10(A6),D2
0000377E  C4BC 0000 6146          and.l     #65535,D2
00003782  FFFF      
                    6147   ; if(Condition == (unsigned short int)(0x04))
00003784  0C42 0004 6148          cmp.w     #4,D2
00003788  660E      6149          bne.s     DecodeBranchCondition_1
                    6150   ; strcatInstruction("CC") ;
0000378A  4879 0000 6151          pea       @m68kde~2_195.L
0000378E  81FC      
00003790  4E92      6152          jsr       (A2)
00003792  584F      6153          addq.w    #4,A7
00003794  6000 011C 6154          bra       DecodeBranchCondition_30
                    6155   DecodeBranchCondition_1:
                    6156   ; else if(Condition == (unsigned short int)(0x05))
00003798  0C42 0005 6157          cmp.w     #5,D2
0000379C  660E      6158          bne.s     DecodeBranchCondition_3
                    6159   ; strcatInstruction("CS") ;
0000379E  4879 0000 6160          pea       @m68kde~2_196.L
000037A2  8200      
000037A4  4E92      6161          jsr       (A2)
000037A6  584F      6162          addq.w    #4,A7
000037A8  6000 0108 6163          bra       DecodeBranchCondition_30
                    6164   DecodeBranchCondition_3:
                    6165   ; else if(Condition == (unsigned short int)(0x07))
000037AC  0C42 0007 6166          cmp.w     #7,D2
000037B0  660E      6167          bne.s     DecodeBranchCondition_5
                    6168   ; strcatInstruction("EQ") ;
000037B2  4879 0000 6169          pea       @m68kde~2_197.L
000037B6  8204      
000037B8  4E92      6170          jsr       (A2)
000037BA  584F      6171          addq.w    #4,A7
000037BC  6000 00F4 6172          bra       DecodeBranchCondition_30
                    6173   DecodeBranchCondition_5:
                    6174   ; else if(Condition == (unsigned short int)(0x0C))
000037C0  0C42 000C 6175          cmp.w     #12,D2
000037C4  660E      6176          bne.s     DecodeBranchCondition_7
                    6177   ; strcatInstruction("GE") ;
000037C6  4879 0000 6178          pea       @m68kde~2_198.L
000037CA  8208      
000037CC  4E92      6179          jsr       (A2)
000037CE  584F      6180          addq.w    #4,A7
000037D0  6000 00E0 6181          bra       DecodeBranchCondition_30
                    6182   DecodeBranchCondition_7:
                    6183   ; else if(Condition == (unsigned short int)(0x0E))
000037D4  0C42 000E 6184          cmp.w     #14,D2
000037D8  660E      6185          bne.s     DecodeBranchCondition_9
                    6186   ; strcatInstruction("GT") ;
000037DA  4879 0000 6187          pea       @m68kde~2_199.L
000037DE  820C      
000037E0  4E92      6188          jsr       (A2)
000037E2  584F      6189          addq.w    #4,A7
000037E4  6000 00CC 6190          bra       DecodeBranchCondition_30
                    6191   DecodeBranchCondition_9:
                    6192   ; else if(Condition == (unsigned short int)(0x02))
000037E8  0C42 0002 6193          cmp.w     #2,D2
000037EC  660E      6194          bne.s     DecodeBranchCondition_11
                    6195   ; strcatInstruction("HI") ;
000037EE  4879 0000 6196          pea       @m68kde~2_200.L
000037F2  8210      
000037F4  4E92      6197          jsr       (A2)
000037F6  584F      6198          addq.w    #4,A7
000037F8  6000 00B8 6199          bra       DecodeBranchCondition_30
                    6200   DecodeBranchCondition_11:
                    6201   ; else if(Condition == (unsigned short int)(0x0F))
000037FC  0C42 000F 6202          cmp.w     #15,D2
00003800  660E      6203          bne.s     DecodeBranchCondition_13
                    6204   ; strcatInstruction("LE") ;
00003802  4879 0000 6205          pea       @m68kde~2_201.L
00003806  8214      
00003808  4E92      6206          jsr       (A2)
0000380A  584F      6207          addq.w    #4,A7
0000380C  6000 00A4 6208          bra       DecodeBranchCondition_30
                    6209   DecodeBranchCondition_13:
                    6210   ; else if(Condition == (unsigned short int)(0x03))
00003810  0C42 0003 6211          cmp.w     #3,D2
00003814  660E      6212          bne.s     DecodeBranchCondition_15
                    6213   ; strcatInstruction("LS") ;
00003816  4879 0000 6214          pea       @m68kde~2_202.L
0000381A  8218      
0000381C  4E92      6215          jsr       (A2)
0000381E  584F      6216          addq.w    #4,A7
00003820  6000 0090 6217          bra       DecodeBranchCondition_30
                    6218   DecodeBranchCondition_15:
                    6219   ; else if(Condition == (unsigned short int)(0x0D))
00003824  0C42 000D 6220          cmp.w     #13,D2
00003828  660E      6221          bne.s     DecodeBranchCondition_17
                    6222   ; strcatInstruction("LT") ;
0000382A  4879 0000 6223          pea       @m68kde~2_203.L
0000382E  821C      
00003830  4E92      6224          jsr       (A2)
00003832  584F      6225          addq.w    #4,A7
00003834  6000 007C 6226          bra       DecodeBranchCondition_30
                    6227   DecodeBranchCondition_17:
                    6228   ; else if(Condition == (unsigned short int)(0x0B))
00003838  0C42 000B 6229          cmp.w     #11,D2
0000383C  660E      6230          bne.s     DecodeBranchCondition_19
                    6231   ; strcatInstruction("MI") ;
0000383E  4879 0000 6232          pea       @m68kde~2_204.L
00003842  8220      
00003844  4E92      6233          jsr       (A2)
00003846  584F      6234          addq.w    #4,A7
00003848  6000 0068 6235          bra       DecodeBranchCondition_30
                    6236   DecodeBranchCondition_19:
                    6237   ; else if(Condition == (unsigned short int)(0x06))
0000384C  0C42 0006 6238          cmp.w     #6,D2
00003850  660E      6239          bne.s     DecodeBranchCondition_21
                    6240   ; strcatInstruction("NE") ;
00003852  4879 0000 6241          pea       @m68kde~2_205.L
00003856  8224      
00003858  4E92      6242          jsr       (A2)
0000385A  584F      6243          addq.w    #4,A7
0000385C  6000 0054 6244          bra       DecodeBranchCondition_30
                    6245   DecodeBranchCondition_21:
                    6246   ; else if(Condition == (unsigned short int)(0x0A))
00003860  0C42 000A 6247          cmp.w     #10,D2
00003864  660E      6248          bne.s     DecodeBranchCondition_23
                    6249   ; strcatInstruction("PL") ;
00003866  4879 0000 6250          pea       @m68kde~2_206.L
0000386A  8228      
0000386C  4E92      6251          jsr       (A2)
0000386E  584F      6252          addq.w    #4,A7
00003870  6000 0040 6253          bra       DecodeBranchCondition_30
                    6254   DecodeBranchCondition_23:
                    6255   ; else if(Condition == (unsigned short int)(0x09))
00003874  0C42 0009 6256          cmp.w     #9,D2
00003878  660C      6257          bne.s     DecodeBranchCondition_25
                    6258   ; strcatInstruction("VS") ;
0000387A  4879 0000 6259          pea       @m68kde~2_207.L
0000387E  822C      
00003880  4E92      6260          jsr       (A2)
00003882  584F      6261          addq.w    #4,A7
00003884  602C      6262          bra.s     DecodeBranchCondition_30
                    6263   DecodeBranchCondition_25:
                    6264   ; else if(Condition == (unsigned short int)(0x08))
00003886  0C42 0008 6265          cmp.w     #8,D2
0000388A  660C      6266          bne.s     DecodeBranchCondition_27
                    6267   ; strcatInstruction("VC") ;
0000388C  4879 0000 6268          pea       @m68kde~2_208.L
00003890  8230      
00003892  4E92      6269          jsr       (A2)
00003894  584F      6270          addq.w    #4,A7
00003896  601A      6271          bra.s     DecodeBranchCondition_30
                    6272   DecodeBranchCondition_27:
                    6273   ; else if(Condition == (unsigned short int)(0))
00003898  4A42      6274          tst.w     D2
0000389A  660C      6275          bne.s     DecodeBranchCondition_29
                    6276   ; strcatInstruction("RA") ;
0000389C  4879 0000 6277          pea       @m68kde~2_209.L
000038A0  8234      
000038A2  4E92      6278          jsr       (A2)
000038A4  584F      6279          addq.w    #4,A7
000038A6  600A      6280          bra.s     DecodeBranchCondition_30
                    6281   DecodeBranchCondition_29:
                    6282   ; else
                    6283   ; strcatInstruction("SR");
000038A8  4879 0000 6284          pea       @m68kde~2_210.L
000038AC  8238      
000038AE  4E92      6285          jsr       (A2)
000038B0  584F      6286          addq.w    #4,A7
                    6287   DecodeBranchCondition_30:
                    6288   ; strcatInstruction(" ") ;
000038B2  4879 0000 6289          pea       @m68kde~2_30.L
000038B6  6F16      
000038B8  4E92      6290          jsr       (A2)
000038BA  584F      6291          addq.w    #4,A7
000038BC  4CDF 0404 6292          movem.l   (A7)+,D2/A2
000038C0  4E5E      6293          unlk      A6
000038C2  4E75      6294          rts
                    6295   ; }
                    6296   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    6297   ; {
                    6298   _DisassembleInstruction:
000038C4  4E56 FFD8 6299          link      A6,#-40
000038C8  48E7 3F3C 6300          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000038CC  242E 0008 6301          move.l    8(A6),D2
000038D0  45F9 0803 6302          lea       _InstructionSize.L,A2
000038D4  017E      
000038D6  47F8 0CE6 6303          lea       _strcpyInstruction.L,A3
000038DA  49F9 0803 6304          lea       _TempString.L,A4
000038DE  0546      
000038E0  4BF9 0000 6305          lea       _sprintf.L,A5
000038E4  58D4      
                    6306   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
000038E6  2042      6307          move.l    D2,A0
000038E8  3010      6308          move.w    (A0),D0
000038EA  E040      6309          asr.w     #8,D0
000038EC  E840      6310          asr.w     #4,D0
000038EE  3D40 FFDA 6311          move.w    D0,-38(A6)
                    6312   ; unsigned short int LS12Bits = (*OpCode & (unsigned short int)(0x0FFF));
000038F2  2042      6313          move.l    D2,A0
000038F4  3010      6314          move.w    (A0),D0
000038F6  C07C 0FFF 6315          and.w     #4095,D0
000038FA  3D40 FFDC 6316          move.w    D0,-36(A6)
                    6317   ; unsigned short int SourceBits, DestBits, Size ;
                    6318   ; unsigned char *Mode, Condition;
                    6319   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    6320   ; unsigned short int DataRegister, AddressRegister;
                    6321   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    6322   ; signed short int Displacement16Bit;
                    6323   ; short int Mask, DoneSlash;
                    6324   ; int i;
                    6325   ; strcpyInstruction("Unknown") ;
000038FE  4879 0000 6326          pea       @m68kde~2_211.L
00003902  823C      
00003904  4E93      6327          jsr       (A3)
00003906  584F      6328          addq.w    #4,A7
                    6329   ; /////////////////////////////////////////////////////////////////////////////////
                    6330   ; // if instruction is ABCD
                    6331   ; /////////////////////////////////////////////////////////////////////////////////
                    6332   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
00003908  2042      6333          move.l    D2,A0
0000390A  3010      6334          move.w    (A0),D0
0000390C  C07C F1F0 6335          and.w     #61936,D0
00003910  0C40 C100 6336          cmp.w     #49408,D0
00003914  6600 008C 6337          bne       DisassembleInstruction_4
                    6338   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
00003918  2042      6339          move.l    D2,A0
0000391A  3010      6340          move.w    (A0),D0
0000391C  E040      6341          asr.w     #8,D0
0000391E  E240      6342          asr.w     #1,D0
00003920  C07C 0007 6343          and.w     #7,D0
00003924  3D40 FFE0 6344          move.w    D0,-32(A6)
                    6345   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
00003928  2042      6346          move.l    D2,A0
0000392A  3010      6347          move.w    (A0),D0
0000392C  C07C 0007 6348          and.w     #7,D0
00003930  3D40 FFDE 6349          move.w    D0,-34(A6)
                    6350   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
00003934  2042      6351          move.l    D2,A0
00003936  3010      6352          move.w    (A0),D0
00003938  E640      6353          asr.w     #3,D0
0000393A  48C0      6354          ext.l     D0
0000393C  C0BC 0000 6355          and.l     #1,D0
00003940  0001      
00003942  2D40 FFE4 6356          move.l    D0,-28(A6)
                    6357   ; if(Mode == 0)
00003946  202E FFE4 6358          move.l    -28(A6),D0
0000394A  662C      6359          bne.s     DisassembleInstruction_3
                    6360   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
0000394C  322E FFE0 6361          move.w    -32(A6),D1
00003950  C2BC 0000 6362          and.l     #65535,D1
00003954  FFFF      
00003956  2F01      6363          move.l    D1,-(A7)
00003958  322E FFDE 6364          move.w    -34(A6),D1
0000395C  C2BC 0000 6365          and.l     #65535,D1
00003960  FFFF      
00003962  2F01      6366          move.l    D1,-(A7)
00003964  4879 0000 6367          pea       @m68kde~2_212.L
00003968  8244      
0000396A  4879 0803 6368          pea       _Instruction.L
0000396E  04E2      
00003970  4E95      6369          jsr       (A5)
00003972  DEFC 0010 6370          add.w     #16,A7
00003976  602A      6371          bra.s     DisassembleInstruction_4
                    6372   DisassembleInstruction_3:
                    6373   ; else
                    6374   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00003978  322E FFE0 6375          move.w    -32(A6),D1
0000397C  C2BC 0000 6376          and.l     #65535,D1
00003980  FFFF      
00003982  2F01      6377          move.l    D1,-(A7)
00003984  322E FFDE 6378          move.w    -34(A6),D1
00003988  C2BC 0000 6379          and.l     #65535,D1
0000398C  FFFF      
0000398E  2F01      6380          move.l    D1,-(A7)
00003990  4879 0000 6381          pea       @m68kde~2_213.L
00003994  8252      
00003996  4879 0803 6382          pea       _Instruction.L
0000399A  04E2      
0000399C  4E95      6383          jsr       (A5)
0000399E  DEFC 0010 6384          add.w     #16,A7
                    6385   DisassembleInstruction_4:
                    6386   ; }
                    6387   ; /////////////////////////////////////////////////////////////////////////////////
                    6388   ; // if instruction is ADD or ADDA
                    6389   ; /////////////////////////////////////////////////////////////////////////////////
                    6390   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
000039A2  2042      6391          move.l    D2,A0
000039A4  3010      6392          move.w    (A0),D0
000039A6  C07C F000 6393          and.w     #61440,D0
000039AA  0C40 D000 6394          cmp.w     #53248,D0
000039AE  6600 008C 6395          bne       DisassembleInstruction_8
                    6396   ; InstructionSize = 1;
000039B2  24BC 0000 6397          move.l    #1,(A2)
000039B6  0001      
                    6398   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
000039B8  2042      6399          move.l    D2,A0
000039BA  3010      6400          move.w    (A0),D0
000039BC  EC40      6401          asr.w     #6,D0
000039BE  C07C 0007 6402          and.w     #7,D0
000039C2  3600      6403          move.w    D0,D3
                    6404   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
000039C4  0C43 0003 6405          cmp.w     #3,D3
000039C8  6708      6406          beq.s     DisassembleInstruction_9
000039CA  0C43 0007 6407          cmp.w     #7,D3
000039CE  6600 005A 6408          bne       DisassembleInstruction_7
                    6409   DisassembleInstruction_9:
                    6410   ; {
                    6411   ; if(OpMode == (unsigned short int)(0x0003))
000039D2  0C43 0003 6412          cmp.w     #3,D3
000039D6  660C      6413          bne.s     DisassembleInstruction_10
                    6414   ; strcpyInstruction("ADDA.W ") ;
000039D8  4879 0000 6415          pea       @m68kde~2_214.L
000039DC  8266      
000039DE  4E93      6416          jsr       (A3)
000039E0  584F      6417          addq.w    #4,A7
000039E2  600A      6418          bra.s     DisassembleInstruction_11
                    6419   DisassembleInstruction_10:
                    6420   ; else
                    6421   ; strcpyInstruction("ADDA.L ") ;
000039E4  4879 0000 6422          pea       @m68kde~2_215.L
000039E8  826E      
000039EA  4E93      6423          jsr       (A3)
000039EC  584F      6424          addq.w    #4,A7
                    6425   DisassembleInstruction_11:
                    6426   ; Decode6BitEA(OpCode,0,0,0)  ;
000039EE  42A7      6427          clr.l     -(A7)
000039F0  42A7      6428          clr.l     -(A7)
000039F2  42A7      6429          clr.l     -(A7)
000039F4  2F02      6430          move.l    D2,-(A7)
000039F6  4EB8 32B0 6431          jsr       _Decode6BitEA
000039FA  DEFC 0010 6432          add.w     #16,A7
                    6433   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000039FE  2042      6434          move.l    D2,A0
00003A00  3210      6435          move.w    (A0),D1
00003A02  E041      6436          asr.w     #8,D1
00003A04  E241      6437          asr.w     #1,D1
00003A06  C27C 0007 6438          and.w     #7,D1
00003A0A  C2BC 0000 6439          and.l     #65535,D1
00003A0E  FFFF      
00003A10  2F01      6440          move.l    D1,-(A7)
00003A12  4879 0000 6441          pea       @m68kde~2_216.L
00003A16  8276      
00003A18  2F0C      6442          move.l    A4,-(A7)
00003A1A  4E95      6443          jsr       (A5)
00003A1C  DEFC 000C 6444          add.w     #12,A7
                    6445   ; strcatInstruction(TempString) ;
00003A20  2F0C      6446          move.l    A4,-(A7)
00003A22  4EB8 0CCC 6447          jsr       _strcatInstruction
00003A26  584F      6448          addq.w    #4,A7
00003A28  6012      6449          bra.s     DisassembleInstruction_8
                    6450   DisassembleInstruction_7:
                    6451   ; }
                    6452   ; else {
                    6453   ; strcpyInstruction("ADD") ;
00003A2A  4879 0000 6454          pea       @m68kde~2_217.L
00003A2E  827C      
00003A30  4E93      6455          jsr       (A3)
00003A32  584F      6456          addq.w    #4,A7
                    6457   ; Decode3BitOperandMode(OpCode) ;
00003A34  2F02      6458          move.l    D2,-(A7)
00003A36  4EB8 36D8 6459          jsr       _Decode3BitOperandMode
00003A3A  584F      6460          addq.w    #4,A7
                    6461   DisassembleInstruction_8:
                    6462   ; }
                    6463   ; }
                    6464   ; /////////////////////////////////////////////////////////////////////////////////
                    6465   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    6466   ; /////////////////////////////////////////////////////////////////////////////////
                    6467   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
00003A3C  2042      6468          move.l    D2,A0
00003A3E  3010      6469          move.w    (A0),D0
00003A40  C07C FF00 6470          and.w     #65280,D0
00003A44  0C40 0600 6471          cmp.w     #1536,D0
00003A48  6604      6472          bne.s     DisassembleInstruction_14
00003A4A  7001      6473          moveq     #1,D0
00003A4C  6002      6474          bra.s     DisassembleInstruction_15
                    6475   DisassembleInstruction_14:
00003A4E  4280      6476          clr.l     D0
                    6477   DisassembleInstruction_15:
00003A50  2042      6478          move.l    D2,A0
00003A52  3210      6479          move.w    (A0),D1
00003A54  C27C FF00 6480          and.w     #65280,D1
00003A58  0C41 0200 6481          cmp.w     #512,D1
00003A5C  6604      6482          bne.s     DisassembleInstruction_16
00003A5E  7201      6483          moveq     #1,D1
00003A60  6002      6484          bra.s     DisassembleInstruction_17
                    6485   DisassembleInstruction_16:
00003A62  4281      6486          clr.l     D1
                    6487   DisassembleInstruction_17:
00003A64  8041      6488          or.w      D1,D0
00003A66  2042      6489          move.l    D2,A0
00003A68  3210      6490          move.w    (A0),D1
00003A6A  C27C FF00 6491          and.w     #65280,D1
00003A6E  0C41 0C00 6492          cmp.w     #3072,D1
00003A72  6604      6493          bne.s     DisassembleInstruction_18
00003A74  7201      6494          moveq     #1,D1
00003A76  6002      6495          bra.s     DisassembleInstruction_19
                    6496   DisassembleInstruction_18:
00003A78  4281      6497          clr.l     D1
                    6498   DisassembleInstruction_19:
00003A7A  8041      6499          or.w      D1,D0
00003A7C  2042      6500          move.l    D2,A0
00003A7E  3210      6501          move.w    (A0),D1
00003A80  C27C FF00 6502          and.w     #65280,D1
00003A84  0C41 0A00 6503          cmp.w     #2560,D1
00003A88  6604      6504          bne.s     DisassembleInstruction_20
00003A8A  7201      6505          moveq     #1,D1
00003A8C  6002      6506          bra.s     DisassembleInstruction_21
                    6507   DisassembleInstruction_20:
00003A8E  4281      6508          clr.l     D1
                    6509   DisassembleInstruction_21:
00003A90  8041      6510          or.w      D1,D0
00003A92  2042      6511          move.l    D2,A0
00003A94  3210      6512          move.w    (A0),D1
00003A96  C27C FF00 6513          and.w     #65280,D1
00003A9A  6604      6514          bne.s     DisassembleInstruction_22
00003A9C  7201      6515          moveq     #1,D1
00003A9E  6002      6516          bra.s     DisassembleInstruction_23
                    6517   DisassembleInstruction_22:
00003AA0  4281      6518          clr.l     D1
                    6519   DisassembleInstruction_23:
00003AA2  8041      6520          or.w      D1,D0
00003AA4  2042      6521          move.l    D2,A0
00003AA6  3210      6522          move.w    (A0),D1
00003AA8  C27C FF00 6523          and.w     #65280,D1
00003AAC  0C41 0400 6524          cmp.w     #1024,D1
00003AB0  6604      6525          bne.s     DisassembleInstruction_24
00003AB2  7201      6526          moveq     #1,D1
00003AB4  6002      6527          bra.s     DisassembleInstruction_25
                    6528   DisassembleInstruction_24:
00003AB6  4281      6529          clr.l     D1
                    6530   DisassembleInstruction_25:
00003AB8  8041      6531          or.w      D1,D0
00003ABA  6700 00E4 6532          beq       DisassembleInstruction_12
                    6533   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6534   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6535   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6536   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6537   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6538   ; {
                    6539   ; InstructionSize = 1;
00003ABE  24BC 0000 6540          move.l    #1,(A2)
00003AC2  0001      
                    6541   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
00003AC4  2042      6542          move.l    D2,A0
00003AC6  3010      6543          move.w    (A0),D0
00003AC8  C07C FF00 6544          and.w     #65280,D0
00003ACC  0C40 0600 6545          cmp.w     #1536,D0
00003AD0  660E      6546          bne.s     DisassembleInstruction_26
                    6547   ; strcpyInstruction("ADDI") ;
00003AD2  4879 0000 6548          pea       @m68kde~2_218.L
00003AD6  8280      
00003AD8  4E93      6549          jsr       (A3)
00003ADA  584F      6550          addq.w    #4,A7
00003ADC  6000 0084 6551          bra       DisassembleInstruction_36
                    6552   DisassembleInstruction_26:
                    6553   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
00003AE0  2042      6554          move.l    D2,A0
00003AE2  3010      6555          move.w    (A0),D0
00003AE4  C07C FF00 6556          and.w     #65280,D0
00003AE8  0C40 0200 6557          cmp.w     #512,D0
00003AEC  660E      6558          bne.s     DisassembleInstruction_28
                    6559   ; strcpyInstruction("ANDI") ;
00003AEE  4879 0000 6560          pea       @m68kde~2_219.L
00003AF2  8286      
00003AF4  4E93      6561          jsr       (A3)
00003AF6  584F      6562          addq.w    #4,A7
00003AF8  6000 0068 6563          bra       DisassembleInstruction_36
                    6564   DisassembleInstruction_28:
                    6565   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
00003AFC  2042      6566          move.l    D2,A0
00003AFE  3010      6567          move.w    (A0),D0
00003B00  C07C FF00 6568          and.w     #65280,D0
00003B04  0C40 0C00 6569          cmp.w     #3072,D0
00003B08  660E      6570          bne.s     DisassembleInstruction_30
                    6571   ; strcpyInstruction("CMPI") ;
00003B0A  4879 0000 6572          pea       @m68kde~2_220.L
00003B0E  828C      
00003B10  4E93      6573          jsr       (A3)
00003B12  584F      6574          addq.w    #4,A7
00003B14  6000 004C 6575          bra       DisassembleInstruction_36
                    6576   DisassembleInstruction_30:
                    6577   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
00003B18  2042      6578          move.l    D2,A0
00003B1A  3010      6579          move.w    (A0),D0
00003B1C  C07C FF00 6580          and.w     #65280,D0
00003B20  0C40 0A00 6581          cmp.w     #2560,D0
00003B24  660E      6582          bne.s     DisassembleInstruction_32
                    6583   ; strcpyInstruction("EORI") ;
00003B26  4879 0000 6584          pea       @m68kde~2_221.L
00003B2A  8292      
00003B2C  4E93      6585          jsr       (A3)
00003B2E  584F      6586          addq.w    #4,A7
00003B30  6000 0030 6587          bra       DisassembleInstruction_36
                    6588   DisassembleInstruction_32:
                    6589   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
00003B34  2042      6590          move.l    D2,A0
00003B36  3010      6591          move.w    (A0),D0
00003B38  C07C FF00 6592          and.w     #65280,D0
00003B3C  660C      6593          bne.s     DisassembleInstruction_34
                    6594   ; strcpyInstruction("ORI") ;
00003B3E  4879 0000 6595          pea       @m68kde~2_222.L
00003B42  8298      
00003B44  4E93      6596          jsr       (A3)
00003B46  584F      6597          addq.w    #4,A7
00003B48  6018      6598          bra.s     DisassembleInstruction_36
                    6599   DisassembleInstruction_34:
                    6600   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
00003B4A  2042      6601          move.l    D2,A0
00003B4C  3010      6602          move.w    (A0),D0
00003B4E  C07C FF00 6603          and.w     #65280,D0
00003B52  0C40 0400 6604          cmp.w     #1024,D0
00003B56  660A      6605          bne.s     DisassembleInstruction_36
                    6606   ; strcpyInstruction("SUBI") ;
00003B58  4879 0000 6607          pea       @m68kde~2_223.L
00003B5C  829C      
00003B5E  4E93      6608          jsr       (A3)
00003B60  584F      6609          addq.w    #4,A7
                    6610   DisassembleInstruction_36:
                    6611   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003B62  2042      6612          move.l    D2,A0
00003B64  3210      6613          move.w    (A0),D1
00003B66  C2BC 0000 6614          and.l     #65535,D1
00003B6A  FFFF      
00003B6C  2F01      6615          move.l    D1,-(A7)
00003B6E  4EB8 301C 6616          jsr       _Decode2BitOperandSize
00003B72  584F      6617          addq.w    #4,A7
00003B74  3E00      6618          move.w    D0,D7
                    6619   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
00003B76  2F02      6620          move.l    D2,-(A7)
00003B78  4EB8 31A0 6621          jsr       _DecodeBWLDataAfterOpCode
00003B7C  584F      6622          addq.w    #4,A7
                    6623   ; strcatInstruction(",") ;
00003B7E  4879 0000 6624          pea       @m68kde~2_194.L
00003B82  81FA      
00003B84  4EB8 0CCC 6625          jsr       _strcatInstruction
00003B88  584F      6626          addq.w    #4,A7
                    6627   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
00003B8A  42A7      6628          clr.l     -(A7)
00003B8C  CEBC 0000 6629          and.l     #65535,D7
00003B90  FFFF      
00003B92  2F07      6630          move.l    D7,-(A7)
00003B94  42A7      6631          clr.l     -(A7)
00003B96  2F02      6632          move.l    D2,-(A7)
00003B98  4EB8 32B0 6633          jsr       _Decode6BitEA
00003B9C  DEFC 0010 6634          add.w     #16,A7
                    6635   DisassembleInstruction_12:
                    6636   ; }
                    6637   ; /////////////////////////////////////////////////////////////////////////////////
                    6638   ; // if instruction is ADDI #data,SR
                    6639   ; /////////////////////////////////////////////////////////////////////////////////
                    6640   ; if(*OpCode  == (unsigned short int)(0x027c))   {
00003BA0  2042      6641          move.l    D2,A0
00003BA2  3010      6642          move.w    (A0),D0
00003BA4  0C40 027C 6643          cmp.w     #636,D0
00003BA8  6622      6644          bne.s     DisassembleInstruction_38
                    6645   ; InstructionSize = 2;
00003BAA  24BC 0000 6646          move.l    #2,(A2)
00003BAE  0002      
                    6647   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
00003BB0  2042      6648          move.l    D2,A0
00003BB2  3228 0002 6649          move.w    2(A0),D1
00003BB6  48C1      6650          ext.l     D1
00003BB8  2F01      6651          move.l    D1,-(A7)
00003BBA  4879 0000 6652          pea       @m68kde~2_224.L
00003BBE  82A2      
00003BC0  4879 0803 6653          pea       _Instruction.L
00003BC4  04E2      
00003BC6  4E95      6654          jsr       (A5)
00003BC8  DEFC 000C 6655          add.w     #12,A7
                    6656   DisassembleInstruction_38:
                    6657   ; }
                    6658   ; /////////////////////////////////////////////////////////////////////////////////
                    6659   ; // if instruction is ADDQ
                    6660   ; /////////////////////////////////////////////////////////////////////////////////
                    6661   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
00003BCC  2042      6662          move.l    D2,A0
00003BCE  3010      6663          move.w    (A0),D0
00003BD0  C07C F100 6664          and.w     #61696,D0
00003BD4  0C40 5000 6665          cmp.w     #20480,D0
00003BD8  6600 005E 6666          bne       DisassembleInstruction_40
                    6667   ; InstructionSize = 1;
00003BDC  24BC 0000 6668          move.l    #1,(A2)
00003BE0  0001      
                    6669   ; strcpyInstruction("ADDQ") ;
00003BE2  4879 0000 6670          pea       @m68kde~2_225.L
00003BE6  82B0      
00003BE8  4E93      6671          jsr       (A3)
00003BEA  584F      6672          addq.w    #4,A7
                    6673   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003BEC  2042      6674          move.l    D2,A0
00003BEE  3210      6675          move.w    (A0),D1
00003BF0  C2BC 0000 6676          and.l     #65535,D1
00003BF4  FFFF      
00003BF6  2F01      6677          move.l    D1,-(A7)
00003BF8  4EB8 301C 6678          jsr       _Decode2BitOperandSize
00003BFC  584F      6679          addq.w    #4,A7
                    6680   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00003BFE  2042      6681          move.l    D2,A0
00003C00  3210      6682          move.w    (A0),D1
00003C02  E041      6683          asr.w     #8,D1
00003C04  E241      6684          asr.w     #1,D1
00003C06  C27C 0007 6685          and.w     #7,D1
00003C0A  C2BC 0000 6686          and.l     #65535,D1
00003C0E  FFFF      
00003C10  2F01      6687          move.l    D1,-(A7)
00003C12  4879 0000 6688          pea       @m68kde~2_226.L
00003C16  82B6      
00003C18  2F0C      6689          move.l    A4,-(A7)
00003C1A  4E95      6690          jsr       (A5)
00003C1C  DEFC 000C 6691          add.w     #12,A7
                    6692   ; strcatInstruction(TempString) ;
00003C20  2F0C      6693          move.l    A4,-(A7)
00003C22  4EB8 0CCC 6694          jsr       _strcatInstruction
00003C26  584F      6695          addq.w    #4,A7
                    6696   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00003C28  42A7      6697          clr.l     -(A7)
00003C2A  42A7      6698          clr.l     -(A7)
00003C2C  42A7      6699          clr.l     -(A7)
00003C2E  2F02      6700          move.l    D2,-(A7)
00003C30  4EB8 32B0 6701          jsr       _Decode6BitEA
00003C34  DEFC 0010 6702          add.w     #16,A7
                    6703   DisassembleInstruction_40:
                    6704   ; }
                    6705   ; /////////////////////////////////////////////////////////////////////////////////
                    6706   ; // if instruction is ADDX
                    6707   ; /////////////////////////////////////////////////////////////////////////////////
                    6708   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
00003C38  2042      6709          move.l    D2,A0
00003C3A  3010      6710          move.w    (A0),D0
00003C3C  C07C F130 6711          and.w     #61744,D0
00003C40  0C40 D100 6712          cmp.w     #53504,D0
00003C44  6600 00A4 6713          bne       DisassembleInstruction_44
                    6714   ; InstructionSize = 1;
00003C48  24BC 0000 6715          move.l    #1,(A2)
00003C4C  0001      
                    6716   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00003C4E  2042      6717          move.l    D2,A0
00003C50  3010      6718          move.w    (A0),D0
00003C52  EC40      6719          asr.w     #6,D0
00003C54  C07C 0003 6720          and.w     #3,D0
00003C58  3600      6721          move.w    D0,D3
                    6722   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
00003C5A  0C43 0003 6723          cmp.w     #3,D3
00003C5E  6700 008A 6724          beq       DisassembleInstruction_44
                    6725   ; {
                    6726   ; strcpyInstruction("ADDX") ;
00003C62  4879 0000 6727          pea       @m68kde~2_227.L
00003C66  82BC      
00003C68  4E93      6728          jsr       (A3)
00003C6A  584F      6729          addq.w    #4,A7
                    6730   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003C6C  2042      6731          move.l    D2,A0
00003C6E  3210      6732          move.w    (A0),D1
00003C70  C2BC 0000 6733          and.l     #65535,D1
00003C74  FFFF      
00003C76  2F01      6734          move.l    D1,-(A7)
00003C78  4EB8 301C 6735          jsr       _Decode2BitOperandSize
00003C7C  584F      6736          addq.w    #4,A7
                    6737   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00003C7E  2042      6738          move.l    D2,A0
00003C80  3010      6739          move.w    (A0),D0
00003C82  C07C 0008 6740          and.w     #8,D0
00003C86  6600 0030 6741          bne       DisassembleInstruction_46
                    6742   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003C8A  2042      6743          move.l    D2,A0
00003C8C  3210      6744          move.w    (A0),D1
00003C8E  E041      6745          asr.w     #8,D1
00003C90  E241      6746          asr.w     #1,D1
00003C92  C27C 0007 6747          and.w     #7,D1
00003C96  48C1      6748          ext.l     D1
00003C98  2F01      6749          move.l    D1,-(A7)
00003C9A  2042      6750          move.l    D2,A0
00003C9C  3210      6751          move.w    (A0),D1
00003C9E  C27C 0007 6752          and.w     #7,D1
00003CA2  48C1      6753          ext.l     D1
00003CA4  2F01      6754          move.l    D1,-(A7)
00003CA6  4879 0000 6755          pea       @m68kde~2_228.L
00003CAA  82C2      
00003CAC  2F0C      6756          move.l    A4,-(A7)
00003CAE  4E95      6757          jsr       (A5)
00003CB0  DEFC 0010 6758          add.w     #16,A7
00003CB4  6000 002C 6759          bra       DisassembleInstruction_47
                    6760   DisassembleInstruction_46:
                    6761   ; else        // -(ax),-(ay) mode used
                    6762   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003CB8  2042      6763          move.l    D2,A0
00003CBA  3210      6764          move.w    (A0),D1
00003CBC  E041      6765          asr.w     #8,D1
00003CBE  E241      6766          asr.w     #1,D1
00003CC0  C27C 0007 6767          and.w     #7,D1
00003CC4  48C1      6768          ext.l     D1
00003CC6  2F01      6769          move.l    D1,-(A7)
00003CC8  2042      6770          move.l    D2,A0
00003CCA  3210      6771          move.w    (A0),D1
00003CCC  C27C 0007 6772          and.w     #7,D1
00003CD0  48C1      6773          ext.l     D1
00003CD2  2F01      6774          move.l    D1,-(A7)
00003CD4  4879 0000 6775          pea       @m68kde~2_229.L
00003CD8  82CA      
00003CDA  2F0C      6776          move.l    A4,-(A7)
00003CDC  4E95      6777          jsr       (A5)
00003CDE  DEFC 0010 6778          add.w     #16,A7
                    6779   DisassembleInstruction_47:
                    6780   ; strcatInstruction(TempString) ;
00003CE2  2F0C      6781          move.l    A4,-(A7)
00003CE4  4EB8 0CCC 6782          jsr       _strcatInstruction
00003CE8  584F      6783          addq.w    #4,A7
                    6784   DisassembleInstruction_44:
                    6785   ; }
                    6786   ; }
                    6787   ; /////////////////////////////////////////////////////////////////////////////////
                    6788   ; // if instruction is AND
                    6789   ; /////////////////////////////////////////////////////////////////////////////////
                    6790   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
00003CEA  2042      6791          move.l    D2,A0
00003CEC  3010      6792          move.w    (A0),D0
00003CEE  C07C F000 6793          and.w     #61440,D0
00003CF2  0C40 C000 6794          cmp.w     #49152,D0
00003CF6  662A      6795          bne.s     DisassembleInstruction_50
                    6796   ; InstructionSize = 1;
00003CF8  24BC 0000 6797          move.l    #1,(A2)
00003CFC  0001      
                    6798   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6799   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
00003CFE  2042      6800          move.l    D2,A0
00003D00  3010      6801          move.w    (A0),D0
00003D02  E840      6802          asr.w     #4,D0
00003D04  C07C 001F 6803          and.w     #31,D0
00003D08  3600      6804          move.w    D0,D3
                    6805   ; if(OpMode != (unsigned short int)(0x0010))   {
00003D0A  0C43 0010 6806          cmp.w     #16,D3
00003D0E  6712      6807          beq.s     DisassembleInstruction_50
                    6808   ; strcpyInstruction("AND") ;
00003D10  4879 0000 6809          pea       @m68kde~2_230.L
00003D14  82D8      
00003D16  4E93      6810          jsr       (A3)
00003D18  584F      6811          addq.w    #4,A7
                    6812   ; Decode3BitOperandMode(OpCode) ;
00003D1A  2F02      6813          move.l    D2,-(A7)
00003D1C  4EB8 36D8 6814          jsr       _Decode3BitOperandMode
00003D20  584F      6815          addq.w    #4,A7
                    6816   DisassembleInstruction_50:
                    6817   ; }
                    6818   ; }
                    6819   ; /////////////////////////////////////////////////////////////////////////////////
                    6820   ; // if instruction is ANDI to CCR
                    6821   ; /////////////////////////////////////////////////////////////////////////////////
                    6822   ; if(*OpCode == (unsigned short int)(0x023C))   {
00003D22  2042      6823          move.l    D2,A0
00003D24  3010      6824          move.w    (A0),D0
00003D26  0C40 023C 6825          cmp.w     #572,D0
00003D2A  662A      6826          bne.s     DisassembleInstruction_52
                    6827   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00003D2C  2042      6828          move.l    D2,A0
00003D2E  3228 0002 6829          move.w    2(A0),D1
00003D32  C27C 00FF 6830          and.w     #255,D1
00003D36  C2BC 0000 6831          and.l     #65535,D1
00003D3A  FFFF      
00003D3C  2F01      6832          move.l    D1,-(A7)
00003D3E  4879 0000 6833          pea       @m68kde~2_231.L
00003D42  82DC      
00003D44  4879 0803 6834          pea       _Instruction.L
00003D48  04E2      
00003D4A  4E95      6835          jsr       (A5)
00003D4C  DEFC 000C 6836          add.w     #12,A7
                    6837   ; InstructionSize = 2;
00003D50  24BC 0000 6838          move.l    #2,(A2)
00003D54  0002      
                    6839   DisassembleInstruction_52:
                    6840   ; }
                    6841   ; /////////////////////////////////////////////////////////////////////////////////
                    6842   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    6843   ; /////////////////////////////////////////////////////////////////////////////////
                    6844   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
00003D56  2042      6845          move.l    D2,A0
00003D58  3010      6846          move.w    (A0),D0
00003D5A  C07C F018 6847          and.w     #61464,D0
00003D5E  0C40 E000 6848          cmp.w     #57344,D0
00003D62  6604      6849          bne.s     DisassembleInstruction_56
00003D64  7001      6850          moveq     #1,D0
00003D66  6002      6851          bra.s     DisassembleInstruction_57
                    6852   DisassembleInstruction_56:
00003D68  4280      6853          clr.l     D0
                    6854   DisassembleInstruction_57:
00003D6A  2042      6855          move.l    D2,A0
00003D6C  3210      6856          move.w    (A0),D1
00003D6E  C27C FEC0 6857          and.w     #65216,D1
00003D72  0C41 E0C0 6858          cmp.w     #57536,D1
00003D76  6604      6859          bne.s     DisassembleInstruction_58
00003D78  7201      6860          moveq     #1,D1
00003D7A  6002      6861          bra.s     DisassembleInstruction_59
                    6862   DisassembleInstruction_58:
00003D7C  4281      6863          clr.l     D1
                    6864   DisassembleInstruction_59:
00003D7E  8041      6865          or.w      D1,D0
00003D80  2042      6866          move.l    D2,A0
00003D82  3210      6867          move.w    (A0),D1
00003D84  C27C F018 6868          and.w     #61464,D1
00003D88  0C41 E008 6869          cmp.w     #57352,D1
00003D8C  6604      6870          bne.s     DisassembleInstruction_60
00003D8E  7201      6871          moveq     #1,D1
00003D90  6002      6872          bra.s     DisassembleInstruction_61
                    6873   DisassembleInstruction_60:
00003D92  4281      6874          clr.l     D1
                    6875   DisassembleInstruction_61:
00003D94  8041      6876          or.w      D1,D0
00003D96  2042      6877          move.l    D2,A0
00003D98  3210      6878          move.w    (A0),D1
00003D9A  C27C FEC0 6879          and.w     #65216,D1
00003D9E  0C41 E2C0 6880          cmp.w     #58048,D1
00003DA2  6604      6881          bne.s     DisassembleInstruction_62
00003DA4  7201      6882          moveq     #1,D1
00003DA6  6002      6883          bra.s     DisassembleInstruction_63
                    6884   DisassembleInstruction_62:
00003DA8  4281      6885          clr.l     D1
                    6886   DisassembleInstruction_63:
00003DAA  8041      6887          or.w      D1,D0
00003DAC  2042      6888          move.l    D2,A0
00003DAE  3210      6889          move.w    (A0),D1
00003DB0  C27C F018 6890          and.w     #61464,D1
00003DB4  0C41 E018 6891          cmp.w     #57368,D1
00003DB8  6604      6892          bne.s     DisassembleInstruction_64
00003DBA  7201      6893          moveq     #1,D1
00003DBC  6002      6894          bra.s     DisassembleInstruction_65
                    6895   DisassembleInstruction_64:
00003DBE  4281      6896          clr.l     D1
                    6897   DisassembleInstruction_65:
00003DC0  8041      6898          or.w      D1,D0
00003DC2  2042      6899          move.l    D2,A0
00003DC4  3210      6900          move.w    (A0),D1
00003DC6  C27C FEC0 6901          and.w     #65216,D1
00003DCA  0C41 E6C0 6902          cmp.w     #59072,D1
00003DCE  6604      6903          bne.s     DisassembleInstruction_66
00003DD0  7201      6904          moveq     #1,D1
00003DD2  6002      6905          bra.s     DisassembleInstruction_67
                    6906   DisassembleInstruction_66:
00003DD4  4281      6907          clr.l     D1
                    6908   DisassembleInstruction_67:
00003DD6  8041      6909          or.w      D1,D0
00003DD8  2042      6910          move.l    D2,A0
00003DDA  3210      6911          move.w    (A0),D1
00003DDC  C27C F018 6912          and.w     #61464,D1
00003DE0  0C41 E010 6913          cmp.w     #57360,D1
00003DE4  6604      6914          bne.s     DisassembleInstruction_68
00003DE6  7201      6915          moveq     #1,D1
00003DE8  6002      6916          bra.s     DisassembleInstruction_69
                    6917   DisassembleInstruction_68:
00003DEA  4281      6918          clr.l     D1
                    6919   DisassembleInstruction_69:
00003DEC  8041      6920          or.w      D1,D0
00003DEE  2042      6921          move.l    D2,A0
00003DF0  3210      6922          move.w    (A0),D1
00003DF2  C27C FEC0 6923          and.w     #65216,D1
00003DF6  0C41 E4C0 6924          cmp.w     #58560,D1
00003DFA  6604      6925          bne.s     DisassembleInstruction_70
00003DFC  7201      6926          moveq     #1,D1
00003DFE  6002      6927          bra.s     DisassembleInstruction_71
                    6928   DisassembleInstruction_70:
00003E00  4281      6929          clr.l     D1
                    6930   DisassembleInstruction_71:
00003E02  8041      6931          or.w      D1,D0
00003E04  6700 0252 6932          beq       DisassembleInstruction_73
                    6933   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    6934   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    6935   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    6936   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    6937   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    6938   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    6939   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    6940   ; {
                    6941   ; InstructionSize = 1;
00003E08  24BC 0000 6942          move.l    #1,(A2)
00003E0C  0001      
                    6943   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    6944   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
00003E0E  2042      6945          move.l    D2,A0
00003E10  3010      6946          move.w    (A0),D0
00003E12  C07C 00C0 6947          and.w     #192,D0
00003E16  0C40 00C0 6948          cmp.w     #192,D0
00003E1A  6600 00EA 6949          bne       DisassembleInstruction_72
                    6950   ; {
                    6951   ; // test direction by testing bit 8
                    6952   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
00003E1E  2042      6953          move.l    D2,A0
00003E20  3010      6954          move.w    (A0),D0
00003E22  C07C FEC0 6955          and.w     #65216,D0
00003E26  0C40 E0C0 6956          cmp.w     #57536,D0
00003E2A  6624      6957          bne.s     DisassembleInstruction_77
                    6958   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003E2C  2042      6959          move.l    D2,A0
00003E2E  3010      6960          move.w    (A0),D0
00003E30  C07C 0100 6961          and.w     #256,D0
00003E34  0C40 0100 6962          cmp.w     #256,D0
00003E38  660C      6963          bne.s     DisassembleInstruction_76
                    6964   ; strcpyInstruction("ASL") ;
00003E3A  4879 0000 6965          pea       @m68kde~2_232.L
00003E3E  82EC      
00003E40  4E93      6966          jsr       (A3)
00003E42  584F      6967          addq.w    #4,A7
00003E44  600A      6968          bra.s     DisassembleInstruction_77
                    6969   DisassembleInstruction_76:
                    6970   ; else
                    6971   ; strcpyInstruction("ASR") ;
00003E46  4879 0000 6972          pea       @m68kde~2_233.L
00003E4A  82F0      
00003E4C  4E93      6973          jsr       (A3)
00003E4E  584F      6974          addq.w    #4,A7
                    6975   DisassembleInstruction_77:
                    6976   ; // test direction by testing bit 8
                    6977   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
00003E50  2042      6978          move.l    D2,A0
00003E52  3010      6979          move.w    (A0),D0
00003E54  C07C FEC0 6980          and.w     #65216,D0
00003E58  0C40 E2C0 6981          cmp.w     #58048,D0
00003E5C  6624      6982          bne.s     DisassembleInstruction_81
                    6983   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003E5E  2042      6984          move.l    D2,A0
00003E60  3010      6985          move.w    (A0),D0
00003E62  C07C 0100 6986          and.w     #256,D0
00003E66  0C40 0100 6987          cmp.w     #256,D0
00003E6A  660C      6988          bne.s     DisassembleInstruction_80
                    6989   ; strcpyInstruction("LSL") ;
00003E6C  4879 0000 6990          pea       @m68kde~2_234.L
00003E70  82F4      
00003E72  4E93      6991          jsr       (A3)
00003E74  584F      6992          addq.w    #4,A7
00003E76  600A      6993          bra.s     DisassembleInstruction_81
                    6994   DisassembleInstruction_80:
                    6995   ; else
                    6996   ; strcpyInstruction("LSR") ;
00003E78  4879 0000 6997          pea       @m68kde~2_235.L
00003E7C  82F8      
00003E7E  4E93      6998          jsr       (A3)
00003E80  584F      6999          addq.w    #4,A7
                    7000   DisassembleInstruction_81:
                    7001   ; // test direction by testing bit 8
                    7002   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
00003E82  2042      7003          move.l    D2,A0
00003E84  3010      7004          move.w    (A0),D0
00003E86  C07C FEC0 7005          and.w     #65216,D0
00003E8A  0C40 E6C0 7006          cmp.w     #59072,D0
00003E8E  6624      7007          bne.s     DisassembleInstruction_85
                    7008   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003E90  2042      7009          move.l    D2,A0
00003E92  3010      7010          move.w    (A0),D0
00003E94  C07C 0100 7011          and.w     #256,D0
00003E98  0C40 0100 7012          cmp.w     #256,D0
00003E9C  660C      7013          bne.s     DisassembleInstruction_84
                    7014   ; strcpyInstruction("ROL") ;
00003E9E  4879 0000 7015          pea       @m68kde~2_236.L
00003EA2  82FC      
00003EA4  4E93      7016          jsr       (A3)
00003EA6  584F      7017          addq.w    #4,A7
00003EA8  600A      7018          bra.s     DisassembleInstruction_85
                    7019   DisassembleInstruction_84:
                    7020   ; else
                    7021   ; strcpyInstruction("ROR") ;
00003EAA  4879 0000 7022          pea       @m68kde~2_237.L
00003EAE  8300      
00003EB0  4E93      7023          jsr       (A3)
00003EB2  584F      7024          addq.w    #4,A7
                    7025   DisassembleInstruction_85:
                    7026   ; // test direction by testing bit 8
                    7027   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
00003EB4  2042      7028          move.l    D2,A0
00003EB6  3010      7029          move.w    (A0),D0
00003EB8  C07C FEC0 7030          and.w     #65216,D0
00003EBC  0C40 E4C0 7031          cmp.w     #58560,D0
00003EC0  6624      7032          bne.s     DisassembleInstruction_89
                    7033   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003EC2  2042      7034          move.l    D2,A0
00003EC4  3010      7035          move.w    (A0),D0
00003EC6  C07C 0100 7036          and.w     #256,D0
00003ECA  0C40 0100 7037          cmp.w     #256,D0
00003ECE  660C      7038          bne.s     DisassembleInstruction_88
                    7039   ; strcpyInstruction("ROXL") ;
00003ED0  4879 0000 7040          pea       @m68kde~2_238.L
00003ED4  8304      
00003ED6  4E93      7041          jsr       (A3)
00003ED8  584F      7042          addq.w    #4,A7
00003EDA  600A      7043          bra.s     DisassembleInstruction_89
                    7044   DisassembleInstruction_88:
                    7045   ; else
                    7046   ; strcpyInstruction("ROXR") ;
00003EDC  4879 0000 7047          pea       @m68kde~2_239.L
00003EE0  830A      
00003EE2  4E93      7048          jsr       (A3)
00003EE4  584F      7049          addq.w    #4,A7
                    7050   DisassembleInstruction_89:
                    7051   ; strcatInstruction("  ") ;
00003EE6  4879 0000 7052          pea       @m68kde~2_15.L
00003EEA  6D44      
00003EEC  4EB8 0CCC 7053          jsr       _strcatInstruction
00003EF0  584F      7054          addq.w    #4,A7
                    7055   ; Decode6BitEA(OpCode,0, 0,0) ;
00003EF2  42A7      7056          clr.l     -(A7)
00003EF4  42A7      7057          clr.l     -(A7)
00003EF6  42A7      7058          clr.l     -(A7)
00003EF8  2F02      7059          move.l    D2,-(A7)
00003EFA  4EB8 32B0 7060          jsr       _Decode6BitEA
00003EFE  DEFC 0010 7061          add.w     #16,A7
00003F02  6000 0154 7062          bra       DisassembleInstruction_73
                    7063   DisassembleInstruction_72:
                    7064   ; }
                    7065   ; // first version of above instructions, bit 5 is 0
                    7066   ; else
                    7067   ; {
                    7068   ; // test instruction and direction by testing bits 4,3
                    7069   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00003F06  2042      7070          move.l    D2,A0
00003F08  3010      7071          move.w    (A0),D0
00003F0A  C07C 0018 7072          and.w     #24,D0
00003F0E  6624      7073          bne.s     DisassembleInstruction_93
                    7074   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003F10  2042      7075          move.l    D2,A0
00003F12  3010      7076          move.w    (A0),D0
00003F14  C07C 0100 7077          and.w     #256,D0
00003F18  0C40 0100 7078          cmp.w     #256,D0
00003F1C  660C      7079          bne.s     DisassembleInstruction_92
                    7080   ; strcpyInstruction("ASL") ;
00003F1E  4879 0000 7081          pea       @m68kde~2_232.L
00003F22  82EC      
00003F24  4E93      7082          jsr       (A3)
00003F26  584F      7083          addq.w    #4,A7
00003F28  600A      7084          bra.s     DisassembleInstruction_93
                    7085   DisassembleInstruction_92:
                    7086   ; else
                    7087   ; strcpyInstruction("ASR") ;
00003F2A  4879 0000 7088          pea       @m68kde~2_233.L
00003F2E  82F0      
00003F30  4E93      7089          jsr       (A3)
00003F32  584F      7090          addq.w    #4,A7
                    7091   DisassembleInstruction_93:
                    7092   ; // test instruction and direction by testing bits 4,3
                    7093   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
00003F34  2042      7094          move.l    D2,A0
00003F36  3010      7095          move.w    (A0),D0
00003F38  C07C 0018 7096          and.w     #24,D0
00003F3C  0C40 0008 7097          cmp.w     #8,D0
00003F40  6624      7098          bne.s     DisassembleInstruction_97
                    7099   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003F42  2042      7100          move.l    D2,A0
00003F44  3010      7101          move.w    (A0),D0
00003F46  C07C 0100 7102          and.w     #256,D0
00003F4A  0C40 0100 7103          cmp.w     #256,D0
00003F4E  660C      7104          bne.s     DisassembleInstruction_96
                    7105   ; strcpyInstruction("LSL") ;
00003F50  4879 0000 7106          pea       @m68kde~2_234.L
00003F54  82F4      
00003F56  4E93      7107          jsr       (A3)
00003F58  584F      7108          addq.w    #4,A7
00003F5A  600A      7109          bra.s     DisassembleInstruction_97
                    7110   DisassembleInstruction_96:
                    7111   ; else
                    7112   ; strcpyInstruction("LSR") ;
00003F5C  4879 0000 7113          pea       @m68kde~2_235.L
00003F60  82F8      
00003F62  4E93      7114          jsr       (A3)
00003F64  584F      7115          addq.w    #4,A7
                    7116   DisassembleInstruction_97:
                    7117   ; // test instruction and direction by testing bits 4,3
                    7118   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
00003F66  2042      7119          move.l    D2,A0
00003F68  3010      7120          move.w    (A0),D0
00003F6A  C07C 0018 7121          and.w     #24,D0
00003F6E  0C40 0018 7122          cmp.w     #24,D0
00003F72  6624      7123          bne.s     DisassembleInstruction_101
                    7124   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003F74  2042      7125          move.l    D2,A0
00003F76  3010      7126          move.w    (A0),D0
00003F78  C07C 0100 7127          and.w     #256,D0
00003F7C  0C40 0100 7128          cmp.w     #256,D0
00003F80  660C      7129          bne.s     DisassembleInstruction_100
                    7130   ; strcpyInstruction("ROL") ;
00003F82  4879 0000 7131          pea       @m68kde~2_236.L
00003F86  82FC      
00003F88  4E93      7132          jsr       (A3)
00003F8A  584F      7133          addq.w    #4,A7
00003F8C  600A      7134          bra.s     DisassembleInstruction_101
                    7135   DisassembleInstruction_100:
                    7136   ; else
                    7137   ; strcpyInstruction("ROR") ;
00003F8E  4879 0000 7138          pea       @m68kde~2_237.L
00003F92  8300      
00003F94  4E93      7139          jsr       (A3)
00003F96  584F      7140          addq.w    #4,A7
                    7141   DisassembleInstruction_101:
                    7142   ; // test instruction and direction by testing bits 4,3
                    7143   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
00003F98  2042      7144          move.l    D2,A0
00003F9A  3010      7145          move.w    (A0),D0
00003F9C  C07C 0018 7146          and.w     #24,D0
00003FA0  0C40 0010 7147          cmp.w     #16,D0
00003FA4  6624      7148          bne.s     DisassembleInstruction_105
                    7149   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003FA6  2042      7150          move.l    D2,A0
00003FA8  3010      7151          move.w    (A0),D0
00003FAA  C07C 0100 7152          and.w     #256,D0
00003FAE  0C40 0100 7153          cmp.w     #256,D0
00003FB2  660C      7154          bne.s     DisassembleInstruction_104
                    7155   ; strcpyInstruction("ROXL") ;
00003FB4  4879 0000 7156          pea       @m68kde~2_238.L
00003FB8  8304      
00003FBA  4E93      7157          jsr       (A3)
00003FBC  584F      7158          addq.w    #4,A7
00003FBE  600A      7159          bra.s     DisassembleInstruction_105
                    7160   DisassembleInstruction_104:
                    7161   ; else
                    7162   ; strcpyInstruction("ROXR") ;
00003FC0  4879 0000 7163          pea       @m68kde~2_239.L
00003FC4  830A      
00003FC6  4E93      7164          jsr       (A3)
00003FC8  584F      7165          addq.w    #4,A7
                    7166   DisassembleInstruction_105:
                    7167   ; Decode2BitOperandSize(*OpCode) ;
00003FCA  2042      7168          move.l    D2,A0
00003FCC  3210      7169          move.w    (A0),D1
00003FCE  C2BC 0000 7170          and.l     #65535,D1
00003FD2  FFFF      
00003FD4  2F01      7171          move.l    D1,-(A7)
00003FD6  4EB8 301C 7172          jsr       _Decode2BitOperandSize
00003FDA  584F      7173          addq.w    #4,A7
                    7174   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
00003FDC  2042      7175          move.l    D2,A0
00003FDE  3010      7176          move.w    (A0),D0
00003FE0  C07C 0020 7177          and.w     #32,D0
00003FE4  6600 0038 7178          bne       DisassembleInstruction_106
                    7179   ; sprintf(TempString,"#$%X,D%X",
00003FE8  2042      7180          move.l    D2,A0
00003FEA  3210      7181          move.w    (A0),D1
00003FEC  C27C 0007 7182          and.w     #7,D1
00003FF0  C2BC 0000 7183          and.l     #65535,D1
00003FF4  FFFF      
00003FF6  2F01      7184          move.l    D1,-(A7)
00003FF8  2042      7185          move.l    D2,A0
00003FFA  3210      7186          move.w    (A0),D1
00003FFC  E041      7187          asr.w     #8,D1
00003FFE  E241      7188          asr.w     #1,D1
00004000  C27C 0007 7189          and.w     #7,D1
00004004  C2BC 0000 7190          and.l     #65535,D1
00004008  FFFF      
0000400A  2F01      7191          move.l    D1,-(A7)
0000400C  4879 0000 7192          pea       @m68kde~2_240.L
00004010  8310      
00004012  2F0C      7193          move.l    A4,-(A7)
00004014  4E95      7194          jsr       (A5)
00004016  DEFC 0010 7195          add.w     #16,A7
0000401A  6000 0034 7196          bra       DisassembleInstruction_107
                    7197   DisassembleInstruction_106:
                    7198   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7199   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7200   ; }
                    7201   ; else {                                                                      // if shift is for example ASR D1,D2
                    7202   ; sprintf(TempString,"D%X,D%X",
0000401E  2042      7203          move.l    D2,A0
00004020  3210      7204          move.w    (A0),D1
00004022  C27C 0007 7205          and.w     #7,D1
00004026  C2BC 0000 7206          and.l     #65535,D1
0000402A  FFFF      
0000402C  2F01      7207          move.l    D1,-(A7)
0000402E  2042      7208          move.l    D2,A0
00004030  3210      7209          move.w    (A0),D1
00004032  E041      7210          asr.w     #8,D1
00004034  E241      7211          asr.w     #1,D1
00004036  C27C 0007 7212          and.w     #7,D1
0000403A  C2BC 0000 7213          and.l     #65535,D1
0000403E  FFFF      
00004040  2F01      7214          move.l    D1,-(A7)
00004042  4879 0000 7215          pea       @m68kde~2_228.L
00004046  82C2      
00004048  2F0C      7216          move.l    A4,-(A7)
0000404A  4E95      7217          jsr       (A5)
0000404C  DEFC 0010 7218          add.w     #16,A7
                    7219   DisassembleInstruction_107:
                    7220   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7221   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7222   ; }
                    7223   ; strcatInstruction(TempString) ;
00004050  2F0C      7224          move.l    A4,-(A7)
00004052  4EB8 0CCC 7225          jsr       _strcatInstruction
00004056  584F      7226          addq.w    #4,A7
                    7227   DisassembleInstruction_73:
                    7228   ; }
                    7229   ; }
                    7230   ; /////////////////////////////////////////////////////////////////////////////////
                    7231   ; // if instruction is BCC and BSR and BRA
                    7232   ; /////////////////////////////////////////////////////////////////////////////////
                    7233   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
00004058  2042      7234          move.l    D2,A0
0000405A  3010      7235          move.w    (A0),D0
0000405C  C07C F000 7236          and.w     #61440,D0
00004060  0C40 6000 7237          cmp.w     #24576,D0
00004064  6600 00A0 7238          bne       DisassembleInstruction_108
                    7239   ; {
                    7240   ; InstructionSize = 1;
00004068  24BC 0000 7241          move.l    #1,(A2)
0000406C  0001      
                    7242   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
0000406E  2042      7243          move.l    D2,A0
00004070  3010      7244          move.w    (A0),D0
00004072  E040      7245          asr.w     #8,D0
00004074  C07C 000F 7246          and.w     #15,D0
00004078  1D40 FFE9 7247          move.b    D0,-23(A6)
                    7248   ; strcpyInstruction("B") ;
0000407C  4879 0000 7249          pea       @m68kde~2_241.L
00004080  831A      
00004082  4E93      7250          jsr       (A3)
00004084  584F      7251          addq.w    #4,A7
                    7252   ; DecodeBranchCondition(Condition) ;
00004086  122E FFE9 7253          move.b    -23(A6),D1
0000408A  C27C 00FF 7254          and.w     #255,D1
0000408E  C2BC 0000 7255          and.l     #65535,D1
00004092  FFFF      
00004094  2F01      7256          move.l    D1,-(A7)
00004096  4EB8 376E 7257          jsr       _DecodeBranchCondition
0000409A  584F      7258          addq.w    #4,A7
                    7259   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
0000409C  2042      7260          move.l    D2,A0
0000409E  3010      7261          move.w    (A0),D0
000040A0  C07C 00FF 7262          and.w     #255,D0
000040A4  1D40 FFFB 7263          move.b    D0,-5(A6)
                    7264   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
000040A8  102E FFFB 7265          move.b    -5(A6),D0
000040AC  4880      7266          ext.w     D0
000040AE  4A40      7267          tst.w     D0
000040B0  662A      7268          bne.s     DisassembleInstruction_110
                    7269   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
000040B2  2202      7270          move.l    D2,D1
000040B4  2042      7271          move.l    D2,A0
000040B6  2F00      7272          move.l    D0,-(A7)
000040B8  3028 0002 7273          move.w    2(A0),D0
000040BC  48C0      7274          ext.l     D0
000040BE  D280      7275          add.l     D0,D1
000040C0  201F      7276          move.l    (A7)+,D0
000040C2  5481      7277          addq.l    #2,D1
000040C4  2F01      7278          move.l    D1,-(A7)
000040C6  4879 0000 7279          pea       @m68kde~2_191.L
000040CA  81E6      
000040CC  2F0C      7280          move.l    A4,-(A7)
000040CE  4E95      7281          jsr       (A5)
000040D0  DEFC 000C 7282          add.w     #12,A7
                    7283   ; InstructionSize = 2 ;
000040D4  24BC 0000 7284          move.l    #2,(A2)
000040D8  0002      
000040DA  6022      7285          bra.s     DisassembleInstruction_111
                    7286   DisassembleInstruction_110:
                    7287   ; }
                    7288   ; else
                    7289   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
000040DC  2202      7290          move.l    D2,D1
000040DE  2F00      7291          move.l    D0,-(A7)
000040E0  102E FFFB 7292          move.b    -5(A6),D0
000040E4  4880      7293          ext.w     D0
000040E6  48C0      7294          ext.l     D0
000040E8  D280      7295          add.l     D0,D1
000040EA  201F      7296          move.l    (A7)+,D0
000040EC  5481      7297          addq.l    #2,D1
000040EE  2F01      7298          move.l    D1,-(A7)
000040F0  4879 0000 7299          pea       @m68kde~2_191.L
000040F4  81E6      
000040F6  2F0C      7300          move.l    A4,-(A7)
000040F8  4E95      7301          jsr       (A5)
000040FA  DEFC 000C 7302          add.w     #12,A7
                    7303   DisassembleInstruction_111:
                    7304   ; strcatInstruction(TempString) ;
000040FE  2F0C      7305          move.l    A4,-(A7)
00004100  4EB8 0CCC 7306          jsr       _strcatInstruction
00004104  584F      7307          addq.w    #4,A7
                    7308   DisassembleInstruction_108:
                    7309   ; }
                    7310   ; /////////////////////////////////////////////////////////////////////////////////
                    7311   ; // if instruction is BCHG dn,<EA>
                    7312   ; /////////////////////////////////////////////////////////////////////////////////
                    7313   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
00004106  2042      7314          move.l    D2,A0
00004108  3010      7315          move.w    (A0),D0
0000410A  C07C F1C0 7316          and.w     #61888,D0
0000410E  0C40 0140 7317          cmp.w     #320,D0
00004112  6600 004C 7318          bne       DisassembleInstruction_112
                    7319   ; InstructionSize = 1;
00004116  24BC 0000 7320          move.l    #1,(A2)
0000411A  0001      
                    7321   ; strcpyInstruction("BCHG ") ;
0000411C  4879 0000 7322          pea       @m68kde~2_242.L
00004120  831C      
00004122  4E93      7323          jsr       (A3)
00004124  584F      7324          addq.w    #4,A7
                    7325   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004126  2042      7326          move.l    D2,A0
00004128  3210      7327          move.w    (A0),D1
0000412A  E041      7328          asr.w     #8,D1
0000412C  E241      7329          asr.w     #1,D1
0000412E  C27C 0007 7330          and.w     #7,D1
00004132  C2BC 0000 7331          and.l     #65535,D1
00004136  FFFF      
00004138  2F01      7332          move.l    D1,-(A7)
0000413A  4879 0000 7333          pea       @m68kde~2_243.L
0000413E  8322      
00004140  2F0C      7334          move.l    A4,-(A7)
00004142  4E95      7335          jsr       (A5)
00004144  DEFC 000C 7336          add.w     #12,A7
                    7337   ; strcatInstruction(TempString) ;
00004148  2F0C      7338          move.l    A4,-(A7)
0000414A  4EB8 0CCC 7339          jsr       _strcatInstruction
0000414E  584F      7340          addq.w    #4,A7
                    7341   ; Decode6BitEA(OpCode,0,0,0) ;
00004150  42A7      7342          clr.l     -(A7)
00004152  42A7      7343          clr.l     -(A7)
00004154  42A7      7344          clr.l     -(A7)
00004156  2F02      7345          move.l    D2,-(A7)
00004158  4EB8 32B0 7346          jsr       _Decode6BitEA
0000415C  DEFC 0010 7347          add.w     #16,A7
                    7348   DisassembleInstruction_112:
                    7349   ; }
                    7350   ; /////////////////////////////////////////////////////////////////////////////////
                    7351   ; // if instruction is BCHG #data,<EA>
                    7352   ; /////////////////////////////////////////////////////////////////////////////////
                    7353   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
00004160  2042      7354          move.l    D2,A0
00004162  3010      7355          move.w    (A0),D0
00004164  C07C FFC0 7356          and.w     #65472,D0
00004168  0C40 0840 7357          cmp.w     #2112,D0
0000416C  6600 0044 7358          bne       DisassembleInstruction_114
                    7359   ; strcpyInstruction("BCHG ") ;
00004170  4879 0000 7360          pea       @m68kde~2_242.L
00004174  831C      
00004176  4E93      7361          jsr       (A3)
00004178  584F      7362          addq.w    #4,A7
                    7363   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
0000417A  2042      7364          move.l    D2,A0
0000417C  3228 0002 7365          move.w    2(A0),D1
00004180  48C1      7366          ext.l     D1
00004182  2F01      7367          move.l    D1,-(A7)
00004184  4879 0000 7368          pea       @m68kde~2_244.L
00004188  8328      
0000418A  2F0C      7369          move.l    A4,-(A7)
0000418C  4E95      7370          jsr       (A5)
0000418E  DEFC 000C 7371          add.w     #12,A7
                    7372   ; InstructionSize = 2 ;
00004192  24BC 0000 7373          move.l    #2,(A2)
00004196  0002      
                    7374   ; strcatInstruction(TempString) ;
00004198  2F0C      7375          move.l    A4,-(A7)
0000419A  4EB8 0CCC 7376          jsr       _strcatInstruction
0000419E  584F      7377          addq.w    #4,A7
                    7378   ; Decode6BitEA(OpCode,0,1,0) ;
000041A0  42A7      7379          clr.l     -(A7)
000041A2  4878 0001 7380          pea       1
000041A6  42A7      7381          clr.l     -(A7)
000041A8  2F02      7382          move.l    D2,-(A7)
000041AA  4EB8 32B0 7383          jsr       _Decode6BitEA
000041AE  DEFC 0010 7384          add.w     #16,A7
                    7385   DisassembleInstruction_114:
                    7386   ; }
                    7387   ; /////////////////////////////////////////////////////////////////////////////////
                    7388   ; // if instruction is BCLR  dn,<EA>
                    7389   ; /////////////////////////////////////////////////////////////////////////////////
                    7390   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
000041B2  2042      7391          move.l    D2,A0
000041B4  3010      7392          move.w    (A0),D0
000041B6  C07C F1C0 7393          and.w     #61888,D0
000041BA  0C40 0180 7394          cmp.w     #384,D0
000041BE  6600 004C 7395          bne       DisassembleInstruction_116
                    7396   ; InstructionSize = 1;
000041C2  24BC 0000 7397          move.l    #1,(A2)
000041C6  0001      
                    7398   ; strcpyInstruction("BCLR ") ;
000041C8  4879 0000 7399          pea       @m68kde~2_245.L
000041CC  832E      
000041CE  4E93      7400          jsr       (A3)
000041D0  584F      7401          addq.w    #4,A7
                    7402   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000041D2  2042      7403          move.l    D2,A0
000041D4  3210      7404          move.w    (A0),D1
000041D6  E041      7405          asr.w     #8,D1
000041D8  E241      7406          asr.w     #1,D1
000041DA  C27C 0007 7407          and.w     #7,D1
000041DE  C2BC 0000 7408          and.l     #65535,D1
000041E2  FFFF      
000041E4  2F01      7409          move.l    D1,-(A7)
000041E6  4879 0000 7410          pea       @m68kde~2_243.L
000041EA  8322      
000041EC  2F0C      7411          move.l    A4,-(A7)
000041EE  4E95      7412          jsr       (A5)
000041F0  DEFC 000C 7413          add.w     #12,A7
                    7414   ; strcatInstruction(TempString) ;
000041F4  2F0C      7415          move.l    A4,-(A7)
000041F6  4EB8 0CCC 7416          jsr       _strcatInstruction
000041FA  584F      7417          addq.w    #4,A7
                    7418   ; Decode6BitEA(OpCode,0,0,0) ;
000041FC  42A7      7419          clr.l     -(A7)
000041FE  42A7      7420          clr.l     -(A7)
00004200  42A7      7421          clr.l     -(A7)
00004202  2F02      7422          move.l    D2,-(A7)
00004204  4EB8 32B0 7423          jsr       _Decode6BitEA
00004208  DEFC 0010 7424          add.w     #16,A7
                    7425   DisassembleInstruction_116:
                    7426   ; }
                    7427   ; /////////////////////////////////////////////////////////////////////////////////
                    7428   ; // if instruction is BCLR #data,<EA>
                    7429   ; /////////////////////////////////////////////////////////////////////////////////
                    7430   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
0000420C  2042      7431          move.l    D2,A0
0000420E  3010      7432          move.w    (A0),D0
00004210  C07C FFC0 7433          and.w     #65472,D0
00004214  0C40 0880 7434          cmp.w     #2176,D0
00004218  6600 0044 7435          bne       DisassembleInstruction_118
                    7436   ; strcpyInstruction("BCLR ") ;
0000421C  4879 0000 7437          pea       @m68kde~2_245.L
00004220  832E      
00004222  4E93      7438          jsr       (A3)
00004224  584F      7439          addq.w    #4,A7
                    7440   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004226  2042      7441          move.l    D2,A0
00004228  3228 0002 7442          move.w    2(A0),D1
0000422C  48C1      7443          ext.l     D1
0000422E  2F01      7444          move.l    D1,-(A7)
00004230  4879 0000 7445          pea       @m68kde~2_244.L
00004234  8328      
00004236  2F0C      7446          move.l    A4,-(A7)
00004238  4E95      7447          jsr       (A5)
0000423A  DEFC 000C 7448          add.w     #12,A7
                    7449   ; InstructionSize = 2 ;
0000423E  24BC 0000 7450          move.l    #2,(A2)
00004242  0002      
                    7451   ; strcatInstruction(TempString) ;
00004244  2F0C      7452          move.l    A4,-(A7)
00004246  4EB8 0CCC 7453          jsr       _strcatInstruction
0000424A  584F      7454          addq.w    #4,A7
                    7455   ; Decode6BitEA(OpCode,0,1,0) ;
0000424C  42A7      7456          clr.l     -(A7)
0000424E  4878 0001 7457          pea       1
00004252  42A7      7458          clr.l     -(A7)
00004254  2F02      7459          move.l    D2,-(A7)
00004256  4EB8 32B0 7460          jsr       _Decode6BitEA
0000425A  DEFC 0010 7461          add.w     #16,A7
                    7462   DisassembleInstruction_118:
                    7463   ; }
                    7464   ; /////////////////////////////////////////////////////////////////////////////////
                    7465   ; // if instruction is BSET dn,<EA>
                    7466   ; /////////////////////////////////////////////////////////////////////////////////
                    7467   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
0000425E  2042      7468          move.l    D2,A0
00004260  3010      7469          move.w    (A0),D0
00004262  C07C F1C0 7470          and.w     #61888,D0
00004266  0C40 01C0 7471          cmp.w     #448,D0
0000426A  6600 004C 7472          bne       DisassembleInstruction_120
                    7473   ; InstructionSize = 1;
0000426E  24BC 0000 7474          move.l    #1,(A2)
00004272  0001      
                    7475   ; strcpyInstruction("BSET ") ;
00004274  4879 0000 7476          pea       @m68kde~2_246.L
00004278  8334      
0000427A  4E93      7477          jsr       (A3)
0000427C  584F      7478          addq.w    #4,A7
                    7479   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000427E  2042      7480          move.l    D2,A0
00004280  3210      7481          move.w    (A0),D1
00004282  E041      7482          asr.w     #8,D1
00004284  E241      7483          asr.w     #1,D1
00004286  C27C 0007 7484          and.w     #7,D1
0000428A  C2BC 0000 7485          and.l     #65535,D1
0000428E  FFFF      
00004290  2F01      7486          move.l    D1,-(A7)
00004292  4879 0000 7487          pea       @m68kde~2_243.L
00004296  8322      
00004298  2F0C      7488          move.l    A4,-(A7)
0000429A  4E95      7489          jsr       (A5)
0000429C  DEFC 000C 7490          add.w     #12,A7
                    7491   ; strcatInstruction(TempString) ;
000042A0  2F0C      7492          move.l    A4,-(A7)
000042A2  4EB8 0CCC 7493          jsr       _strcatInstruction
000042A6  584F      7494          addq.w    #4,A7
                    7495   ; Decode6BitEA(OpCode,0,0,0) ;
000042A8  42A7      7496          clr.l     -(A7)
000042AA  42A7      7497          clr.l     -(A7)
000042AC  42A7      7498          clr.l     -(A7)
000042AE  2F02      7499          move.l    D2,-(A7)
000042B0  4EB8 32B0 7500          jsr       _Decode6BitEA
000042B4  DEFC 0010 7501          add.w     #16,A7
                    7502   DisassembleInstruction_120:
                    7503   ; }
                    7504   ; /////////////////////////////////////////////////////////////////////////////////
                    7505   ; // if instruction is BSET #data,<EA>
                    7506   ; /////////////////////////////////////////////////////////////////////////////////
                    7507   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
000042B8  2042      7508          move.l    D2,A0
000042BA  3010      7509          move.w    (A0),D0
000042BC  C07C FFC0 7510          and.w     #65472,D0
000042C0  0C40 08C0 7511          cmp.w     #2240,D0
000042C4  6600 0044 7512          bne       DisassembleInstruction_122
                    7513   ; strcpyInstruction("BSET ") ;
000042C8  4879 0000 7514          pea       @m68kde~2_246.L
000042CC  8334      
000042CE  4E93      7515          jsr       (A3)
000042D0  584F      7516          addq.w    #4,A7
                    7517   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
000042D2  2042      7518          move.l    D2,A0
000042D4  3228 0002 7519          move.w    2(A0),D1
000042D8  48C1      7520          ext.l     D1
000042DA  2F01      7521          move.l    D1,-(A7)
000042DC  4879 0000 7522          pea       @m68kde~2_244.L
000042E0  8328      
000042E2  2F0C      7523          move.l    A4,-(A7)
000042E4  4E95      7524          jsr       (A5)
000042E6  DEFC 000C 7525          add.w     #12,A7
                    7526   ; InstructionSize = 2 ;
000042EA  24BC 0000 7527          move.l    #2,(A2)
000042EE  0002      
                    7528   ; strcatInstruction(TempString) ;
000042F0  2F0C      7529          move.l    A4,-(A7)
000042F2  4EB8 0CCC 7530          jsr       _strcatInstruction
000042F6  584F      7531          addq.w    #4,A7
                    7532   ; Decode6BitEA(OpCode,0,1,0) ;
000042F8  42A7      7533          clr.l     -(A7)
000042FA  4878 0001 7534          pea       1
000042FE  42A7      7535          clr.l     -(A7)
00004300  2F02      7536          move.l    D2,-(A7)
00004302  4EB8 32B0 7537          jsr       _Decode6BitEA
00004306  DEFC 0010 7538          add.w     #16,A7
                    7539   DisassembleInstruction_122:
                    7540   ; }
                    7541   ; /////////////////////////////////////////////////////////////////////////////////
                    7542   ; // if instruction is BTST dn,<EA>
                    7543   ; /////////////////////////////////////////////////////////////////////////////////
                    7544   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
0000430A  2042      7545          move.l    D2,A0
0000430C  3010      7546          move.w    (A0),D0
0000430E  C07C F1C0 7547          and.w     #61888,D0
00004312  0C40 0100 7548          cmp.w     #256,D0
00004316  6600 004C 7549          bne       DisassembleInstruction_124
                    7550   ; InstructionSize = 1;
0000431A  24BC 0000 7551          move.l    #1,(A2)
0000431E  0001      
                    7552   ; strcpyInstruction("BTST ") ;
00004320  4879 0000 7553          pea       @m68kde~2_247.L
00004324  833A      
00004326  4E93      7554          jsr       (A3)
00004328  584F      7555          addq.w    #4,A7
                    7556   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000432A  2042      7557          move.l    D2,A0
0000432C  3210      7558          move.w    (A0),D1
0000432E  E041      7559          asr.w     #8,D1
00004330  E241      7560          asr.w     #1,D1
00004332  C27C 0007 7561          and.w     #7,D1
00004336  C2BC 0000 7562          and.l     #65535,D1
0000433A  FFFF      
0000433C  2F01      7563          move.l    D1,-(A7)
0000433E  4879 0000 7564          pea       @m68kde~2_243.L
00004342  8322      
00004344  2F0C      7565          move.l    A4,-(A7)
00004346  4E95      7566          jsr       (A5)
00004348  DEFC 000C 7567          add.w     #12,A7
                    7568   ; strcatInstruction(TempString) ;
0000434C  2F0C      7569          move.l    A4,-(A7)
0000434E  4EB8 0CCC 7570          jsr       _strcatInstruction
00004352  584F      7571          addq.w    #4,A7
                    7572   ; Decode6BitEA(OpCode,0,0,0) ;
00004354  42A7      7573          clr.l     -(A7)
00004356  42A7      7574          clr.l     -(A7)
00004358  42A7      7575          clr.l     -(A7)
0000435A  2F02      7576          move.l    D2,-(A7)
0000435C  4EB8 32B0 7577          jsr       _Decode6BitEA
00004360  DEFC 0010 7578          add.w     #16,A7
                    7579   DisassembleInstruction_124:
                    7580   ; }
                    7581   ; /////////////////////////////////////////////////////////////////////////////////
                    7582   ; // if instruction is BTST #data,<EA>
                    7583   ; /////////////////////////////////////////////////////////////////////////////////
                    7584   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
00004364  2042      7585          move.l    D2,A0
00004366  3010      7586          move.w    (A0),D0
00004368  C07C FFC0 7587          and.w     #65472,D0
0000436C  0C40 0800 7588          cmp.w     #2048,D0
00004370  6600 0044 7589          bne       DisassembleInstruction_126
                    7590   ; strcpyInstruction("BTST ") ;
00004374  4879 0000 7591          pea       @m68kde~2_247.L
00004378  833A      
0000437A  4E93      7592          jsr       (A3)
0000437C  584F      7593          addq.w    #4,A7
                    7594   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
0000437E  2042      7595          move.l    D2,A0
00004380  3228 0002 7596          move.w    2(A0),D1
00004384  48C1      7597          ext.l     D1
00004386  2F01      7598          move.l    D1,-(A7)
00004388  4879 0000 7599          pea       @m68kde~2_244.L
0000438C  8328      
0000438E  2F0C      7600          move.l    A4,-(A7)
00004390  4E95      7601          jsr       (A5)
00004392  DEFC 000C 7602          add.w     #12,A7
                    7603   ; InstructionSize = 2 ;
00004396  24BC 0000 7604          move.l    #2,(A2)
0000439A  0002      
                    7605   ; strcatInstruction(TempString) ;
0000439C  2F0C      7606          move.l    A4,-(A7)
0000439E  4EB8 0CCC 7607          jsr       _strcatInstruction
000043A2  584F      7608          addq.w    #4,A7
                    7609   ; Decode6BitEA(OpCode,0,1,0) ;
000043A4  42A7      7610          clr.l     -(A7)
000043A6  4878 0001 7611          pea       1
000043AA  42A7      7612          clr.l     -(A7)
000043AC  2F02      7613          move.l    D2,-(A7)
000043AE  4EB8 32B0 7614          jsr       _Decode6BitEA
000043B2  DEFC 0010 7615          add.w     #16,A7
                    7616   DisassembleInstruction_126:
                    7617   ; }
                    7618   ; /////////////////////////////////////////////////////////////////////////////////
                    7619   ; // if instruction is CHK.W <EA>,DN
                    7620   ; /////////////////////////////////////////////////////////////////////////////////
                    7621   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
000043B6  2042      7622          move.l    D2,A0
000043B8  3010      7623          move.w    (A0),D0
000043BA  C07C F1C0 7624          and.w     #61888,D0
000043BE  0C40 4180 7625          cmp.w     #16768,D0
000043C2  6600 004C 7626          bne       DisassembleInstruction_128
                    7627   ; InstructionSize = 1;
000043C6  24BC 0000 7628          move.l    #1,(A2)
000043CA  0001      
                    7629   ; strcpyInstruction("CHK ") ;
000043CC  4879 0000 7630          pea       @m68kde~2_248.L
000043D0  8340      
000043D2  4E93      7631          jsr       (A3)
000043D4  584F      7632          addq.w    #4,A7
                    7633   ; Decode6BitEA(OpCode,0,0,0) ;
000043D6  42A7      7634          clr.l     -(A7)
000043D8  42A7      7635          clr.l     -(A7)
000043DA  42A7      7636          clr.l     -(A7)
000043DC  2F02      7637          move.l    D2,-(A7)
000043DE  4EB8 32B0 7638          jsr       _Decode6BitEA
000043E2  DEFC 0010 7639          add.w     #16,A7
                    7640   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000043E6  2042      7641          move.l    D2,A0
000043E8  3210      7642          move.w    (A0),D1
000043EA  E041      7643          asr.w     #8,D1
000043EC  E241      7644          asr.w     #1,D1
000043EE  C27C 0007 7645          and.w     #7,D1
000043F2  C2BC 0000 7646          and.l     #65535,D1
000043F6  FFFF      
000043F8  2F01      7647          move.l    D1,-(A7)
000043FA  4879 0000 7648          pea       @m68kde~2_249.L
000043FE  8346      
00004400  2F0C      7649          move.l    A4,-(A7)
00004402  4E95      7650          jsr       (A5)
00004404  DEFC 000C 7651          add.w     #12,A7
                    7652   ; strcatInstruction(TempString) ;
00004408  2F0C      7653          move.l    A4,-(A7)
0000440A  4EB8 0CCC 7654          jsr       _strcatInstruction
0000440E  584F      7655          addq.w    #4,A7
                    7656   DisassembleInstruction_128:
                    7657   ; }
                    7658   ; /////////////////////////////////////////////////////////////////////////////////
                    7659   ; // if instruction is CLR <EA>
                    7660   ; /////////////////////////////////////////////////////////////////////////////////
                    7661   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
00004410  2042      7662          move.l    D2,A0
00004412  3010      7663          move.w    (A0),D0
00004414  C07C FF00 7664          and.w     #65280,D0
00004418  0C40 4200 7665          cmp.w     #16896,D0
0000441C  6600 0034 7666          bne       DisassembleInstruction_130
                    7667   ; InstructionSize = 1;
00004420  24BC 0000 7668          move.l    #1,(A2)
00004424  0001      
                    7669   ; strcpyInstruction("CLR") ;
00004426  4879 0000 7670          pea       @m68kde~2_250.L
0000442A  834C      
0000442C  4E93      7671          jsr       (A3)
0000442E  584F      7672          addq.w    #4,A7
                    7673   ; Decode2BitOperandSize(*OpCode) ;
00004430  2042      7674          move.l    D2,A0
00004432  3210      7675          move.w    (A0),D1
00004434  C2BC 0000 7676          and.l     #65535,D1
00004438  FFFF      
0000443A  2F01      7677          move.l    D1,-(A7)
0000443C  4EB8 301C 7678          jsr       _Decode2BitOperandSize
00004440  584F      7679          addq.w    #4,A7
                    7680   ; Decode6BitEA(OpCode,0,0,0) ;
00004442  42A7      7681          clr.l     -(A7)
00004444  42A7      7682          clr.l     -(A7)
00004446  42A7      7683          clr.l     -(A7)
00004448  2F02      7684          move.l    D2,-(A7)
0000444A  4EB8 32B0 7685          jsr       _Decode6BitEA
0000444E  DEFC 0010 7686          add.w     #16,A7
                    7687   DisassembleInstruction_130:
                    7688   ; }
                    7689   ; /////////////////////////////////////////////////////////////////////////////////
                    7690   ; // if instruction is CMP, CMPA
                    7691   ; /////////////////////////////////////////////////////////////////////////////////
                    7692   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
00004452  2042      7693          move.l    D2,A0
00004454  3010      7694          move.w    (A0),D0
00004456  C07C F000 7695          and.w     #61440,D0
0000445A  0C40 B000 7696          cmp.w     #45056,D0
0000445E  6600 008C 7697          bne       DisassembleInstruction_135
                    7698   ; {
                    7699   ; InstructionSize = 1;
00004462  24BC 0000 7700          move.l    #1,(A2)
00004466  0001      
                    7701   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004468  2042      7702          move.l    D2,A0
0000446A  3010      7703          move.w    (A0),D0
0000446C  EC40      7704          asr.w     #6,D0
0000446E  C07C 0007 7705          and.w     #7,D0
00004472  3600      7706          move.w    D0,D3
                    7707   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
00004474  0C43 0003 7708          cmp.w     #3,D3
00004478  6708      7709          beq.s     DisassembleInstruction_136
0000447A  0C43 0007 7710          cmp.w     #7,D3
0000447E  6600 005A 7711          bne       DisassembleInstruction_134
                    7712   DisassembleInstruction_136:
                    7713   ; if(OpMode == (unsigned short int)(0x0003))
00004482  0C43 0003 7714          cmp.w     #3,D3
00004486  660C      7715          bne.s     DisassembleInstruction_137
                    7716   ; strcpyInstruction("CMPA.W ") ;
00004488  4879 0000 7717          pea       @m68kde~2_251.L
0000448C  8350      
0000448E  4E93      7718          jsr       (A3)
00004490  584F      7719          addq.w    #4,A7
00004492  600A      7720          bra.s     DisassembleInstruction_138
                    7721   DisassembleInstruction_137:
                    7722   ; else
                    7723   ; strcpyInstruction("CMPA.L ") ;
00004494  4879 0000 7724          pea       @m68kde~2_252.L
00004498  8358      
0000449A  4E93      7725          jsr       (A3)
0000449C  584F      7726          addq.w    #4,A7
                    7727   DisassembleInstruction_138:
                    7728   ; Decode6BitEA(OpCode,0,0,0) ;
0000449E  42A7      7729          clr.l     -(A7)
000044A0  42A7      7730          clr.l     -(A7)
000044A2  42A7      7731          clr.l     -(A7)
000044A4  2F02      7732          move.l    D2,-(A7)
000044A6  4EB8 32B0 7733          jsr       _Decode6BitEA
000044AA  DEFC 0010 7734          add.w     #16,A7
                    7735   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
000044AE  2042      7736          move.l    D2,A0
000044B0  3210      7737          move.w    (A0),D1
000044B2  E041      7738          asr.w     #8,D1
000044B4  E241      7739          asr.w     #1,D1
000044B6  C27C 0007 7740          and.w     #7,D1
000044BA  C2BC 0000 7741          and.l     #65535,D1
000044BE  FFFF      
000044C0  2F01      7742          move.l    D1,-(A7)
000044C2  4879 0000 7743          pea       @m68kde~2_253.L
000044C6  8360      
000044C8  2F0C      7744          move.l    A4,-(A7)
000044CA  4E95      7745          jsr       (A5)
000044CC  DEFC 000C 7746          add.w     #12,A7
                    7747   ; strcatInstruction(TempString) ;
000044D0  2F0C      7748          move.l    A4,-(A7)
000044D2  4EB8 0CCC 7749          jsr       _strcatInstruction
000044D6  584F      7750          addq.w    #4,A7
000044D8  6012      7751          bra.s     DisassembleInstruction_135
                    7752   DisassembleInstruction_134:
                    7753   ; }
                    7754   ; else {
                    7755   ; strcpyInstruction("CMP") ;
000044DA  4879 0000 7756          pea       @m68kde~2_254.L
000044DE  8366      
000044E0  4E93      7757          jsr       (A3)
000044E2  584F      7758          addq.w    #4,A7
                    7759   ; Decode3BitOperandMode(OpCode) ;
000044E4  2F02      7760          move.l    D2,-(A7)
000044E6  4EB8 36D8 7761          jsr       _Decode3BitOperandMode
000044EA  584F      7762          addq.w    #4,A7
                    7763   DisassembleInstruction_135:
                    7764   ; }
                    7765   ; }
                    7766   ; /////////////////////////////////////////////////////////////////////////////////
                    7767   ; // if instruction is CMPM
                    7768   ; /////////////////////////////////////////////////////////////////////////////////
                    7769   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
000044EC  2042      7770          move.l    D2,A0
000044EE  3010      7771          move.w    (A0),D0
000044F0  C07C F138 7772          and.w     #61752,D0
000044F4  0C40 B108 7773          cmp.w     #45320,D0
000044F8  6600 007A 7774          bne       DisassembleInstruction_141
                    7775   ; {
                    7776   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000044FC  2042      7777          move.l    D2,A0
000044FE  3010      7778          move.w    (A0),D0
00004500  EC40      7779          asr.w     #6,D0
00004502  C07C 0003 7780          and.w     #3,D0
00004506  3600      7781          move.w    D0,D3
                    7782   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
00004508  0C43 0000 7783          cmp.w     #0,D3
0000450C  6500 0066 7784          blo       DisassembleInstruction_141
00004510  0C43 0002 7785          cmp.w     #2,D3
00004514  6200 005E 7786          bhi       DisassembleInstruction_141
                    7787   ; {
                    7788   ; InstructionSize = 1;
00004518  24BC 0000 7789          move.l    #1,(A2)
0000451C  0001      
                    7790   ; strcpyInstruction("CMPM") ;
0000451E  4879 0000 7791          pea       @m68kde~2_255.L
00004522  836A      
00004524  4E93      7792          jsr       (A3)
00004526  584F      7793          addq.w    #4,A7
                    7794   ; Decode2BitOperandSize(*OpCode) ;
00004528  2042      7795          move.l    D2,A0
0000452A  3210      7796          move.w    (A0),D1
0000452C  C2BC 0000 7797          and.l     #65535,D1
00004530  FFFF      
00004532  2F01      7798          move.l    D1,-(A7)
00004534  4EB8 301C 7799          jsr       _Decode2BitOperandSize
00004538  584F      7800          addq.w    #4,A7
                    7801   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
0000453A  2042      7802          move.l    D2,A0
0000453C  3210      7803          move.w    (A0),D1
0000453E  E041      7804          asr.w     #8,D1
00004540  E241      7805          asr.w     #1,D1
00004542  C27C 0007 7806          and.w     #7,D1
00004546  C2BC 0000 7807          and.l     #65535,D1
0000454A  FFFF      
0000454C  2F01      7808          move.l    D1,-(A7)
0000454E  2042      7809          move.l    D2,A0
00004550  3210      7810          move.w    (A0),D1
00004552  C27C 0007 7811          and.w     #7,D1
00004556  C2BC 0000 7812          and.l     #65535,D1
0000455A  FFFF      
0000455C  2F01      7813          move.l    D1,-(A7)
0000455E  4879 0000 7814          pea       @m68kde~2_256.L
00004562  8370      
00004564  2F0C      7815          move.l    A4,-(A7)
00004566  4E95      7816          jsr       (A5)
00004568  DEFC 0010 7817          add.w     #16,A7
                    7818   ; strcatInstruction(TempString) ;
0000456C  2F0C      7819          move.l    A4,-(A7)
0000456E  4EB8 0CCC 7820          jsr       _strcatInstruction
00004572  584F      7821          addq.w    #4,A7
                    7822   DisassembleInstruction_141:
                    7823   ; }
                    7824   ; }
                    7825   ; /////////////////////////////////////////////////////////////////////////////////
                    7826   ; // if instruction is DBCC
                    7827   ; /////////////////////////////////////////////////////////////////////////////////
                    7828   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
00004574  2042      7829          move.l    D2,A0
00004576  3010      7830          move.w    (A0),D0
00004578  C07C F0F8 7831          and.w     #61688,D0
0000457C  0C40 50C8 7832          cmp.w     #20680,D0
00004580  6600 0084 7833          bne       DisassembleInstruction_143
                    7834   ; {
                    7835   ; InstructionSize = 2;
00004584  24BC 0000 7836          move.l    #2,(A2)
00004588  0002      
                    7837   ; strcpy(Instruction,"DB") ;
0000458A  4879 0000 7838          pea       @m68kde~2_257.L
0000458E  837E      
00004590  4879 0803 7839          pea       _Instruction.L
00004594  04E2      
00004596  4EB9 0000 7840          jsr       _strcpy
0000459A  5766      
0000459C  504F      7841          addq.w    #8,A7
                    7842   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
0000459E  2042      7843          move.l    D2,A0
000045A0  3010      7844          move.w    (A0),D0
000045A2  E040      7845          asr.w     #8,D0
000045A4  C07C 000F 7846          and.w     #15,D0
000045A8  1D40 FFE9 7847          move.b    D0,-23(A6)
                    7848   ; DecodeBranchCondition(Condition) ;
000045AC  122E FFE9 7849          move.b    -23(A6),D1
000045B0  C27C 00FF 7850          and.w     #255,D1
000045B4  C2BC 0000 7851          and.l     #65535,D1
000045B8  FFFF      
000045BA  2F01      7852          move.l    D1,-(A7)
000045BC  4EB8 376E 7853          jsr       _DecodeBranchCondition
000045C0  584F      7854          addq.w    #4,A7
                    7855   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
000045C2  2202      7856          move.l    D2,D1
000045C4  2042      7857          move.l    D2,A0
000045C6  2F00      7858          move.l    D0,-(A7)
000045C8  3028 0002 7859          move.w    2(A0),D0
000045CC  48C0      7860          ext.l     D0
000045CE  D280      7861          add.l     D0,D1
000045D0  201F      7862          move.l    (A7)+,D0
000045D2  5481      7863          addq.l    #2,D1
000045D4  2F01      7864          move.l    D1,-(A7)
000045D6  2042      7865          move.l    D2,A0
000045D8  3228 0002 7866          move.w    2(A0),D1
000045DC  48C1      7867          ext.l     D1
000045DE  2F01      7868          move.l    D1,-(A7)
000045E0  2042      7869          move.l    D2,A0
000045E2  3210      7870          move.w    (A0),D1
000045E4  C27C 0007 7871          and.w     #7,D1
000045E8  C2BC 0000 7872          and.l     #65535,D1
000045EC  FFFF      
000045EE  2F01      7873          move.l    D1,-(A7)
000045F0  4879 0000 7874          pea       @m68kde~2_258.L
000045F4  8382      
000045F6  2F0C      7875          move.l    A4,-(A7)
000045F8  4E95      7876          jsr       (A5)
000045FA  DEFC 0014 7877          add.w     #20,A7
                    7878   ; strcatInstruction(TempString) ;
000045FE  2F0C      7879          move.l    A4,-(A7)
00004600  4EB8 0CCC 7880          jsr       _strcatInstruction
00004604  584F      7881          addq.w    #4,A7
                    7882   DisassembleInstruction_143:
                    7883   ; }
                    7884   ; /////////////////////////////////////////////////////////////////////////////////
                    7885   ; // if instruction is DIVS
                    7886   ; /////////////////////////////////////////////////////////////////////////////////
                    7887   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
00004606  2042      7888          move.l    D2,A0
00004608  3010      7889          move.w    (A0),D0
0000460A  C07C F1C0 7890          and.w     #61888,D0
0000460E  0C40 81C0 7891          cmp.w     #33216,D0
00004612  6600 004A 7892          bne       DisassembleInstruction_145
                    7893   ; {
                    7894   ; InstructionSize = 1;
00004616  24BC 0000 7895          move.l    #1,(A2)
0000461A  0001      
                    7896   ; strcpy(Instruction,"DIVS ") ;
0000461C  4879 0000 7897          pea       @m68kde~2_259.L
00004620  839A      
00004622  4879 0803 7898          pea       _Instruction.L
00004626  04E2      
00004628  4EB9 0000 7899          jsr       _strcpy
0000462C  5766      
0000462E  504F      7900          addq.w    #8,A7
                    7901   ; Decode6BitEA(OpCode,0,0,0) ;
00004630  42A7      7902          clr.l     -(A7)
00004632  42A7      7903          clr.l     -(A7)
00004634  42A7      7904          clr.l     -(A7)
00004636  2F02      7905          move.l    D2,-(A7)
00004638  4EB8 32B0 7906          jsr       _Decode6BitEA
0000463C  DEFC 0010 7907          add.w     #16,A7
                    7908   ; strcatInstruction(",") ;
00004640  4879 0000 7909          pea       @m68kde~2_194.L
00004644  81FA      
00004646  4EB8 0CCC 7910          jsr       _strcatInstruction
0000464A  584F      7911          addq.w    #4,A7
                    7912   ; Decode3BitDataRegister(*OpCode) ;
0000464C  2042      7913          move.l    D2,A0
0000464E  3210      7914          move.w    (A0),D1
00004650  C2BC 0000 7915          and.l     #65535,D1
00004654  FFFF      
00004656  2F01      7916          move.l    D1,-(A7)
00004658  4EB8 3078 7917          jsr       _Decode3BitDataRegister
0000465C  584F      7918          addq.w    #4,A7
                    7919   DisassembleInstruction_145:
                    7920   ; }
                    7921   ; /////////////////////////////////////////////////////////////////////////////////
                    7922   ; // if instruction is DIVU
                    7923   ; /////////////////////////////////////////////////////////////////////////////////
                    7924   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
0000465E  2042      7925          move.l    D2,A0
00004660  3010      7926          move.w    (A0),D0
00004662  C07C F1C0 7927          and.w     #61888,D0
00004666  0C40 80C0 7928          cmp.w     #32960,D0
0000466A  6600 004A 7929          bne       DisassembleInstruction_147
                    7930   ; {
                    7931   ; InstructionSize = 1;
0000466E  24BC 0000 7932          move.l    #1,(A2)
00004672  0001      
                    7933   ; strcpy(Instruction,"DIVU ") ;
00004674  4879 0000 7934          pea       @m68kde~2_260.L
00004678  83A0      
0000467A  4879 0803 7935          pea       _Instruction.L
0000467E  04E2      
00004680  4EB9 0000 7936          jsr       _strcpy
00004684  5766      
00004686  504F      7937          addq.w    #8,A7
                    7938   ; Decode6BitEA(OpCode,0,0,0) ;
00004688  42A7      7939          clr.l     -(A7)
0000468A  42A7      7940          clr.l     -(A7)
0000468C  42A7      7941          clr.l     -(A7)
0000468E  2F02      7942          move.l    D2,-(A7)
00004690  4EB8 32B0 7943          jsr       _Decode6BitEA
00004694  DEFC 0010 7944          add.w     #16,A7
                    7945   ; strcatInstruction(",") ;
00004698  4879 0000 7946          pea       @m68kde~2_194.L
0000469C  81FA      
0000469E  4EB8 0CCC 7947          jsr       _strcatInstruction
000046A2  584F      7948          addq.w    #4,A7
                    7949   ; Decode3BitDataRegister(*OpCode) ;
000046A4  2042      7950          move.l    D2,A0
000046A6  3210      7951          move.w    (A0),D1
000046A8  C2BC 0000 7952          and.l     #65535,D1
000046AC  FFFF      
000046AE  2F01      7953          move.l    D1,-(A7)
000046B0  4EB8 3078 7954          jsr       _Decode3BitDataRegister
000046B4  584F      7955          addq.w    #4,A7
                    7956   DisassembleInstruction_147:
                    7957   ; }
                    7958   ; /////////////////////////////////////////////////////////////////////////////////
                    7959   ; // if instruction is EOR
                    7960   ; /////////////////////////////////////////////////////////////////////////////////
                    7961   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
000046B6  2042      7962          move.l    D2,A0
000046B8  3010      7963          move.w    (A0),D0
000046BA  C07C F000 7964          and.w     #61440,D0
000046BE  0C40 B000 7965          cmp.w     #45056,D0
000046C2  6600 004A 7966          bne       DisassembleInstruction_151
                    7967   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000046C6  2042      7968          move.l    D2,A0
000046C8  3010      7969          move.w    (A0),D0
000046CA  EC40      7970          asr.w     #6,D0
000046CC  C07C 0007 7971          and.w     #7,D0
000046D0  3600      7972          move.w    D0,D3
                    7973   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
000046D2  2042      7974          move.l    D2,A0
000046D4  3010      7975          move.w    (A0),D0
000046D6  E640      7976          asr.w     #3,D0
000046D8  C07C 0007 7977          and.w     #7,D0
000046DC  3D40 FFEC 7978          move.w    D0,-20(A6)
                    7979   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
000046E0  0C43 0004 7980          cmp.w     #4,D3
000046E4  6528      7981          blo.s     DisassembleInstruction_151
000046E6  0C43 0006 7982          cmp.w     #6,D3
000046EA  6222      7983          bhi.s     DisassembleInstruction_151
000046EC  302E FFEC 7984          move.w    -20(A6),D0
000046F0  0C40 0001 7985          cmp.w     #1,D0
000046F4  6718      7986          beq.s     DisassembleInstruction_151
                    7987   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    7988   ; (EAMode != (unsigned short int)(0x0001)))
                    7989   ; {
                    7990   ; InstructionSize = 1;
000046F6  24BC 0000 7991          move.l    #1,(A2)
000046FA  0001      
                    7992   ; strcpyInstruction("EOR") ;
000046FC  4879 0000 7993          pea       @m68kde~2_261.L
00004700  83A6      
00004702  4E93      7994          jsr       (A3)
00004704  584F      7995          addq.w    #4,A7
                    7996   ; Decode3BitOperandMode(OpCode);
00004706  2F02      7997          move.l    D2,-(A7)
00004708  4EB8 36D8 7998          jsr       _Decode3BitOperandMode
0000470C  584F      7999          addq.w    #4,A7
                    8000   DisassembleInstruction_151:
                    8001   ; }
                    8002   ; }
                    8003   ; /////////////////////////////////////////////////////////////////////////////////
                    8004   ; // if instruction is EOR to CCR
                    8005   ; /////////////////////////////////////////////////////////////////////////////////
                    8006   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
0000470E  2042      8007          move.l    D2,A0
00004710  3010      8008          move.w    (A0),D0
00004712  0C40 0A3C 8009          cmp.w     #2620,D0
00004716  662C      8010          bne.s     DisassembleInstruction_153
                    8011   ; InstructionSize = 1;
00004718  24BC 0000 8012          move.l    #1,(A2)
0000471C  0001      
                    8013   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
0000471E  2042      8014          move.l    D2,A0
00004720  3228 0002 8015          move.w    2(A0),D1
00004724  C27C 00FF 8016          and.w     #255,D1
00004728  C2BC 0000 8017          and.l     #65535,D1
0000472C  FFFF      
0000472E  2F01      8018          move.l    D1,-(A7)
00004730  4879 0000 8019          pea       @m68kde~2_262.L
00004734  83AA      
00004736  4879 0803 8020          pea       _Instruction.L
0000473A  04E2      
0000473C  4E95      8021          jsr       (A5)
0000473E  DEFC 000C 8022          add.w     #12,A7
                    8023   ; InstructionSize += 1;
00004742  5292      8024          addq.l    #1,(A2)
                    8025   DisassembleInstruction_153:
                    8026   ; }
                    8027   ; /////////////////////////////////////////////////////////////////////////////////
                    8028   ; // if instruction is EORI #data,SR
                    8029   ; /////////////////////////////////////////////////////////////////////////////////
                    8030   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
00004744  2042      8031          move.l    D2,A0
00004746  3010      8032          move.w    (A0),D0
00004748  0C40 0A7C 8033          cmp.w     #2684,D0
0000474C  6622      8034          bne.s     DisassembleInstruction_155
                    8035   ; InstructionSize = 2;
0000474E  24BC 0000 8036          move.l    #2,(A2)
00004752  0002      
                    8037   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
00004754  2042      8038          move.l    D2,A0
00004756  3228 0002 8039          move.w    2(A0),D1
0000475A  48C1      8040          ext.l     D1
0000475C  2F01      8041          move.l    D1,-(A7)
0000475E  4879 0000 8042          pea       @m68kde~2_263.L
00004762  83BA      
00004764  4879 0803 8043          pea       _Instruction.L
00004768  04E2      
0000476A  4E95      8044          jsr       (A5)
0000476C  DEFC 000C 8045          add.w     #12,A7
                    8046   DisassembleInstruction_155:
                    8047   ; }
                    8048   ; /////////////////////////////////////////////////////////////////////////////////
                    8049   ; // if instruction is EXG
                    8050   ; /////////////////////////////////////////////////////////////////////////////////
                    8051   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
00004770  2042      8052          move.l    D2,A0
00004772  3010      8053          move.w    (A0),D0
00004774  C07C F100 8054          and.w     #61696,D0
00004778  0C40 C100 8055          cmp.w     #49408,D0
0000477C  6600 00E0 8056          bne       DisassembleInstruction_163
                    8057   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
00004780  2042      8058          move.l    D2,A0
00004782  3010      8059          move.w    (A0),D0
00004784  E040      8060          asr.w     #8,D0
00004786  E240      8061          asr.w     #1,D0
00004788  C07C 0007 8062          and.w     #7,D0
0000478C  3D40 FFF0 8063          move.w    D0,-16(A6)
                    8064   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
00004790  2042      8065          move.l    D2,A0
00004792  3010      8066          move.w    (A0),D0
00004794  C07C 0007 8067          and.w     #7,D0
00004798  3D40 FFF2 8068          move.w    D0,-14(A6)
                    8069   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
0000479C  2042      8070          move.l    D2,A0
0000479E  3010      8071          move.w    (A0),D0
000047A0  E640      8072          asr.w     #3,D0
000047A2  C07C 001F 8073          and.w     #31,D0
000047A6  3D40 FFF4 8074          move.w    D0,-12(A6)
                    8075   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
000047AA  302E FFF4 8076          move.w    -12(A6),D0
000047AE  0C40 0008 8077          cmp.w     #8,D0
000047B2  6634      8078          bne.s     DisassembleInstruction_159
                    8079   ; InstructionSize = 1;
000047B4  24BC 0000 8080          move.l    #1,(A2)
000047B8  0001      
                    8081   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
000047BA  322E FFF2 8082          move.w    -14(A6),D1
000047BE  C2BC 0000 8083          and.l     #65535,D1
000047C2  FFFF      
000047C4  2F01      8084          move.l    D1,-(A7)
000047C6  322E FFF0 8085          move.w    -16(A6),D1
000047CA  C2BC 0000 8086          and.l     #65535,D1
000047CE  FFFF      
000047D0  2F01      8087          move.l    D1,-(A7)
000047D2  4879 0000 8088          pea       @m68kde~2_264.L
000047D6  83C8      
000047D8  4879 0803 8089          pea       _Instruction.L
000047DC  04E2      
000047DE  4E95      8090          jsr       (A5)
000047E0  DEFC 0010 8091          add.w     #16,A7
000047E4  6000 0078 8092          bra       DisassembleInstruction_163
                    8093   DisassembleInstruction_159:
                    8094   ; }
                    8095   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
000047E8  302E FFF4 8096          move.w    -12(A6),D0
000047EC  0C40 0009 8097          cmp.w     #9,D0
000047F0  6632      8098          bne.s     DisassembleInstruction_161
                    8099   ; InstructionSize = 1;
000047F2  24BC 0000 8100          move.l    #1,(A2)
000047F6  0001      
                    8101   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
000047F8  322E FFF2 8102          move.w    -14(A6),D1
000047FC  C2BC 0000 8103          and.l     #65535,D1
00004800  FFFF      
00004802  2F01      8104          move.l    D1,-(A7)
00004804  322E FFF0 8105          move.w    -16(A6),D1
00004808  C2BC 0000 8106          and.l     #65535,D1
0000480C  FFFF      
0000480E  2F01      8107          move.l    D1,-(A7)
00004810  4879 0000 8108          pea       @m68kde~2_265.L
00004814  83D4      
00004816  4879 0803 8109          pea       _Instruction.L
0000481A  04E2      
0000481C  4E95      8110          jsr       (A5)
0000481E  DEFC 0010 8111          add.w     #16,A7
00004822  603A      8112          bra.s     DisassembleInstruction_163
                    8113   DisassembleInstruction_161:
                    8114   ; }
                    8115   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
00004824  302E FFF4 8116          move.w    -12(A6),D0
00004828  0C40 0011 8117          cmp.w     #17,D0
0000482C  6630      8118          bne.s     DisassembleInstruction_163
                    8119   ; InstructionSize = 1;
0000482E  24BC 0000 8120          move.l    #1,(A2)
00004832  0001      
                    8121   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
00004834  322E FFF2 8122          move.w    -14(A6),D1
00004838  C2BC 0000 8123          and.l     #65535,D1
0000483C  FFFF      
0000483E  2F01      8124          move.l    D1,-(A7)
00004840  322E FFF0 8125          move.w    -16(A6),D1
00004844  C2BC 0000 8126          and.l     #65535,D1
00004848  FFFF      
0000484A  2F01      8127          move.l    D1,-(A7)
0000484C  4879 0000 8128          pea       @m68kde~2_266.L
00004850  83E0      
00004852  4879 0803 8129          pea       _Instruction.L
00004856  04E2      
00004858  4E95      8130          jsr       (A5)
0000485A  DEFC 0010 8131          add.w     #16,A7
                    8132   DisassembleInstruction_163:
                    8133   ; }
                    8134   ; }
                    8135   ; /////////////////////////////////////////////////////////////////////////////////
                    8136   ; // if instruction is EXT
                    8137   ; /////////////////////////////////////////////////////////////////////////////////
                    8138   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
0000485E  2042      8139          move.l    D2,A0
00004860  3010      8140          move.w    (A0),D0
00004862  C07C FE38 8141          and.w     #65080,D0
00004866  0C40 4800 8142          cmp.w     #18432,D0
0000486A  6600 0054 8143          bne       DisassembleInstruction_165
                    8144   ; {
                    8145   ; InstructionSize = 1;
0000486E  24BC 0000 8146          move.l    #1,(A2)
00004872  0001      
                    8147   ; strcpy(Instruction,"EXT") ;
00004874  4879 0000 8148          pea       @m68kde~2_267.L
00004878  83EC      
0000487A  4879 0803 8149          pea       _Instruction.L
0000487E  04E2      
00004880  4EB9 0000 8150          jsr       _strcpy
00004884  5766      
00004886  504F      8151          addq.w    #8,A7
                    8152   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
00004888  2042      8153          move.l    D2,A0
0000488A  3010      8154          move.w    (A0),D0
0000488C  C07C 00C0 8155          and.w     #192,D0
00004890  0C40 00C0 8156          cmp.w     #192,D0
00004894  660E      8157          bne.s     DisassembleInstruction_167
                    8158   ; strcatInstruction(".L ") ;
00004896  4879 0000 8159          pea       @m68kde~2_179.L
0000489A  81B4      
0000489C  4EB8 0CCC 8160          jsr       _strcatInstruction
000048A0  584F      8161          addq.w    #4,A7
000048A2  600C      8162          bra.s     DisassembleInstruction_168
                    8163   DisassembleInstruction_167:
                    8164   ; else
                    8165   ; strcatInstruction(".W ") ;
000048A4  4879 0000 8166          pea       @m68kde~2_178.L
000048A8  81B0      
000048AA  4EB8 0CCC 8167          jsr       _strcatInstruction
000048AE  584F      8168          addq.w    #4,A7
                    8169   DisassembleInstruction_168:
                    8170   ; Decode6BitEA(OpCode,0,0,0) ;
000048B0  42A7      8171          clr.l     -(A7)
000048B2  42A7      8172          clr.l     -(A7)
000048B4  42A7      8173          clr.l     -(A7)
000048B6  2F02      8174          move.l    D2,-(A7)
000048B8  4EB8 32B0 8175          jsr       _Decode6BitEA
000048BC  DEFC 0010 8176          add.w     #16,A7
                    8177   DisassembleInstruction_165:
                    8178   ; }
                    8179   ; /////////////////////////////////////////////////////////////////////////////////
                    8180   ; // if instruction is ILLEGAL $4afc
                    8181   ; /////////////////////////////////////////////////////////////////////////////////
                    8182   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
000048C0  2042      8183          move.l    D2,A0
000048C2  3010      8184          move.w    (A0),D0
000048C4  0C40 4AFC 8185          cmp.w     #19196,D0
000048C8  661A      8186          bne.s     DisassembleInstruction_169
                    8187   ; InstructionSize = 1;
000048CA  24BC 0000 8188          move.l    #1,(A2)
000048CE  0001      
                    8189   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
000048D0  4879 0000 8190          pea       @m68kde~2_268.L
000048D4  83F0      
000048D6  4879 0803 8191          pea       _Instruction.L
000048DA  04E2      
000048DC  4EB9 0000 8192          jsr       _strcpy
000048E0  5766      
000048E2  504F      8193          addq.w    #8,A7
                    8194   DisassembleInstruction_169:
                    8195   ; }
                    8196   ; /////////////////////////////////////////////////////////////////////////////////
                    8197   ; // if instruction is JMP
                    8198   ; /////////////////////////////////////////////////////////////////////////////////
                    8199   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
000048E4  2042      8200          move.l    D2,A0
000048E6  3010      8201          move.w    (A0),D0
000048E8  C07C FFC0 8202          and.w     #65472,D0
000048EC  0C40 4EC0 8203          cmp.w     #20160,D0
000048F0  662A      8204          bne.s     DisassembleInstruction_171
                    8205   ; {
                    8206   ; InstructionSize = 1;
000048F2  24BC 0000 8207          move.l    #1,(A2)
000048F6  0001      
                    8208   ; strcpy(Instruction,"JMP ") ;
000048F8  4879 0000 8209          pea       @m68kde~2_269.L
000048FC  8400      
000048FE  4879 0803 8210          pea       _Instruction.L
00004902  04E2      
00004904  4EB9 0000 8211          jsr       _strcpy
00004908  5766      
0000490A  504F      8212          addq.w    #8,A7
                    8213   ; Decode6BitEA(OpCode,0,0,0) ;
0000490C  42A7      8214          clr.l     -(A7)
0000490E  42A7      8215          clr.l     -(A7)
00004910  42A7      8216          clr.l     -(A7)
00004912  2F02      8217          move.l    D2,-(A7)
00004914  4EB8 32B0 8218          jsr       _Decode6BitEA
00004918  DEFC 0010 8219          add.w     #16,A7
                    8220   DisassembleInstruction_171:
                    8221   ; }
                    8222   ; /////////////////////////////////////////////////////////////////////////////////
                    8223   ; // if instruction is JSR
                    8224   ; /////////////////////////////////////////////////////////////////////////////////
                    8225   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
0000491C  2042      8226          move.l    D2,A0
0000491E  3010      8227          move.w    (A0),D0
00004920  C07C FFC0 8228          and.w     #65472,D0
00004924  0C40 4E80 8229          cmp.w     #20096,D0
00004928  662A      8230          bne.s     DisassembleInstruction_173
                    8231   ; {
                    8232   ; InstructionSize = 1;
0000492A  24BC 0000 8233          move.l    #1,(A2)
0000492E  0001      
                    8234   ; strcpy(Instruction,"JSR ") ;
00004930  4879 0000 8235          pea       @m68kde~2_270.L
00004934  8406      
00004936  4879 0803 8236          pea       _Instruction.L
0000493A  04E2      
0000493C  4EB9 0000 8237          jsr       _strcpy
00004940  5766      
00004942  504F      8238          addq.w    #8,A7
                    8239   ; Decode6BitEA(OpCode,0,0,0) ;
00004944  42A7      8240          clr.l     -(A7)
00004946  42A7      8241          clr.l     -(A7)
00004948  42A7      8242          clr.l     -(A7)
0000494A  2F02      8243          move.l    D2,-(A7)
0000494C  4EB8 32B0 8244          jsr       _Decode6BitEA
00004950  DEFC 0010 8245          add.w     #16,A7
                    8246   DisassembleInstruction_173:
                    8247   ; }
                    8248   ; /////////////////////////////////////////////////////////////////////////////////
                    8249   ; // if instruction is LEA
                    8250   ; /////////////////////////////////////////////////////////////////////////////////
                    8251   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
00004954  2042      8252          move.l    D2,A0
00004956  3010      8253          move.w    (A0),D0
00004958  C07C F1C0 8254          and.w     #61888,D0
0000495C  0C40 41C0 8255          cmp.w     #16832,D0
00004960  6600 0056 8256          bne       DisassembleInstruction_175
                    8257   ; {
                    8258   ; InstructionSize = 1;
00004964  24BC 0000 8259          move.l    #1,(A2)
00004968  0001      
                    8260   ; strcpy(Instruction,"LEA ") ;
0000496A  4879 0000 8261          pea       @m68kde~2_271.L
0000496E  840C      
00004970  4879 0803 8262          pea       _Instruction.L
00004974  04E2      
00004976  4EB9 0000 8263          jsr       _strcpy
0000497A  5766      
0000497C  504F      8264          addq.w    #8,A7
                    8265   ; Decode6BitEA(OpCode,0,0,0) ;
0000497E  42A7      8266          clr.l     -(A7)
00004980  42A7      8267          clr.l     -(A7)
00004982  42A7      8268          clr.l     -(A7)
00004984  2F02      8269          move.l    D2,-(A7)
00004986  4EB8 32B0 8270          jsr       _Decode6BitEA
0000498A  DEFC 0010 8271          add.w     #16,A7
                    8272   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
0000498E  2042      8273          move.l    D2,A0
00004990  3210      8274          move.w    (A0),D1
00004992  E041      8275          asr.w     #8,D1
00004994  E241      8276          asr.w     #1,D1
00004996  C27C 0007 8277          and.w     #7,D1
0000499A  C2BC 0000 8278          and.l     #65535,D1
0000499E  FFFF      
000049A0  2F01      8279          move.l    D1,-(A7)
000049A2  4879 0000 8280          pea       @m68kde~2_253.L
000049A6  8360      
000049A8  2F0C      8281          move.l    A4,-(A7)
000049AA  4E95      8282          jsr       (A5)
000049AC  DEFC 000C 8283          add.w     #12,A7
                    8284   ; strcatInstruction(TempString);
000049B0  2F0C      8285          move.l    A4,-(A7)
000049B2  4EB8 0CCC 8286          jsr       _strcatInstruction
000049B6  584F      8287          addq.w    #4,A7
                    8288   DisassembleInstruction_175:
                    8289   ; }
                    8290   ; /////////////////////////////////////////////////////////////////////////////////
                    8291   ; // if instruction is LINK.W
                    8292   ; /////////////////////////////////////////////////////////////////////////////////
                    8293   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
000049B8  2042      8294          move.l    D2,A0
000049BA  3010      8295          move.w    (A0),D0
000049BC  C07C FFF8 8296          and.w     #65528,D0
000049C0  0C40 4E50 8297          cmp.w     #20048,D0
000049C4  6600 0052 8298          bne       DisassembleInstruction_177
                    8299   ; {
                    8300   ; InstructionSize = 1;
000049C8  24BC 0000 8301          move.l    #1,(A2)
000049CC  0001      
                    8302   ; strcpy(Instruction,"LINK ") ;
000049CE  4879 0000 8303          pea       @m68kde~2_272.L
000049D2  8412      
000049D4  4879 0803 8304          pea       _Instruction.L
000049D8  04E2      
000049DA  4EB9 0000 8305          jsr       _strcpy
000049DE  5766      
000049E0  504F      8306          addq.w    #8,A7
                    8307   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
000049E2  2042      8308          move.l    D2,A0
000049E4  3228 0002 8309          move.w    2(A0),D1
000049E8  48C1      8310          ext.l     D1
000049EA  2F01      8311          move.l    D1,-(A7)
000049EC  2042      8312          move.l    D2,A0
000049EE  3210      8313          move.w    (A0),D1
000049F0  C27C 0007 8314          and.w     #7,D1
000049F4  C2BC 0000 8315          and.l     #65535,D1
000049F8  FFFF      
000049FA  2F01      8316          move.l    D1,-(A7)
000049FC  4879 0000 8317          pea       @m68kde~2_273.L
00004A00  8418      
00004A02  2F0C      8318          move.l    A4,-(A7)
00004A04  4E95      8319          jsr       (A5)
00004A06  DEFC 0010 8320          add.w     #16,A7
                    8321   ; InstructionSize = 2 ;
00004A0A  24BC 0000 8322          move.l    #2,(A2)
00004A0E  0002      
                    8323   ; strcatInstruction(TempString);
00004A10  2F0C      8324          move.l    A4,-(A7)
00004A12  4EB8 0CCC 8325          jsr       _strcatInstruction
00004A16  584F      8326          addq.w    #4,A7
                    8327   DisassembleInstruction_177:
                    8328   ; }
                    8329   ; /////////////////////////////////////////////////////////////////////////////////
                    8330   ; // if instruction is MOVE, MOVEA
                    8331   ; /////////////////////////////////////////////////////////////////////////////////
                    8332   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
00004A18  2042      8333          move.l    D2,A0
00004A1A  3010      8334          move.w    (A0),D0
00004A1C  C07C C000 8335          and.w     #49152,D0
00004A20  6600 00F0 8336          bne       DisassembleInstruction_193
                    8337   ; {
                    8338   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
00004A24  2042      8339          move.l    D2,A0
00004A26  3010      8340          move.w    (A0),D0
00004A28  C07C 3000 8341          and.w     #12288,D0
00004A2C  E048      8342          lsr.w     #8,D0
00004A2E  E848      8343          lsr.w     #4,D0
00004A30  3D40 FFE2 8344          move.w    D0,-30(A6)
                    8345   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
00004A34  2042      8346          move.l    D2,A0
00004A36  3010      8347          move.w    (A0),D0
00004A38  E640      8348          asr.w     #3,D0
00004A3A  C07C 0007 8349          and.w     #7,D0
00004A3E  3600      8350          move.w    D0,D3
                    8351   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
00004A40  2042      8352          move.l    D2,A0
00004A42  3010      8353          move.w    (A0),D0
00004A44  C07C 0007 8354          and.w     #7,D0
00004A48  3D40 FFF6 8355          move.w    D0,-10(A6)
                    8356   ; DataSize = 0 ;
00004A4C  7E00      8357          moveq     #0,D7
                    8358   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    8359   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
00004A4E  0C43 0005 8360          cmp.w     #5,D3
00004A52  6706      8361          beq.s     DisassembleInstruction_183
00004A54  0C43 0006 8362          cmp.w     #6,D3
00004A58  6602      8363          bne.s     DisassembleInstruction_181
                    8364   DisassembleInstruction_183:
                    8365   ; DataSize = 1;  // source operands has 1 word after EA
00004A5A  7E01      8366          moveq     #1,D7
                    8367   DisassembleInstruction_181:
                    8368   ; // if source addressing mode is a 16 or 32 bit address
                    8369   ; if((OpMode == (unsigned short int)(0x0007))) {
00004A5C  0C43 0007 8370          cmp.w     #7,D3
00004A60  660C      8371          bne.s     DisassembleInstruction_187
                    8372   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
00004A62  302E FFF6 8373          move.w    -10(A6),D0
00004A66  6604      8374          bne.s     DisassembleInstruction_186
                    8375   ; DataSize = 1 ;
00004A68  7E01      8376          moveq     #1,D7
00004A6A  6002      8377          bra.s     DisassembleInstruction_187
                    8378   DisassembleInstruction_186:
                    8379   ; else
                    8380   ; DataSize = 2 ;
00004A6C  7E02      8381          moveq     #2,D7
                    8382   DisassembleInstruction_187:
                    8383   ; }
                    8384   ; // if source addressing mode is # then figure out size
                    8385   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
00004A6E  0C43 0007 8386          cmp.w     #7,D3
00004A72  6624      8387          bne.s     DisassembleInstruction_191
00004A74  302E FFF6 8388          move.w    -10(A6),D0
00004A78  0C40 0004 8389          cmp.w     #4,D0
00004A7C  661A      8390          bne.s     DisassembleInstruction_191
                    8391   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
00004A7E  302E FFE2 8392          move.w    -30(A6),D0
00004A82  0C40 0001 8393          cmp.w     #1,D0
00004A86  670A      8394          beq.s     DisassembleInstruction_192
00004A88  302E FFE2 8395          move.w    -30(A6),D0
00004A8C  0C40 0003 8396          cmp.w     #3,D0
00004A90  6604      8397          bne.s     DisassembleInstruction_190
                    8398   DisassembleInstruction_192:
                    8399   ; DataSize = 1;
00004A92  7E01      8400          moveq     #1,D7
00004A94  6002      8401          bra.s     DisassembleInstruction_191
                    8402   DisassembleInstruction_190:
                    8403   ; else
                    8404   ; DataSize = 2 ;
00004A96  7E02      8405          moveq     #2,D7
                    8406   DisassembleInstruction_191:
                    8407   ; //printf("DataSize = %d",DataSize) ;
                    8408   ; }
                    8409   ; if(Size != 0)
00004A98  302E FFE2 8410          move.w    -30(A6),D0
00004A9C  6700 0074 8411          beq       DisassembleInstruction_193
                    8412   ; {
                    8413   ; InstructionSize = 1;
00004AA0  24BC 0000 8414          move.l    #1,(A2)
00004AA4  0001      
                    8415   ; if(Size == 1)
00004AA6  302E FFE2 8416          move.w    -30(A6),D0
00004AAA  0C40 0001 8417          cmp.w     #1,D0
00004AAE  660C      8418          bne.s     DisassembleInstruction_195
                    8419   ; strcpyInstruction("MOVE.B ") ;
00004AB0  4879 0000 8420          pea       @m68kde~2_274.L
00004AB4  8420      
00004AB6  4E93      8421          jsr       (A3)
00004AB8  584F      8422          addq.w    #4,A7
00004ABA  6020      8423          bra.s     DisassembleInstruction_198
                    8424   DisassembleInstruction_195:
                    8425   ; else if(Size == 2)
00004ABC  302E FFE2 8426          move.w    -30(A6),D0
00004AC0  0C40 0002 8427          cmp.w     #2,D0
00004AC4  660C      8428          bne.s     DisassembleInstruction_197
                    8429   ; strcpyInstruction("MOVE.L ") ;
00004AC6  4879 0000 8430          pea       @m68kde~2_275.L
00004ACA  8428      
00004ACC  4E93      8431          jsr       (A3)
00004ACE  584F      8432          addq.w    #4,A7
00004AD0  600A      8433          bra.s     DisassembleInstruction_198
                    8434   DisassembleInstruction_197:
                    8435   ; else
                    8436   ; strcpyInstruction("MOVE.W ") ;
00004AD2  4879 0000 8437          pea       @m68kde~2_276.L
00004AD6  8430      
00004AD8  4E93      8438          jsr       (A3)
00004ADA  584F      8439          addq.w    #4,A7
                    8440   DisassembleInstruction_198:
                    8441   ; Decode6BitEA(OpCode,0,0,1) ;
00004ADC  4878 0001 8442          pea       1
00004AE0  42A7      8443          clr.l     -(A7)
00004AE2  42A7      8444          clr.l     -(A7)
00004AE4  2F02      8445          move.l    D2,-(A7)
00004AE6  4EB8 32B0 8446          jsr       _Decode6BitEA
00004AEA  DEFC 0010 8447          add.w     #16,A7
                    8448   ; strcatInstruction(",") ;
00004AEE  4879 0000 8449          pea       @m68kde~2_194.L
00004AF2  81FA      
00004AF4  4EB8 0CCC 8450          jsr       _strcatInstruction
00004AF8  584F      8451          addq.w    #4,A7
                    8452   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    8453   ; // but subtract 1 to make the maths correct in the called function
                    8454   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
00004AFA  42A7      8455          clr.l     -(A7)
00004AFC  CEBC 0000 8456          and.l     #65535,D7
00004B00  FFFF      
00004B02  2F07      8457          move.l    D7,-(A7)
00004B04  4878 0002 8458          pea       2
00004B08  2F02      8459          move.l    D2,-(A7)
00004B0A  4EB8 32B0 8460          jsr       _Decode6BitEA
00004B0E  DEFC 0010 8461          add.w     #16,A7
                    8462   DisassembleInstruction_193:
                    8463   ; }
                    8464   ; }
                    8465   ; /////////////////////////////////////////////////////////////////////////////////
                    8466   ; // if instruction is MOVE <EA>,CCR
                    8467   ; /////////////////////////////////////////////////////////////////////////////////
                    8468   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
00004B12  2042      8469          move.l    D2,A0
00004B14  3010      8470          move.w    (A0),D0
00004B16  C07C FFC0 8471          and.w     #65472,D0
00004B1A  0C40 44C0 8472          cmp.w     #17600,D0
00004B1E  6636      8473          bne.s     DisassembleInstruction_199
                    8474   ; {
                    8475   ; InstructionSize = 1;
00004B20  24BC 0000 8476          move.l    #1,(A2)
00004B24  0001      
                    8477   ; strcpy(Instruction,"MOVE ") ;
00004B26  4879 0000 8478          pea       @m68kde~2_277.L
00004B2A  8438      
00004B2C  4879 0803 8479          pea       _Instruction.L
00004B30  04E2      
00004B32  4EB9 0000 8480          jsr       _strcpy
00004B36  5766      
00004B38  504F      8481          addq.w    #8,A7
                    8482   ; Decode6BitEA(OpCode,0,0,0) ;
00004B3A  42A7      8483          clr.l     -(A7)
00004B3C  42A7      8484          clr.l     -(A7)
00004B3E  42A7      8485          clr.l     -(A7)
00004B40  2F02      8486          move.l    D2,-(A7)
00004B42  4EB8 32B0 8487          jsr       _Decode6BitEA
00004B46  DEFC 0010 8488          add.w     #16,A7
                    8489   ; strcatInstruction(",CCR") ;
00004B4A  4879 0000 8490          pea       @m68kde~2_278.L
00004B4E  843E      
00004B50  4EB8 0CCC 8491          jsr       _strcatInstruction
00004B54  584F      8492          addq.w    #4,A7
                    8493   DisassembleInstruction_199:
                    8494   ; }
                    8495   ; /////////////////////////////////////////////////////////////////////////////////
                    8496   ; // if instruction is MOVE SR,<EA>
                    8497   ; /////////////////////////////////////////////////////////////////////////////////
                    8498   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
00004B56  2042      8499          move.l    D2,A0
00004B58  3010      8500          move.w    (A0),D0
00004B5A  C07C FFC0 8501          and.w     #65472,D0
00004B5E  0C40 40C0 8502          cmp.w     #16576,D0
00004B62  662A      8503          bne.s     DisassembleInstruction_201
                    8504   ; {
                    8505   ; InstructionSize = 1;
00004B64  24BC 0000 8506          move.l    #1,(A2)
00004B68  0001      
                    8507   ; strcpy(Instruction,"MOVE SR,") ;
00004B6A  4879 0000 8508          pea       @m68kde~2_279.L
00004B6E  8444      
00004B70  4879 0803 8509          pea       _Instruction.L
00004B74  04E2      
00004B76  4EB9 0000 8510          jsr       _strcpy
00004B7A  5766      
00004B7C  504F      8511          addq.w    #8,A7
                    8512   ; Decode6BitEA(OpCode,0,0,0) ;
00004B7E  42A7      8513          clr.l     -(A7)
00004B80  42A7      8514          clr.l     -(A7)
00004B82  42A7      8515          clr.l     -(A7)
00004B84  2F02      8516          move.l    D2,-(A7)
00004B86  4EB8 32B0 8517          jsr       _Decode6BitEA
00004B8A  DEFC 0010 8518          add.w     #16,A7
                    8519   DisassembleInstruction_201:
                    8520   ; }
                    8521   ; /////////////////////////////////////////////////////////////////////////////////
                    8522   ; // if instruction is MOVE <EA>,SR
                    8523   ; /////////////////////////////////////////////////////////////////////////////////
                    8524   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
00004B8E  2042      8525          move.l    D2,A0
00004B90  3010      8526          move.w    (A0),D0
00004B92  C07C FFC0 8527          and.w     #65472,D0
00004B96  0C40 46C0 8528          cmp.w     #18112,D0
00004B9A  6636      8529          bne.s     DisassembleInstruction_203
                    8530   ; {
                    8531   ; InstructionSize = 1;
00004B9C  24BC 0000 8532          move.l    #1,(A2)
00004BA0  0001      
                    8533   ; strcpy(Instruction,"MOVE ") ;
00004BA2  4879 0000 8534          pea       @m68kde~2_277.L
00004BA6  8438      
00004BA8  4879 0803 8535          pea       _Instruction.L
00004BAC  04E2      
00004BAE  4EB9 0000 8536          jsr       _strcpy
00004BB2  5766      
00004BB4  504F      8537          addq.w    #8,A7
                    8538   ; Decode6BitEA(OpCode,0,0,0) ;
00004BB6  42A7      8539          clr.l     -(A7)
00004BB8  42A7      8540          clr.l     -(A7)
00004BBA  42A7      8541          clr.l     -(A7)
00004BBC  2F02      8542          move.l    D2,-(A7)
00004BBE  4EB8 32B0 8543          jsr       _Decode6BitEA
00004BC2  DEFC 0010 8544          add.w     #16,A7
                    8545   ; strcatInstruction(",SR") ;
00004BC6  4879 0000 8546          pea       @m68kde~2_280.L
00004BCA  844E      
00004BCC  4EB8 0CCC 8547          jsr       _strcatInstruction
00004BD0  584F      8548          addq.w    #4,A7
                    8549   DisassembleInstruction_203:
                    8550   ; }
                    8551   ; /////////////////////////////////////////////////////////////////////////////////
                    8552   ; // if instruction is MOVE USP,An
                    8553   ; /////////////////////////////////////////////////////////////////////////////////
                    8554   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
00004BD2  2042      8555          move.l    D2,A0
00004BD4  3010      8556          move.w    (A0),D0
00004BD6  C07C FFF0 8557          and.w     #65520,D0
00004BDA  0C40 4E60 8558          cmp.w     #20064,D0
00004BDE  6600 0060 8559          bne       DisassembleInstruction_208
                    8560   ; {
                    8561   ; InstructionSize = 1;
00004BE2  24BC 0000 8562          move.l    #1,(A2)
00004BE6  0001      
                    8563   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
00004BE8  2042      8564          move.l    D2,A0
00004BEA  3010      8565          move.w    (A0),D0
00004BEC  C07C 0007 8566          and.w     #7,D0
00004BF0  3D40 FFEA 8567          move.w    D0,-22(A6)
                    8568   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
00004BF4  2042      8569          move.l    D2,A0
00004BF6  3010      8570          move.w    (A0),D0
00004BF8  C07C 0008 8571          and.w     #8,D0
00004BFC  0C40 0008 8572          cmp.w     #8,D0
00004C00  6620      8573          bne.s     DisassembleInstruction_207
                    8574   ; sprintf(Instruction, "MOVE USP,A%d", Register);
00004C02  322E FFEA 8575          move.w    -22(A6),D1
00004C06  C2BC 0000 8576          and.l     #65535,D1
00004C0A  FFFF      
00004C0C  2F01      8577          move.l    D1,-(A7)
00004C0E  4879 0000 8578          pea       @m68kde~2_281.L
00004C12  8452      
00004C14  4879 0803 8579          pea       _Instruction.L
00004C18  04E2      
00004C1A  4E95      8580          jsr       (A5)
00004C1C  DEFC 000C 8581          add.w     #12,A7
00004C20  601E      8582          bra.s     DisassembleInstruction_208
                    8583   DisassembleInstruction_207:
                    8584   ; else
                    8585   ; sprintf(Instruction, "MOVE A%d,USP", Register);
00004C22  322E FFEA 8586          move.w    -22(A6),D1
00004C26  C2BC 0000 8587          and.l     #65535,D1
00004C2A  FFFF      
00004C2C  2F01      8588          move.l    D1,-(A7)
00004C2E  4879 0000 8589          pea       @m68kde~2_282.L
00004C32  8460      
00004C34  4879 0803 8590          pea       _Instruction.L
00004C38  04E2      
00004C3A  4E95      8591          jsr       (A5)
00004C3C  DEFC 000C 8592          add.w     #12,A7
                    8593   DisassembleInstruction_208:
                    8594   ; }
                    8595   ; /////////////////////////////////////////////////////////////////////////////////
                    8596   ; // if instruction is MOVEM
                    8597   ; /////////////////////////////////////////////////////////////////////////////////
                    8598   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
00004C40  2042      8599          move.l    D2,A0
00004C42  3010      8600          move.w    (A0),D0
00004C44  C07C FB80 8601          and.w     #64384,D0
00004C48  0C40 4880 8602          cmp.w     #18560,D0
00004C4C  6600 01FC 8603          bne       DisassembleInstruction_230
                    8604   ; {
                    8605   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
00004C50  2042      8606          move.l    D2,A0
00004C52  3010      8607          move.w    (A0),D0
00004C54  E640      8608          asr.w     #3,D0
00004C56  C07C 0007 8609          and.w     #7,D0
00004C5A  3600      8610          move.w    D0,D3
                    8611   ; if( (OpMode != (unsigned short int)(0x0)) &&
00004C5C  4A43      8612          tst.w     D3
00004C5E  6700 01EA 8613          beq       DisassembleInstruction_230
00004C62  0C43 0001 8614          cmp.w     #1,D3
00004C66  6700 01E2 8615          beq       DisassembleInstruction_230
00004C6A  4A43      8616          tst.w     D3
00004C6C  6700 01DC 8617          beq       DisassembleInstruction_230
                    8618   ; (OpMode != (unsigned short int)(0x1)) &&
                    8619   ; (OpMode != (unsigned short int)(0x0)))
                    8620   ; {
                    8621   ; InstructionSize = 1;
00004C70  24BC 0000 8622          move.l    #1,(A2)
00004C74  0001      
                    8623   ; strcpy(Instruction,"MOVEM") ;
00004C76  4879 0000 8624          pea       @m68kde~2_283.L
00004C7A  846E      
00004C7C  4879 0803 8625          pea       _Instruction.L
00004C80  04E2      
00004C82  4EB9 0000 8626          jsr       _strcpy
00004C86  5766      
00004C88  504F      8627          addq.w    #8,A7
                    8628   ; InstructionSize ++ ;
00004C8A  5292      8629          addq.l    #1,(A2)
                    8630   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
00004C8C  2042      8631          move.l    D2,A0
00004C8E  3010      8632          move.w    (A0),D0
00004C90  C07C 0040 8633          and.w     #64,D0
00004C94  660E      8634          bne.s     DisassembleInstruction_213
                    8635   ; strcatInstruction(".W ") ;
00004C96  4879 0000 8636          pea       @m68kde~2_178.L
00004C9A  81B0      
00004C9C  4EB8 0CCC 8637          jsr       _strcatInstruction
00004CA0  584F      8638          addq.w    #4,A7
00004CA2  600C      8639          bra.s     DisassembleInstruction_214
                    8640   DisassembleInstruction_213:
                    8641   ; else
                    8642   ; strcatInstruction(".L ") ;
00004CA4  4879 0000 8643          pea       @m68kde~2_179.L
00004CA8  81B4      
00004CAA  4EB8 0CCC 8644          jsr       _strcatInstruction
00004CAE  584F      8645          addq.w    #4,A7
                    8646   DisassembleInstruction_214:
                    8647   ; // movem  reg,-(An) if bit 10 = 0
                    8648   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
00004CB0  2042      8649          move.l    D2,A0
00004CB2  3010      8650          move.w    (A0),D0
00004CB4  C07C 0400 8651          and.w     #1024,D0
00004CB8  6600 00D2 8652          bne       DisassembleInstruction_215
                    8653   ; {
                    8654   ; Mask = 0x8000 ;                     // bit 15 = 1
00004CBC  3D7C 8000 8655          move.w    #32768,-2(A6)
00004CC0  FFFE      
                    8656   ; DoneSlash = 0 ;
00004CC2  4246      8657          clr.w     D6
                    8658   ; for(i = 0; i < 16; i ++)    {
00004CC4  4284      8659          clr.l     D4
                    8660   DisassembleInstruction_217:
00004CC6  0C84 0000 8661          cmp.l     #16,D4
00004CCA  0010      
00004CCC  6C00 009E 8662          bge       DisassembleInstruction_219
                    8663   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
00004CD0  4879 0000 8664          pea       @m68kde~2_33.L
00004CD4  6F1E      
00004CD6  4EB9 0000 8665          jsr       _printf
00004CDA  5968      
00004CDC  584F      8666          addq.w    #4,A7
                    8667   ; if((OpCode[1] & Mask) == Mask)    {
00004CDE  2042      8668          move.l    D2,A0
00004CE0  3028 0002 8669          move.w    2(A0),D0
00004CE4  C06E FFFE 8670          and.w     -2(A6),D0
00004CE8  B06E FFFE 8671          cmp.w     -2(A6),D0
00004CEC  6600 006E 8672          bne       DisassembleInstruction_220
                    8673   ; if(i < 8 )  {
00004CF0  0C84 0000 8674          cmp.l     #8,D4
00004CF4  0008      
00004CF6  6C2C      8675          bge.s     DisassembleInstruction_222
                    8676   ; if(DoneSlash == 0)  {
00004CF8  4A46      8677          tst.w     D6
00004CFA  6614      8678          bne.s     DisassembleInstruction_224
                    8679   ; sprintf(TempString, "D%d", i) ;
00004CFC  2F04      8680          move.l    D4,-(A7)
00004CFE  4879 0000 8681          pea       @m68kde~2_284.L
00004D02  8474      
00004D04  2F0C      8682          move.l    A4,-(A7)
00004D06  4E95      8683          jsr       (A5)
00004D08  DEFC 000C 8684          add.w     #12,A7
                    8685   ; DoneSlash = 1;
00004D0C  7C01      8686          moveq     #1,D6
00004D0E  6010      8687          bra.s     DisassembleInstruction_225
                    8688   DisassembleInstruction_224:
                    8689   ; }
                    8690   ; else
                    8691   ; sprintf(TempString, "/D%d", i) ;
00004D10  2F04      8692          move.l    D4,-(A7)
00004D12  4879 0000 8693          pea       @m68kde~2_285.L
00004D16  8478      
00004D18  2F0C      8694          move.l    A4,-(A7)
00004D1A  4E95      8695          jsr       (A5)
00004D1C  DEFC 000C 8696          add.w     #12,A7
                    8697   DisassembleInstruction_225:
00004D20  6000 0032 8698          bra       DisassembleInstruction_227
                    8699   DisassembleInstruction_222:
                    8700   ; }
                    8701   ; else   {
                    8702   ; if(DoneSlash == 0)  {
00004D24  4A46      8703          tst.w     D6
00004D26  6618      8704          bne.s     DisassembleInstruction_226
                    8705   ; sprintf(TempString, "A%d", i-8) ;
00004D28  2204      8706          move.l    D4,D1
00004D2A  5181      8707          subq.l    #8,D1
00004D2C  2F01      8708          move.l    D1,-(A7)
00004D2E  4879 0000 8709          pea       @m68kde~2_286.L
00004D32  847E      
00004D34  2F0C      8710          move.l    A4,-(A7)
00004D36  4E95      8711          jsr       (A5)
00004D38  DEFC 000C 8712          add.w     #12,A7
                    8713   ; DoneSlash = 1;
00004D3C  7C01      8714          moveq     #1,D6
00004D3E  6014      8715          bra.s     DisassembleInstruction_227
                    8716   DisassembleInstruction_226:
                    8717   ; }
                    8718   ; else
                    8719   ; sprintf(TempString, "/A%d", i-8) ;
00004D40  2204      8720          move.l    D4,D1
00004D42  5181      8721          subq.l    #8,D1
00004D44  2F01      8722          move.l    D1,-(A7)
00004D46  4879 0000 8723          pea       @m68kde~2_287.L
00004D4A  8482      
00004D4C  2F0C      8724          move.l    A4,-(A7)
00004D4E  4E95      8725          jsr       (A5)
00004D50  DEFC 000C 8726          add.w     #12,A7
                    8727   DisassembleInstruction_227:
                    8728   ; }
                    8729   ; strcatInstruction(TempString) ;
00004D54  2F0C      8730          move.l    A4,-(A7)
00004D56  4EB8 0CCC 8731          jsr       _strcatInstruction
00004D5A  584F      8732          addq.w    #4,A7
                    8733   DisassembleInstruction_220:
                    8734   ; }
                    8735   ; Mask = Mask >> 1 ;
00004D5C  302E FFFE 8736          move.w    -2(A6),D0
00004D60  E240      8737          asr.w     #1,D0
00004D62  3D40 FFFE 8738          move.w    D0,-2(A6)
00004D66  5284      8739          addq.l    #1,D4
00004D68  6000 FF5C 8740          bra       DisassembleInstruction_217
                    8741   DisassembleInstruction_219:
                    8742   ; }
                    8743   ; strcatInstruction(",") ;
00004D6C  4879 0000 8744          pea       @m68kde~2_194.L
00004D70  81FA      
00004D72  4EB8 0CCC 8745          jsr       _strcatInstruction
00004D76  584F      8746          addq.w    #4,A7
                    8747   ; Decode6BitEA(OpCode,0,0,0) ;
00004D78  42A7      8748          clr.l     -(A7)
00004D7A  42A7      8749          clr.l     -(A7)
00004D7C  42A7      8750          clr.l     -(A7)
00004D7E  2F02      8751          move.l    D2,-(A7)
00004D80  4EB8 32B0 8752          jsr       _Decode6BitEA
00004D84  DEFC 0010 8753          add.w     #16,A7
00004D88  6000 00C0 8754          bra       DisassembleInstruction_230
                    8755   DisassembleInstruction_215:
                    8756   ; }
                    8757   ; //movem  (An)+,reg
                    8758   ; else    {
                    8759   ; Decode6BitEA(OpCode,0,0,0) ;
00004D8C  42A7      8760          clr.l     -(A7)
00004D8E  42A7      8761          clr.l     -(A7)
00004D90  42A7      8762          clr.l     -(A7)
00004D92  2F02      8763          move.l    D2,-(A7)
00004D94  4EB8 32B0 8764          jsr       _Decode6BitEA
00004D98  DEFC 0010 8765          add.w     #16,A7
                    8766   ; strcatInstruction(",") ;
00004D9C  4879 0000 8767          pea       @m68kde~2_194.L
00004DA0  81FA      
00004DA2  4EB8 0CCC 8768          jsr       _strcatInstruction
00004DA6  584F      8769          addq.w    #4,A7
                    8770   ; Mask = 0x0001 ;                     // bit 0 = 1
00004DA8  3D7C 0001 8771          move.w    #1,-2(A6)
00004DAC  FFFE      
                    8772   ; DoneSlash = 0 ;
00004DAE  4246      8773          clr.w     D6
                    8774   ; for(i = 0; i < 16 ; i ++)    {
00004DB0  4284      8775          clr.l     D4
                    8776   DisassembleInstruction_228:
00004DB2  0C84 0000 8777          cmp.l     #16,D4
00004DB6  0010      
00004DB8  6C00 0090 8778          bge       DisassembleInstruction_230
                    8779   ; if((OpCode[1] & Mask) == Mask)    {
00004DBC  2042      8780          move.l    D2,A0
00004DBE  3028 0002 8781          move.w    2(A0),D0
00004DC2  C06E FFFE 8782          and.w     -2(A6),D0
00004DC6  B06E FFFE 8783          cmp.w     -2(A6),D0
00004DCA  6600 006E 8784          bne       DisassembleInstruction_231
                    8785   ; if(i < 8)   {       // data registers in bits 7-0
00004DCE  0C84 0000 8786          cmp.l     #8,D4
00004DD2  0008      
00004DD4  6C2C      8787          bge.s     DisassembleInstruction_233
                    8788   ; if(DoneSlash == 0)  {
00004DD6  4A46      8789          tst.w     D6
00004DD8  6614      8790          bne.s     DisassembleInstruction_235
                    8791   ; sprintf(TempString, "D%d", i) ;
00004DDA  2F04      8792          move.l    D4,-(A7)
00004DDC  4879 0000 8793          pea       @m68kde~2_284.L
00004DE0  8474      
00004DE2  2F0C      8794          move.l    A4,-(A7)
00004DE4  4E95      8795          jsr       (A5)
00004DE6  DEFC 000C 8796          add.w     #12,A7
                    8797   ; DoneSlash = 1;
00004DEA  7C01      8798          moveq     #1,D6
00004DEC  6010      8799          bra.s     DisassembleInstruction_236
                    8800   DisassembleInstruction_235:
                    8801   ; }
                    8802   ; else
                    8803   ; sprintf(TempString, "/D%d", i) ;
00004DEE  2F04      8804          move.l    D4,-(A7)
00004DF0  4879 0000 8805          pea       @m68kde~2_285.L
00004DF4  8478      
00004DF6  2F0C      8806          move.l    A4,-(A7)
00004DF8  4E95      8807          jsr       (A5)
00004DFA  DEFC 000C 8808          add.w     #12,A7
                    8809   DisassembleInstruction_236:
00004DFE  6000 0032 8810          bra       DisassembleInstruction_238
                    8811   DisassembleInstruction_233:
                    8812   ; }
                    8813   ; else    {
                    8814   ; if(DoneSlash == 0)  {
00004E02  4A46      8815          tst.w     D6
00004E04  6618      8816          bne.s     DisassembleInstruction_237
                    8817   ; sprintf(TempString, "A%d", i-8) ;
00004E06  2204      8818          move.l    D4,D1
00004E08  5181      8819          subq.l    #8,D1
00004E0A  2F01      8820          move.l    D1,-(A7)
00004E0C  4879 0000 8821          pea       @m68kde~2_286.L
00004E10  847E      
00004E12  2F0C      8822          move.l    A4,-(A7)
00004E14  4E95      8823          jsr       (A5)
00004E16  DEFC 000C 8824          add.w     #12,A7
                    8825   ; DoneSlash = 1;
00004E1A  7C01      8826          moveq     #1,D6
00004E1C  6014      8827          bra.s     DisassembleInstruction_238
                    8828   DisassembleInstruction_237:
                    8829   ; }
                    8830   ; else
                    8831   ; sprintf(TempString, "/A%d", i-8) ;
00004E1E  2204      8832          move.l    D4,D1
00004E20  5181      8833          subq.l    #8,D1
00004E22  2F01      8834          move.l    D1,-(A7)
00004E24  4879 0000 8835          pea       @m68kde~2_287.L
00004E28  8482      
00004E2A  2F0C      8836          move.l    A4,-(A7)
00004E2C  4E95      8837          jsr       (A5)
00004E2E  DEFC 000C 8838          add.w     #12,A7
                    8839   DisassembleInstruction_238:
                    8840   ; }
                    8841   ; strcatInstruction(TempString) ;
00004E32  2F0C      8842          move.l    A4,-(A7)
00004E34  4EB8 0CCC 8843          jsr       _strcatInstruction
00004E38  584F      8844          addq.w    #4,A7
                    8845   DisassembleInstruction_231:
                    8846   ; }
                    8847   ; Mask = Mask << 1 ;
00004E3A  302E FFFE 8848          move.w    -2(A6),D0
00004E3E  E340      8849          asl.w     #1,D0
00004E40  3D40 FFFE 8850          move.w    D0,-2(A6)
00004E44  5284      8851          addq.l    #1,D4
00004E46  6000 FF6A 8852          bra       DisassembleInstruction_228
                    8853   DisassembleInstruction_230:
                    8854   ; }
                    8855   ; }
                    8856   ; }
                    8857   ; }
                    8858   ; /////////////////////////////////////////////////////////////////////////////////
                    8859   ; // if instruction is MOVEP
                    8860   ; /////////////////////////////////////////////////////////////////////////////////
                    8861   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00004E4A  2042      8862          move.l    D2,A0
00004E4C  3010      8863          move.w    (A0),D0
00004E4E  C07C F038 8864          and.w     #61496,D0
00004E52  0C40 0008 8865          cmp.w     #8,D0
00004E56  6600 0112 8866          bne       DisassembleInstruction_247
                    8867   ; {
                    8868   ; InstructionSize = 1;
00004E5A  24BC 0000 8869          move.l    #1,(A2)
00004E5E  0001      
                    8870   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004E60  2042      8871          move.l    D2,A0
00004E62  3010      8872          move.w    (A0),D0
00004E64  E040      8873          asr.w     #8,D0
00004E66  E240      8874          asr.w     #1,D0
00004E68  C07C 0007 8875          and.w     #7,D0
00004E6C  3A00      8876          move.w    D0,D5
                    8877   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
00004E6E  2042      8878          move.l    D2,A0
00004E70  3010      8879          move.w    (A0),D0
00004E72  C07C 0007 8880          and.w     #7,D0
00004E76  3D40 FFF8 8881          move.w    D0,-8(A6)
                    8882   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00004E7A  2042      8883          move.l    D2,A0
00004E7C  3010      8884          move.w    (A0),D0
00004E7E  EC40      8885          asr.w     #6,D0
00004E80  C07C 0007 8886          and.w     #7,D0
00004E84  3600      8887          move.w    D0,D3
                    8888   ; InstructionSize++ ;
00004E86  5292      8889          addq.l    #1,(A2)
                    8890   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00004E88  0C43 0004 8891          cmp.w     #4,D3
00004E8C  6634      8892          bne.s     DisassembleInstruction_241
                    8893   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004E8E  CABC 0000 8894          and.l     #65535,D5
00004E92  FFFF      
00004E94  2F05      8895          move.l    D5,-(A7)
00004E96  322E FFF8 8896          move.w    -8(A6),D1
00004E9A  C2BC 0000 8897          and.l     #65535,D1
00004E9E  FFFF      
00004EA0  2F01      8898          move.l    D1,-(A7)
00004EA2  2042      8899          move.l    D2,A0
00004EA4  3228 0002 8900          move.w    2(A0),D1
00004EA8  48C1      8901          ext.l     D1
00004EAA  2F01      8902          move.l    D1,-(A7)
00004EAC  4879 0000 8903          pea       @m68kde~2_288.L
00004EB0  8488      
00004EB2  4879 0803 8904          pea       _Instruction.L
00004EB6  04E2      
00004EB8  4E95      8905          jsr       (A5)
00004EBA  DEFC 0014 8906          add.w     #20,A7
00004EBE  6000 00AA 8907          bra       DisassembleInstruction_247
                    8908   DisassembleInstruction_241:
                    8909   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
00004EC2  0C43 0005 8910          cmp.w     #5,D3
00004EC6  6634      8911          bne.s     DisassembleInstruction_243
                    8912   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004EC8  CABC 0000 8913          and.l     #65535,D5
00004ECC  FFFF      
00004ECE  2F05      8914          move.l    D5,-(A7)
00004ED0  322E FFF8 8915          move.w    -8(A6),D1
00004ED4  C2BC 0000 8916          and.l     #65535,D1
00004ED8  FFFF      
00004EDA  2F01      8917          move.l    D1,-(A7)
00004EDC  2042      8918          move.l    D2,A0
00004EDE  3228 0002 8919          move.w    2(A0),D1
00004EE2  48C1      8920          ext.l     D1
00004EE4  2F01      8921          move.l    D1,-(A7)
00004EE6  4879 0000 8922          pea       @m68kde~2_289.L
00004EEA  849E      
00004EEC  4879 0803 8923          pea       _Instruction.L
00004EF0  04E2      
00004EF2  4E95      8924          jsr       (A5)
00004EF4  DEFC 0014 8925          add.w     #20,A7
00004EF8  6000 0070 8926          bra       DisassembleInstruction_247
                    8927   DisassembleInstruction_243:
                    8928   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
00004EFC  0C43 0006 8929          cmp.w     #6,D3
00004F00  6632      8930          bne.s     DisassembleInstruction_245
                    8931   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004F02  322E FFF8 8932          move.w    -8(A6),D1
00004F06  C2BC 0000 8933          and.l     #65535,D1
00004F0A  FFFF      
00004F0C  2F01      8934          move.l    D1,-(A7)
00004F0E  2042      8935          move.l    D2,A0
00004F10  3228 0002 8936          move.w    2(A0),D1
00004F14  48C1      8937          ext.l     D1
00004F16  2F01      8938          move.l    D1,-(A7)
00004F18  CABC 0000 8939          and.l     #65535,D5
00004F1C  FFFF      
00004F1E  2F05      8940          move.l    D5,-(A7)
00004F20  4879 0000 8941          pea       @m68kde~2_290.L
00004F24  84B4      
00004F26  4879 0803 8942          pea       _Instruction.L
00004F2A  04E2      
00004F2C  4E95      8943          jsr       (A5)
00004F2E  DEFC 0014 8944          add.w     #20,A7
00004F32  6036      8945          bra.s     DisassembleInstruction_247
                    8946   DisassembleInstruction_245:
                    8947   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
00004F34  0C43 0007 8948          cmp.w     #7,D3
00004F38  6630      8949          bne.s     DisassembleInstruction_247
                    8950   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004F3A  322E FFF8 8951          move.w    -8(A6),D1
00004F3E  C2BC 0000 8952          and.l     #65535,D1
00004F42  FFFF      
00004F44  2F01      8953          move.l    D1,-(A7)
00004F46  2042      8954          move.l    D2,A0
00004F48  3228 0002 8955          move.w    2(A0),D1
00004F4C  48C1      8956          ext.l     D1
00004F4E  2F01      8957          move.l    D1,-(A7)
00004F50  CABC 0000 8958          and.l     #65535,D5
00004F54  FFFF      
00004F56  2F05      8959          move.l    D5,-(A7)
00004F58  4879 0000 8960          pea       @m68kde~2_291.L
00004F5C  84CA      
00004F5E  4879 0803 8961          pea       _Instruction.L
00004F62  04E2      
00004F64  4E95      8962          jsr       (A5)
00004F66  DEFC 0014 8963          add.w     #20,A7
                    8964   DisassembleInstruction_247:
                    8965   ; }
                    8966   ; /////////////////////////////////////////////////////////////////////////////////
                    8967   ; // if instruction is MOVEQ
                    8968   ; /////////////////////////////////////////////////////////////////////////////////
                    8969   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
00004F6A  2042      8970          move.l    D2,A0
00004F6C  3010      8971          move.w    (A0),D0
00004F6E  C07C F100 8972          and.w     #61696,D0
00004F72  0C40 7000 8973          cmp.w     #28672,D0
00004F76  6600 0040 8974          bne       DisassembleInstruction_249
                    8975   ; {
                    8976   ; InstructionSize = 1;
00004F7A  24BC 0000 8977          move.l    #1,(A2)
00004F7E  0001      
                    8978   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
00004F80  2042      8979          move.l    D2,A0
00004F82  3010      8980          move.w    (A0),D0
00004F84  E040      8981          asr.w     #8,D0
00004F86  E240      8982          asr.w     #1,D0
00004F88  C07C 0007 8983          and.w     #7,D0
00004F8C  3A00      8984          move.w    D0,D5
                    8985   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
00004F8E  CABC 0000 8986          and.l     #65535,D5
00004F92  FFFF      
00004F94  2F05      8987          move.l    D5,-(A7)
00004F96  2042      8988          move.l    D2,A0
00004F98  3210      8989          move.w    (A0),D1
00004F9A  C27C 00FF 8990          and.w     #255,D1
00004F9E  C2BC 0000 8991          and.l     #65535,D1
00004FA2  FFFF      
00004FA4  2F01      8992          move.l    D1,-(A7)
00004FA6  4879 0000 8993          pea       @m68kde~2_292.L
00004FAA  84E0      
00004FAC  4879 0803 8994          pea       _Instruction.L
00004FB0  04E2      
00004FB2  4E95      8995          jsr       (A5)
00004FB4  DEFC 0010 8996          add.w     #16,A7
                    8997   DisassembleInstruction_249:
                    8998   ; }
                    8999   ; /////////////////////////////////////////////////////////////////////////////////
                    9000   ; // if instruction is MULS.W
                    9001   ; /////////////////////////////////////////////////////////////////////////////////
                    9002   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
00004FB8  2042      9003          move.l    D2,A0
00004FBA  3010      9004          move.w    (A0),D0
00004FBC  C07C F1C0 9005          and.w     #61888,D0
00004FC0  0C40 C1C0 9006          cmp.w     #49600,D0
00004FC4  6600 004E 9007          bne       DisassembleInstruction_251
                    9008   ; {
                    9009   ; InstructionSize = 1;
00004FC8  24BC 0000 9010          move.l    #1,(A2)
00004FCC  0001      
                    9011   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004FCE  2042      9012          move.l    D2,A0
00004FD0  3010      9013          move.w    (A0),D0
00004FD2  E040      9014          asr.w     #8,D0
00004FD4  E240      9015          asr.w     #1,D0
00004FD6  C07C 0007 9016          and.w     #7,D0
00004FDA  3A00      9017          move.w    D0,D5
                    9018   ; strcpyInstruction("MULS ");
00004FDC  4879 0000 9019          pea       @m68kde~2_293.L
00004FE0  84F0      
00004FE2  4E93      9020          jsr       (A3)
00004FE4  584F      9021          addq.w    #4,A7
                    9022   ; Decode6BitEA(OpCode,0,0,0) ;
00004FE6  42A7      9023          clr.l     -(A7)
00004FE8  42A7      9024          clr.l     -(A7)
00004FEA  42A7      9025          clr.l     -(A7)
00004FEC  2F02      9026          move.l    D2,-(A7)
00004FEE  4EB8 32B0 9027          jsr       _Decode6BitEA
00004FF2  DEFC 0010 9028          add.w     #16,A7
                    9029   ; sprintf(TempString, ",D%d", DataRegister) ;
00004FF6  CABC 0000 9030          and.l     #65535,D5
00004FFA  FFFF      
00004FFC  2F05      9031          move.l    D5,-(A7)
00004FFE  4879 0000 9032          pea       @m68kde~2_249.L
00005002  8346      
00005004  2F0C      9033          move.l    A4,-(A7)
00005006  4E95      9034          jsr       (A5)
00005008  DEFC 000C 9035          add.w     #12,A7
                    9036   ; strcatInstruction(TempString);
0000500C  2F0C      9037          move.l    A4,-(A7)
0000500E  4EB8 0CCC 9038          jsr       _strcatInstruction
00005012  584F      9039          addq.w    #4,A7
                    9040   DisassembleInstruction_251:
                    9041   ; }
                    9042   ; /////////////////////////////////////////////////////////////////////////////////
                    9043   ; // if instruction is MULU.W
                    9044   ; /////////////////////////////////////////////////////////////////////////////////
                    9045   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
00005014  2042      9046          move.l    D2,A0
00005016  3010      9047          move.w    (A0),D0
00005018  C07C F1C0 9048          and.w     #61888,D0
0000501C  0C40 C0C0 9049          cmp.w     #49344,D0
00005020  6600 004E 9050          bne       DisassembleInstruction_253
                    9051   ; {
                    9052   ; InstructionSize = 1;
00005024  24BC 0000 9053          move.l    #1,(A2)
00005028  0001      
                    9054   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
0000502A  2042      9055          move.l    D2,A0
0000502C  3010      9056          move.w    (A0),D0
0000502E  E040      9057          asr.w     #8,D0
00005030  E240      9058          asr.w     #1,D0
00005032  C07C 0007 9059          and.w     #7,D0
00005036  3A00      9060          move.w    D0,D5
                    9061   ; strcpyInstruction("MULU ");
00005038  4879 0000 9062          pea       @m68kde~2_294.L
0000503C  84F6      
0000503E  4E93      9063          jsr       (A3)
00005040  584F      9064          addq.w    #4,A7
                    9065   ; Decode6BitEA(OpCode,0,0,0) ;
00005042  42A7      9066          clr.l     -(A7)
00005044  42A7      9067          clr.l     -(A7)
00005046  42A7      9068          clr.l     -(A7)
00005048  2F02      9069          move.l    D2,-(A7)
0000504A  4EB8 32B0 9070          jsr       _Decode6BitEA
0000504E  DEFC 0010 9071          add.w     #16,A7
                    9072   ; sprintf(TempString, ",D%d", DataRegister) ;
00005052  CABC 0000 9073          and.l     #65535,D5
00005056  FFFF      
00005058  2F05      9074          move.l    D5,-(A7)
0000505A  4879 0000 9075          pea       @m68kde~2_249.L
0000505E  8346      
00005060  2F0C      9076          move.l    A4,-(A7)
00005062  4E95      9077          jsr       (A5)
00005064  DEFC 000C 9078          add.w     #12,A7
                    9079   ; strcatInstruction(TempString);
00005068  2F0C      9080          move.l    A4,-(A7)
0000506A  4EB8 0CCC 9081          jsr       _strcatInstruction
0000506E  584F      9082          addq.w    #4,A7
                    9083   DisassembleInstruction_253:
                    9084   ; }
                    9085   ; /////////////////////////////////////////////////////////////////////////////////
                    9086   ; // if instruction is NBCD <EA>
                    9087   ; /////////////////////////////////////////////////////////////////////////////////
                    9088   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
00005070  2042      9089          move.l    D2,A0
00005072  3010      9090          move.w    (A0),D0
00005074  C07C FFC0 9091          and.w     #65472,D0
00005078  0C40 4800 9092          cmp.w     #18432,D0
0000507C  6620      9093          bne.s     DisassembleInstruction_255
                    9094   ; {
                    9095   ; InstructionSize = 1;
0000507E  24BC 0000 9096          move.l    #1,(A2)
00005082  0001      
                    9097   ; strcpyInstruction("NBCD ");
00005084  4879 0000 9098          pea       @m68kde~2_295.L
00005088  84FC      
0000508A  4E93      9099          jsr       (A3)
0000508C  584F      9100          addq.w    #4,A7
                    9101   ; Decode6BitEA(OpCode,0,0,0);
0000508E  42A7      9102          clr.l     -(A7)
00005090  42A7      9103          clr.l     -(A7)
00005092  42A7      9104          clr.l     -(A7)
00005094  2F02      9105          move.l    D2,-(A7)
00005096  4EB8 32B0 9106          jsr       _Decode6BitEA
0000509A  DEFC 0010 9107          add.w     #16,A7
                    9108   DisassembleInstruction_255:
                    9109   ; }
                    9110   ; /////////////////////////////////////////////////////////////////////////////////
                    9111   ; // if instruction is NEG <EA>
                    9112   ; /////////////////////////////////////////////////////////////////////////////////
                    9113   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
0000509E  2042      9114          move.l    D2,A0
000050A0  3010      9115          move.w    (A0),D0
000050A2  C07C FF00 9116          and.w     #65280,D0
000050A6  0C40 4400 9117          cmp.w     #17408,D0
000050AA  6600 0046 9118          bne       DisassembleInstruction_259
                    9119   ; {
                    9120   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
000050AE  2042      9121          move.l    D2,A0
000050B0  3010      9122          move.w    (A0),D0
000050B2  EC40      9123          asr.w     #6,D0
000050B4  C07C 0003 9124          and.w     #3,D0
000050B8  0C40 0003 9125          cmp.w     #3,D0
000050BC  6700 0034 9126          beq       DisassembleInstruction_259
                    9127   ; {
                    9128   ; InstructionSize = 1;
000050C0  24BC 0000 9129          move.l    #1,(A2)
000050C4  0001      
                    9130   ; strcpyInstruction("NEG");
000050C6  4879 0000 9131          pea       @m68kde~2_296.L
000050CA  8502      
000050CC  4E93      9132          jsr       (A3)
000050CE  584F      9133          addq.w    #4,A7
                    9134   ; Decode2BitOperandSize(*OpCode) ;
000050D0  2042      9135          move.l    D2,A0
000050D2  3210      9136          move.w    (A0),D1
000050D4  C2BC 0000 9137          and.l     #65535,D1
000050D8  FFFF      
000050DA  2F01      9138          move.l    D1,-(A7)
000050DC  4EB8 301C 9139          jsr       _Decode2BitOperandSize
000050E0  584F      9140          addq.w    #4,A7
                    9141   ; Decode6BitEA(OpCode,0,0,0);
000050E2  42A7      9142          clr.l     -(A7)
000050E4  42A7      9143          clr.l     -(A7)
000050E6  42A7      9144          clr.l     -(A7)
000050E8  2F02      9145          move.l    D2,-(A7)
000050EA  4EB8 32B0 9146          jsr       _Decode6BitEA
000050EE  DEFC 0010 9147          add.w     #16,A7
                    9148   DisassembleInstruction_259:
                    9149   ; }
                    9150   ; }
                    9151   ; /////////////////////////////////////////////////////////////////////////////////
                    9152   ; // if instruction is NEGX <EA>
                    9153   ; /////////////////////////////////////////////////////////////////////////////////
                    9154   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
000050F2  2042      9155          move.l    D2,A0
000050F4  3010      9156          move.w    (A0),D0
000050F6  C07C FF00 9157          and.w     #65280,D0
000050FA  0C40 4000 9158          cmp.w     #16384,D0
000050FE  6600 0046 9159          bne       DisassembleInstruction_263
                    9160   ; {
                    9161   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00005102  2042      9162          move.l    D2,A0
00005104  3010      9163          move.w    (A0),D0
00005106  EC40      9164          asr.w     #6,D0
00005108  C07C 0003 9165          and.w     #3,D0
0000510C  0C40 0003 9166          cmp.w     #3,D0
00005110  6700 0034 9167          beq       DisassembleInstruction_263
                    9168   ; {
                    9169   ; InstructionSize = 1;
00005114  24BC 0000 9170          move.l    #1,(A2)
00005118  0001      
                    9171   ; strcpyInstruction("NEGX");
0000511A  4879 0000 9172          pea       @m68kde~2_297.L
0000511E  8506      
00005120  4E93      9173          jsr       (A3)
00005122  584F      9174          addq.w    #4,A7
                    9175   ; Decode2BitOperandSize(*OpCode) ;
00005124  2042      9176          move.l    D2,A0
00005126  3210      9177          move.w    (A0),D1
00005128  C2BC 0000 9178          and.l     #65535,D1
0000512C  FFFF      
0000512E  2F01      9179          move.l    D1,-(A7)
00005130  4EB8 301C 9180          jsr       _Decode2BitOperandSize
00005134  584F      9181          addq.w    #4,A7
                    9182   ; Decode6BitEA(OpCode,0,0,0);
00005136  42A7      9183          clr.l     -(A7)
00005138  42A7      9184          clr.l     -(A7)
0000513A  42A7      9185          clr.l     -(A7)
0000513C  2F02      9186          move.l    D2,-(A7)
0000513E  4EB8 32B0 9187          jsr       _Decode6BitEA
00005142  DEFC 0010 9188          add.w     #16,A7
                    9189   DisassembleInstruction_263:
                    9190   ; }
                    9191   ; }
                    9192   ; /////////////////////////////////////////////////////////////////////////////////
                    9193   ; // if instruction is NOP
                    9194   ; /////////////////////////////////////////////////////////////////////////////////
                    9195   ; if(*OpCode == (unsigned short int)(0x4E71))
00005146  2042      9196          move.l    D2,A0
00005148  3010      9197          move.w    (A0),D0
0000514A  0C40 4E71 9198          cmp.w     #20081,D0
0000514E  6610      9199          bne.s     DisassembleInstruction_265
                    9200   ; {
                    9201   ; InstructionSize = 1;
00005150  24BC 0000 9202          move.l    #1,(A2)
00005154  0001      
                    9203   ; strcpyInstruction("NOP");
00005156  4879 0000 9204          pea       @m68kde~2_298.L
0000515A  850C      
0000515C  4E93      9205          jsr       (A3)
0000515E  584F      9206          addq.w    #4,A7
                    9207   DisassembleInstruction_265:
                    9208   ; }
                    9209   ; /////////////////////////////////////////////////////////////////////////////////
                    9210   ; // if instruction is NOT <EA>
                    9211   ; /////////////////////////////////////////////////////////////////////////////////
                    9212   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
00005160  2042      9213          move.l    D2,A0
00005162  3010      9214          move.w    (A0),D0
00005164  C07C FF00 9215          and.w     #65280,D0
00005168  0C40 4600 9216          cmp.w     #17920,D0
0000516C  6600 0046 9217          bne       DisassembleInstruction_269
                    9218   ; {
                    9219   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00005170  2042      9220          move.l    D2,A0
00005172  3010      9221          move.w    (A0),D0
00005174  EC40      9222          asr.w     #6,D0
00005176  C07C 0003 9223          and.w     #3,D0
0000517A  0C40 0003 9224          cmp.w     #3,D0
0000517E  6700 0034 9225          beq       DisassembleInstruction_269
                    9226   ; {
                    9227   ; InstructionSize = 1;
00005182  24BC 0000 9228          move.l    #1,(A2)
00005186  0001      
                    9229   ; strcpyInstruction("NOT");
00005188  4879 0000 9230          pea       @m68kde~2_299.L
0000518C  8510      
0000518E  4E93      9231          jsr       (A3)
00005190  584F      9232          addq.w    #4,A7
                    9233   ; Decode2BitOperandSize(*OpCode) ;
00005192  2042      9234          move.l    D2,A0
00005194  3210      9235          move.w    (A0),D1
00005196  C2BC 0000 9236          and.l     #65535,D1
0000519A  FFFF      
0000519C  2F01      9237          move.l    D1,-(A7)
0000519E  4EB8 301C 9238          jsr       _Decode2BitOperandSize
000051A2  584F      9239          addq.w    #4,A7
                    9240   ; Decode6BitEA(OpCode,0,0,0);
000051A4  42A7      9241          clr.l     -(A7)
000051A6  42A7      9242          clr.l     -(A7)
000051A8  42A7      9243          clr.l     -(A7)
000051AA  2F02      9244          move.l    D2,-(A7)
000051AC  4EB8 32B0 9245          jsr       _Decode6BitEA
000051B0  DEFC 0010 9246          add.w     #16,A7
                    9247   DisassembleInstruction_269:
                    9248   ; }
                    9249   ; }
                    9250   ; /////////////////////////////////////////////////////////////////////////////////
                    9251   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    9252   ; /////////////////////////////////////////////////////////////////////////////////
                    9253   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
000051B4  2042      9254          move.l    D2,A0
000051B6  3010      9255          move.w    (A0),D0
000051B8  C07C F000 9256          and.w     #61440,D0
000051BC  0C40 8000 9257          cmp.w     #32768,D0
000051C0  6600 0038 9258          bne       DisassembleInstruction_273
                    9259   ; {
                    9260   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000051C4  2042      9261          move.l    D2,A0
000051C6  3010      9262          move.w    (A0),D0
000051C8  EC40      9263          asr.w     #6,D0
000051CA  C07C 0007 9264          and.w     #7,D0
000051CE  3600      9265          move.w    D0,D3
                    9266   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
000051D0  0C43 0002 9267          cmp.w     #2,D3
000051D4  630C      9268          bls.s     DisassembleInstruction_275
000051D6  0C43 0004 9269          cmp.w     #4,D3
000051DA  651E      9270          blo.s     DisassembleInstruction_273
000051DC  0C43 0006 9271          cmp.w     #6,D3
000051E0  6218      9272          bhi.s     DisassembleInstruction_273
                    9273   DisassembleInstruction_275:
                    9274   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    9275   ; {
                    9276   ; InstructionSize = 1;
000051E2  24BC 0000 9277          move.l    #1,(A2)
000051E6  0001      
                    9278   ; strcpyInstruction("OR") ;
000051E8  4879 0000 9279          pea       @m68kde~2_300.L
000051EC  8514      
000051EE  4E93      9280          jsr       (A3)
000051F0  584F      9281          addq.w    #4,A7
                    9282   ; Decode3BitOperandMode(OpCode) ;
000051F2  2F02      9283          move.l    D2,-(A7)
000051F4  4EB8 36D8 9284          jsr       _Decode3BitOperandMode
000051F8  584F      9285          addq.w    #4,A7
                    9286   DisassembleInstruction_273:
                    9287   ; }
                    9288   ; }
                    9289   ; /////////////////////////////////////////////////////////////////////////////////
                    9290   ; // if instruction is ORI to CCR
                    9291   ; /////////////////////////////////////////////////////////////////////////////////
                    9292   ; if(*OpCode == (unsigned short int)(0x003C))   {
000051FA  2042      9293          move.l    D2,A0
000051FC  3010      9294          move.w    (A0),D0
000051FE  0C40 003C 9295          cmp.w     #60,D0
00005202  662A      9296          bne.s     DisassembleInstruction_276
                    9297   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00005204  2042      9298          move.l    D2,A0
00005206  3228 0002 9299          move.w    2(A0),D1
0000520A  C27C 00FF 9300          and.w     #255,D1
0000520E  C2BC 0000 9301          and.l     #65535,D1
00005212  FFFF      
00005214  2F01      9302          move.l    D1,-(A7)
00005216  4879 0000 9303          pea       @m68kde~2_301.L
0000521A  8518      
0000521C  4879 0803 9304          pea       _Instruction.L
00005220  04E2      
00005222  4E95      9305          jsr       (A5)
00005224  DEFC 000C 9306          add.w     #12,A7
                    9307   ; InstructionSize = 2;
00005228  24BC 0000 9308          move.l    #2,(A2)
0000522C  0002      
                    9309   DisassembleInstruction_276:
                    9310   ; }
                    9311   ; /////////////////////////////////////////////////////////////////////////////////
                    9312   ; // if instruction is ORI #data,SR
                    9313   ; /////////////////////////////////////////////////////////////////////////////////
                    9314   ; if(*OpCode  == (unsigned short int)(0x007c))
0000522E  2042      9315          move.l    D2,A0
00005230  3010      9316          move.w    (A0),D0
00005232  0C40 007C 9317          cmp.w     #124,D0
00005236  6622      9318          bne.s     DisassembleInstruction_278
                    9319   ; {
                    9320   ; InstructionSize = 2;
00005238  24BC 0000 9321          move.l    #2,(A2)
0000523C  0002      
                    9322   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
0000523E  2042      9323          move.l    D2,A0
00005240  3228 0002 9324          move.w    2(A0),D1
00005244  48C1      9325          ext.l     D1
00005246  2F01      9326          move.l    D1,-(A7)
00005248  4879 0000 9327          pea       @m68kde~2_302.L
0000524C  8526      
0000524E  4879 0803 9328          pea       _Instruction.L
00005252  04E2      
00005254  4E95      9329          jsr       (A5)
00005256  DEFC 000C 9330          add.w     #12,A7
                    9331   DisassembleInstruction_278:
                    9332   ; }
                    9333   ; /////////////////////////////////////////////////////////////////////////////////
                    9334   ; // if instruction is PEA
                    9335   ; /////////////////////////////////////////////////////////////////////////////////
                    9336   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
0000525A  2042      9337          move.l    D2,A0
0000525C  3010      9338          move.w    (A0),D0
0000525E  C07C FFC0 9339          and.w     #65472,D0
00005262  0C40 4840 9340          cmp.w     #18496,D0
00005266  6620      9341          bne.s     DisassembleInstruction_280
                    9342   ; {
                    9343   ; InstructionSize = 1;
00005268  24BC 0000 9344          move.l    #1,(A2)
0000526C  0001      
                    9345   ; strcpyInstruction("PEA ");
0000526E  4879 0000 9346          pea       @m68kde~2_303.L
00005272  8534      
00005274  4E93      9347          jsr       (A3)
00005276  584F      9348          addq.w    #4,A7
                    9349   ; Decode6BitEA(OpCode,0,0,0);
00005278  42A7      9350          clr.l     -(A7)
0000527A  42A7      9351          clr.l     -(A7)
0000527C  42A7      9352          clr.l     -(A7)
0000527E  2F02      9353          move.l    D2,-(A7)
00005280  4EB8 32B0 9354          jsr       _Decode6BitEA
00005284  DEFC 0010 9355          add.w     #16,A7
                    9356   DisassembleInstruction_280:
                    9357   ; }
                    9358   ; /////////////////////////////////////////////////////////////////////////////////
                    9359   ; // if instruction is reset
                    9360   ; /////////////////////////////////////////////////////////////////////////////////
                    9361   ; if(*OpCode  == (unsigned short int)(0x4E70))
00005288  2042      9362          move.l    D2,A0
0000528A  3010      9363          move.w    (A0),D0
0000528C  0C40 4E70 9364          cmp.w     #20080,D0
00005290  6616      9365          bne.s     DisassembleInstruction_282
                    9366   ; {
                    9367   ; InstructionSize = 1;
00005292  24BC 0000 9368          move.l    #1,(A2)
00005296  0001      
                    9369   ; sprintf(Instruction, "RESET");
00005298  4879 0000 9370          pea       @m68kde~2_304.L
0000529C  853A      
0000529E  4879 0803 9371          pea       _Instruction.L
000052A2  04E2      
000052A4  4E95      9372          jsr       (A5)
000052A6  504F      9373          addq.w    #8,A7
                    9374   DisassembleInstruction_282:
                    9375   ; }
                    9376   ; /////////////////////////////////////////////////////////////////////////////////
                    9377   ; // if instruction is RTE
                    9378   ; /////////////////////////////////////////////////////////////////////////////////
                    9379   ; if(*OpCode  == (unsigned short int)(0x4E73))
000052A8  2042      9380          move.l    D2,A0
000052AA  3010      9381          move.w    (A0),D0
000052AC  0C40 4E73 9382          cmp.w     #20083,D0
000052B0  6616      9383          bne.s     DisassembleInstruction_284
                    9384   ; {
                    9385   ; InstructionSize = 1;
000052B2  24BC 0000 9386          move.l    #1,(A2)
000052B6  0001      
                    9387   ; sprintf(Instruction, "RTE");
000052B8  4879 0000 9388          pea       @m68kde~2_305.L
000052BC  8540      
000052BE  4879 0803 9389          pea       _Instruction.L
000052C2  04E2      
000052C4  4E95      9390          jsr       (A5)
000052C6  504F      9391          addq.w    #8,A7
                    9392   DisassembleInstruction_284:
                    9393   ; }
                    9394   ; /////////////////////////////////////////////////////////////////////////////////
                    9395   ; // if instruction is RTR
                    9396   ; /////////////////////////////////////////////////////////////////////////////////
                    9397   ; if(*OpCode == (unsigned short int)(0x4E77))
000052C8  2042      9398          move.l    D2,A0
000052CA  3010      9399          move.w    (A0),D0
000052CC  0C40 4E77 9400          cmp.w     #20087,D0
000052D0  6610      9401          bne.s     DisassembleInstruction_286
                    9402   ; {
                    9403   ; InstructionSize = 1;
000052D2  24BC 0000 9404          move.l    #1,(A2)
000052D6  0001      
                    9405   ; strcpyInstruction("RTR");
000052D8  4879 0000 9406          pea       @m68kde~2_306.L
000052DC  8544      
000052DE  4E93      9407          jsr       (A3)
000052E0  584F      9408          addq.w    #4,A7
                    9409   DisassembleInstruction_286:
                    9410   ; }
                    9411   ; /////////////////////////////////////////////////////////////////////////////////
                    9412   ; // if instruction is RTS
                    9413   ; /////////////////////////////////////////////////////////////////////////////////
                    9414   ; if(*OpCode == (unsigned short int)(0x4E75))
000052E2  2042      9415          move.l    D2,A0
000052E4  3010      9416          move.w    (A0),D0
000052E6  0C40 4E75 9417          cmp.w     #20085,D0
000052EA  6610      9418          bne.s     DisassembleInstruction_288
                    9419   ; {
                    9420   ; InstructionSize = 1;
000052EC  24BC 0000 9421          move.l    #1,(A2)
000052F0  0001      
                    9422   ; strcpyInstruction("RTS");
000052F2  4879 0000 9423          pea       @m68kde~2_307.L
000052F6  8548      
000052F8  4E93      9424          jsr       (A3)
000052FA  584F      9425          addq.w    #4,A7
                    9426   DisassembleInstruction_288:
                    9427   ; }
                    9428   ; /////////////////////////////////////////////////////////////////////////////////
                    9429   ; // if instruction is STOP
                    9430   ; /////////////////////////////////////////////////////////////////////////////////
                    9431   ; if(*OpCode  == (unsigned short int)(0x4E72))
000052FC  2042      9432          move.l    D2,A0
000052FE  3010      9433          move.w    (A0),D0
00005300  0C40 4E72 9434          cmp.w     #20082,D0
00005304  6622      9435          bne.s     DisassembleInstruction_290
                    9436   ; {
                    9437   ; InstructionSize = 2;
00005306  24BC 0000 9438          move.l    #2,(A2)
0000530A  0002      
                    9439   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
0000530C  2042      9440          move.l    D2,A0
0000530E  3228 0002 9441          move.w    2(A0),D1
00005312  48C1      9442          ext.l     D1
00005314  2F01      9443          move.l    D1,-(A7)
00005316  4879 0000 9444          pea       @m68kde~2_308.L
0000531A  854C      
0000531C  4879 0803 9445          pea       _Instruction.L
00005320  04E2      
00005322  4E95      9446          jsr       (A5)
00005324  DEFC 000C 9447          add.w     #12,A7
                    9448   DisassembleInstruction_290:
                    9449   ; }
                    9450   ; /////////////////////////////////////////////////////////////////////////////////
                    9451   ; // if instruction is SBCD
                    9452   ; /////////////////////////////////////////////////////////////////////////////////
                    9453   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
00005328  2042      9454          move.l    D2,A0
0000532A  3010      9455          move.w    (A0),D0
0000532C  C07C F1F0 9456          and.w     #61936,D0
00005330  0C40 8100 9457          cmp.w     #33024,D0
00005334  6600 0092 9458          bne       DisassembleInstruction_295
                    9459   ; {
                    9460   ; InstructionSize = 1;
00005338  24BC 0000 9461          move.l    #1,(A2)
0000533C  0001      
                    9462   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
0000533E  2042      9463          move.l    D2,A0
00005340  3010      9464          move.w    (A0),D0
00005342  E040      9465          asr.w     #8,D0
00005344  E240      9466          asr.w     #1,D0
00005346  C07C 0007 9467          and.w     #7,D0
0000534A  3D40 FFE0 9468          move.w    D0,-32(A6)
                    9469   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
0000534E  2042      9470          move.l    D2,A0
00005350  3010      9471          move.w    (A0),D0
00005352  C07C 0007 9472          and.w     #7,D0
00005356  3D40 FFDE 9473          move.w    D0,-34(A6)
                    9474   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
0000535A  2042      9475          move.l    D2,A0
0000535C  3010      9476          move.w    (A0),D0
0000535E  E640      9477          asr.w     #3,D0
00005360  48C0      9478          ext.l     D0
00005362  C0BC 0000 9479          and.l     #1,D0
00005366  0001      
00005368  2D40 FFE4 9480          move.l    D0,-28(A6)
                    9481   ; if(Mode == 0)
0000536C  202E FFE4 9482          move.l    -28(A6),D0
00005370  662C      9483          bne.s     DisassembleInstruction_294
                    9484   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
00005372  322E FFE0 9485          move.w    -32(A6),D1
00005376  C2BC 0000 9486          and.l     #65535,D1
0000537A  FFFF      
0000537C  2F01      9487          move.l    D1,-(A7)
0000537E  322E FFDE 9488          move.w    -34(A6),D1
00005382  C2BC 0000 9489          and.l     #65535,D1
00005386  FFFF      
00005388  2F01      9490          move.l    D1,-(A7)
0000538A  4879 0000 9491          pea       @m68kde~2_309.L
0000538E  8556      
00005390  4879 0803 9492          pea       _Instruction.L
00005394  04E2      
00005396  4E95      9493          jsr       (A5)
00005398  DEFC 0010 9494          add.w     #16,A7
0000539C  602A      9495          bra.s     DisassembleInstruction_295
                    9496   DisassembleInstruction_294:
                    9497   ; else
                    9498   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
0000539E  322E FFE0 9499          move.w    -32(A6),D1
000053A2  C2BC 0000 9500          and.l     #65535,D1
000053A6  FFFF      
000053A8  2F01      9501          move.l    D1,-(A7)
000053AA  322E FFDE 9502          move.w    -34(A6),D1
000053AE  C2BC 0000 9503          and.l     #65535,D1
000053B2  FFFF      
000053B4  2F01      9504          move.l    D1,-(A7)
000053B6  4879 0000 9505          pea       @m68kde~2_310.L
000053BA  8564      
000053BC  4879 0803 9506          pea       _Instruction.L
000053C0  04E2      
000053C2  4E95      9507          jsr       (A5)
000053C4  DEFC 0010 9508          add.w     #16,A7
                    9509   DisassembleInstruction_295:
                    9510   ; }
                    9511   ; /////////////////////////////////////////////////////////////////////////////////
                    9512   ; // if instruction is Scc
                    9513   ; /////////////////////////////////////////////////////////////////////////////////
                    9514   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
000053C8  2042      9515          move.l    D2,A0
000053CA  3010      9516          move.w    (A0),D0
000053CC  C07C F0C0 9517          and.w     #61632,D0
000053D0  0C40 50C0 9518          cmp.w     #20672,D0
000053D4  6600 0060 9519          bne       DisassembleInstruction_298
                    9520   ; {
                    9521   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
000053D8  2042      9522          move.l    D2,A0
000053DA  3010      9523          move.w    (A0),D0
000053DC  E640      9524          asr.w     #3,D0
000053DE  C07C 0007 9525          and.w     #7,D0
000053E2  3D40 FFEC 9526          move.w    D0,-20(A6)
                    9527   ; if(EAMode != (unsigned short int)(0x0001))
000053E6  302E FFEC 9528          move.w    -20(A6),D0
000053EA  0C40 0001 9529          cmp.w     #1,D0
000053EE  6700 0046 9530          beq       DisassembleInstruction_298
                    9531   ; {
                    9532   ; InstructionSize = 1;
000053F2  24BC 0000 9533          move.l    #1,(A2)
000053F6  0001      
                    9534   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
000053F8  2042      9535          move.l    D2,A0
000053FA  3010      9536          move.w    (A0),D0
000053FC  E040      9537          asr.w     #8,D0
000053FE  C07C 000F 9538          and.w     #15,D0
00005402  1D40 FFE9 9539          move.b    D0,-23(A6)
                    9540   ; strcpyInstruction("S") ;
00005406  4879 0000 9541          pea       @m68kde~2_311.L
0000540A  8578      
0000540C  4E93      9542          jsr       (A3)
0000540E  584F      9543          addq.w    #4,A7
                    9544   ; DecodeBranchCondition(Condition) ;
00005410  122E FFE9 9545          move.b    -23(A6),D1
00005414  C27C 00FF 9546          and.w     #255,D1
00005418  C2BC 0000 9547          and.l     #65535,D1
0000541C  FFFF      
0000541E  2F01      9548          move.l    D1,-(A7)
00005420  4EB8 376E 9549          jsr       _DecodeBranchCondition
00005424  584F      9550          addq.w    #4,A7
                    9551   ; Decode6BitEA(OpCode,0,0,0);
00005426  42A7      9552          clr.l     -(A7)
00005428  42A7      9553          clr.l     -(A7)
0000542A  42A7      9554          clr.l     -(A7)
0000542C  2F02      9555          move.l    D2,-(A7)
0000542E  4EB8 32B0 9556          jsr       _Decode6BitEA
00005432  DEFC 0010 9557          add.w     #16,A7
                    9558   DisassembleInstruction_298:
                    9559   ; }
                    9560   ; }
                    9561   ; /////////////////////////////////////////////////////////////////////////////////
                    9562   ; // if instruction is SUB or SUBA
                    9563   ; /////////////////////////////////////////////////////////////////////////////////
                    9564   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
00005436  2042      9565          move.l    D2,A0
00005438  3010      9566          move.w    (A0),D0
0000543A  C07C F000 9567          and.w     #61440,D0
0000543E  0C40 9000 9568          cmp.w     #36864,D0
00005442  6600 008C 9569          bne       DisassembleInstruction_303
                    9570   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00005446  2042      9571          move.l    D2,A0
00005448  3010      9572          move.w    (A0),D0
0000544A  EC40      9573          asr.w     #6,D0
0000544C  C07C 0007 9574          and.w     #7,D0
00005450  3600      9575          move.w    D0,D3
                    9576   ; InstructionSize = 1;
00005452  24BC 0000 9577          move.l    #1,(A2)
00005456  0001      
                    9578   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
00005458  0C43 0003 9579          cmp.w     #3,D3
0000545C  6708      9580          beq.s     DisassembleInstruction_304
0000545E  0C43 0007 9581          cmp.w     #7,D3
00005462  6600 005A 9582          bne       DisassembleInstruction_302
                    9583   DisassembleInstruction_304:
                    9584   ; {
                    9585   ; if(OpMode == (unsigned short int)(0x0003))
00005466  0C43 0003 9586          cmp.w     #3,D3
0000546A  660C      9587          bne.s     DisassembleInstruction_305
                    9588   ; strcpyInstruction("SUBA.W ") ;
0000546C  4879 0000 9589          pea       @m68kde~2_312.L
00005470  857A      
00005472  4E93      9590          jsr       (A3)
00005474  584F      9591          addq.w    #4,A7
00005476  600A      9592          bra.s     DisassembleInstruction_306
                    9593   DisassembleInstruction_305:
                    9594   ; else
                    9595   ; strcpyInstruction("SUBA.L ") ;
00005478  4879 0000 9596          pea       @m68kde~2_313.L
0000547C  8582      
0000547E  4E93      9597          jsr       (A3)
00005480  584F      9598          addq.w    #4,A7
                    9599   DisassembleInstruction_306:
                    9600   ; Decode6BitEA(OpCode,0,0,0)  ;
00005482  42A7      9601          clr.l     -(A7)
00005484  42A7      9602          clr.l     -(A7)
00005486  42A7      9603          clr.l     -(A7)
00005488  2F02      9604          move.l    D2,-(A7)
0000548A  4EB8 32B0 9605          jsr       _Decode6BitEA
0000548E  DEFC 0010 9606          add.w     #16,A7
                    9607   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00005492  2042      9608          move.l    D2,A0
00005494  3210      9609          move.w    (A0),D1
00005496  E041      9610          asr.w     #8,D1
00005498  E241      9611          asr.w     #1,D1
0000549A  C27C 0007 9612          and.w     #7,D1
0000549E  C2BC 0000 9613          and.l     #65535,D1
000054A2  FFFF      
000054A4  2F01      9614          move.l    D1,-(A7)
000054A6  4879 0000 9615          pea       @m68kde~2_216.L
000054AA  8276      
000054AC  2F0C      9616          move.l    A4,-(A7)
000054AE  4E95      9617          jsr       (A5)
000054B0  DEFC 000C 9618          add.w     #12,A7
                    9619   ; strcatInstruction(TempString) ;
000054B4  2F0C      9620          move.l    A4,-(A7)
000054B6  4EB8 0CCC 9621          jsr       _strcatInstruction
000054BA  584F      9622          addq.w    #4,A7
000054BC  6012      9623          bra.s     DisassembleInstruction_303
                    9624   DisassembleInstruction_302:
                    9625   ; }
                    9626   ; else {
                    9627   ; strcpyInstruction("SUB") ;
000054BE  4879 0000 9628          pea       @m68kde~2_314.L
000054C2  858A      
000054C4  4E93      9629          jsr       (A3)
000054C6  584F      9630          addq.w    #4,A7
                    9631   ; Decode3BitOperandMode(OpCode) ;
000054C8  2F02      9632          move.l    D2,-(A7)
000054CA  4EB8 36D8 9633          jsr       _Decode3BitOperandMode
000054CE  584F      9634          addq.w    #4,A7
                    9635   DisassembleInstruction_303:
                    9636   ; }
                    9637   ; }
                    9638   ; /////////////////////////////////////////////////////////////////////////////////
                    9639   ; // if instruction is SUBQ
                    9640   ; /////////////////////////////////////////////////////////////////////////////////
                    9641   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
000054D0  2042      9642          move.l    D2,A0
000054D2  3010      9643          move.w    (A0),D0
000054D4  C07C F100 9644          and.w     #61696,D0
000054D8  0C40 5100 9645          cmp.w     #20736,D0
000054DC  6600 0072 9646          bne       DisassembleInstruction_309
                    9647   ; {
                    9648   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000054E0  2042      9649          move.l    D2,A0
000054E2  3010      9650          move.w    (A0),D0
000054E4  EC40      9651          asr.w     #6,D0
000054E6  C07C 0003 9652          and.w     #3,D0
000054EA  3600      9653          move.w    D0,D3
                    9654   ; if(OpMode <= (unsigned short int)(0x0002))
000054EC  0C43 0002 9655          cmp.w     #2,D3
000054F0  6200 005E 9656          bhi       DisassembleInstruction_309
                    9657   ; {
                    9658   ; InstructionSize = 1;
000054F4  24BC 0000 9659          move.l    #1,(A2)
000054F8  0001      
                    9660   ; strcpyInstruction("SUBQ") ;
000054FA  4879 0000 9661          pea       @m68kde~2_315.L
000054FE  858E      
00005500  4E93      9662          jsr       (A3)
00005502  584F      9663          addq.w    #4,A7
                    9664   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005504  2042      9665          move.l    D2,A0
00005506  3210      9666          move.w    (A0),D1
00005508  C2BC 0000 9667          and.l     #65535,D1
0000550C  FFFF      
0000550E  2F01      9668          move.l    D1,-(A7)
00005510  4EB8 301C 9669          jsr       _Decode2BitOperandSize
00005514  584F      9670          addq.w    #4,A7
                    9671   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00005516  2042      9672          move.l    D2,A0
00005518  3210      9673          move.w    (A0),D1
0000551A  E041      9674          asr.w     #8,D1
0000551C  E241      9675          asr.w     #1,D1
0000551E  C27C 0007 9676          and.w     #7,D1
00005522  C2BC 0000 9677          and.l     #65535,D1
00005526  FFFF      
00005528  2F01      9678          move.l    D1,-(A7)
0000552A  4879 0000 9679          pea       @m68kde~2_226.L
0000552E  82B6      
00005530  2F0C      9680          move.l    A4,-(A7)
00005532  4E95      9681          jsr       (A5)
00005534  DEFC 000C 9682          add.w     #12,A7
                    9683   ; strcatInstruction(TempString) ;
00005538  2F0C      9684          move.l    A4,-(A7)
0000553A  4EB8 0CCC 9685          jsr       _strcatInstruction
0000553E  584F      9686          addq.w    #4,A7
                    9687   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00005540  42A7      9688          clr.l     -(A7)
00005542  42A7      9689          clr.l     -(A7)
00005544  42A7      9690          clr.l     -(A7)
00005546  2F02      9691          move.l    D2,-(A7)
00005548  4EB8 32B0 9692          jsr       _Decode6BitEA
0000554C  DEFC 0010 9693          add.w     #16,A7
                    9694   DisassembleInstruction_309:
                    9695   ; }
                    9696   ; }
                    9697   ; /////////////////////////////////////////////////////////////////////////////////
                    9698   ; // if instruction is SUBX
                    9699   ; /////////////////////////////////////////////////////////////////////////////////
                    9700   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
00005550  2042      9701          move.l    D2,A0
00005552  3010      9702          move.w    (A0),D0
00005554  C07C F130 9703          and.w     #61744,D0
00005558  0C40 9100 9704          cmp.w     #37120,D0
0000555C  6600 00A4 9705          bne       DisassembleInstruction_313
                    9706   ; {
                    9707   ; InstructionSize = 1;
00005560  24BC 0000 9708          move.l    #1,(A2)
00005564  0001      
                    9709   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00005566  2042      9710          move.l    D2,A0
00005568  3010      9711          move.w    (A0),D0
0000556A  EC40      9712          asr.w     #6,D0
0000556C  C07C 0003 9713          and.w     #3,D0
00005570  3600      9714          move.w    D0,D3
                    9715   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
00005572  0C43 0003 9716          cmp.w     #3,D3
00005576  6700 008A 9717          beq       DisassembleInstruction_313
                    9718   ; {
                    9719   ; strcpyInstruction("SUBX") ;
0000557A  4879 0000 9720          pea       @m68kde~2_316.L
0000557E  8594      
00005580  4E93      9721          jsr       (A3)
00005582  584F      9722          addq.w    #4,A7
                    9723   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005584  2042      9724          move.l    D2,A0
00005586  3210      9725          move.w    (A0),D1
00005588  C2BC 0000 9726          and.l     #65535,D1
0000558C  FFFF      
0000558E  2F01      9727          move.l    D1,-(A7)
00005590  4EB8 301C 9728          jsr       _Decode2BitOperandSize
00005594  584F      9729          addq.w    #4,A7
                    9730   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00005596  2042      9731          move.l    D2,A0
00005598  3010      9732          move.w    (A0),D0
0000559A  C07C 0008 9733          and.w     #8,D0
0000559E  6600 0030 9734          bne       DisassembleInstruction_315
                    9735   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
000055A2  2042      9736          move.l    D2,A0
000055A4  3210      9737          move.w    (A0),D1
000055A6  E041      9738          asr.w     #8,D1
000055A8  E241      9739          asr.w     #1,D1
000055AA  C27C 0007 9740          and.w     #7,D1
000055AE  48C1      9741          ext.l     D1
000055B0  2F01      9742          move.l    D1,-(A7)
000055B2  2042      9743          move.l    D2,A0
000055B4  3210      9744          move.w    (A0),D1
000055B6  C27C 0007 9745          and.w     #7,D1
000055BA  48C1      9746          ext.l     D1
000055BC  2F01      9747          move.l    D1,-(A7)
000055BE  4879 0000 9748          pea       @m68kde~2_317.L
000055C2  859A      
000055C4  2F0C      9749          move.l    A4,-(A7)
000055C6  4E95      9750          jsr       (A5)
000055C8  DEFC 0010 9751          add.w     #16,A7
000055CC  6000 002C 9752          bra       DisassembleInstruction_316
                    9753   DisassembleInstruction_315:
                    9754   ; else        // -(ax),-(ay) mode used
                    9755   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
000055D0  2042      9756          move.l    D2,A0
000055D2  3210      9757          move.w    (A0),D1
000055D4  E041      9758          asr.w     #8,D1
000055D6  E241      9759          asr.w     #1,D1
000055D8  C27C 0007 9760          and.w     #7,D1
000055DC  48C1      9761          ext.l     D1
000055DE  2F01      9762          move.l    D1,-(A7)
000055E0  2042      9763          move.l    D2,A0
000055E2  3210      9764          move.w    (A0),D1
000055E4  C27C 0007 9765          and.w     #7,D1
000055E8  48C1      9766          ext.l     D1
000055EA  2F01      9767          move.l    D1,-(A7)
000055EC  4879 0000 9768          pea       @m68kde~2_318.L
000055F0  85A4      
000055F2  2F0C      9769          move.l    A4,-(A7)
000055F4  4E95      9770          jsr       (A5)
000055F6  DEFC 0010 9771          add.w     #16,A7
                    9772   DisassembleInstruction_316:
                    9773   ; strcatInstruction(TempString) ;
000055FA  2F0C      9774          move.l    A4,-(A7)
000055FC  4EB8 0CCC 9775          jsr       _strcatInstruction
00005600  584F      9776          addq.w    #4,A7
                    9777   DisassembleInstruction_313:
                    9778   ; }
                    9779   ; }
                    9780   ; /////////////////////////////////////////////////////////////////////////////////
                    9781   ; // if instruction is SWAP
                    9782   ; /////////////////////////////////////////////////////////////////////////////////
                    9783   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
00005602  2042      9784          move.l    D2,A0
00005604  3010      9785          move.w    (A0),D0
00005606  C07C FFF8 9786          and.w     #65528,D0
0000560A  0C40 4840 9787          cmp.w     #18496,D0
0000560E  662A      9788          bne.s     DisassembleInstruction_317
                    9789   ; {
                    9790   ; InstructionSize = 1;
00005610  24BC 0000 9791          move.l    #1,(A2)
00005614  0001      
                    9792   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
00005616  2042      9793          move.l    D2,A0
00005618  3010      9794          move.w    (A0),D0
0000561A  C07C 0007 9795          and.w     #7,D0
0000561E  3A00      9796          move.w    D0,D5
                    9797   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
00005620  CABC 0000 9798          and.l     #65535,D5
00005624  FFFF      
00005626  2F05      9799          move.l    D5,-(A7)
00005628  4879 0000 9800          pea       @m68kde~2_319.L
0000562C  85B4      
0000562E  4879 0803 9801          pea       _Instruction.L
00005632  04E2      
00005634  4E95      9802          jsr       (A5)
00005636  DEFC 000C 9803          add.w     #12,A7
                    9804   DisassembleInstruction_317:
                    9805   ; }
                    9806   ; /////////////////////////////////////////////////////////////////////////////////
                    9807   ; // if instruction is TAS
                    9808   ; /////////////////////////////////////////////////////////////////////////////////
                    9809   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
0000563A  2042      9810          move.l    D2,A0
0000563C  3010      9811          move.w    (A0),D0
0000563E  C07C FFC0 9812          and.w     #65472,D0
00005642  0C40 4AC0 9813          cmp.w     #19136,D0
00005646  662A      9814          bne.s     DisassembleInstruction_321
                    9815   ; {
                    9816   ; if(*OpCode != (unsigned short int)(0x4AFC))
00005648  2042      9817          move.l    D2,A0
0000564A  3010      9818          move.w    (A0),D0
0000564C  0C40 4AFC 9819          cmp.w     #19196,D0
00005650  6720      9820          beq.s     DisassembleInstruction_321
                    9821   ; {
                    9822   ; InstructionSize = 1;
00005652  24BC 0000 9823          move.l    #1,(A2)
00005656  0001      
                    9824   ; strcpyInstruction("TAS ") ;
00005658  4879 0000 9825          pea       @m68kde~2_320.L
0000565C  85BE      
0000565E  4E93      9826          jsr       (A3)
00005660  584F      9827          addq.w    #4,A7
                    9828   ; Decode6BitEA(OpCode,0,0,0) ;
00005662  42A7      9829          clr.l     -(A7)
00005664  42A7      9830          clr.l     -(A7)
00005666  42A7      9831          clr.l     -(A7)
00005668  2F02      9832          move.l    D2,-(A7)
0000566A  4EB8 32B0 9833          jsr       _Decode6BitEA
0000566E  DEFC 0010 9834          add.w     #16,A7
                    9835   DisassembleInstruction_321:
                    9836   ; }
                    9837   ; }
                    9838   ; /////////////////////////////////////////////////////////////////////////////////
                    9839   ; // if instruction is TRAP
                    9840   ; /////////////////////////////////////////////////////////////////////////////////
                    9841   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
00005672  2042      9842          move.l    D2,A0
00005674  3010      9843          move.w    (A0),D0
00005676  C07C FFF0 9844          and.w     #65520,D0
0000567A  0C40 4E40 9845          cmp.w     #20032,D0
0000567E  6622      9846          bne.s     DisassembleInstruction_323
                    9847   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
00005680  2042      9848          move.l    D2,A0
00005682  3210      9849          move.w    (A0),D1
00005684  C27C 000F 9850          and.w     #15,D1
00005688  C2BC 0000 9851          and.l     #65535,D1
0000568C  FFFF      
0000568E  2F01      9852          move.l    D1,-(A7)
00005690  4879 0000 9853          pea       @m68kde~2_321.L
00005694  85C4      
00005696  4879 0803 9854          pea       _Instruction.L
0000569A  04E2      
0000569C  4E95      9855          jsr       (A5)
0000569E  DEFC 000C 9856          add.w     #12,A7
                    9857   DisassembleInstruction_323:
                    9858   ; }
                    9859   ; /////////////////////////////////////////////////////////////////////////////////
                    9860   ; // if instruction is TRAPV
                    9861   ; /////////////////////////////////////////////////////////////////////////////////
                    9862   ; if(*OpCode == (unsigned short int)(0x4E76))
000056A2  2042      9863          move.l    D2,A0
000056A4  3010      9864          move.w    (A0),D0
000056A6  0C40 4E76 9865          cmp.w     #20086,D0
000056AA  6610      9866          bne.s     DisassembleInstruction_325
                    9867   ; {
                    9868   ; InstructionSize = 1;
000056AC  24BC 0000 9869          move.l    #1,(A2)
000056B0  0001      
                    9870   ; strcpyInstruction("TRAPV") ;
000056B2  4879 0000 9871          pea       @m68kde~2_322.L
000056B6  85CE      
000056B8  4E93      9872          jsr       (A3)
000056BA  584F      9873          addq.w    #4,A7
                    9874   DisassembleInstruction_325:
                    9875   ; }
                    9876   ; /////////////////////////////////////////////////////////////////////////////////
                    9877   ; // if instruction is TST
                    9878   ; /////////////////////////////////////////////////////////////////////////////////
                    9879   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
000056BC  2042      9880          move.l    D2,A0
000056BE  3010      9881          move.w    (A0),D0
000056C0  C07C FF00 9882          and.w     #65280,D0
000056C4  0C40 4A00 9883          cmp.w     #18944,D0
000056C8  6600 005A 9884          bne       DisassembleInstruction_329
                    9885   ; {
                    9886   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000056CC  2042      9887          move.l    D2,A0
000056CE  3010      9888          move.w    (A0),D0
000056D0  EC40      9889          asr.w     #6,D0
000056D2  C07C 0003 9890          and.w     #3,D0
000056D6  3D40 FFE2 9891          move.w    D0,-30(A6)
                    9892   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
000056DA  2042      9893          move.l    D2,A0
000056DC  3010      9894          move.w    (A0),D0
000056DE  0C40 4AFC 9895          cmp.w     #19196,D0
000056E2  6700 0040 9896          beq       DisassembleInstruction_329
000056E6  302E FFE2 9897          move.w    -30(A6),D0
000056EA  0C40 0003 9898          cmp.w     #3,D0
000056EE  6700 0034 9899          beq       DisassembleInstruction_329
                    9900   ; InstructionSize = 1;
000056F2  24BC 0000 9901          move.l    #1,(A2)
000056F6  0001      
                    9902   ; strcpyInstruction("TST") ;
000056F8  4879 0000 9903          pea       @m68kde~2_323.L
000056FC  85D4      
000056FE  4E93      9904          jsr       (A3)
00005700  584F      9905          addq.w    #4,A7
                    9906   ; Decode2BitOperandSize(*OpCode) ;
00005702  2042      9907          move.l    D2,A0
00005704  3210      9908          move.w    (A0),D1
00005706  C2BC 0000 9909          and.l     #65535,D1
0000570A  FFFF      
0000570C  2F01      9910          move.l    D1,-(A7)
0000570E  4EB8 301C 9911          jsr       _Decode2BitOperandSize
00005712  584F      9912          addq.w    #4,A7
                    9913   ; Decode6BitEA(OpCode,0,0,0) ;
00005714  42A7      9914          clr.l     -(A7)
00005716  42A7      9915          clr.l     -(A7)
00005718  42A7      9916          clr.l     -(A7)
0000571A  2F02      9917          move.l    D2,-(A7)
0000571C  4EB8 32B0 9918          jsr       _Decode6BitEA
00005720  DEFC 0010 9919          add.w     #16,A7
                    9920   DisassembleInstruction_329:
                    9921   ; }
                    9922   ; }
                    9923   ; /////////////////////////////////////////////////////////////////////////////////
                    9924   ; // if instruction is UNLK
                    9925   ; //////////////////////////////////////////////////////////
                    9926   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
00005724  2042      9927          move.l    D2,A0
00005726  3010      9928          move.w    (A0),D0
00005728  C07C FFF8 9929          and.w     #65528,D0
0000572C  0C40 4E58 9930          cmp.w     #20056,D0
00005730  6628      9931          bne.s     DisassembleInstruction_331
                    9932   ; {
                    9933   ; InstructionSize = 1;
00005732  24BC 0000 9934          move.l    #1,(A2)
00005736  0001      
                    9935   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
00005738  2042      9936          move.l    D2,A0
0000573A  3210      9937          move.w    (A0),D1
0000573C  C27C 0007 9938          and.w     #7,D1
00005740  C2BC 0000 9939          and.l     #65535,D1
00005744  FFFF      
00005746  2F01      9940          move.l    D1,-(A7)
00005748  4879 0000 9941          pea       @m68kde~2_324.L
0000574C  85D8      
0000574E  4879 0803 9942          pea       _Instruction.L
00005752  04E2      
00005754  4E95      9943          jsr       (A5)
00005756  DEFC 000C 9944          add.w     #12,A7
                    9945   DisassembleInstruction_331:
                    9946   ; }
                    9947   ; FormatInstruction() ;
0000575A  4EB8 2F8A 9948          jsr       _FormatInstruction
0000575E  4CDF 3CFC 9949          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005762  4E5E      9950          unlk      A6
00005764  4E75      9951          rts
                    9952   ; }
                    9953   _strcpy:
00005766  206F 0004 9954          move.l    (4,A7),A0
0000576A  226F 0008 9955          move.l    (8,A7),A1
0000576E  2008      9956          move.l    A0,D0
                    9957   strcpy_1:
00005770  10D9      9958          move.b    (A1)+,(A0)+
00005772  66FC      9959          bne.s     strcpy_1
00005774  4E75      9960          rts
                    9961   ULDIV:
00005776  4E56 0000 9962          link    A6,#0
0000577A  48E7 C000 9963          movem.l D0/D1,-(A7)
0000577E  222E 0008 9964          move.l  8(A6),D1
00005782  202E 000C 9965          move.l  12(A6),D0
00005786  6036      9966          bra.s   ldiv_3
                    9967   LDIV:
00005788  4E56 0000 9968          link    A6,#0
0000578C  48E7 C000 9969          movem.l D0/D1,-(A7)
00005790  222E 0008 9970          move.l  8(A6),D1
00005794  202E 000C 9971          move.l  12(A6),D0
00005798  4A80      9972          tst.l   D0
0000579A  6A0E      9973          bpl.s   ldiv_1
0000579C  4480      9974          neg.l   D0
0000579E  4A81      9975          tst.l   D1
000057A0  6A14      9976          bpl.s   ldiv_2
000057A2  4481      9977          neg.l   D1
000057A4  612A      9978          bsr.s   dodiv
000057A6  4481      9979          neg.l   D1
000057A8  6016      9980          bra.s   ldiv_4
                    9981   ldiv_1:
000057AA  4A81      9982          tst.l   D1
000057AC  6A10      9983          bpl.s   ldiv_3
000057AE  4481      9984          neg.l   D1
000057B0  611E      9985          bsr.s   dodiv
000057B2  4480      9986          neg.l   D0
000057B4  600A      9987          bra.s   ldiv_4
                    9988   ldiv_2:
000057B6  6118      9989          bsr.s   dodiv
000057B8  4480      9990          neg.l   D0
000057BA  4481      9991          neg.l   D1
000057BC  6002      9992          bra.s   ldiv_4
                    9993   ldiv_3:
000057BE  6110      9994          bsr.s   dodiv
                    9995   ldiv_4:
000057C0  2D40 0008 9996          move.l  D0,8(A6)
000057C4  2D41 000C 9997          move.l  D1,12(A6)
000057C8  4CDF 0003 9998          movem.l (A7)+,D0/D1
000057CC  4E5E      9999          unlk    A6
000057CE  4E75      10000          rts
                    10001   dodiv:
000057D0  0C81 0000 10002          cmpi.l  #$FFFF,D1
000057D4  FFFF      
000057D6  6236      10003          bhi.s   dodiv_2
000057D8  0C80 0000 10004          cmpi.l  #$FFFF,D0
000057DC  FFFF      
000057DE  6210      10005          bhi.s   dodiv_1
000057E0  80C1      10006          divu    D1,D0
000057E2  2200      10007          move.l  D0,D1
000057E4  4241      10008          clr.w   D1
000057E6  4841      10009          swap    D1
000057E8  0280 0000 10010          andi.l  #$FFFF,D0
000057EC  FFFF      
000057EE  4E75      10011          rts
                    10012   dodiv_1:
000057F0  48A7 A000 10013          movem.w D0/D2,-(A7)
000057F4  4240      10014          clr.w   D0
000057F6  4840      10015          swap    D0
000057F8  80C1      10016          divu    D1,D0
000057FA  3400      10017          move.w  D0,D2
000057FC  301F      10018          move.w  (A7)+,D0
000057FE  80C1      10019          divu    D1,D0
00005800  4840      10020          swap    D0
00005802  4281      10021          clr.l   D1
00005804  3200      10022          move.w  D0,D1
00005806  3002      10023          move.w  D2,D0
00005808  4840      10024          swap    D0
0000580A  341F      10025          move.w  (A7)+,D2
0000580C  4E75      10026          rts
                    10027   dodiv_2:
0000580E  48E7 3800 10028          movem.l D2/D3/D4,-(A7)
00005812  2401      10029          move.l  D1,D2
00005814  4242      10030          clr.w   D2
00005816  4842      10031          swap    D2
00005818  5282      10032          addq.l  #1,D2
0000581A  2600      10033          move.l  D0,D3
0000581C  2801      10034          move.l  D1,D4
0000581E  2202      10035          move.l  D2,D1
00005820  61CE      10036          bsr.s   dodiv_1
00005822  2204      10037          move.l  D4,D1
00005824  82C2      10038          divu    D2,D1
00005826  80C1      10039          divu    D1,D0
00005828  0280 0000 10040          andi.l  #$FFFF,D0
0000582C  FFFF      
                    10041   dodiv_3:
0000582E  2204      10042          move.l  D4,D1
00005830  2404      10043          move.l  D4,D2
00005832  4842      10044          swap    D2
00005834  C2C0      10045          mulu    D0,D1
00005836  C4C0      10046          mulu    D0,D2
00005838  4842      10047          swap    D2
0000583A  D282      10048          add.l   D2,D1
0000583C  9283      10049          sub.l   D3,D1
0000583E  620A      10050          bhi.s   dodiv_4
00005840  4481      10051          neg.l   D1
00005842  B881      10052          cmp.l   D1,D4
00005844  6208      10053          bhi.s   dodiv_5
00005846  5280      10054          addq.l  #1,D0
00005848  60E4      10055          bra.s   dodiv_3
                    10056   dodiv_4:
0000584A  5380      10057          subq.l  #1,D0
0000584C  60E0      10058          bra.s   dodiv_3
                    10059   dodiv_5:
0000584E  4CDF 001C 10060          movem.l (A7)+,D2/D3/D4
00005852  4E75      10061          rts
                    10062   _putch:
00005854  4E56 0000 10063          link      A6,#0
00005858  2F02      10064          move.l    D2,-(A7)
0000585A  242E 0008 10065          move.l    8(A6),D2
0000585E  0C82 0000 10066          cmp.l     #10,D2
00005862  000A      
00005864  660A      10067          bne.s     putch_1
00005866  4878 000D 10068          pea       13
0000586A  4EB8 0B3C 10069          jsr       __putch
0000586E  584F      10070          addq.w    #4,A7
                    10071   putch_1:
00005870  2F02      10072          move.l    D2,-(A7)
00005872  4EB8 0B3C 10073          jsr       __putch
00005876  584F      10074          addq.w    #4,A7
00005878  2002      10075          move.l    D2,D0
0000587A  241F      10076          move.l    (A7)+,D2
0000587C  4E5E      10077          unlk      A6
0000587E  4E75      10078          rts
                    10079   _getch:
00005880  2F02      10080          move.l    D2,-(A7)
00005882  2439 0803 10081          move.l    __ungetbuf.L,D2
00005886  00C0      
00005888  2039 0803 10082          move.l    __ungetbuf.L,D0
0000588C  00C0      
0000588E  0C80 FFFF 10083          cmp.l     #-1,D0
00005892  FFFF      
00005894  670C      10084          beq.s     getch_1
00005896  23FC FFFF 10085          move.l    #-1,__ungetbuf.L
0000589A  FFFF 0803 
0000589E  00C0      
000058A0  6010      10086          bra.s     getch_3
                    10087   getch_1:
000058A2  4EB8 0B68 10088          jsr       __getch
000058A6  2400      10089          move.l    D0,D2
000058A8  0C80 0000 10090          cmp.l     #13,D0
000058AC  000D      
000058AE  6602      10091          bne.s     getch_3
000058B0  740A      10092          moveq     #10,D2
                    10093   getch_3:
000058B2  2002      10094          move.l    D2,D0
000058B4  241F      10095          move.l    (A7)+,D2
000058B6  4E75      10096          rts
                    10097   _tolower:
000058B8  202F 0004 10098          move.l    4(A7),D0
000058BC  0C80 0000 10099          cmp.l     #'A',D0
000058C0  0041      
000058C2  6D0E      10100          blt.s     tolower_1
000058C4  0C80 0000 10101          cmp.l     #'Z',D0
000058C8  005A      
000058CA  6E06      10102          bgt.s     tolower_1
000058CC  0680 0000 10103          add.l     #$20,D0
000058D0  0020      
                    10104   tolower_1:
000058D2  4E75      10105          rts
                    10106   _sprintf:
000058D4  4E56 FFFC 10107          link      A6,#-4
000058D8  2F02      10108          move.l    D2,-(A7)
000058DA  41EE 000C 10109          lea       12(A6),A0
000058DE  5848      10110          addq.w    #4,A0
000058E0  2408      10111          move.l    A0,D2
000058E2  2F02      10112          move.l    D2,-(A7)
000058E4  2F2E 000C 10113          move.l    12(A6),-(A7)
000058E8  2F2E 0008 10114          move.l    8(A6),-(A7)
000058EC  4EB9 0000 10115          jsr       _doprint
000058F0  5A3E      
000058F2  DEFC 000C 10116          add.w     #12,A7
000058F6  2D40 FFFC 10117          move.l    D0,-4(A6)
000058FA  4282      10118          clr.l     D2
000058FC  202E FFFC 10119          move.l    -4(A6),D0
00005900  241F      10120          move.l    (A7)+,D2
00005902  4E5E      10121          unlk      A6
00005904  4E75      10122          rts
                    10123   _strcat:
00005906  206F 0004 10124          move.l    (4,A7),A0
0000590A  226F 0008 10125          move.l    (8,A7),A1
0000590E  2008      10126          move.l    A0,D0
                    10127   strcat_1:
00005910  4A18      10128          tst.b     (A0)+
00005912  66FC      10129          bne.s     strcat_1
00005914  5388      10130          subq.l    #1,A0
                    10131   strcat_2:
00005916  10D9      10132          move.b    (A1)+,(A0)+
00005918  66FC      10133          bne.s     strcat_2
0000591A  4E75      10134          rts
                    10135   _toupper:
0000591C  202F 0004 10136          move.l    4(A7),D0
00005920  0C80 0000 10137          cmp.l     #'a',D0
00005924  0061      
00005926  6D0E      10138          blt.s     toupper_1
00005928  0C80 0000 10139          cmp.l     #'z',D0
0000592C  007A      
0000592E  6E06      10140          bgt.s     toupper_1
00005930  0480 0000 10141          sub.l     #$20,D0
00005934  0020      
                    10142   toupper_1:
00005936  4E75      10143          rts
                    10144   _scanf:
00005938  4E56 FFFC 10145          link      A6,#-4
0000593C  2F02      10146          move.l    D2,-(A7)
0000593E  41EE 0008 10147          lea       8(A6),A0
00005942  5848      10148          addq.w    #4,A0
00005944  2408      10149          move.l    A0,D2
00005946  2F02      10150          move.l    D2,-(A7)
00005948  2F2E 0008 10151          move.l    8(A6),-(A7)
0000594C  42A7      10152          clr.l     -(A7)
0000594E  4EB9 0000 10153          jsr       _doscan
00005952  6300      
00005954  DEFC 000C 10154          add.w     #12,A7
00005958  2D40 FFFC 10155          move.l    D0,-4(A6)
0000595C  4282      10156          clr.l     D2
0000595E  202E FFFC 10157          move.l    -4(A6),D0
00005962  241F      10158          move.l    (A7)+,D2
00005964  4E5E      10159          unlk      A6
00005966  4E75      10160          rts
                    10161   _printf:
00005968  4E56 FFFC 10162          link      A6,#-4
0000596C  2F02      10163          move.l    D2,-(A7)
0000596E  41EE 0008 10164          lea       8(A6),A0
00005972  5848      10165          addq.w    #4,A0
00005974  2408      10166          move.l    A0,D2
00005976  2F02      10167          move.l    D2,-(A7)
00005978  2F2E 0008 10168          move.l    8(A6),-(A7)
0000597C  42A7      10169          clr.l     -(A7)
0000597E  4EB9 0000 10170          jsr       _doprint
00005982  5A3E      
00005984  DEFC 000C 10171          add.w     #12,A7
00005988  2D40 FFFC 10172          move.l    D0,-4(A6)
0000598C  4282      10173          clr.l     D2
0000598E  202E FFFC 10174          move.l    -4(A6),D0
00005992  241F      10175          move.l    (A7)+,D2
00005994  4E5E      10176          unlk      A6
00005996  4E75      10177          rts
                    10178   @doprint_copy:
00005998  4E56 0000 10179          link      A6,#0
0000599C  206E 0008 10180          move.l    8(A6),A0
000059A0  4A90      10181          tst.l     (A0)
000059A2  6710      10182          beq.s     @doprint_copy_1
000059A4  202E 000C 10183          move.l    12(A6),D0
000059A8  206E 0008 10184          move.l    8(A6),A0
000059AC  2250      10185          move.l    (A0),A1
000059AE  5290      10186          addq.l    #1,(A0)
000059B0  1280      10187          move.b    D0,(A1)
000059B2  600A      10188          bra.s     @doprint_copy_2
                    10189   @doprint_copy_1:
000059B4  2F2E 000C 10190          move.l    12(A6),-(A7)
000059B8  4EB8 5854 10191          jsr       _putch
000059BC  584F      10192          addq.w    #4,A7
                    10193   @doprint_copy_2:
000059BE  4E5E      10194          unlk      A6
000059C0  4E75      10195          rts
                    10196   @doprint_getval:
000059C2  4E56 0000 10197          link      A6,#0
000059C6  48E7 3000 10198          movem.l   D2/D3,-(A7)
000059CA  262E 0008 10199          move.l    8(A6),D3
000059CE  4282      10200          clr.l     D2
000059D0  2043      10201          move.l    D3,A0
000059D2  2050      10202          move.l    (A0),A0
000059D4  1010      10203          move.b    (A0),D0
000059D6  0C00 002A 10204          cmp.b     #42,D0
000059DA  6612      10205          bne.s     @doprint_getval_1
000059DC  206E 000C 10206          move.l    12(A6),A0
000059E0  2250      10207          move.l    (A0),A1
000059E2  5890      10208          addq.l    #4,(A0)
000059E4  2411      10209          move.l    (A1),D2
000059E6  2043      10210          move.l    D3,A0
000059E8  5290      10211          addq.l    #1,(A0)
000059EA  6000 0048 10212          bra       @doprint_getval_5
                    10213   @doprint_getval_1:
000059EE  7001      10214          moveq     #1,D0
000059F0  2043      10215          move.l    D3,A0
000059F2  2050      10216          move.l    (A0),A0
000059F4  1210      10217          move.b    (A0),D1
000059F6  4881      10218          ext.w     D1
000059F8  48C1      10219          ext.l     D1
000059FA  D081      10220          add.l     D1,D0
000059FC  41F9 0000 10221          lea       __ctype.L,A0
00005A00  85F0      
00005A02  1030 0800 10222          move.b    0(A0,D0.L),D0
00005A06  C03C 0004 10223          and.b     #4,D0
00005A0A  6728      10224          beq.s     @doprint_getval_5
00005A0C  2F02      10225          move.l    D2,-(A7)
00005A0E  4878 000A 10226          pea       10
00005A12  4EB9 0000 10227          jsr       LMUL
00005A16  6AB4      
00005A18  2017      10228          move.l    (A7),D0
00005A1A  504F      10229          addq.w    #8,A7
00005A1C  2043      10230          move.l    D3,A0
00005A1E  2250      10231          move.l    (A0),A1
00005A20  5290      10232          addq.l    #1,(A0)
00005A22  1211      10233          move.b    (A1),D1
00005A24  4881      10234          ext.w     D1
00005A26  48C1      10235          ext.l     D1
00005A28  D081      10236          add.l     D1,D0
00005A2A  0480 0000 10237          sub.l     #48,D0
00005A2E  0030      
00005A30  2400      10238          move.l    D0,D2
00005A32  60BA      10239          bra       @doprint_getval_1
                    10240   @doprint_getval_5:
00005A34  2002      10241          move.l    D2,D0
00005A36  4CDF 000C 10242          movem.l   (A7)+,D2/D3
00005A3A  4E5E      10243          unlk      A6
00005A3C  4E75      10244          rts
                    10245   _doprint:
00005A3E  4E56 FFCC 10246          link      A6,#-52
00005A42  48E7 3F3C 10247          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00005A46  45EE 0008 10248          lea       8(A6),A2
00005A4A  47F8 5998 10249          lea       @doprint_copy.L,A3
00005A4E  49F9 0000 10250          lea       _ultoa.L,A4
00005A52  6A40      
00005A54  4286      10251          clr.l     D6
                    10252   doprint_1:
00005A56  206E 000C 10253          move.l    12(A6),A0
00005A5A  4A10      10254          tst.b     (A0)
00005A5C  6700 05EA 10255          beq       doprint_3
00005A60  206E 000C 10256          move.l    12(A6),A0
00005A64  1010      10257          move.b    (A0),D0
00005A66  0C00 0025 10258          cmp.b     #37,D0
00005A6A  671C      10259          beq.s     doprint_4
00005A6C  206E 000C 10260          move.l    12(A6),A0
00005A70  52AE 000C 10261          addq.l    #1,12(A6)
00005A74  1210      10262          move.b    (A0),D1
00005A76  4881      10263          ext.w     D1
00005A78  48C1      10264          ext.l     D1
00005A7A  2F01      10265          move.l    D1,-(A7)
00005A7C  2F0A      10266          move.l    A2,-(A7)
00005A7E  4E93      10267          jsr       (A3)
00005A80  504F      10268          addq.w    #8,A7
00005A82  5286      10269          addq.l    #1,D6
00005A84  6000 05BE 10270          bra       doprint_2
                    10271   doprint_4:
00005A88  52AE 000C 10272          addq.l    #1,12(A6)
00005A8C  422E FFD3 10273          clr.b     -45(A6)
00005A90  422E FFD2 10274          clr.b     -46(A6)
00005A94  422E FFD0 10275          clr.b     -48(A6)
00005A98  422E FFCF 10276          clr.b     -49(A6)
00005A9C  422E FFCE 10277          clr.b     -50(A6)
00005AA0  422E FFCD 10278          clr.b     -51(A6)
00005AA4  42AE FFFC 10279          clr.l     -4(A6)
00005AA8  7AFF      10280          moveq     #-1,D5
00005AAA  41EE FFDC 10281          lea       -36(A6),A0
00005AAE  2608      10282          move.l    A0,D3
00005AB0  2408      10283          move.l    A0,D2
                    10284   doprint_6:
00005AB2  206E 000C 10285          move.l    12(A6),A0
00005AB6  1010      10286          move.b    (A0),D0
00005AB8  4880      10287          ext.w     D0
00005ABA  48C0      10288          ext.l     D0
00005ABC  0C80 0000 10289          cmp.l     #43,D0
00005AC0  002B      
00005AC2  6730      10290          beq.s     doprint_12
00005AC4  6E18      10291          bgt.s     doprint_15
00005AC6  0C80 0000 10292          cmp.l     #35,D0
00005ACA  0023      
00005ACC  6700 003E 10293          beq       doprint_14
00005AD0  6E00 0046 10294          bgt       doprint_9
00005AD4  0C80 0000 10295          cmp.l     #32,D0
00005AD8  0020      
00005ADA  6724      10296          beq.s     doprint_13
00005ADC  603A      10297          bra.s     doprint_9
                    10298   doprint_15:
00005ADE  0C80 0000 10299          cmp.l     #45,D0
00005AE2  002D      
00005AE4  6702      10300          beq.s     doprint_11
00005AE6  6030      10301          bra.s     doprint_9
                    10302   doprint_11:
00005AE8  1D7C 0001 10303          move.b    #1,-51(A6)
00005AEC  FFCD      
00005AEE  52AE 000C 10304          addq.l    #1,12(A6)
00005AF2  6026      10305          bra.s     doprint_7
                    10306   doprint_12:
00005AF4  1D7C 0001 10307          move.b    #1,-50(A6)
00005AF8  FFCE      
00005AFA  52AE 000C 10308          addq.l    #1,12(A6)
00005AFE  601A      10309          bra.s     doprint_7
                    10310   doprint_13:
00005B00  1D7C 0001 10311          move.b    #1,-49(A6)
00005B04  FFCF      
00005B06  52AE 000C 10312          addq.l    #1,12(A6)
00005B0A  600E      10313          bra.s     doprint_7
                    10314   doprint_14:
00005B0C  1D7C 0001 10315          move.b    #1,-48(A6)
00005B10  FFD0      
00005B12  52AE 000C 10316          addq.l    #1,12(A6)
00005B16  6002      10317          bra.s     doprint_7
                    10318   doprint_9:
00005B18  6002      10319          bra.s     doprint_8
                    10320   doprint_7:
00005B1A  6096      10321          bra       doprint_6
                    10322   doprint_8:
00005B1C  206E 000C 10323          move.l    12(A6),A0
00005B20  1010      10324          move.b    (A0),D0
00005B22  0C00 0030 10325          cmp.b     #48,D0
00005B26  660A      10326          bne.s     doprint_16
00005B28  52AE 000C 10327          addq.l    #1,12(A6)
00005B2C  1D7C 0001 10328          move.b    #1,-46(A6)
00005B30  FFD2      
                    10329   doprint_16:
00005B32  486E 0010 10330          pea       16(A6)
00005B36  486E 000C 10331          pea       12(A6)
00005B3A  4EB8 59C2 10332          jsr       @doprint_getval
00005B3E  504F      10333          addq.w    #8,A7
00005B40  2A40      10334          move.l    D0,A5
00005B42  206E 000C 10335          move.l    12(A6),A0
00005B46  1010      10336          move.b    (A0),D0
00005B48  0C00 002E 10337          cmp.b     #46,D0
00005B4C  6614      10338          bne.s     doprint_18
00005B4E  52AE 000C 10339          addq.l    #1,12(A6)
00005B52  486E 0010 10340          pea       16(A6)
00005B56  486E 000C 10341          pea       12(A6)
00005B5A  4EB8 59C2 10342          jsr       @doprint_getval
00005B5E  504F      10343          addq.w    #8,A7
00005B60  2A00      10344          move.l    D0,D5
                    10345   doprint_18:
00005B62  206E 000C 10346          move.l    12(A6),A0
00005B66  1010      10347          move.b    (A0),D0
00005B68  0C00 006C 10348          cmp.b     #108,D0
00005B6C  660A      10349          bne.s     doprint_20
00005B6E  52AE 000C 10350          addq.l    #1,12(A6)
00005B72  1D7C 0001 10351          move.b    #1,-45(A6)
00005B76  FFD3      
                    10352   doprint_20:
00005B78  206E 000C 10353          move.l    12(A6),A0
00005B7C  1010      10354          move.b    (A0),D0
00005B7E  4880      10355          ext.w     D0
00005B80  48C0      10356          ext.l     D0
00005B82  0C80 0000 10357          cmp.l     #111,D0
00005B86  006F      
00005B88  6700 00D8 10358          beq       doprint_27
00005B8C  6E34      10359          bgt.s     doprint_33
00005B8E  0C80 0000 10360          cmp.l     #100,D0
00005B92  0064      
00005B94  6700 0054 10361          beq       doprint_24
00005B98  6E1C      10362          bgt.s     doprint_34
00005B9A  0C80 0000 10363          cmp.l     #99,D0
00005B9E  0063      
00005BA0  6700 0130 10364          beq       doprint_30
00005BA4  6E00 0174 10365          bgt       doprint_22
00005BA8  0C80 0000 10366          cmp.l     #88,D0
00005BAC  0058      
00005BAE  6700 00EA 10367          beq       doprint_28
00005BB2  6000 0166 10368          bra       doprint_22
                    10369   doprint_34:
00005BB6  0C80 0000 10370          cmp.l     #105,D0
00005BBA  0069      
00005BBC  672C      10371          beq.s     doprint_24
00005BBE  6000 015A 10372          bra       doprint_22
                    10373   doprint_33:
00005BC2  0C80 0000 10374          cmp.l     #117,D0
00005BC6  0075      
00005BC8  6700 0060 10375          beq       doprint_26
00005BCC  6E0E      10376          bgt.s     doprint_35
00005BCE  0C80 0000 10377          cmp.l     #115,D0
00005BD2  0073      
00005BD4  6700 0124 10378          beq       doprint_31
00005BD8  6000 0140 10379          bra       doprint_22
                    10380   doprint_35:
00005BDC  0C80 0000 10381          cmp.l     #120,D0
00005BE0  0078      
00005BE2  6700 00B6 10382          beq       doprint_28
00005BE6  6000 0132 10383          bra       doprint_22
                    10384   doprint_24:
00005BEA  4A2E FFD3 10385          tst.b     -45(A6)
00005BEE  671C      10386          beq.s     doprint_36
00005BF0  4878 000A 10387          pea       10
00005BF4  2F03      10388          move.l    D3,-(A7)
00005BF6  206E 0010 10389          move.l    16(A6),A0
00005BFA  58AE 0010 10390          addq.l    #4,16(A6)
00005BFE  2F10      10391          move.l    (A0),-(A7)
00005C00  4EB9 0000 10392          jsr       _ltoa
00005C04  69BC      
00005C06  DEFC 000C 10393          add.w     #12,A7
00005C0A  601A      10394          bra.s     doprint_37
                    10395   doprint_36:
00005C0C  4878 000A 10396          pea       10
00005C10  2F03      10397          move.l    D3,-(A7)
00005C12  206E 0010 10398          move.l    16(A6),A0
00005C16  58AE 0010 10399          addq.l    #4,16(A6)
00005C1A  2F10      10400          move.l    (A0),-(A7)
00005C1C  4EB9 0000 10401          jsr       _ltoa
00005C20  69BC      
00005C22  DEFC 000C 10402          add.w     #12,A7
                    10403   doprint_37:
00005C26  6000 0100 10404          bra       doprint_23
                    10405   doprint_26:
00005C2A  4A2E FFD3 10406          tst.b     -45(A6)
00005C2E  6718      10407          beq.s     doprint_38
00005C30  4878 000A 10408          pea       10
00005C34  2F03      10409          move.l    D3,-(A7)
00005C36  206E 0010 10410          move.l    16(A6),A0
00005C3A  58AE 0010 10411          addq.l    #4,16(A6)
00005C3E  2F10      10412          move.l    (A0),-(A7)
00005C40  4E94      10413          jsr       (A4)
00005C42  DEFC 000C 10414          add.w     #12,A7
00005C46  6016      10415          bra.s     doprint_39
                    10416   doprint_38:
00005C48  4878 000A 10417          pea       10
00005C4C  2F03      10418          move.l    D3,-(A7)
00005C4E  206E 0010 10419          move.l    16(A6),A0
00005C52  58AE 0010 10420          addq.l    #4,16(A6)
00005C56  2F10      10421          move.l    (A0),-(A7)
00005C58  4E94      10422          jsr       (A4)
00005C5A  DEFC 000C 10423          add.w     #12,A7
                    10424   doprint_39:
00005C5E  6000 00C8 10425          bra       doprint_23
                    10426   doprint_27:
00005C62  4A2E FFD3 10427          tst.b     -45(A6)
00005C66  6718      10428          beq.s     doprint_40
00005C68  4878 0008 10429          pea       8
00005C6C  2F03      10430          move.l    D3,-(A7)
00005C6E  206E 0010 10431          move.l    16(A6),A0
00005C72  58AE 0010 10432          addq.l    #4,16(A6)
00005C76  2F10      10433          move.l    (A0),-(A7)
00005C78  4E94      10434          jsr       (A4)
00005C7A  DEFC 000C 10435          add.w     #12,A7
00005C7E  6016      10436          bra.s     doprint_41
                    10437   doprint_40:
00005C80  4878 0008 10438          pea       8
00005C84  2F03      10439          move.l    D3,-(A7)
00005C86  206E 0010 10440          move.l    16(A6),A0
00005C8A  58AE 0010 10441          addq.l    #4,16(A6)
00005C8E  2F10      10442          move.l    (A0),-(A7)
00005C90  4E94      10443          jsr       (A4)
00005C92  DEFC 000C 10444          add.w     #12,A7
                    10445   doprint_41:
00005C96  6000 0090 10446          bra       doprint_23
                    10447   doprint_28:
00005C9A  4A2E FFD3 10448          tst.b     -45(A6)
00005C9E  6718      10449          beq.s     doprint_42
00005CA0  4878 0010 10450          pea       16
00005CA4  2F03      10451          move.l    D3,-(A7)
00005CA6  206E 0010 10452          move.l    16(A6),A0
00005CAA  58AE 0010 10453          addq.l    #4,16(A6)
00005CAE  2F10      10454          move.l    (A0),-(A7)
00005CB0  4E94      10455          jsr       (A4)
00005CB2  DEFC 000C 10456          add.w     #12,A7
00005CB6  6016      10457          bra.s     doprint_43
                    10458   doprint_42:
00005CB8  4878 0010 10459          pea       16
00005CBC  2F03      10460          move.l    D3,-(A7)
00005CBE  206E 0010 10461          move.l    16(A6),A0
00005CC2  58AE 0010 10462          addq.l    #4,16(A6)
00005CC6  2F10      10463          move.l    (A0),-(A7)
00005CC8  4E94      10464          jsr       (A4)
00005CCA  DEFC 000C 10465          add.w     #12,A7
                    10466   doprint_43:
00005CCE  6000 0058 10467          bra       doprint_23
                    10468   doprint_30:
00005CD2  206E 0010 10469          move.l    16(A6),A0
00005CD6  58AE 0010 10470          addq.l    #4,16(A6)
00005CDA  2010      10471          move.l    (A0),D0
00005CDC  2042      10472          move.l    D2,A0
00005CDE  5282      10473          addq.l    #1,D2
00005CE0  1080      10474          move.b    D0,(A0)
00005CE2  2042      10475          move.l    D2,A0
00005CE4  4210      10476          clr.b     (A0)
00005CE6  200D      10477          move.l    A5,D0
00005CE8  6704      10478          beq.s     doprint_44
00005CEA  200D      10479          move.l    A5,D0
00005CEC  6006      10480          bra.s     doprint_45
                    10481   doprint_44:
00005CEE  7001      10482          moveq     #1,D0
00005CF0  4880      10483          ext.w     D0
00005CF2  48C0      10484          ext.l     D0
                    10485   doprint_45:
00005CF4  2A00      10486          move.l    D0,D5
00005CF6  6000 0030 10487          bra       doprint_23
                    10488   doprint_31:
00005CFA  206E 0010 10489          move.l    16(A6),A0
00005CFE  58AE 0010 10490          addq.l    #4,16(A6)
00005D02  2610      10491          move.l    (A0),D3
00005D04  0C85 FFFF 10492          cmp.l     #-1,D5
00005D08  FFFF      
00005D0A  660C      10493          bne.s     doprint_46
00005D0C  2F03      10494          move.l    D3,-(A7)
00005D0E  4EB9 0000 10495          jsr       _strlen
00005D12  6B42      
00005D14  584F      10496          addq.w    #4,A7
00005D16  2A00      10497          move.l    D0,D5
                    10498   doprint_46:
00005D18  600E      10499          bra.s     doprint_23
                    10500   doprint_22:
00005D1A  206E 000C 10501          move.l    12(A6),A0
00005D1E  2242      10502          move.l    D2,A1
00005D20  5282      10503          addq.l    #1,D2
00005D22  1290      10504          move.b    (A0),(A1)
00005D24  2042      10505          move.l    D2,A0
00005D26  4210      10506          clr.b     (A0)
                    10507   doprint_23:
00005D28  2F03      10508          move.l    D3,-(A7)
00005D2A  4EB9 0000 10509          jsr       _strlen
00005D2E  6B42      
00005D30  584F      10510          addq.w    #4,A7
00005D32  1800      10511          move.b    D0,D4
00005D34  206E 000C 10512          move.l    12(A6),A0
00005D38  1010      10513          move.b    (A0),D0
00005D3A  0C00 0073 10514          cmp.b     #115,D0
00005D3E  661C      10515          bne.s     doprint_48
00005D40  0C85 0000 10516          cmp.l     #0,D5
00005D44  0000      
00005D46  6D14      10517          blt.s     doprint_48
00005D48  4884      10518          ext.w     D4
00005D4A  48C4      10519          ext.l     D4
00005D4C  B885      10520          cmp.l     D5,D4
00005D4E  6F04      10521          ble.s     doprint_50
00005D50  2005      10522          move.l    D5,D0
00005D52  6006      10523          bra.s     doprint_51
                    10524   doprint_50:
00005D54  1004      10525          move.b    D4,D0
00005D56  4880      10526          ext.w     D0
00005D58  48C0      10527          ext.l     D0
                    10528   doprint_51:
00005D5A  1800      10529          move.b    D0,D4
                    10530   doprint_48:
00005D5C  206E 000C 10531          move.l    12(A6),A0
00005D60  1010      10532          move.b    (A0),D0
00005D62  0C00 0058 10533          cmp.b     #88,D0
00005D66  6600 0026 10534          bne       doprint_56
00005D6A  41EE FFDC 10535          lea       -36(A6),A0
00005D6E  2408      10536          move.l    A0,D2
                    10537   doprint_54:
00005D70  2042      10538          move.l    D2,A0
00005D72  4A10      10539          tst.b     (A0)
00005D74  6718      10540          beq.s     doprint_56
00005D76  2042      10541          move.l    D2,A0
00005D78  1210      10542          move.b    (A0),D1
00005D7A  4881      10543          ext.w     D1
00005D7C  48C1      10544          ext.l     D1
00005D7E  2F01      10545          move.l    D1,-(A7)
00005D80  4EB8 591C 10546          jsr       _toupper
00005D84  584F      10547          addq.w    #4,A7
00005D86  2042      10548          move.l    D2,A0
00005D88  1080      10549          move.b    D0,(A0)
00005D8A  5282      10550          addq.l    #1,D2
00005D8C  60E2      10551          bra       doprint_54
                    10552   doprint_56:
00005D8E  7E00      10553          moveq     #0,D7
00005D90  41EE FFD4 10554          lea       -44(A6),A0
00005D94  2408      10555          move.l    A0,D2
00005D96  206E 000C 10556          move.l    12(A6),A0
00005D9A  1010      10557          move.b    (A0),D0
00005D9C  0C00 0064 10558          cmp.b     #100,D0
00005DA0  670E      10559          beq.s     doprint_59
00005DA2  206E 000C 10560          move.l    12(A6),A0
00005DA6  1010      10561          move.b    (A0),D0
00005DA8  0C00 0069 10562          cmp.b     #105,D0
00005DAC  6600 0068 10563          bne       doprint_65
                    10564   doprint_59:
00005DB0  102E FFCE 10565          move.b    -50(A6),D0
00005DB4  4880      10566          ext.w     D0
00005DB6  48C0      10567          ext.l     D0
00005DB8  4A80      10568          tst.l     D0
00005DBA  660C      10569          bne.s     doprint_62
00005DBC  2043      10570          move.l    D3,A0
00005DBE  1010      10571          move.b    (A0),D0
00005DC0  0C00 002D 10572          cmp.b     #45,D0
00005DC4  6600 0028 10573          bne       doprint_60
                    10574   doprint_62:
00005DC8  2043      10575          move.l    D3,A0
00005DCA  1010      10576          move.b    (A0),D0
00005DCC  0C00 002D 10577          cmp.b     #45,D0
00005DD0  660E      10578          bne.s     doprint_63
00005DD2  2043      10579          move.l    D3,A0
00005DD4  5283      10580          addq.l    #1,D3
00005DD6  2242      10581          move.l    D2,A1
00005DD8  5282      10582          addq.l    #1,D2
00005DDA  1290      10583          move.b    (A0),(A1)
00005DDC  5304      10584          subq.b    #1,D4
00005DDE  6008      10585          bra.s     doprint_64
                    10586   doprint_63:
00005DE0  2042      10587          move.l    D2,A0
00005DE2  5282      10588          addq.l    #1,D2
00005DE4  10BC 002B 10589          move.b    #43,(A0)
                    10590   doprint_64:
00005DE8  5287      10591          addq.l    #1,D7
00005DEA  6000 002A 10592          bra       doprint_65
                    10593   doprint_60:
00005DEE  4A2E FFCF 10594          tst.b     -49(A6)
00005DF2  6722      10595          beq.s     doprint_65
00005DF4  2043      10596          move.l    D3,A0
00005DF6  1010      10597          move.b    (A0),D0
00005DF8  0C00 002D 10598          cmp.b     #45,D0
00005DFC  660E      10599          bne.s     doprint_67
00005DFE  2043      10600          move.l    D3,A0
00005E00  5283      10601          addq.l    #1,D3
00005E02  2242      10602          move.l    D2,A1
00005E04  5282      10603          addq.l    #1,D2
00005E06  1290      10604          move.b    (A0),(A1)
00005E08  5304      10605          subq.b    #1,D4
00005E0A  6008      10606          bra.s     doprint_68
                    10607   doprint_67:
00005E0C  2042      10608          move.l    D2,A0
00005E0E  5282      10609          addq.l    #1,D2
00005E10  10BC 0020 10610          move.b    #32,(A0)
                    10611   doprint_68:
00005E14  5287      10612          addq.l    #1,D7
                    10613   doprint_65:
00005E16  4A2E FFD0 10614          tst.b     -48(A6)
00005E1A  6700 005A 10615          beq       doprint_77
00005E1E  206E 000C 10616          move.l    12(A6),A0
00005E22  1010      10617          move.b    (A0),D0
00005E24  4880      10618          ext.w     D0
00005E26  48C0      10619          ext.l     D0
00005E28  0C80 0000 10620          cmp.l     #111,D0
00005E2C  006F      
00005E2E  671A      10621          beq.s     doprint_73
00005E30  6E0C      10622          bgt.s     doprint_76
00005E32  0C80 0000 10623          cmp.l     #88,D0
00005E36  0058      
00005E38  6710      10624          beq.s     doprint_73
00005E3A  6000 003A 10625          bra       doprint_77
                    10626   doprint_76:
00005E3E  0C80 0000 10627          cmp.l     #120,D0
00005E42  0078      
00005E44  6704      10628          beq.s     doprint_73
00005E46  6000 002E 10629          bra       doprint_77
                    10630   doprint_73:
00005E4A  2042      10631          move.l    D2,A0
00005E4C  5282      10632          addq.l    #1,D2
00005E4E  10BC 0030 10633          move.b    #48,(A0)
00005E52  5287      10634          addq.l    #1,D7
00005E54  206E 000C 10635          move.l    12(A6),A0
00005E58  1010      10636          move.b    (A0),D0
00005E5A  0C00 0078 10637          cmp.b     #120,D0
00005E5E  670C      10638          beq.s     doprint_79
00005E60  206E 000C 10639          move.l    12(A6),A0
00005E64  1010      10640          move.b    (A0),D0
00005E66  0C00 0058 10641          cmp.b     #88,D0
00005E6A  660A      10642          bne.s     doprint_77
                    10643   doprint_79:
00005E6C  2042      10644          move.l    D2,A0
00005E6E  5282      10645          addq.l    #1,D2
00005E70  10BC 0078 10646          move.b    #120,(A0)
00005E74  5287      10647          addq.l    #1,D7
                    10648   doprint_77:
00005E76  2042      10649          move.l    D2,A0
00005E78  4210      10650          clr.b     (A0)
00005E7A  206E 000C 10651          move.l    12(A6),A0
00005E7E  1010      10652          move.b    (A0),D0
00005E80  4880      10653          ext.w     D0
00005E82  48C0      10654          ext.l     D0
00005E84  0C80 0000 10655          cmp.l     #105,D0
00005E88  0069      
00005E8A  6700 0076 10656          beq       doprint_82
00005E8E  6E42      10657          bgt.s     doprint_93
00005E90  0C80 0000 10658          cmp.l     #99,D0
00005E94  0063      
00005E96  6700 0084 10659          beq       doprint_96
00005E9A  6E1C      10660          bgt.s     doprint_94
00005E9C  0C80 0000 10661          cmp.l     #88,D0
00005EA0  0058      
00005EA2  6700 005E 10662          beq       doprint_82
00005EA6  6E00 0184 10663          bgt       doprint_80
00005EAA  0C80 0000 10664          cmp.l     #69,D0
00005EAE  0045      
00005EB0  6700 0050 10665          beq       doprint_82
00005EB4  6000 0176 10666          bra       doprint_80
                    10667   doprint_94:
00005EB8  0C80 0000 10668          cmp.l     #101,D0
00005EBC  0065      
00005EBE  6700 0042 10669          beq       doprint_82
00005EC2  6E00 0168 10670          bgt       doprint_80
00005EC6  0C80 0000 10671          cmp.l     #100,D0
00005ECA  0064      
00005ECC  6734      10672          beq.s     doprint_82
00005ECE  6000 015C 10673          bra       doprint_80
                    10674   doprint_93:
00005ED2  0C80 0000 10675          cmp.l     #117,D0
00005ED6  0075      
00005ED8  6728      10676          beq.s     doprint_82
00005EDA  6E1A      10677          bgt.s     doprint_95
00005EDC  0C80 0000 10678          cmp.l     #115,D0
00005EE0  0073      
00005EE2  6700 0038 10679          beq       doprint_96
00005EE6  6E00 0144 10680          bgt       doprint_80
00005EEA  0C80 0000 10681          cmp.l     #111,D0
00005EEE  006F      
00005EF0  6710      10682          beq.s     doprint_82
00005EF2  6000 0138 10683          bra       doprint_80
                    10684   doprint_95:
00005EF6  0C80 0000 10685          cmp.l     #120,D0
00005EFA  0078      
00005EFC  6704      10686          beq.s     doprint_82
00005EFE  6000 012C 10687          bra       doprint_80
                    10688   doprint_82:
00005F02  4A2E FFD2 10689          tst.b     -46(A6)
00005F06  6714      10690          beq.s     doprint_96
00005F08  4A2E FFCD 10691          tst.b     -51(A6)
00005F0C  660E      10692          bne.s     doprint_96
00005F0E  200D      10693          move.l    A5,D0
00005F10  9087      10694          sub.l     D7,D0
00005F12  4884      10695          ext.w     D4
00005F14  48C4      10696          ext.l     D4
00005F16  9084      10697          sub.l     D4,D0
00005F18  2D40 FFFC 10698          move.l    D0,-4(A6)
                    10699   doprint_96:
00005F1C  202E FFFC 10700          move.l    -4(A6),D0
00005F20  0C80 0000 10701          cmp.l     #0,D0
00005F24  0000      
00005F26  6C04      10702          bge.s     doprint_98
00005F28  42AE FFFC 10703          clr.l     -4(A6)
                    10704   doprint_98:
00005F2C  4A2E FFCD 10705          tst.b     -51(A6)
00005F30  6600 0030 10706          bne       doprint_104
00005F34  1004      10707          move.b    D4,D0
00005F36  4880      10708          ext.w     D0
00005F38  48C0      10709          ext.l     D0
00005F3A  D0AE FFFC 10710          add.l     -4(A6),D0
00005F3E  D087      10711          add.l     D7,D0
00005F40  1D40 FFD1 10712          move.b    D0,-47(A6)
                    10713   doprint_102:
00005F44  102E FFD1 10714          move.b    -47(A6),D0
00005F48  4880      10715          ext.w     D0
00005F4A  48C0      10716          ext.l     D0
00005F4C  220D      10717          move.l    A5,D1
00005F4E  534D      10718          subq.w    #1,A5
00005F50  B081      10719          cmp.l     D1,D0
00005F52  6C0E      10720          bge.s     doprint_104
00005F54  4878 0020 10721          pea       32
00005F58  2F0A      10722          move.l    A2,-(A7)
00005F5A  4E93      10723          jsr       (A3)
00005F5C  504F      10724          addq.w    #8,A7
00005F5E  5286      10725          addq.l    #1,D6
00005F60  60E2      10726          bra       doprint_102
                    10727   doprint_104:
00005F62  41EE FFD4 10728          lea       -44(A6),A0
00005F66  2408      10729          move.l    A0,D2
                    10730   doprint_105:
00005F68  2042      10731          move.l    D2,A0
00005F6A  4A10      10732          tst.b     (A0)
00005F6C  6716      10733          beq.s     doprint_107
00005F6E  2042      10734          move.l    D2,A0
00005F70  5282      10735          addq.l    #1,D2
00005F72  1210      10736          move.b    (A0),D1
00005F74  4881      10737          ext.w     D1
00005F76  48C1      10738          ext.l     D1
00005F78  2F01      10739          move.l    D1,-(A7)
00005F7A  2F0A      10740          move.l    A2,-(A7)
00005F7C  4E93      10741          jsr       (A3)
00005F7E  504F      10742          addq.w    #8,A7
00005F80  5286      10743          addq.l    #1,D6
00005F82  60E4      10744          bra       doprint_105
                    10745   doprint_107:
00005F84  202E FFFC 10746          move.l    -4(A6),D0
00005F88  1D40 FFD1 10747          move.b    D0,-47(A6)
                    10748   doprint_108:
00005F8C  102E FFD1 10749          move.b    -47(A6),D0
00005F90  532E FFD1 10750          subq.b    #1,-47(A6)
00005F94  4A00      10751          tst.b     D0
00005F96  670E      10752          beq.s     doprint_110
00005F98  4878 0030 10753          pea       48
00005F9C  2F0A      10754          move.l    A2,-(A7)
00005F9E  4E93      10755          jsr       (A3)
00005FA0  504F      10756          addq.w    #8,A7
00005FA2  5286      10757          addq.l    #1,D6
00005FA4  60E6      10758          bra       doprint_108
                    10759   doprint_110:
00005FA6  2043      10760          move.l    D3,A0
00005FA8  4A10      10761          tst.b     (A0)
00005FAA  6700 0048 10762          beq       doprint_113
00005FAE  206E 000C 10763          move.l    12(A6),A0
00005FB2  1010      10764          move.b    (A0),D0
00005FB4  4880      10765          ext.w     D0
00005FB6  48C0      10766          ext.l     D0
00005FB8  0C80 0000 10767          cmp.l     #115,D0
00005FBC  0073      
00005FBE  670C      10768          beq.s     doprint_116
00005FC0  6E18      10769          bgt.s     doprint_119
00005FC2  0C80 0000 10770          cmp.l     #99,D0
00005FC6  0063      
00005FC8  6702      10771          beq.s     doprint_116
00005FCA  600E      10772          bra.s     doprint_119
                    10773   doprint_116:
00005FCC  2005      10774          move.l    D5,D0
00005FCE  5385      10775          subq.l    #1,D5
00005FD0  0C80 0000 10776          cmp.l     #0,D0
00005FD4  0000      
00005FD6  6E02      10777          bgt.s     doprint_119
00005FD8  6016      10778          bra.s     doprint_115
                    10779   doprint_119:
00005FDA  2043      10780          move.l    D3,A0
00005FDC  5283      10781          addq.l    #1,D3
00005FDE  1210      10782          move.b    (A0),D1
00005FE0  4881      10783          ext.w     D1
00005FE2  48C1      10784          ext.l     D1
00005FE4  2F01      10785          move.l    D1,-(A7)
00005FE6  2F0A      10786          move.l    A2,-(A7)
00005FE8  4E93      10787          jsr       (A3)
00005FEA  504F      10788          addq.w    #8,A7
00005FEC  5286      10789          addq.l    #1,D6
00005FEE  6002      10790          bra.s     doprint_112
                    10791   doprint_115:
00005FF0  6002      10792          bra.s     doprint_113
                    10793   doprint_112:
00005FF2  60B2      10794          bra       doprint_110
                    10795   doprint_113:
00005FF4  4A2E FFCD 10796          tst.b     -51(A6)
00005FF8  6700 0030 10797          beq       doprint_125
00005FFC  1004      10798          move.b    D4,D0
00005FFE  4880      10799          ext.w     D0
00006000  48C0      10800          ext.l     D0
00006002  D0AE FFFC 10801          add.l     -4(A6),D0
00006006  D087      10802          add.l     D7,D0
00006008  1D40 FFD1 10803          move.b    D0,-47(A6)
                    10804   doprint_123:
0000600C  102E FFD1 10805          move.b    -47(A6),D0
00006010  4880      10806          ext.w     D0
00006012  48C0      10807          ext.l     D0
00006014  220D      10808          move.l    A5,D1
00006016  534D      10809          subq.w    #1,A5
00006018  B081      10810          cmp.l     D1,D0
0000601A  6C0E      10811          bge.s     doprint_125
0000601C  4878 0020 10812          pea       32
00006020  2F0A      10813          move.l    A2,-(A7)
00006022  4E93      10814          jsr       (A3)
00006024  504F      10815          addq.w    #8,A7
00006026  5386      10816          subq.l    #1,D6
00006028  60E2      10817          bra       doprint_123
                    10818   doprint_125:
0000602A  6014      10819          bra.s     doprint_81
                    10820   doprint_80:
0000602C  206E 000C 10821          move.l    12(A6),A0
00006030  1210      10822          move.b    (A0),D1
00006032  4881      10823          ext.w     D1
00006034  48C1      10824          ext.l     D1
00006036  2F01      10825          move.l    D1,-(A7)
00006038  2F0A      10826          move.l    A2,-(A7)
0000603A  4E93      10827          jsr       (A3)
0000603C  504F      10828          addq.w    #8,A7
0000603E  5286      10829          addq.l    #1,D6
                    10830   doprint_81:
00006040  52AE 000C 10831          addq.l    #1,12(A6)
                    10832   doprint_2:
00006044  6000 FA10 10833          bra       doprint_1
                    10834   doprint_3:
00006048  4A92      10835          tst.l     (A2)
0000604A  6710      10836          beq.s     doprint_126
0000604C  4201      10837          clr.b     D1
0000604E  C2BC 0000 10838          and.l     #255,D1
00006052  00FF      
00006054  2F01      10839          move.l    D1,-(A7)
00006056  2F0A      10840          move.l    A2,-(A7)
00006058  4E93      10841          jsr       (A3)
0000605A  504F      10842          addq.w    #8,A7
                    10843   doprint_126:
0000605C  2006      10844          move.l    D6,D0
0000605E  4CDF 3CFC 10845          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00006062  4E5E      10846          unlk      A6
00006064  4E75      10847          rts
                    10848   @doscan_read:
00006066  4E56 FFFC 10849          link      A6,#-4
0000606A  2F0A      10850          move.l    A2,-(A7)
0000606C  45F9 0000 10851          lea       @doscan_lpbuf.L,A2
00006070  86F2      
00006072  4AAE 0008 10852          tst.l     8(A6)
00006076  6700 0032 10853          beq       @doscan_read_1
0000607A  206E 0008 10854          move.l    8(A6),A0
0000607E  58AE 0008 10855          addq.l    #4,8(A6)
00006082  2050      10856          move.l    (A0),A0
00006084  1010      10857          move.b    (A0),D0
00006086  4880      10858          ext.w     D0
00006088  48C0      10859          ext.l     D0
0000608A  2D40 FFFC 10860          move.l    D0,-4(A6)
0000608E  4201      10861          clr.b     D1
00006090  C2BC 0000 10862          and.l     #255,D1
00006094  00FF      
00006096  B081      10863          cmp.l     D1,D0
00006098  6706      10864          beq.s     @doscan_read_3
0000609A  202E FFFC 10865          move.l    -4(A6),D0
0000609E  6006      10866          bra.s     @doscan_read_4
                    10867   @doscan_read_3:
000060A0  70FF      10868          moveq     #-1,D0
000060A2  4880      10869          ext.w     D0
000060A4  48C0      10870          ext.l     D0
                    10871   @doscan_read_4:
000060A6  6000 0034 10872          bra       @doscan_read_5
                    10873   @doscan_read_1:
000060AA  2052      10874          move.l    (A2),A0
000060AC  1010      10875          move.b    (A0),D0
000060AE  6622      10876          bne.s     @doscan_read_6
000060B0  4879 0803 10877          pea       @doscan_buf.L
000060B4  05AA      
000060B6  4EB9 0000 10878          jsr       _gets
000060BA  6B54      
000060BC  584F      10879          addq.w    #4,A7
000060BE  2480      10880          move.l    D0,(A2)
000060C0  4879 0000 10881          pea       @doscan_1.L
000060C4  85E2      
000060C6  4879 0803 10882          pea       @doscan_buf.L
000060CA  05AA      
000060CC  4EB8 5906 10883          jsr       _strcat
000060D0  504F      10884          addq.w    #8,A7
                    10885   @doscan_read_6:
000060D2  2052      10886          move.l    (A2),A0
000060D4  5292      10887          addq.l    #1,(A2)
000060D6  1010      10888          move.b    (A0),D0
000060D8  4880      10889          ext.w     D0
000060DA  48C0      10890          ext.l     D0
                    10891   @doscan_read_5:
000060DC  245F      10892          move.l    (A7)+,A2
000060DE  4E5E      10893          unlk      A6
000060E0  4E75      10894          rts
                    10895   @doscan_putback:
000060E2  4E56 0000 10896          link      A6,#0
000060E6  48E7 3000 10897          movem.l   D2/D3,-(A7)
000060EA  242E 000C 10898          move.l    12(A6),D2
000060EE  262E 0008 10899          move.l    8(A6),D3
000060F2  6718      10900          beq.s     @doscan_putback_1
000060F4  0C82 FFFF 10901          cmp.l     #-1,D2
000060F8  FFFF      
000060FA  670A      10902          beq.s     @doscan_putback_3
000060FC  5983      10903          subq.l    #4,D3
000060FE  2043      10904          move.l    D3,A0
00006100  2050      10905          move.l    (A0),A0
00006102  1082      10906          move.b    D2,(A0)
00006104  6004      10907          bra.s     @doscan_putback_4
                    10908   @doscan_putback_3:
00006106  2043      10909          move.l    D3,A0
00006108  5390      10910          subq.l    #1,(A0)
                    10911   @doscan_putback_4:
0000610A  6030      10912          bra.s     @doscan_putback_6
                    10913   @doscan_putback_1:
0000610C  41F9 0803 10914          lea       @doscan_buf.L,A0
00006110  05AA      
00006112  2008      10915          move.l    A0,D0
00006114  B0B9 0000 10916          cmp.l     @doscan_lpbuf.L,D0
00006118  86F2      
0000611A  6612      10917          bne.s     @doscan_putback_5
0000611C  4239 0803 10918          clr.b     @doscan_buf.L
00006120  05AA      
00006122  2F02      10919          move.l    D2,-(A7)
00006124  4EB9 0000 10920          jsr       _ungetch
00006128  6BC6      
0000612A  584F      10921          addq.w    #4,A7
0000612C  600E      10922          bra.s     @doscan_putback_6
                    10923   @doscan_putback_5:
0000612E  53B9 0000 10924          subq.l    #1,@doscan_lpbuf.L
00006132  86F2      
00006134  2079 0000 10925          move.l    @doscan_lpbuf.L,A0
00006138  86F2      
0000613A  1082      10926          move.b    D2,(A0)
                    10927   @doscan_putback_6:
0000613C  2002      10928          move.l    D2,D0
0000613E  4CDF 000C 10929          movem.l   (A7)+,D2/D3
00006142  4E5E      10930          unlk      A6
00006144  4E75      10931          rts
                    10932   @doscan_space:
00006146  4E56 0000 10933          link      A6,#0
0000614A  2F02      10934          move.l    D2,-(A7)
                    10935   @doscan_space_1:
0000614C  2F2E 0008 10936          move.l    8(A6),-(A7)
00006150  4EB8 6066 10937          jsr       @doscan_read
00006154  584F      10938          addq.w    #4,A7
00006156  2400      10939          move.l    D0,D2
00006158  206E 000C 10940          move.l    12(A6),A0
0000615C  5290      10941          addq.l    #1,(A0)
0000615E  2002      10942          move.l    D2,D0
00006160  5280      10943          addq.l    #1,D0
00006162  41F9 0000 10944          lea       __ctype.L,A0
00006166  85F0      
00006168  1030 0800 10945          move.b    0(A0,D0.L),D0
0000616C  C03C 0010 10946          and.b     #16,D0
00006170  66DA      10947          bne       @doscan_space_1
00006172  2002      10948          move.l    D2,D0
00006174  241F      10949          move.l    (A7)+,D2
00006176  4E5E      10950          unlk      A6
00006178  4E75      10951          rts
                    10952   @doscan_select:
0000617A  4E56 0000 10953          link      A6,#0
0000617E  48E7 3F20 10954          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
00006182  262E 000C 10955          move.l    12(A6),D3
00006186  2C2E 0018 10956          move.l    24(A6),D6
0000618A  2E2E 0014 10957          move.l    20(A6),D7
0000618E  2043      10958          move.l    D3,A0
00006190  1010      10959          move.b    (A0),D0
00006192  0C00 005E 10960          cmp.b     #94,D0
00006196  6608      10961          bne.s     @doscan_select_1
00006198  347C 0001 10962          move.w    #1,A2
0000619C  5283      10963          addq.l    #1,D3
0000619E  6004      10964          bra.s     @doscan_select_2
                    10965   @doscan_select_1:
000061A0  347C 0000 10966          move.w    #0,A2
                    10967   @doscan_select_2:
000061A4  202E 0010 10968          move.l    16(A6),D0
000061A8  53AE 0010 10969          subq.l    #1,16(A6)
000061AC  4A80      10970          tst.l     D0
000061AE  6700 00F4 10971          beq       @doscan_select_5
000061B2  2F2E 0008 10972          move.l    8(A6),-(A7)
000061B6  4EB8 6066 10973          jsr       @doscan_read
000061BA  584F      10974          addq.w    #4,A7
000061BC  2800      10975          move.l    D0,D4
000061BE  0C84 FFFF 10976          cmp.l     #-1,D4
000061C2  FFFF      
000061C4  6604      10977          bne.s     @doscan_select_6
000061C6  6000 00DC 10978          bra       @doscan_select_5
                    10979   @doscan_select_6:
000061CA  206E 001C 10980          move.l    28(A6),A0
000061CE  5290      10981          addq.l    #1,(A0)
000061D0  4285      10982          clr.l     D5
000061D2  4282      10983          clr.l     D2
                    10984   @doscan_select_8:
000061D4  2043      10985          move.l    D3,A0
000061D6  1030 2800 10986          move.b    0(A0,D2.L),D0
000061DA  0C00 005D 10987          cmp.b     #93,D0
000061DE  6700 0086 10988          beq       @doscan_select_10
000061E2  4A82      10989          tst.l     D2
000061E4  6710      10990          beq.s     @doscan_select_11
000061E6  2043      10991          move.l    D3,A0
000061E8  1030 2800 10992          move.b    0(A0,D2.L),D0
000061EC  0C00 005D 10993          cmp.b     #93,D0
000061F0  6604      10994          bne.s     @doscan_select_11
000061F2  6000 0072 10995          bra       @doscan_select_10
                    10996   @doscan_select_11:
000061F6  4A82      10997          tst.l     D2
000061F8  6700 0056 10998          beq       @doscan_select_15
000061FC  2043      10999          move.l    D3,A0
000061FE  1030 2800 11000          move.b    0(A0,D2.L),D0
00006202  0C00 002D 11001          cmp.b     #45,D0
00006206  6600 0048 11002          bne       @doscan_select_15
0000620A  2043      11003          move.l    D3,A0
0000620C  2002      11004          move.l    D2,D0
0000620E  5380      11005          subq.l    #1,D0
00006210  2243      11006          move.l    D3,A1
00006212  2202      11007          move.l    D2,D1
00006214  5281      11008          addq.l    #1,D1
00006216  2F00      11009          move.l    D0,-(A7)
00006218  1030 0800 11010          move.b    0(A0,D0.L),D0
0000621C  B031 1800 11011          cmp.b     0(A1,D1.L),D0
00006220  6C00 002E 11012          bge       @doscan_select_15
00006224  201F      11013          move.l    (A7)+,D0
00006226  2043      11014          move.l    D3,A0
00006228  2002      11015          move.l    D2,D0
0000622A  5380      11016          subq.l    #1,D0
0000622C  1030 0800 11017          move.b    0(A0,D0.L),D0
00006230  4880      11018          ext.w     D0
00006232  48C0      11019          ext.l     D0
00006234  B880      11020          cmp.l     D0,D4
00006236  6D14      11021          blt.s     @doscan_select_17
00006238  2043      11022          move.l    D3,A0
0000623A  2002      11023          move.l    D2,D0
0000623C  5280      11024          addq.l    #1,D0
0000623E  1030 0800 11025          move.b    0(A0,D0.L),D0
00006242  4880      11026          ext.w     D0
00006244  48C0      11027          ext.l     D0
00006246  B880      11028          cmp.l     D0,D4
00006248  6E02      11029          bgt.s     @doscan_select_17
0000624A  601A      11030          bra.s     @doscan_select_10
                    11031   @doscan_select_17:
0000624C  5282      11032          addq.l    #1,D2
0000624E  6010      11033          bra.s     @doscan_select_19
                    11034   @doscan_select_15:
00006250  2043      11035          move.l    D3,A0
00006252  1030 2800 11036          move.b    0(A0,D2.L),D0
00006256  4880      11037          ext.w     D0
00006258  48C0      11038          ext.l     D0
0000625A  B880      11039          cmp.l     D0,D4
0000625C  6602      11040          bne.s     @doscan_select_19
0000625E  6006      11041          bra.s     @doscan_select_10
                    11042   @doscan_select_19:
00006260  5282      11043          addq.l    #1,D2
00006262  6000 FF70 11044          bra       @doscan_select_8
                    11045   @doscan_select_10:
00006266  4A82      11046          tst.l     D2
00006268  670C      11047          beq.s     @doscan_select_23
0000626A  2043      11048          move.l    D3,A0
0000626C  1030 2800 11049          move.b    0(A0,D2.L),D0
00006270  0C00 005D 11050          cmp.b     #93,D0
00006274  6702      11051          beq.s     @doscan_select_21
                    11052   @doscan_select_23:
00006276  7A01      11053          moveq     #1,D5
                    11054   @doscan_select_21:
00006278  200A      11055          move.l    A2,D0
0000627A  6712      11056          beq.s     @doscan_select_24
0000627C  4A85      11057          tst.l     D5
0000627E  660C      11058          bne.s     @doscan_select_26
00006280  4A87      11059          tst.l     D7
00006282  6606      11060          bne.s     @doscan_select_28
00006284  2046      11061          move.l    D6,A0
00006286  5286      11062          addq.l    #1,D6
00006288  1084      11063          move.b    D4,(A0)
                    11064   @doscan_select_28:
0000628A  6014      11065          bra.s     @doscan_select_4
                    11066   @doscan_select_26:
0000628C  6016      11067          bra.s     @doscan_select_5
                    11068   @doscan_select_24:
0000628E  4A85      11069          tst.l     D5
00006290  670C      11070          beq.s     @doscan_select_30
00006292  4A87      11071          tst.l     D7
00006294  6606      11072          bne.s     @doscan_select_32
00006296  2046      11073          move.l    D6,A0
00006298  5286      11074          addq.l    #1,D6
0000629A  1084      11075          move.b    D4,(A0)
                    11076   @doscan_select_32:
0000629C  6002      11077          bra.s     @doscan_select_4
                    11078   @doscan_select_30:
0000629E  6004      11079          bra.s     @doscan_select_5
                    11080   @doscan_select_4:
000062A0  6000 FF02 11081          bra       @doscan_select_2
                    11082   @doscan_select_5:
000062A4  0C84 FFFF 11083          cmp.l     #-1,D4
000062A8  FFFF      
000062AA  6712      11084          beq.s     @doscan_select_34
000062AC  2F04      11085          move.l    D4,-(A7)
000062AE  2F2E 0008 11086          move.l    8(A6),-(A7)
000062B2  4EB8 60E2 11087          jsr       @doscan_putback
000062B6  504F      11088          addq.w    #8,A7
000062B8  206E 001C 11089          move.l    28(A6),A0
000062BC  5390      11090          subq.l    #1,(A0)
                    11091   @doscan_select_34:
000062BE  4A87      11092          tst.l     D7
000062C0  6604      11093          bne.s     @doscan_select_36
000062C2  2046      11094          move.l    D6,A0
000062C4  4210      11095          clr.b     (A0)
                    11096   @doscan_select_36:
000062C6  5283      11097          addq.l    #1,D3
000062C8  2043      11098          move.l    D3,A0
000062CA  1010      11099          move.b    (A0),D0
000062CC  0C00 005D 11100          cmp.b     #93,D0
000062D0  6702      11101          beq.s     @doscan_select_40
000062D2  60F2      11102          bra       @doscan_select_36
                    11103   @doscan_select_40:
000062D4  5283      11104          addq.l    #1,D3
000062D6  2003      11105          move.l    D3,D0
000062D8  4CDF 04FC 11106          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
000062DC  4E5E      11107          unlk      A6
000062DE  4E75      11108          rts
                    11109   _scanflush:
000062E0  41F9 0803 11110          lea       @doscan_buf.L,A0
000062E4  05AA      
000062E6  23C8 0000 11111          move.l    A0,@doscan_lpbuf.L
000062EA  86F2      
000062EC  4239 0803 11112          clr.b     @doscan_buf.L
000062F0  05AA      
000062F2  4878 FFFF 11113          pea       -1
000062F6  4EB9 0000 11114          jsr       _ungetch
000062FA  6BC6      
000062FC  584F      11115          addq.w    #4,A7
000062FE  4E75      11116          rts
                    11117   _doscan:
00006300  4E56 FF88 11118          link      A6,#-120
00006304  48E7 3F3C 11119          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00006308  47F8 6066 11120          lea       @doscan_read.L,A3
0000630C  4AAE 0008 11121          tst.l     8(A6)
00006310  6706      11122          beq.s     doscan_1
00006312  41EE 0008 11123          lea       8(A6),A0
00006316  6008      11124          bra.s     doscan_2
                    11125   doscan_1:
00006318  4200      11126          clr.b     D0
0000631A  4880      11127          ext.w     D0
0000631C  48C0      11128          ext.l     D0
0000631E  2040      11129          move.l    D0,A0
                    11130   doscan_2:
00006320  2A08      11131          move.l    A0,D5
00006322  42AE FFE4 11132          clr.l     -28(A6)
00006326  4284      11133          clr.l     D4
                    11134   doscan_3:
00006328  206E 000C 11135          move.l    12(A6),A0
0000632C  52AE 000C 11136          addq.l    #1,12(A6)
00006330  1010      11137          move.b    (A0),D0
00006332  4880      11138          ext.w     D0
00006334  48C0      11139          ext.l     D0
00006336  2600      11140          move.l    D0,D3
00006338  4201      11141          clr.b     D1
0000633A  C2BC 0000 11142          and.l     #255,D1
0000633E  00FF      
00006340  B081      11143          cmp.l     D1,D0
00006342  6700 05F2 11144          beq       doscan_5
00006346  4286      11145          clr.l     D6
00006348  387C 0000 11146          move.w    #0,A4
0000634C  0C83 0000 11147          cmp.l     #32,D3
00006350  0020      
00006352  6712      11148          beq.s     doscan_8
00006354  0C83 0000 11149          cmp.l     #9,D3
00006358  0009      
0000635A  670A      11150          beq.s     doscan_8
0000635C  0C83 0000 11151          cmp.l     #10,D3
00006360  000A      
00006362  6600 004E 11152          bne       doscan_6
                    11153   doscan_8:
00006366  2F05      11154          move.l    D5,-(A7)
00006368  4E93      11155          jsr       (A3)
0000636A  584F      11156          addq.w    #4,A7
0000636C  2400      11157          move.l    D0,D2
0000636E  52AE FFE4 11158          addq.l    #1,-28(A6)
00006372  0C82 FFFF 11159          cmp.l     #-1,D2
00006376  FFFF      
00006378  6612      11160          bne.s     doscan_11
0000637A  4A84      11161          tst.l     D4
0000637C  6704      11162          beq.s     doscan_13
0000637E  2004      11163          move.l    D4,D0
00006380  6006      11164          bra.s     doscan_14
                    11165   doscan_13:
00006382  70FF      11166          moveq     #-1,D0
00006384  4880      11167          ext.w     D0
00006386  48C0      11168          ext.l     D0
                    11169   doscan_14:
00006388  6000 05AE 11170          bra       doscan_15
                    11171   doscan_11:
0000638C  2002      11172          move.l    D2,D0
0000638E  5280      11173          addq.l    #1,D0
00006390  41F9 0000 11174          lea       __ctype.L,A0
00006394  85F0      
00006396  1030 0800 11175          move.b    0(A0,D0.L),D0
0000639A  C03C 0010 11176          and.b     #16,D0
0000639E  66C6      11177          bne       doscan_8
000063A0  53AE FFE4 11178          subq.l    #1,-28(A6)
000063A4  2F02      11179          move.l    D2,-(A7)
000063A6  2F05      11180          move.l    D5,-(A7)
000063A8  4EB8 60E2 11181          jsr       @doscan_putback
000063AC  504F      11182          addq.w    #8,A7
000063AE  6000 0582 11183          bra       doscan_141
                    11184   doscan_6:
000063B2  0C83 0000 11185          cmp.l     #37,D3
000063B6  0025      
000063B8  6600 053E 11186          bne       doscan_129
000063BC  206E 000C 11187          move.l    12(A6),A0
000063C0  52AE 000C 11188          addq.l    #1,12(A6)
000063C4  1010      11189          move.b    (A0),D0
000063C6  4880      11190          ext.w     D0
000063C8  48C0      11191          ext.l     D0
000063CA  2600      11192          move.l    D0,D3
000063CC  42AE FFEC 11193          clr.l     -20(A6)
000063D0  4286      11194          clr.l     D6
000063D2  42AE FFE8 11195          clr.l     -24(A6)
000063D6  347C 7FFF 11196          move.w    #32767,A2
000063DA  0C83 0000 11197          cmp.l     #42,D3
000063DE  002A      
000063E0  6612      11198          bne.s     doscan_18
000063E2  7C01      11199          moveq     #1,D6
000063E4  206E 000C 11200          move.l    12(A6),A0
000063E8  52AE 000C 11201          addq.l    #1,12(A6)
000063EC  1010      11202          move.b    (A0),D0
000063EE  4880      11203          ext.w     D0
000063F0  48C0      11204          ext.l     D0
000063F2  2600      11205          move.l    D0,D3
                    11206   doscan_18:
000063F4  2003      11207          move.l    D3,D0
000063F6  5280      11208          addq.l    #1,D0
000063F8  41F9 0000 11209          lea       __ctype.L,A0
000063FC  85F0      
000063FE  1030 0800 11210          move.b    0(A0,D0.L),D0
00006402  C03C 0004 11211          and.b     #4,D0
00006406  6700 004C 11212          beq       doscan_24
0000640A  2003      11213          move.l    D3,D0
0000640C  0480 0000 11214          sub.l     #48,D0
00006410  0030      
00006412  2440      11215          move.l    D0,A2
                    11216   doscan_22:
00006414  206E 000C 11217          move.l    12(A6),A0
00006418  52AE 000C 11218          addq.l    #1,12(A6)
0000641C  1010      11219          move.b    (A0),D0
0000641E  4880      11220          ext.w     D0
00006420  48C0      11221          ext.l     D0
00006422  2600      11222          move.l    D0,D3
00006424  5280      11223          addq.l    #1,D0
00006426  41F9 0000 11224          lea       __ctype.L,A0
0000642A  85F0      
0000642C  1030 0800 11225          move.b    0(A0,D0.L),D0
00006430  C03C 0004 11226          and.b     #4,D0
00006434  671E      11227          beq.s     doscan_24
00006436  2F0A      11228          move.l    A2,-(A7)
00006438  4878 000A 11229          pea       10
0000643C  4EB9 0000 11230          jsr       LMUL
00006440  6AB4      
00006442  2017      11231          move.l    (A7),D0
00006444  504F      11232          addq.w    #8,A7
00006446  2203      11233          move.l    D3,D1
00006448  0481 0000 11234          sub.l     #48,D1
0000644C  0030      
0000644E  D081      11235          add.l     D1,D0
00006450  2440      11236          move.l    D0,A2
00006452  60C0      11237          bra       doscan_22
                    11238   doscan_24:
00006454  0C83 0000 11239          cmp.l     #108,D3
00006458  006C      
0000645A  6708      11240          beq.s     doscan_27
0000645C  0C83 0000 11241          cmp.l     #76,D3
00006460  004C      
00006462  661A      11242          bne.s     doscan_25
                    11243   doscan_27:
00006464  2D7C 0000 11244          move.l    #1,-24(A6)
00006468  0001 FFE8 
0000646C  206E 000C 11245          move.l    12(A6),A0
00006470  52AE 000C 11246          addq.l    #1,12(A6)
00006474  1010      11247          move.b    (A0),D0
00006476  4880      11248          ext.w     D0
00006478  48C0      11249          ext.l     D0
0000647A  2600      11250          move.l    D0,D3
0000647C  6020      11251          bra.s     doscan_28
                    11252   doscan_25:
0000647E  0C83 0000 11253          cmp.l     #104,D3
00006482  0068      
00006484  6618      11254          bne.s     doscan_28
00006486  2D7C 0000 11255          move.l    #1,-20(A6)
0000648A  0001 FFEC 
0000648E  206E 000C 11256          move.l    12(A6),A0
00006492  52AE 000C 11257          addq.l    #1,12(A6)
00006496  1010      11258          move.b    (A0),D0
00006498  4880      11259          ext.w     D0
0000649A  48C0      11260          ext.l     D0
0000649C  2600      11261          move.l    D0,D3
                    11262   doscan_28:
0000649E  0C83 0000 11263          cmp.l     #91,D3
000064A2  005B      
000064A4  6600 0036 11264          bne       doscan_30
000064A8  4A86      11265          tst.l     D6
000064AA  660A      11266          bne.s     doscan_32
000064AC  206E 0010 11267          move.l    16(A6),A0
000064B0  58AE 0010 11268          addq.l    #4,16(A6)
000064B4  2E10      11269          move.l    (A0),D7
                    11270   doscan_32:
000064B6  486E FFE4 11271          pea       -28(A6)
000064BA  2F07      11272          move.l    D7,-(A7)
000064BC  2F06      11273          move.l    D6,-(A7)
000064BE  2F0A      11274          move.l    A2,-(A7)
000064C0  2F2E 000C 11275          move.l    12(A6),-(A7)
000064C4  2F05      11276          move.l    D5,-(A7)
000064C6  4EB8 617A 11277          jsr       @doscan_select
000064CA  DEFC 0018 11278          add.w     #24,A7
000064CE  2D40 000C 11279          move.l    D0,12(A6)
000064D2  4A86      11280          tst.l     D6
000064D4  6602      11281          bne.s     doscan_34
000064D6  5284      11282          addq.l    #1,D4
                    11283   doscan_34:
000064D8  6000 0458 11284          bra       doscan_141
                    11285   doscan_30:
000064DC  0C83 0000 11286          cmp.l     #110,D3
000064E0  006E      
000064E2  661A      11287          bne.s     doscan_36
000064E4  4A86      11288          tst.l     D6
000064E6  6612      11289          bne.s     doscan_38
000064E8  206E 0010 11290          move.l    16(A6),A0
000064EC  58AE 0010 11291          addq.l    #4,16(A6)
000064F0  2E10      11292          move.l    (A0),D7
000064F2  2047      11293          move.l    D7,A0
000064F4  20AE FFE4 11294          move.l    -28(A6),(A0)
000064F8  5284      11295          addq.l    #1,D4
                    11296   doscan_38:
000064FA  6000 0436 11297          bra       doscan_141
                    11298   doscan_36:
000064FE  0C83 0000 11299          cmp.l     #115,D3
00006502  0073      
00006504  6600 00C0 11300          bne       doscan_40
00006508  486E FFE4 11301          pea       -28(A6)
0000650C  2F05      11302          move.l    D5,-(A7)
0000650E  4EB8 6146 11303          jsr       @doscan_space
00006512  504F      11304          addq.w    #8,A7
00006514  2400      11305          move.l    D0,D2
00006516  4A86      11306          tst.l     D6
00006518  660A      11307          bne.s     doscan_42
0000651A  206E 0010 11308          move.l    16(A6),A0
0000651E  58AE 0010 11309          addq.l    #4,16(A6)
00006522  2E10      11310          move.l    (A0),D7
                    11311   doscan_42:
00006524  52AE FFE4 11312          addq.l    #1,-28(A6)
                    11313   doscan_44:
00006528  200A      11314          move.l    A2,D0
0000652A  534A      11315          subq.w    #1,A2
0000652C  4A80      11316          tst.l     D0
0000652E  6700 0048 11317          beq       doscan_46
00006532  2002      11318          move.l    D2,D0
00006534  5280      11319          addq.l    #1,D0
00006536  41F9 0000 11320          lea       __ctype.L,A0
0000653A  85F0      
0000653C  1030 0800 11321          move.b    0(A0,D0.L),D0
00006540  C03C 0010 11322          and.b     #16,D0
00006544  6604      11323          bne.s     doscan_47
00006546  7001      11324          moveq     #1,D0
00006548  6002      11325          bra.s     doscan_48
                    11326   doscan_47:
0000654A  4280      11327          clr.l     D0
                    11328   doscan_48:
0000654C  C0BC 0000 11329          and.l     #255,D0
00006550  00FF      
00006552  6724      11330          beq.s     doscan_46
00006554  0C82 FFFF 11331          cmp.l     #-1,D2
00006558  FFFF      
0000655A  671C      11332          beq.s     doscan_46
0000655C  387C 0001 11333          move.w    #1,A4
00006560  4A86      11334          tst.l     D6
00006562  6606      11335          bne.s     doscan_49
00006564  2047      11336          move.l    D7,A0
00006566  5287      11337          addq.l    #1,D7
00006568  1082      11338          move.b    D2,(A0)
                    11339   doscan_49:
0000656A  2F05      11340          move.l    D5,-(A7)
0000656C  4E93      11341          jsr       (A3)
0000656E  584F      11342          addq.w    #4,A7
00006570  2400      11343          move.l    D0,D2
00006572  52AE FFE4 11344          addq.l    #1,-28(A6)
00006576  60B0      11345          bra       doscan_44
                    11346   doscan_46:
00006578  4A86      11347          tst.l     D6
0000657A  660A      11348          bne.s     doscan_53
0000657C  2047      11349          move.l    D7,A0
0000657E  4210      11350          clr.b     (A0)
00006580  200C      11351          move.l    A4,D0
00006582  6702      11352          beq.s     doscan_53
00006584  5284      11353          addq.l    #1,D4
                    11354   doscan_53:
00006586  0C82 FFFF 11355          cmp.l     #-1,D2
0000658A  FFFF      
0000658C  6708      11356          beq.s     doscan_57
0000658E  4A86      11357          tst.l     D6
00006590  6622      11358          bne.s     doscan_55
00006592  200C      11359          move.l    A4,D0
00006594  661E      11360          bne.s     doscan_55
                    11361   doscan_57:
00006596  4A84      11362          tst.l     D4
00006598  6704      11363          beq.s     doscan_58
0000659A  2004      11364          move.l    D4,D0
0000659C  6012      11365          bra.s     doscan_61
                    11366   doscan_58:
0000659E  0C82 FFFF 11367          cmp.l     #-1,D2
000065A2  FFFF      
000065A4  6608      11368          bne.s     doscan_60
000065A6  70FF      11369          moveq     #-1,D0
000065A8  4880      11370          ext.w     D0
000065AA  48C0      11371          ext.l     D0
000065AC  6002      11372          bra.s     doscan_61
                    11373   doscan_60:
000065AE  2004      11374          move.l    D4,D0
                    11375   doscan_61:
000065B0  6000 0386 11376          bra       doscan_15
                    11377   doscan_55:
000065B4  53AE FFE4 11378          subq.l    #1,-28(A6)
000065B8  2F02      11379          move.l    D2,-(A7)
000065BA  2F05      11380          move.l    D5,-(A7)
000065BC  4EB8 60E2 11381          jsr       @doscan_putback
000065C0  504F      11382          addq.w    #8,A7
000065C2  6000 036E 11383          bra       doscan_141
                    11384   doscan_40:
000065C6  0C83 0000 11385          cmp.l     #99,D3
000065CA  0063      
000065CC  6600 0092 11386          bne       doscan_62
000065D0  4A86      11387          tst.l     D6
000065D2  660A      11388          bne.s     doscan_64
000065D4  206E 0010 11389          move.l    16(A6),A0
000065D8  58AE 0010 11390          addq.l    #4,16(A6)
000065DC  2E10      11391          move.l    (A0),D7
                    11392   doscan_64:
000065DE  2F05      11393          move.l    D5,-(A7)
000065E0  4E93      11394          jsr       (A3)
000065E2  584F      11395          addq.w    #4,A7
000065E4  2400      11396          move.l    D0,D2
000065E6  52AE FFE4 11397          addq.l    #1,-28(A6)
000065EA  200A      11398          move.l    A2,D0
000065EC  0C80 0000 11399          cmp.l     #32767,D0
000065F0  7FFF      
000065F2  6604      11400          bne.s     doscan_66
000065F4  347C 0001 11401          move.w    #1,A2
                    11402   doscan_66:
000065F8  0C82 FFFF 11403          cmp.l     #-1,D2
000065FC  FFFF      
000065FE  6606      11404          bne.s     doscan_68
00006600  4A86      11405          tst.l     D6
00006602  6602      11406          bne.s     doscan_68
00006604  5384      11407          subq.l    #1,D4
                    11408   doscan_68:
00006606  200A      11409          move.l    A2,D0
00006608  534A      11410          subq.w    #1,A2
0000660A  4A80      11411          tst.l     D0
0000660C  6720      11412          beq.s     doscan_72
0000660E  0C82 FFFF 11413          cmp.l     #-1,D2
00006612  FFFF      
00006614  6718      11414          beq.s     doscan_72
00006616  4A86      11415          tst.l     D6
00006618  6606      11416          bne.s     doscan_73
0000661A  2047      11417          move.l    D7,A0
0000661C  5287      11418          addq.l    #1,D7
0000661E  1082      11419          move.b    D2,(A0)
                    11420   doscan_73:
00006620  2F05      11421          move.l    D5,-(A7)
00006622  4E93      11422          jsr       (A3)
00006624  584F      11423          addq.w    #4,A7
00006626  2400      11424          move.l    D0,D2
00006628  52AE FFE4 11425          addq.l    #1,-28(A6)
0000662C  60D8      11426          bra       doscan_68
                    11427   doscan_72:
0000662E  0C82 FFFF 11428          cmp.l     #-1,D2
00006632  FFFF      
00006634  6612      11429          bne.s     doscan_75
00006636  4A84      11430          tst.l     D4
00006638  6704      11431          beq.s     doscan_77
0000663A  2004      11432          move.l    D4,D0
0000663C  6006      11433          bra.s     doscan_78
                    11434   doscan_77:
0000663E  70FF      11435          moveq     #-1,D0
00006640  4880      11436          ext.w     D0
00006642  48C0      11437          ext.l     D0
                    11438   doscan_78:
00006644  6000 02F2 11439          bra       doscan_15
                    11440   doscan_75:
00006648  4A86      11441          tst.l     D6
0000664A  6602      11442          bne.s     doscan_79
0000664C  5284      11443          addq.l    #1,D4
                    11444   doscan_79:
0000664E  53AE FFE4 11445          subq.l    #1,-28(A6)
00006652  2F02      11446          move.l    D2,-(A7)
00006654  2F05      11447          move.l    D5,-(A7)
00006656  4EB8 60E2 11448          jsr       @doscan_putback
0000665A  504F      11449          addq.w    #8,A7
0000665C  6000 02D4 11450          bra       doscan_141
                    11451   doscan_62:
00006660  0C83 0000 11452          cmp.l     #105,D3
00006664  0069      
00006666  6600 0060 11453          bne       doscan_84
0000666A  486E FFE4 11454          pea       -28(A6)
0000666E  2F05      11455          move.l    D5,-(A7)
00006670  4EB8 6146 11456          jsr       @doscan_space
00006674  504F      11457          addq.w    #8,A7
00006676  2400      11458          move.l    D0,D2
00006678  0C82 0000 11459          cmp.l     #48,D2
0000667C  0030      
0000667E  6600 0038 11460          bne       doscan_83
00006682  387C 0001 11461          move.w    #1,A4
00006686  2F05      11462          move.l    D5,-(A7)
00006688  4E93      11463          jsr       (A3)
0000668A  584F      11464          addq.w    #4,A7
0000668C  2400      11465          move.l    D0,D2
0000668E  2F02      11466          move.l    D2,-(A7)
00006690  4EB8 58B8 11467          jsr       _tolower
00006694  584F      11468          addq.w    #4,A7
00006696  0C80 0000 11469          cmp.l     #120,D0
0000669A  0078      
0000669C  6604      11470          bne.s     doscan_85
0000669E  7678      11471          moveq     #120,D3
000066A0  6010      11472          bra.s     doscan_86
                    11473   doscan_85:
000066A2  53AE FFE4 11474          subq.l    #1,-28(A6)
000066A6  2F02      11475          move.l    D2,-(A7)
000066A8  2F05      11476          move.l    D5,-(A7)
000066AA  4EB8 60E2 11477          jsr       @doscan_putback
000066AE  504F      11478          addq.w    #8,A7
000066B0  766F      11479          moveq     #111,D3
                    11480   doscan_86:
000066B2  52AE FFE4 11481          addq.l    #1,-28(A6)
000066B6  6010      11482          bra.s     doscan_84
                    11483   doscan_83:
000066B8  53AE FFE4 11484          subq.l    #1,-28(A6)
000066BC  2F02      11485          move.l    D2,-(A7)
000066BE  2F05      11486          move.l    D5,-(A7)
000066C0  4EB8 60E2 11487          jsr       @doscan_putback
000066C4  504F      11488          addq.w    #8,A7
000066C6  7664      11489          moveq     #100,D3
                    11490   doscan_84:
000066C8  0C83 0000 11491          cmp.l     #100,D3
000066CC  0064      
000066CE  671A      11492          beq.s     doscan_89
000066D0  0C83 0000 11493          cmp.l     #117,D3
000066D4  0075      
000066D6  6712      11494          beq.s     doscan_89
000066D8  0C83 0000 11495          cmp.l     #120,D3
000066DC  0078      
000066DE  670A      11496          beq.s     doscan_89
000066E0  0C83 0000 11497          cmp.l     #111,D3
000066E4  006F      
000066E6  6600 01C4 11498          bne       doscan_87
                    11499   doscan_89:
000066EA  486E FFE4 11500          pea       -28(A6)
000066EE  2F05      11501          move.l    D5,-(A7)
000066F0  4EB8 6146 11502          jsr       @doscan_space
000066F4  504F      11503          addq.w    #8,A7
000066F6  2400      11504          move.l    D0,D2
000066F8  2D7C 0000 11505          move.l    #10,-4(A6)
000066FC  000A FFFC 
00006700  0C83 0000 11506          cmp.l     #120,D3
00006704  0078      
00006706  6608      11507          bne.s     doscan_90
00006708  2D7C 0000 11508          move.l    #16,-4(A6)
0000670C  0010 FFFC 
                    11509   doscan_90:
00006710  0C83 0000 11510          cmp.l     #111,D3
00006714  006F      
00006716  6608      11511          bne.s     doscan_92
00006718  2D7C 0000 11512          move.l    #8,-4(A6)
0000671C  0008 FFFC 
                    11513   doscan_92:
00006720  4A86      11514          tst.l     D6
00006722  660A      11515          bne.s     doscan_94
00006724  206E 0010 11516          move.l    16(A6),A0
00006728  58AE 0010 11517          addq.l    #4,16(A6)
0000672C  2E10      11518          move.l    (A0),D7
                    11519   doscan_94:
0000672E  42AE FFE0 11520          clr.l     -32(A6)
00006732  52AE FFE4 11521          addq.l    #1,-28(A6)
00006736  0C83 0000 11522          cmp.l     #117,D3
0000673A  0075      
0000673C  6720      11523          beq.s     doscan_96
0000673E  0C82 0000 11524          cmp.l     #45,D2
00006742  002D      
00006744  6618      11525          bne.s     doscan_96
00006746  2F05      11526          move.l    D5,-(A7)
00006748  4E93      11527          jsr       (A3)
0000674A  584F      11528          addq.w    #4,A7
0000674C  2400      11529          move.l    D0,D2
0000674E  52AE FFE4 11530          addq.l    #1,-28(A6)
00006752  2D7C 0000 11531          move.l    #1,-32(A6)
00006756  0001 FFE0 
0000675A  387C 0001 11532          move.w    #1,A4
                    11533   doscan_96:
0000675E  3A7C 0000 11534          move.w    #0,A5
00006762  0C82 FFFF 11535          cmp.l     #-1,D2
00006766  FFFF      
00006768  6612      11536          bne.s     doscan_98
0000676A  4A84      11537          tst.l     D4
0000676C  6704      11538          beq.s     doscan_100
0000676E  2004      11539          move.l    D4,D0
00006770  6006      11540          bra.s     doscan_101
                    11541   doscan_100:
00006772  70FF      11542          moveq     #-1,D0
00006774  4880      11543          ext.w     D0
00006776  48C0      11544          ext.l     D0
                    11545   doscan_101:
00006778  6000 01BE 11546          bra       doscan_15
                    11547   doscan_98:
0000677C  200A      11548          move.l    A2,D0
0000677E  534A      11549          subq.w    #1,A2
00006780  4A80      11550          tst.l     D0
00006782  6700 00A4 11551          beq       doscan_104
00006786  0C83 0000 11552          cmp.l     #120,D3
0000678A  0078      
0000678C  6620      11553          bne.s     doscan_106
0000678E  2F02      11554          move.l    D2,-(A7)
00006790  4EB8 591C 11555          jsr       _toupper
00006794  584F      11556          addq.w    #4,A7
00006796  0C80 0000 11557          cmp.l     #65,D0
0000679A  0041      
0000679C  6D10      11558          blt.s     doscan_106
0000679E  2F02      11559          move.l    D2,-(A7)
000067A0  4EB8 591C 11560          jsr       _toupper
000067A4  584F      11561          addq.w    #4,A7
000067A6  0C80 0000 11562          cmp.l     #70,D0
000067AA  0046      
000067AC  6F1C      11563          ble.s     doscan_105
                    11564   doscan_106:
000067AE  2002      11565          move.l    D2,D0
000067B0  5280      11566          addq.l    #1,D0
000067B2  41F9 0000 11567          lea       __ctype.L,A0
000067B6  85F0      
000067B8  1030 0800 11568          move.b    0(A0,D0.L),D0
000067BC  C03C 0004 11569          and.b     #4,D0
000067C0  C0BC 0000 11570          and.l     #255,D0
000067C4  00FF      
000067C6  6700 0060 11571          beq       doscan_104
                    11572   doscan_105:
000067CA  2002      11573          move.l    D2,D0
000067CC  5280      11574          addq.l    #1,D0
000067CE  41F9 0000 11575          lea       __ctype.L,A0
000067D2  85F0      
000067D4  1030 0800 11576          move.b    0(A0,D0.L),D0
000067D8  C03C 0004 11577          and.b     #4,D0
000067DC  661C      11578          bne.s     doscan_107
000067DE  2F02      11579          move.l    D2,-(A7)
000067E0  4EB8 591C 11580          jsr       _toupper
000067E4  584F      11581          addq.w    #4,A7
000067E6  0480 0000 11582          sub.l     #65,D0
000067EA  0041      
000067EC  0680 0000 11583          add.l     #10,D0
000067F0  000A      
000067F2  0680 0000 11584          add.l     #48,D0
000067F6  0030      
000067F8  2400      11585          move.l    D0,D2
                    11586   doscan_107:
000067FA  2F0D      11587          move.l    A5,-(A7)
000067FC  2F2E FFFC 11588          move.l    -4(A6),-(A7)
00006800  4EB9 0000 11589          jsr       LMUL
00006804  6AB4      
00006806  2017      11590          move.l    (A7),D0
00006808  504F      11591          addq.w    #8,A7
0000680A  D082      11592          add.l     D2,D0
0000680C  0480 0000 11593          sub.l     #48,D0
00006810  0030      
00006812  2A40      11594          move.l    D0,A5
00006814  2F05      11595          move.l    D5,-(A7)
00006816  4E93      11596          jsr       (A3)
00006818  584F      11597          addq.w    #4,A7
0000681A  2400      11598          move.l    D0,D2
0000681C  52AE FFE4 11599          addq.l    #1,-28(A6)
00006820  387C 0001 11600          move.w    #1,A4
00006824  6000 FF56 11601          bra       doscan_98
                    11602   doscan_104:
00006828  0C82 FFFF 11603          cmp.l     #-1,D2
0000682C  FFFF      
0000682E  671A      11604          beq.s     doscan_109
00006830  2F02      11605          move.l    D2,-(A7)
00006832  2F05      11606          move.l    D5,-(A7)
00006834  4EB8 60E2 11607          jsr       @doscan_putback
00006838  504F      11608          addq.w    #8,A7
0000683A  53AE FFE4 11609          subq.l    #1,-28(A6)
0000683E  200C      11610          move.l    A4,D0
00006840  6606      11611          bne.s     doscan_111
00006842  2004      11612          move.l    D4,D0
00006844  6000 00F2 11613          bra       doscan_15
                    11614   doscan_111:
00006848  6016      11615          bra.s     doscan_113
                    11616   doscan_109:
0000684A  200C      11617          move.l    A4,D0
0000684C  6612      11618          bne.s     doscan_113
0000684E  4A84      11619          tst.l     D4
00006850  6704      11620          beq.s     doscan_115
00006852  2004      11621          move.l    D4,D0
00006854  6006      11622          bra.s     doscan_116
                    11623   doscan_115:
00006856  70FF      11624          moveq     #-1,D0
00006858  4880      11625          ext.w     D0
0000685A  48C0      11626          ext.l     D0
                    11627   doscan_116:
0000685C  6000 00DA 11628          bra       doscan_15
                    11629   doscan_113:
00006860  4AAE FFE0 11630          tst.l     -32(A6)
00006864  6706      11631          beq.s     doscan_117
00006866  200D      11632          move.l    A5,D0
00006868  4480      11633          neg.l     D0
0000686A  2A40      11634          move.l    D0,A5
                    11635   doscan_117:
0000686C  4A86      11636          tst.l     D6
0000686E  661E      11637          bne.s     doscan_119
00006870  4AAE FFE8 11638          tst.l     -24(A6)
00006874  6706      11639          beq.s     doscan_121
00006876  2047      11640          move.l    D7,A0
00006878  208D      11641          move.l    A5,(A0)
0000687A  6010      11642          bra.s     doscan_124
                    11643   doscan_121:
0000687C  4AAE FFEC 11644          tst.l     -20(A6)
00006880  6706      11645          beq.s     doscan_123
00006882  2047      11646          move.l    D7,A0
00006884  308D      11647          move.w    A5,(A0)
00006886  6004      11648          bra.s     doscan_124
                    11649   doscan_123:
00006888  2047      11650          move.l    D7,A0
0000688A  208D      11651          move.l    A5,(A0)
                    11652   doscan_124:
0000688C  5284      11653          addq.l    #1,D4
                    11654   doscan_119:
0000688E  0C82 FFFF 11655          cmp.l     #-1,D2
00006892  FFFF      
00006894  6612      11656          bne.s     doscan_125
00006896  4A84      11657          tst.l     D4
00006898  6704      11658          beq.s     doscan_127
0000689A  2004      11659          move.l    D4,D0
0000689C  6006      11660          bra.s     doscan_128
                    11661   doscan_127:
0000689E  70FF      11662          moveq     #-1,D0
000068A0  4880      11663          ext.w     D0
000068A2  48C0      11664          ext.l     D0
                    11665   doscan_128:
000068A4  6000 0092 11666          bra       doscan_15
                    11667   doscan_125:
000068A8  6000 0088 11668          bra       doscan_141
                    11669   doscan_87:
000068AC  0C83 0000 11670          cmp.l     #37,D3
000068B0  0025      
000068B2  6600 0044 11671          bne       doscan_129
000068B6  2F05      11672          move.l    D5,-(A7)
000068B8  4E93      11673          jsr       (A3)
000068BA  584F      11674          addq.w    #4,A7
000068BC  2400      11675          move.l    D0,D2
000068BE  0C82 FFFF 11676          cmp.l     #-1,D2
000068C2  FFFF      
000068C4  6612      11677          bne.s     doscan_131
000068C6  4A84      11678          tst.l     D4
000068C8  6704      11679          beq.s     doscan_133
000068CA  2004      11680          move.l    D4,D0
000068CC  6006      11681          bra.s     doscan_134
                    11682   doscan_133:
000068CE  70FF      11683          moveq     #-1,D0
000068D0  4880      11684          ext.w     D0
000068D2  48C0      11685          ext.l     D0
                    11686   doscan_134:
000068D4  6000 0062 11687          bra       doscan_15
                    11688   doscan_131:
000068D8  52AE FFE4 11689          addq.l    #1,-28(A6)
000068DC  B483      11690          cmp.l     D3,D2
000068DE  6714      11691          beq.s     doscan_135
000068E0  2F02      11692          move.l    D2,-(A7)
000068E2  2F05      11693          move.l    D5,-(A7)
000068E4  4EB8 60E2 11694          jsr       @doscan_putback
000068E8  504F      11695          addq.w    #8,A7
000068EA  53AE FFE4 11696          subq.l    #1,-28(A6)
000068EE  2004      11697          move.l    D4,D0
000068F0  6000 0046 11698          bra       doscan_15
                    11699   doscan_135:
000068F4  6000 003C 11700          bra       doscan_141
                    11701   doscan_129:
000068F8  2F05      11702          move.l    D5,-(A7)
000068FA  4E93      11703          jsr       (A3)
000068FC  584F      11704          addq.w    #4,A7
000068FE  2400      11705          move.l    D0,D2
00006900  52AE FFE4 11706          addq.l    #1,-28(A6)
00006904  0C82 FFFF 11707          cmp.l     #-1,D2
00006908  FFFF      
0000690A  6610      11708          bne.s     doscan_137
0000690C  4A84      11709          tst.l     D4
0000690E  6704      11710          beq.s     doscan_139
00006910  2004      11711          move.l    D4,D0
00006912  6006      11712          bra.s     doscan_140
                    11713   doscan_139:
00006914  70FF      11714          moveq     #-1,D0
00006916  4880      11715          ext.w     D0
00006918  48C0      11716          ext.l     D0
                    11717   doscan_140:
0000691A  601C      11718          bra.s     doscan_15
                    11719   doscan_137:
0000691C  B483      11720          cmp.l     D3,D2
0000691E  6712      11721          beq.s     doscan_141
00006920  2F02      11722          move.l    D2,-(A7)
00006922  2F05      11723          move.l    D5,-(A7)
00006924  4EB8 60E2 11724          jsr       @doscan_putback
00006928  504F      11725          addq.w    #8,A7
0000692A  53AE FFE4 11726          subq.l    #1,-28(A6)
0000692E  2004      11727          move.l    D4,D0
00006930  6006      11728          bra.s     doscan_15
                    11729   doscan_141:
00006932  6000 F9F4 11730          bra       doscan_3
                    11731   doscan_5:
00006936  2004      11732          move.l    D4,D0
                    11733   doscan_15:
00006938  4CDF 3CFC 11734          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000693C  4E5E      11735          unlk      A6
0000693E  4E75      11736          rts
                    11737   @itoa_convert:
00006940  4E56 0000 11738          link      A6,#0
00006944  48E7 3C00 11739          movem.l   D2/D3/D4/D5,-(A7)
00006948  242E 0008 11740          move.l    8(A6),D2
0000694C  262E 0010 11741          move.l    16(A6),D3
00006950  2A2E 000C 11742          move.l    12(A6),D5
00006954  2F05      11743          move.l    D5,-(A7)
00006956  2F03      11744          move.l    D3,-(A7)
00006958  4EB8 5776 11745          jsr       ULDIV
0000695C  202F 0004 11746          move.l    4(A7),D0
00006960  504F      11747          addq.w    #8,A7
00006962  2800      11748          move.l    D0,D4
00006964  BA83      11749          cmp.l     D3,D5
00006966  651C      11750          blo.s     @itoa_convert_1
00006968  2F03      11751          move.l    D3,-(A7)
0000696A  2F05      11752          move.l    D5,-(A7)
0000696C  2F03      11753          move.l    D3,-(A7)
0000696E  4EB8 5776 11754          jsr       ULDIV
00006972  2217      11755          move.l    (A7),D1
00006974  504F      11756          addq.w    #8,A7
00006976  2F01      11757          move.l    D1,-(A7)
00006978  2F02      11758          move.l    D2,-(A7)
0000697A  4EB8 6940 11759          jsr       @itoa_convert
0000697E  DEFC 000C 11760          add.w     #12,A7
00006982  2400      11761          move.l    D0,D2
                    11762   @itoa_convert_1:
00006984  0C84 0000 11763          cmp.l     #9,D4
00006988  0009      
0000698A  6E0E      11764          bgt.s     @itoa_convert_3
0000698C  2004      11765          move.l    D4,D0
0000698E  7230      11766          moveq     #48,D1
00006990  C2BC 0000 11767          and.l     #255,D1
00006994  00FF      
00006996  D081      11768          add.l     D1,D0
00006998  6012      11769          bra.s     @itoa_convert_4
                    11770   @itoa_convert_3:
0000699A  2004      11771          move.l    D4,D0
0000699C  7261      11772          moveq     #97,D1
0000699E  C2BC 0000 11773          and.l     #255,D1
000069A2  00FF      
000069A4  D081      11774          add.l     D1,D0
000069A6  0480 0000 11775          sub.l     #10,D0
000069AA  000A      
                    11776   @itoa_convert_4:
000069AC  2042      11777          move.l    D2,A0
000069AE  1080      11778          move.b    D0,(A0)
000069B0  2002      11779          move.l    D2,D0
000069B2  5280      11780          addq.l    #1,D0
000069B4  4CDF 003C 11781          movem.l   (A7)+,D2/D3/D4/D5
000069B8  4E5E      11782          unlk      A6
000069BA  4E75      11783          rts
                    11784   _ltoa:
000069BC  4E56 0000 11785          link      A6,#0
000069C0  48E7 3C00 11786          movem.l   D2/D3/D4/D5,-(A7)
000069C4  242E 0008 11787          move.l    8(A6),D2
000069C8  262E 000C 11788          move.l    12(A6),D3
000069CC  2A2E 0010 11789          move.l    16(A6),D5
000069D0  2803      11790          move.l    D3,D4
000069D2  0C85 0000 11791          cmp.l     #2,D5
000069D6  0002      
000069D8  6D08      11792          blt.s     ltoa_3
000069DA  0C85 0000 11793          cmp.l     #36,D5
000069DE  0024      
000069E0  6F06      11794          ble.s     ltoa_1
                    11795   ltoa_3:
000069E2  2003      11796          move.l    D3,D0
000069E4  6000 0052 11797          bra       ltoa_4
                    11798   ltoa_1:
000069E8  0C85 0000 11799          cmp.l     #10,D5
000069EC  000A      
000069EE  6600 0032 11800          bne       ltoa_5
000069F2  0C82 0000 11801          cmp.l     #0,D2
000069F6  0000      
000069F8  6C28      11802          bge.s     ltoa_5
000069FA  2002      11803          move.l    D2,D0
000069FC  4480      11804          neg.l     D0
000069FE  2400      11805          move.l    D0,D2
00006A00  0C82 0000 11806          cmp.l     #0,D2
00006A04  0000      
00006A06  6C12      11807          bge.s     ltoa_7
00006A08  4879 0000 11808          pea       @itoa_1.L
00006A0C  85E4      
00006A0E  2F03      11809          move.l    D3,-(A7)
00006A10  4EB8 5766 11810          jsr       _strcpy
00006A14  504F      11811          addq.w    #8,A7
00006A16  2003      11812          move.l    D3,D0
00006A18  601E      11813          bra.s     ltoa_4
                    11814   ltoa_7:
00006A1A  2044      11815          move.l    D4,A0
00006A1C  5284      11816          addq.l    #1,D4
00006A1E  10BC 002D 11817          move.b    #45,(A0)
                    11818   ltoa_5:
00006A22  2F05      11819          move.l    D5,-(A7)
00006A24  2F02      11820          move.l    D2,-(A7)
00006A26  2F04      11821          move.l    D4,-(A7)
00006A28  4EB8 6940 11822          jsr       @itoa_convert
00006A2C  DEFC 000C 11823          add.w     #12,A7
00006A30  2800      11824          move.l    D0,D4
00006A32  2044      11825          move.l    D4,A0
00006A34  4210      11826          clr.b     (A0)
00006A36  2003      11827          move.l    D3,D0
                    11828   ltoa_4:
00006A38  4CDF 003C 11829          movem.l   (A7)+,D2/D3/D4/D5
00006A3C  4E5E      11830          unlk      A6
00006A3E  4E75      11831          rts
                    11832   _ultoa:
00006A40  4E56 0000 11833          link      A6,#0
00006A44  48E7 3800 11834          movem.l   D2/D3/D4,-(A7)
00006A48  262E 0010 11835          move.l    16(A6),D3
00006A4C  282E 000C 11836          move.l    12(A6),D4
00006A50  2404      11837          move.l    D4,D2
00006A52  0C83 0000 11838          cmp.l     #2,D3
00006A56  0002      
00006A58  6D08      11839          blt.s     ultoa_3
00006A5A  0C83 0000 11840          cmp.l     #36,D3
00006A5E  0024      
00006A60  6F04      11841          ble.s     ultoa_1
                    11842   ultoa_3:
00006A62  2004      11843          move.l    D4,D0
00006A64  6018      11844          bra.s     ultoa_4
                    11845   ultoa_1:
00006A66  2F03      11846          move.l    D3,-(A7)
00006A68  2F2E 0008 11847          move.l    8(A6),-(A7)
00006A6C  2F02      11848          move.l    D2,-(A7)
00006A6E  4EB8 6940 11849          jsr       @itoa_convert
00006A72  DEFC 000C 11850          add.w     #12,A7
00006A76  2400      11851          move.l    D0,D2
00006A78  2042      11852          move.l    D2,A0
00006A7A  4210      11853          clr.b     (A0)
00006A7C  2004      11854          move.l    D4,D0
                    11855   ultoa_4:
00006A7E  4CDF 001C 11856          movem.l   (A7)+,D2/D3/D4
00006A82  4E5E      11857          unlk      A6
00006A84  4E75      11858          rts
                    11859   _itoa:
00006A86  4E56 0000 11860          link      A6,#0
00006A8A  2F2E 0010 11861          move.l    16(A6),-(A7)
00006A8E  2F2E 000C 11862          move.l    12(A6),-(A7)
00006A92  2F2E 0008 11863          move.l    8(A6),-(A7)
00006A96  4EB8 69BC 11864          jsr       _ltoa
00006A9A  DEFC 000C 11865          add.w     #12,A7
00006A9E  4E5E      11866          unlk      A6
00006AA0  4E75      11867          rts
                    11868   ULMUL:
00006AA2  4E56 0000 11869          link    A6,#0
00006AA6  48E7 C000 11870          movem.l D0/D1,-(A7)
00006AAA  222E 0008 11871          move.l  8(A6),D1
00006AAE  202E 000C 11872          move.l  12(A6),D0
00006AB2  602C      11873          bra.s   lmul_3
                    11874   LMUL:
00006AB4  4E56 0000 11875          link    A6,#0
00006AB8  48E7 C000 11876          movem.l D0/D1,-(A7)
00006ABC  222E 0008 11877          move.l  8(A6),D1
00006AC0  202E 000C 11878          move.l  12(A6),D0
00006AC4  4A80      11879          tst.l   D0
00006AC6  6A0A      11880          bpl.s   lmul_1
00006AC8  4480      11881          neg.l   D0
00006ACA  4A81      11882          tst.l   D1
00006ACC  6A0A      11883          bpl.s   lmul_2
00006ACE  4481      11884          neg.l   D1
00006AD0  600E      11885          bra.s   lmul_3
                    11886   lmul_1:
00006AD2  4A81      11887          tst.l   D1
00006AD4  6A0A      11888          bpl.s   lmul_3
00006AD6  4481      11889          neg.l   D1
                    11890   lmul_2:
00006AD8  6114      11891          bsr.s   domul
00006ADA  4481      11892          neg.l   D1
00006ADC  4080      11893          negx.l  D0
00006ADE  6002      11894          bra.s   lmul_4
                    11895   lmul_3:
00006AE0  610C      11896          bsr.s   domul
                    11897   lmul_4:
00006AE2  2D41 0008 11898          move.l  D1,8(A6)
00006AE6  4CDF 0003 11899          movem.l (A7)+,D0/D1
00006AEA  4E5E      11900          unlk    A6
00006AEC  4E75      11901          rts
                    11902   domul:
00006AEE  0C81 0000 11903          cmpi.l  #$FFFF,D1
00006AF2  FFFF      
00006AF4  620C      11904          bhi.s   domul_1
00006AF6  0C80 0000 11905          cmpi.l  #$FFFF,D0
00006AFA  FFFF      
00006AFC  620E      11906          bhi.s   domul_2
00006AFE  C2C0      11907          mulu    D0,D1
00006B00  4E75      11908          rts
                    11909   domul_1:
00006B02  0C80 0000 11910          cmpi.l  #$FFFF,D0
00006B06  FFFF      
00006B08  6218      11911          bhi.s   domul_4
00006B0A  6002      11912          bra.s   domul_3
                    11913   domul_2
00006B0C  C141      11914          exg     D0,D1
                    11915   domul_3:
00006B0E  2F02      11916          move.l  D2,-(A7)
00006B10  2401      11917          move.l  D1,D2
00006B12  4842      11918          swap    D2
00006B14  C2C0      11919          mulu    D0,D1
00006B16  C4C0      11920          mulu    D0,D2
00006B18  4842      11921          swap    D2
00006B1A  4242      11922          clr.w   D2
00006B1C  D282      11923          add.l   D2,D1
00006B1E  241F      11924          move.l  (A7)+,D2
00006B20  4E75      11925          rts
                    11926   domul_4:
00006B22  48E7 3000 11927          movem.l D2/D3,-(A7)
00006B26  2401      11928          move.l  D1,D2
00006B28  2601      11929          move.l  D1,D3
00006B2A  C2C0      11930          mulu    D0,D1
00006B2C  4842      11931          swap    D2
00006B2E  C4C0      11932          mulu    D0,D2
00006B30  4840      11933          swap    D0
00006B32  C6C0      11934          mulu    D0,D3
00006B34  D483      11935          add.l   D3,D2
00006B36  4842      11936          swap    D2
00006B38  4242      11937          clr.w   D2
00006B3A  D282      11938          add.l   D2,D1
00006B3C  4CDF 000C 11939          movem.l (A7)+,D2/D3
00006B40  4E75      11940          rts
                    11941   _strlen:
00006B42  206F 0004 11942          move.l    (4,A7),A0
00006B46  2248      11943          move.l    A0,A1
                    11944   strlen_1:
00006B48  4A19      11945          tst.b     (A1)+
00006B4A  66FC      11946          bne       strlen_1
00006B4C  2009      11947          move.l    A1,D0
00006B4E  9088      11948          sub.l     A0,D0
00006B50  5380      11949          subq.l    #1,D0
00006B52  4E75      11950          rts
                    11951   _gets:
00006B54  4E56 0000 11952          link      A6,#0
00006B58  48E7 3820 11953          movem.l   D2/D3/D4/A2,-(A7)
00006B5C  45F8 5854 11954          lea       _putch.L,A2
00006B60  282E 0008 11955          move.l    8(A6),D4
00006B64  2404      11956          move.l    D4,D2
                    11957   gets_1:
00006B66  4EB8 5880 11958          jsr       _getch
00006B6A  2600      11959          move.l    D0,D3
00006B6C  0C80 0000 11960          cmp.l     #10,D0
00006B70  000A      
00006B72  6700 003C 11961          beq       gets_3
00006B76  0C83 0000 11962          cmp.l     #8,D3
00006B7A  0008      
00006B7C  6712      11963          beq.s     gets_4
00006B7E  2042      11964          move.l    D2,A0
00006B80  5282      11965          addq.l    #1,D2
00006B82  1083      11966          move.b    D3,(A0)
00006B84  4883      11967          ext.w     D3
00006B86  48C3      11968          ext.l     D3
00006B88  2F03      11969          move.l    D3,-(A7)
00006B8A  4E92      11970          jsr       (A2)
00006B8C  584F      11971          addq.w    #4,A7
00006B8E  601E      11972          bra.s     gets_6
                    11973   gets_4:
00006B90  B484      11974          cmp.l     D4,D2
00006B92  631A      11975          bls.s     gets_6
00006B94  4878 0008 11976          pea       8
00006B98  4E92      11977          jsr       (A2)
00006B9A  584F      11978          addq.w    #4,A7
00006B9C  4878 0020 11979          pea       32
00006BA0  4E92      11980          jsr       (A2)
00006BA2  584F      11981          addq.w    #4,A7
00006BA4  4878 0008 11982          pea       8
00006BA8  4E92      11983          jsr       (A2)
00006BAA  584F      11984          addq.w    #4,A7
00006BAC  5382      11985          subq.l    #1,D2
                    11986   gets_6:
00006BAE  60B6      11987          bra       gets_1
                    11988   gets_3:
00006BB0  4878 000A 11989          pea       10
00006BB4  4E92      11990          jsr       (A2)
00006BB6  584F      11991          addq.w    #4,A7
00006BB8  2042      11992          move.l    D2,A0
00006BBA  4210      11993          clr.b     (A0)
00006BBC  2004      11994          move.l    D4,D0
00006BBE  4CDF 041C 11995          movem.l   (A7)+,D2/D3/D4/A2
00006BC2  4E5E      11996          unlk      A6
00006BC4  4E75      11997          rts
                    11998   _ungetch:
00006BC6  4E56 0000 11999          link      A6,#0
00006BCA  23EE 0008 12000          move.l    8(A6),__ungetbuf.L
00006BCE  0803 00C0 
00006BD2  202E 0008 12001          move.l    8(A6),D0
00006BD6  4E5E      12002          unlk      A6
00006BD8  4E75      12003          rts
                    12004          section   const
                    12005   
                    12006   @m68kde~2_1:
00006BDA  0D0A 00   12007          dc.b      13,10,0
                    12008   @m68kde~2_2:
00006BDE  0D53 7769 12009          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00006BE2  7463 6865 
00006BE6  7320 5357 
00006BEA  5B        
00006BEB  372D 305D 12010          dc.b      55,45,48,93,32,61,32,0
00006BEF  203D 2000 
                    12011   @m68kde~2_3:
00006BF4  3000      12012          dc.b      48,0
                    12013   @m68kde~2_4:
00006BF6  3100      12014          dc.b      49,0
                    12015   @m68kde~2_5:
00006BF8  0D0A 456E 12016          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00006BFC  7465 7220 
00006C00  5374 6172 
00006C04  74        
00006C05  2041 6464 12017          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006C09  7265 7373 
00006C0D  3A20 00   
                    12018   @m68kde~2_6:
00006C10  0D0A 3C45 12019          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
00006C14  5343 3E20 
00006C18  3D20 4162 
00006C1C  6F72      
00006C1E  742C 2053 12020          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
00006C22  5041 4345 
00006C26  2074 6F20 
00006C2A  436F      
00006C2C  6E74 696E 12021          dc.b      110,116,105,110,117,101,0
00006C30  7565 00   
                    12022   @m68kde~2_7:
00006C34  0D0A 2530 12023          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
00006C38  3858 2020 
00006C3C  2530 3458 
00006C40  2020 20   
00006C43  2020 2020 12024          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
00006C47  2020 2020 
00006C4B  2020 2020 
00006C4F  2020 20   
00006C52  2020 2020 12025          dc.b      32,32,32,32,32,32,37,115,0
00006C56  2020 2573 
00006C5A  00        
                    12026   @m68kde~2_8:
00006C5C  0D0A 2530 12027          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006C60  3858 2020 
00006C64  2530 3458 
00006C68  2025 30   
00006C6B  3458 2020 12028          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
00006C6F  2020 2020 
00006C73  2020 2020 
00006C77  2020 20   
00006C7A  2020 2020 12029          dc.b      32,32,32,32,32,32,37,115,0
00006C7E  2020 2573 
00006C82  00        
                    12030   @m68kde~2_9:
00006C84  0D0A 2530 12031          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006C88  3858 2020 
00006C8C  2530 3458 
00006C90  2025 30   
00006C93  3458 2025 12032          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
00006C97  3034 5820 
00006C9B  2020 2020 
00006C9F  2020 20   
00006CA2  2020 2020 12033          dc.b      32,32,32,32,32,32,37,115,0
00006CA6  2020 2573 
00006CAA  00        
                    12034   @m68kde~2_10:
00006CAC  0D0A 2530 12035          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006CB0  3858 2020 
00006CB4  2530 3458 
00006CB8  2025 30   
00006CBB  3458 2025 12036          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
00006CBF  3034 5820 
00006CC3  2530 3458 
00006CC7  2020 20   
00006CCA  2020 2020 12037          dc.b      32,32,32,32,32,32,37,115,0
00006CCE  2020 2573 
00006CD2  00        
                    12038   @m68kde~2_11:
00006CD4  0D0A 2530 12039          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006CD8  3858 2020 
00006CDC  2530 3458 
00006CE0  2025 30   
00006CE3  3458 2025 12040          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
00006CE7  3034 5820 
00006CEB  2530 3458 
00006CEF  2025 30   
00006CF2  3458 2020 12041          dc.b      52,88,32,32,32,32,37,115,0
00006CF6  2020 2573 
00006CFA  00        
                    12042   @m68kde~2_12:
00006CFC  0D0A 4475 12043          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00006D00  6D70 204D 
00006D04  656D 6F72 
00006D08  79        
00006D09  2042 6C6F 12044          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00006D0D  636B 3A20 
00006D11  3C45 5343 
00006D15  3E20      
00006D17  746F 2041 12045          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00006D1B  626F 7274 
00006D1F  2C20 3C53 
00006D23  50        
00006D24  4143 453E 12046          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00006D28  2074 6F20 
00006D2C  436F 6E74 
00006D30  69        
00006D31  6E75 6500 12047          dc.b      110,117,101,0
                    12048   @m68kde~2_13:
00006D36  0D0A 2530 12049          dc.b      13,10,37,48,56,120,32,0
00006D3A  3878 2000 
                    12050   @m68kde~2_14:
00006D3E  2530 3258 12051          dc.b      37,48,50,88,0
00006D42  00        
                    12052   @m68kde~2_15:
00006D44  2020 00   12053          dc.b      32,32,0
                    12054   @m68kde~2_16:
00006D48  0D0A 4669 12055          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00006D4C  6C6C 204D 
00006D50  656D 6F72 
00006D54  79        
00006D55  2042 6C6F 12056          dc.b      32,66,108,111,99,107,0
00006D59  636B 00   
                    12057   @m68kde~2_17:
00006D5C  0D0A 456E 12058          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00006D60  7465 7220 
00006D64  456E 6420 
00006D68  41        
00006D69  6464 7265 12059          dc.b      100,100,114,101,115,115,58,32,0
00006D6D  7373 3A20 
00006D71  00        
                    12060   @m68kde~2_18:
00006D72  0D0A 456E 12061          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00006D76  7465 7220 
00006D7A  4669 6C6C 
00006D7E  20        
00006D7F  4461 7461 12062          dc.b      68,97,116,97,58,32,0
00006D83  3A20 00   
                    12063   @m68kde~2_19:
00006D86  0D0A 4669 12064          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00006D8A  6C6C 696E 
00006D8E  6720 4164 
00006D92  64        
00006D93  7265 7373 12065          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00006D97  6573 205B 
00006D9B  2425 3038 
00006D9F  58        
00006DA0  202D 2024 12066          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00006DA4  2530 3858 
00006DA8  5D20 7769 
00006DAC  7468      
00006DAE  2024 2530 12067          dc.b      32,36,37,48,50,88,0
00006DB2  3258 00   
                    12068   @m68kde~2_20:
00006DB6  0D0A 5573 12069          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00006DBA  6520 4879 
00006DBE  7065 7254 
00006DC2  65        
00006DC3  726D 696E 12070          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00006DC7  616C 2074 
00006DCB  6F20 5365 
00006DCF  6E64 2054 12071          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00006DD3  6578 7420 
00006DD7  4669 6C65 
00006DDB  2028 2E68 12072          dc.b      32,40,46,104,101,120,41,13,10,0
00006DDF  6578 290D 
00006DE3  0A00      
                    12073   @m68kde~2_21:
00006DE6  0D0A 4C6F 12074          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00006DEA  6164 2046 
00006DEE  6169 6C65 
00006DF2  64        
00006DF3  2061 7420 12075          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00006DF7  4164 6472 
00006DFB  6573 7320 
00006DFF  3D        
00006E00  205B 2425 12076          dc.b      32,91,36,37,48,56,88,93,13,10,0
00006E04  3038 585D 
00006E08  0D0A 00   
                    12077   @m68kde~2_22:
00006E0C  0D0A 5375 12078          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00006E10  6363 6573 
00006E14  733A 2044 
00006E18  6F        
00006E19  776E 6C6F 12079          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00006E1D  6164 6564 
00006E21  2025 6420 
00006E25  6279 7465 12080          dc.b      98,121,116,101,115,13,10,0
00006E29  730D 0A00 
                    12081   @m68kde~2_23:
00006E2E  0D0A 4578 12082          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00006E32  616D 696E 
00006E36  6520 616E 
00006E3A  64        
00006E3B  2043 6861 12083          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00006E3F  6E67 6520 
00006E43  4D65 6D6F 
00006E47  72        
00006E48  7900      12084          dc.b      121,0
                    12085   @m68kde~2_24:
00006E4A  0D0A 3C45 12086          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00006E4E  5343 3E20 
00006E52  746F 2053 
00006E56  746F      
00006E58  702C 203C 12087          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00006E5C  5350 4143 
00006E60  453E 2074 
00006E64  6F20      
00006E66  4164 7661 12088          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00006E6A  6E63 652C 
00006E6E  2027 2D27 
00006E72  2074      
00006E74  6F20 476F 12089          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00006E78  2042 6163 
00006E7C  6B2C 203C 
00006E80  4441      
00006E82  5441 3E20 12090          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00006E86  746F 2063 
00006E8A  6861 6E67 
00006E8E  65        
00006E8F  00        12091          dc.b      0
                    12092   @m68kde~2_25:
00006E90  0D0A 456E 12093          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00006E94  7465 7220 
00006E98  4164 6472 
00006E9C  65        
00006E9D  7373 3A20 12094          dc.b      115,115,58,32,0
00006EA1  00        
                    12095   @m68kde~2_26:
00006EA2  0D0A 5B25 12096          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00006EA6  3038 785D 
00006EAA  203A 2025 
00006EAE  3032 78   
00006EB1  2020 00   12097          dc.b      32,32,0
                    12098   @m68kde~2_27:
00006EB4  0D0A 5761 12099          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00006EB8  726E 696E 
00006EBC  6720 4368 
00006EC0  61        
00006EC1  6E67 6520 12100          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00006EC5  4661 696C 
00006EC9  6564 3A20 
00006ECD  57        
00006ECE  726F 7465 12101          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00006ED2  205B 2530 
00006ED6  3278 5D2C 
00006EDA  20        
00006EDB  5265 6164 12102          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00006EDF  205B 2530 
00006EE3  3278 5D00 
                    12103   @m68kde~2_28:
00006EE8  0D0A 4C6F 12104          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00006EEC  6164 696E 
00006EF0  6720 5072 
00006EF4  6F        
00006EF5  6772 616D 12105          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00006EF9  2046 726F 
00006EFD  6D20 5350 
00006F01  49        
00006F02  2046 6C61 12106          dc.b      32,70,108,97,115,104,46,46,46,46,0
00006F06  7368 2E2E 
00006F0A  2E2E 00   
                    12107   @m68kde~2_29:
00006F0E  2425 3038 12108          dc.b      36,37,48,56,88,32,32,0
00006F12  5820 2000 
                    12109   @m68kde~2_30:
00006F16  2000      12110          dc.b      32,0
                    12111   @m68kde~2_31:
00006F18  2E00      12112          dc.b      46,0
                    12113   @m68kde~2_32:
00006F1A  2563 00   12114          dc.b      37,99,0
                    12115   @m68kde~2_33:
00006F1E  00        12116          dc.b      0
                    12117   @m68kde~2_34:
00006F20  0D0A 0D0A 12118          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00006F24  2044 3020 
00006F28  3D20 2425 
00006F2C  3038 58   
00006F2F  2020 4130 12119          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00006F33  203D 2024 
00006F37  2530 3858 
00006F3B  00        
                    12120   @m68kde~2_35:
00006F3C  0D0A 2044 12121          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00006F40  3120 3D20 
00006F44  2425 3038 
00006F48  5820 20   
00006F4B  4131 203D 12122          dc.b      65,49,32,61,32,36,37,48,56,88,0
00006F4F  2024 2530 
00006F53  3858 00   
                    12123   @m68kde~2_36:
00006F56  0D0A 2044 12124          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00006F5A  3220 3D20 
00006F5E  2425 3038 
00006F62  5820 20   
00006F65  4132 203D 12125          dc.b      65,50,32,61,32,36,37,48,56,88,0
00006F69  2024 2530 
00006F6D  3858 00   
                    12126   @m68kde~2_37:
00006F70  0D0A 2044 12127          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00006F74  3320 3D20 
00006F78  2425 3038 
00006F7C  5820 20   
00006F7F  4133 203D 12128          dc.b      65,51,32,61,32,36,37,48,56,88,0
00006F83  2024 2530 
00006F87  3858 00   
                    12129   @m68kde~2_38:
00006F8A  0D0A 2044 12130          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00006F8E  3420 3D20 
00006F92  2425 3038 
00006F96  5820 20   
00006F99  4134 203D 12131          dc.b      65,52,32,61,32,36,37,48,56,88,0
00006F9D  2024 2530 
00006FA1  3858 00   
                    12132   @m68kde~2_39:
00006FA4  0D0A 2044 12133          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00006FA8  3520 3D20 
00006FAC  2425 3038 
00006FB0  5820 20   
00006FB3  4135 203D 12134          dc.b      65,53,32,61,32,36,37,48,56,88,0
00006FB7  2024 2530 
00006FBB  3858 00   
                    12135   @m68kde~2_40:
00006FBE  0D0A 2044 12136          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00006FC2  3620 3D20 
00006FC6  2425 3038 
00006FCA  5820 20   
00006FCD  4136 203D 12137          dc.b      65,54,32,61,32,36,37,48,56,88,0
00006FD1  2024 2530 
00006FD5  3858 00   
                    12138   @m68kde~2_41:
00006FD8  0D0A 2044 12139          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00006FDC  3720 3D20 
00006FE0  2425 3038 
00006FE4  5820 20   
00006FE7  4137 203D 12140          dc.b      65,55,32,61,32,36,37,48,56,88,0
00006FEB  2024 2530 
00006FEF  3858 00   
                    12141   @m68kde~2_42:
00006FF2  0D0A 0D0A 12142          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00006FF6  5553 5020 
00006FFA  3D20 2425 
00006FFE  3038 58   
00007001  2020 2841 12143          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00007005  3729 2055 
00007009  7365 7220 
0000700D  5350      
0000700F  00        12144          dc.b      0
                    12145   @m68kde~2_43:
00007010  0D0A 5353 12146          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00007014  5020 3D20 
00007018  2425 3038 
0000701C  5820 20   
0000701F  2841 3729 12147          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00007023  2053 7570 
00007027  6572 7669 
0000702B  73        
0000702C  6F72 2053 12148          dc.b      111,114,32,83,80,0
00007030  5000      
                    12149   @m68kde~2_44:
00007032  0D0A 2053 12150          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00007036  5220 3D20 
0000703A  2425 3034 
0000703E  5820 20   
00007041  2000      12151          dc.b      32,0
                    12152   @m68kde~2_45:
00007044  2020 205B 12153          dc.b      32,32,32,91,0
00007048  00        
                    12154   @m68kde~2_46:
0000704A  0D0A 2050 12155          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
0000704E  4320 3D20 
00007052  2425 3038 
00007056  5820 20   
00007059  00        12156          dc.b      0
                    12157   @m68kde~2_47:
0000705A  2573 00   12158          dc.b      37,115,0
                    12159   @m68kde~2_48:
0000705E  5B42 5245 12160          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
00007062  414B 504F 
00007066  494E 545D 
0000706A  00        
                    12161   @m68kde~2_49:
0000706C  0D0A 5750 12162          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00007070  2564 203D 
00007074  2025 7300 
                    12163   @m68kde~2_50:
00007078  0D0A 0D0A 12164          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
0000707C  0D0A 0D0A 
00007080  0D0A 0D0A 
00007084  5369 6E   
00007087  676C 6520 12165          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
0000708B  5374 6570 
0000708F  2020 3A5B 
00007093  4F        
00007094  4E5D 00   12166          dc.b      78,93,0
                    12167   @m68kde~2_51:
00007098  0D0A 4272 12168          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000709C  6561 6B20 
000070A0  506F 696E 
000070A4  74        
000070A5  7320 3A5B 12169          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000070A9  4469 7361 
000070AD  626C 6564 
000070B1  5D        
000070B2  00        12170          dc.b      0
                    12171   @m68kde~2_52:
000070B4  0D0A 5072 12172          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000070B8  6573 7320 
000070BC  3C53 5041 
000070C0  4345      
000070C2  3E20 746F 12173          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000070C6  2045 7865 
000070CA  6375 7465 
000070CE  20        
000070CF  4E65 7874 12174          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000070D3  2049 6E73 
000070D7  7472 7563 
000070DB  7469 6F6E 12175          dc.b      116,105,111,110,0
000070DF  00        
                    12176   @m68kde~2_53:
000070E0  0D0A 5072 12177          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000070E4  6573 7320 
000070E8  3C45 5343 
000070EC  3E20      
000070EE  746F 2052 12178          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000070F2  6573 756D 
000070F6  6520 5072 
000070FA  6F67 7261 12179          dc.b      111,103,114,97,109,0
000070FE  6D00      
                    12180   @m68kde~2_54:
00007100  0D0A 496C 12181          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00007104  6C65 6761 
00007108  6C20 4461 
0000710C  74        
0000710D  6120 5265 12182          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00007111  6769 7374 
00007115  6572 203A 
00007119  20        
0000711A  5573 6520 12183          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
0000711E  4430 2D44 
00007122  372E 2E2E 
00007126  2E2E      
00007128  0D0A 00   12184          dc.b      13,10,0
                    12185   @m68kde~2_55:
0000712C  0D0A 4425 12186          dc.b      13,10,68,37,99,32,61,32,0
00007130  6320 3D20 
00007134  00        
                    12187   @m68kde~2_56:
00007136  0D0A 496C 12188          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
0000713A  6C65 6761 
0000713E  6C20 4164 
00007142  64        
00007143  7265 7373 12189          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00007147  2052 6567 
0000714B  6973 7465 
0000714F  7220 3A20 12190          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00007153  5573 6520 
00007157  4130 2D41 
0000715B  372E      
0000715D  2E2E 2E2E 12191          dc.b      46,46,46,46,13,10,0
00007161  0D0A 00   
                    12192   @m68kde~2_57:
00007164  0D0A 4125 12193          dc.b      13,10,65,37,99,32,61,32,0
00007168  6320 3D20 
0000716C  00        
                    12194   @m68kde~2_58:
0000716E  0D0A 5573 12195          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00007172  6572 2053 
00007176  5020 3D20 
0000717A  00        
                    12196   @m68kde~2_59:
0000717C  0D0A 496C 12197          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00007180  6C65 6761 
00007184  6C20 5265 
00007188  67        
00007189  6973 7465 12198          dc.b      105,115,116,101,114,46,46,46,46,0
0000718D  722E 2E2E 
00007191  2E00      
                    12199   @m68kde~2_60:
00007194  0D0A 5379 12200          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00007198  7374 656D 
0000719C  2053 5020 
000071A0  3D        
000071A1  2000      12201          dc.b      32,0
                    12202   @m68kde~2_61:
000071A4  0D0A 5043 12203          dc.b      13,10,80,67,32,61,32,0
000071A8  203D 2000 
                    12204   @m68kde~2_62:
000071AC  0D0A 5352 12205          dc.b      13,10,83,82,32,61,32,0
000071B0  203D 2000 
                    12206   @m68kde~2_63:
000071B4  0D0A 496C 12207          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000071B8  6C65 6761 
000071BC  6C20 5265 
000071C0  67        
000071C1  6973 7465 12208          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
000071C5  723A 2055 
000071C9  7365 2041 
000071CD  30        
000071CE  2D41 372C 12209          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
000071D2  2044 302D 
000071D6  4437 2C20 
000071DA  5353 50   
000071DD  2C20 5553 12210          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
000071E1  502C 2050 
000071E5  4320 6F72 
000071E9  2053      
000071EB  520D 0A00 12211          dc.b      82,13,10,0
                    12212   @m68kde~2_64:
000071F0  0D0A 0D0A 12213          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
000071F4  4E75 6D20 
000071F8  2020 2020 
000071FC  4164      
000071FE  6472 6573 12214          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00007202  7320 2020 
00007206  2020 2049 
0000720A  6E        
0000720B  7374 7275 12215          dc.b      115,116,114,117,99,116,105,111,110,0
0000720F  6374 696F 
00007213  6E00      
                    12216   @m68kde~2_65:
00007216  0D0A 2D2D 12217          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000721A  2D20 2020 
0000721E  2020 2D2D 
00007222  2D2D 2D   
00007225  2D2D 2D2D 12218          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00007229  2020 2020 
0000722D  2D2D 2D2D 
00007231  2D2D 2D   
00007234  2D2D 2D2D 12219          dc.b      45,45,45,45,0
00007238  00        
                    12220   @m68kde~2_66:
0000723A  0D0A 4E6F 12221          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
0000723E  2042 7265 
00007242  616B 506F 
00007246  69        
00007247  6E74 7320 12222          dc.b      110,116,115,32,83,101,116,0
0000724B  5365 7400 
                    12223   @m68kde~2_67:
00007250  0D0A 2533 12224          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00007254  6420 2020 
00007258  2020 2425 
0000725C  3038 78   
0000725F  00        12225          dc.b      0
                    12226   @m68kde~2_68:
00007260  2020 2020 12227          dc.b      32,32,32,32,37,115,0
00007264  2573 00   
                    12228   @m68kde~2_69:
00007268  0D0A 4E75 12229          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
0000726C  6D20 2020 
00007270  2020 4164 
00007274  6472      
00007276  6573 7300 12230          dc.b      101,115,115,0
                    12231   @m68kde~2_70:
0000727A  0D0A 2D2D 12232          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000727E  2D20 2020 
00007282  2020 2D2D 
00007286  2D2D 2D   
00007289  2D2D 2D2D 12233          dc.b      45,45,45,45,0
0000728D  00        
                    12234   @m68kde~2_71:
0000728E  0D0A 4E6F 12235          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00007292  2057 6174 
00007296  6368 506F 
0000729A  69        
0000729B  6E74 7320 12236          dc.b      110,116,115,32,83,101,116,0
0000729F  5365 7400 
                    12237   @m68kde~2_72:
000072A4  0D0A 456E 12238          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
000072A8  7465 7220 
000072AC  4272 6561 
000072B0  6B        
000072B1  2050 6F69 12239          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000072B5  6E74 204E 
000072B9  756D 6265 
000072BD  72        
000072BE  3A20 00   12240          dc.b      58,32,0
                    12241   @m68kde~2_73:
000072C2  0D0A 496C 12242          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
000072C6  6C65 6761 
000072CA  6C20 5261 
000072CE  6E        
000072CF  6765 203A 12243          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000072D3  2055 7365 
000072D7  2030 202D 
000072DB  2037      
000072DD  00        12244          dc.b      0
                    12245   @m68kde~2_74:
000072DE  0D0A 4272 12246          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000072E2  6561 6B20 
000072E6  506F 696E 
000072EA  74        
000072EB  2043 6C65 12247          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000072EF  6172 6564 
000072F3  2E2E 2E2E 
000072F7  2E        
000072F8  0D0A 00   12248          dc.b      13,10,0
                    12249   @m68kde~2_75:
000072FC  0D0A 4272 12250          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007300  6561 6B20 
00007304  506F 696E 
00007308  74        
00007309  2077 6173 12251          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
0000730D  6E27 7420 
00007311  5365 742E 
00007315  2E        
00007316  2E2E 2E00 12252          dc.b      46,46,46,0
                    12253   @m68kde~2_76:
0000731A  0D0A 456E 12254          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
0000731E  7465 7220 
00007322  5761 7463 
00007326  68        
00007327  2050 6F69 12255          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000732B  6E74 204E 
0000732F  756D 6265 
00007333  72        
00007334  3A20 00   12256          dc.b      58,32,0
                    12257   @m68kde~2_77:
00007338  0D0A 5761 12258          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000733C  7463 6820 
00007340  506F 696E 
00007344  74        
00007345  2043 6C65 12259          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00007349  6172 6564 
0000734D  2E2E 2E2E 
00007351  2E        
00007352  0D0A 00   12260          dc.b      13,10,0
                    12261   @m68kde~2_78:
00007356  0D0A 5761 12262          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000735A  7463 6820 
0000735E  506F 696E 
00007362  74        
00007363  2057 6173 12263          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00007367  206E 6F74 
0000736B  2053 6574 
0000736F  2E        
00007370  2E2E 2E2E 12264          dc.b      46,46,46,46,0
00007374  00        
                    12265   @m68kde~2_79:
00007376  0D0A 4E6F 12266          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
0000737A  2046 5245 
0000737E  4520 4272 
00007382  6561      
00007384  6B20 506F 12267          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00007388  696E 7473 
0000738C  2E2E 2E2E 
00007390  2E        
00007391  00        12268          dc.b      0
                    12269   @m68kde~2_80:
00007392  0D0A 4272 12270          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007396  6561 6B20 
0000739A  506F 696E 
0000739E  74        
0000739F  2041 6464 12271          dc.b      32,65,100,100,114,101,115,115,58,32,0
000073A3  7265 7373 
000073A7  3A20 00   
                    12272   @m68kde~2_81:
000073AA  0D0A 4572 12273          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000073AE  726F 7220 
000073B2  3A20 4272 
000073B6  65        
000073B7  616B 2050 12274          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000073BB  6F69 6E74 
000073BF  7320 4341 
000073C3  4E        
000073C4  4E4F 5420 12275          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
000073C8  6265 2073 
000073CC  6574 2061 
000073D0  74        
000073D1  204F 4444 12276          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000073D5  2061 6464 
000073D9  7265 7373 
000073DD  65        
000073DE  7300      12277          dc.b      115,0
                    12278   @m68kde~2_82:
000073E0  0D0A 4572 12279          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000073E4  726F 7220 
000073E8  3A20 4272 
000073EC  65        
000073ED  616B 2050 12280          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000073F1  6F69 6E74 
000073F5  7320 4341 
000073F9  4E        
000073FA  4E4F 5420 12281          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
000073FE  6265 2073 
00007402  6574 2066 
00007406  6F        
00007407  7220 524F 12282          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
0000740B  4D20 696E 
0000740F  2052 616E 
00007413  67        
00007414  6520 3A20 12283          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00007418  5B24 302D 
0000741C  2430 3030 
00007420  3037 46   
00007423  4646 5D00 12284          dc.b      70,70,93,0
                    12285   @m68kde~2_83:
00007428  0D0A 4572 12286          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
0000742C  726F 723A 
00007430  2042 7265 
00007434  61        
00007435  6B20 506F 12287          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00007439  696E 7420 
0000743D  416C 7265 
00007441  6164 7920 12288          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00007445  4578 6973 
00007449  7473 2061 
0000744D  74        
0000744E  2041 6464 12289          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00007452  7265 7373 
00007456  203A 2025 
0000745A  30        
0000745B  3878 0D0A 12290          dc.b      56,120,13,10,0
0000745F  00        
                    12291   @m68kde~2_84:
00007460  0D0A 4272 12292          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007464  6561 6B20 
00007468  506F 696E 
0000746C  74        
0000746D  2053 6574 12293          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00007471  2061 7420 
00007475  4164 6472 
00007479  65        
0000747A  7373 3A20 12294          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
0000747E  5B24 2530 
00007482  3878 5D2C 
00007486  2049      
00007488  6E73 7472 12295          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
0000748C  7563 7469 
00007490  6F6E 203D 
00007494  2025 7300 12296          dc.b      32,37,115,0
                    12297   @m68kde~2_85:
00007498  0D0A 4E6F 12298          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
0000749C  2046 5245 
000074A0  4520 5761 
000074A4  7463      
000074A6  6820 506F 12299          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
000074AA  696E 7473 
000074AE  2E2E 2E2E 
000074B2  2E        
000074B3  00        12300          dc.b      0
                    12301   @m68kde~2_86:
000074B4  0D0A 5761 12302          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000074B8  7463 6820 
000074BC  506F 696E 
000074C0  74        
000074C1  2041 6464 12303          dc.b      32,65,100,100,114,101,115,115,58,32,0
000074C5  7265 7373 
000074C9  3A20 00   
                    12304   @m68kde~2_87:
000074CC  0D0A 4572 12305          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
000074D0  726F 723A 
000074D4  2057 6174 
000074D8  63        
000074D9  6820 506F 12306          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000074DD  696E 7420 
000074E1  416C 7265 
000074E5  6164 7920 12307          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000074E9  5365 7420 
000074ED  6174 2041 
000074F1  64        
000074F2  6472 6573 12308          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
000074F6  7320 3A20 
000074FA  2530 3878 
000074FE  0D        
000074FF  0A00      12309          dc.b      10,0
                    12310   @m68kde~2_88:
00007502  0D0A 5761 12311          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00007506  7463 6820 
0000750A  506F 696E 
0000750E  74        
0000750F  2053 6574 12312          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00007513  2061 7420 
00007517  4164 6472 
0000751B  65        
0000751C  7373 3A20 12313          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00007520  5B24 2530 
00007524  3878 5D00 
                    12314   @m68kde~2_89:
00007528  0D0A 0D0A 12315          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
0000752C  0D0A 0D0A 
00007530  4042 5245 
00007534  414B 50   
00007537  4F49 4E54 12316          dc.b      79,73,78,84,0
0000753B  00        
                    12317   @m68kde~2_90:
0000753C  0D0A 5369 12318          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00007540  6E67 6C65 
00007544  2053 7465 
00007548  70        
00007549  203A 205B 12319          dc.b      32,58,32,91,79,78,93,0
0000754D  4F4E 5D00 
                    12320   @m68kde~2_91:
00007552  0D0A 4272 12321          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00007556  6561 6B50 
0000755A  6F69 6E74 
0000755E  73        
0000755F  203A 205B 12322          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00007563  456E 6162 
00007567  6C65 645D 
0000756B  00        
                    12323   @m68kde~2_92:
0000756C  0D0A 5072 12324          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00007570  6573 7320 
00007574  3C45 5343 
00007578  3E20      
0000757A  746F 2052 12325          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
0000757E  6573 756D 
00007582  6520 5573 
00007586  6572 2050 12326          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
0000758A  726F 6772 
0000758E  616D 0D0A 
00007592  00        
                    12327   @m68kde~2_93:
00007594  0D0A 556E 12328          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00007598  6B6E 6F77 
0000759C  6E20 436F 
000075A0  6D        
000075A1  6D61 6E64 12329          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
000075A5  2E2E 2E2E 
000075A9  2E0D 0A00 
                    12330   @m68kde~2_94:
000075AE  0D0A 5072 12331          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
000075B2  6F67 7261 
000075B6  6D20 456E 
000075BA  64        
000075BB  6564 2028 12332          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
000075BF  5452 4150 
000075C3  2023 3135 
000075C7  292E      
000075C9  2E2E 2E00 12333          dc.b      46,46,46,0
                    12334   @m68kde~2_95:
000075CE  0D0A 4B69 12335          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
000075D2  6C6C 2041 
000075D6  6C6C 2042 
000075DA  72        
000075DB  6561 6B20 12336          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
000075DF  506F 696E 
000075E3  7473 2E2E 
000075E7  2E        
000075E8  2879 2F6E 12337          dc.b      40,121,47,110,41,63,0
000075EC  293F 00   
                    12338   @m68kde~2_96:
000075F0  0D0A 4B69 12339          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
000075F4  6C6C 2041 
000075F8  6C6C 2057 
000075FC  61        
000075FD  7463 6820 12340          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00007601  506F 696E 
00007605  7473 2E2E 
00007609  2E        
0000760A  2879 2F6E 12341          dc.b      40,121,47,110,41,63,0
0000760E  293F 00   
                    12342   @m68kde~2_97:
00007612  0D0A 2D2D 12343          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00007616  2D2D 2D2D 
0000761A  2D2D 2D2D 
0000761E  2D2D 2D   
00007621  2D2D 2D2D 12344          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00007625  2D2D 2D2D 
00007629  2D2D 2D2D 
0000762D  2D2D 2D   
00007630  2D2D 2D2D 12345          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00007634  2D2D 2D2D 
00007638  2D2D 2D2D 
0000763C  2D2D 2D   
0000763F  2D2D 2D2D 12346          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00007643  2D2D 2D2D 
00007647  2D2D 2D2D 
0000764B  2D2D 2D   
0000764E  2D2D 2D2D 12347          dc.b      45,45,45,45,45,45,0
00007652  2D2D 00   
                    12348   @m68kde~2_98:
00007656  0D0A 2020 12349          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
0000765A  4465 6275 
0000765E  6767 6572 
00007662  20        
00007663  436F 6D6D 12350          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00007667  616E 6420 
0000766B  5375 6D6D 
0000766F  6172 7900 12351          dc.b      97,114,121,0
                    12352   @m68kde~2_99:
00007674  0D0A 2020 12353          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00007678  2E28 7265 
0000767C  6729 2020 
00007680  2020      
00007682  2020 202D 12354          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00007686  2043 6861 
0000768A  6E67 6520 
0000768E  5265      
00007690  6769 7374 12355          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00007694  6572 733A 
00007698  2065 2E67 
0000769C  2041 302D 12356          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
000076A0  4137 2C44 
000076A4  302D 4437 
000076A8  2C50 43   
000076AB  2C53 5350 12357          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
000076AF  2C55 5350 
000076B3  2C53 5200 
                    12358   @m68kde~2_100:
000076B8  0D0A 2020 12359          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
000076BC  4244 2F42 
000076C0  532F 4243 
000076C4  2F42 4B   
000076C7  2020 2D20 12360          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
000076CB  4272 6561 
000076CF  6B20 506F 
000076D3  69        
000076D4  6E74 3A20 12361          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
000076D8  4469 7370 
000076DC  6C61 792F 
000076E0  53        
000076E1  6574 2F43 12362          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
000076E5  6C65 6172 
000076E9  2F4B 696C 
000076ED  6C        
000076EE  00        12363          dc.b      0
                    12364   @m68kde~2_101:
000076F0  0D0A 2020 12365          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
000076F4  4320 2020 
000076F8  2020 2020 
000076FC  2020 20   
000076FF  2020 2D20 12366          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00007703  436F 7079 
00007707  2050 726F 
0000770B  67        
0000770C  7261 6D20 12367          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00007710  6672 6F6D 
00007714  2046 6C61 
00007718  73        
00007719  6820 746F 12368          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
0000771D  204D 6169 
00007721  6E20 4D65 
00007725  6D        
00007726  6F72 7900 12369          dc.b      111,114,121,0
                    12370   @m68kde~2_102:
0000772A  0D0A 2020 12371          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
0000772E  4449 2020 
00007732  2020 2020 
00007736  2020 20   
00007739  2020 2D20 12372          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
0000773D  4469 7361 
00007741  7373 656D 
00007745  62        
00007746  6C65 2050 12373          dc.b      108,101,32,80,114,111,103,114,97,109,0
0000774A  726F 6772 
0000774E  616D 00   
                    12374   @m68kde~2_103:
00007752  0D0A 2020 12375          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
00007756  4455 2020 
0000775A  2020 2020 
0000775E  2020 20   
00007761  2020 2D20 12376          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00007765  4475 6D70 
00007769  204D 656D 
0000776D  6F        
0000776E  7279 2043 12377          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00007772  6F6E 7465 
00007776  6E74 7320 
0000777A  746F 2053 12378          dc.b      116,111,32,83,99,114,101,101,110,0
0000777E  6372 6565 
00007782  6E00      
                    12379   @m68kde~2_104:
00007784  0D0A 2020 12380          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00007788  4520 2020 
0000778C  2020 2020 
00007790  2020 20   
00007793  2020 2D20 12381          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00007797  456E 7465 
0000779B  7220 5374 
0000779F  72        
000077A0  696E 6720 12382          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
000077A4  696E 746F 
000077A8  204D 656D 
000077AC  6F72 7900 12383          dc.b      111,114,121,0
                    12384   @m68kde~2_105:
000077B0  0D0A 2020 12385          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
000077B4  4620 2020 
000077B8  2020 2020 
000077BC  2020 20   
000077BF  2020 2D20 12386          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
000077C3  4669 6C6C 
000077C7  204D 656D 
000077CB  6F        
000077CC  7279 2077 12387          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
000077D0  6974 6820 
000077D4  4461 7461 
000077D8  00        
                    12388   @m68kde~2_106:
000077DA  0D0A 2020 12389          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
000077DE  4720 2020 
000077E2  2020 2020 
000077E6  2020 20   
000077E9  2020 2D20 12390          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
000077ED  476F 2050 
000077F1  726F 6772 
000077F5  61        
000077F6  6D20 5374 12391          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
000077FA  6172 7469 
000077FE  6E67 2061 
00007802  74        
00007803  2041 6464 12392          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00007807  7265 7373 
0000780B  3A20 2425 
0000780F  30        
00007810  3858 00   12393          dc.b      56,88,0
                    12394   @m68kde~2_107:
00007814  0D0A 2020 12395          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00007818  4C20 2020 
0000781C  2020 2020 
00007820  2020 20   
00007823  2020 2D20 12396          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00007827  4C6F 6164 
0000782B  2050 726F 
0000782F  67        
00007830  7261 6D20 12397          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00007834  282E 4845 
00007838  5820 6669 
0000783C  6C        
0000783D  6529 2066 12398          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00007841  726F 6D20 
00007845  4C61 7074 
00007849  6F        
0000784A  7000      12399          dc.b      112,0
                    12400   @m68kde~2_108:
0000784C  0D0A 2020 12401          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00007850  4D20 2020 
00007854  2020 2020 
00007858  2020 20   
0000785B  2020 2D20 12402          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
0000785F  4D65 6D6F 
00007863  7279 2045 
00007867  78        
00007868  616D 696E 12403          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
0000786C  6520 616E 
00007870  6420 4368 
00007874  61        
00007875  6E67 6500 12404          dc.b      110,103,101,0
                    12405   @m68kde~2_109:
0000787A  0D0A 2020 12406          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
0000787E  5020 2020 
00007882  2020 2020 
00007886  2020 20   
00007889  2020 2D20 12407          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
0000788D  5072 6F67 
00007891  7261 6D20 
00007895  46        
00007896  6C61 7368 12408          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
0000789A  204D 656D 
0000789E  6F72 7920 
000078A2  7769 7468 12409          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
000078A6  2055 7365 
000078AA  7220 5072 
000078AE  6F67 7261 12410          dc.b      111,103,114,97,109,0
000078B2  6D00      
                    12411   @m68kde~2_110:
000078B4  0D0A 2020 12412          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
000078B8  5220 2020 
000078BC  2020 2020 
000078C0  2020 20   
000078C3  2020 2D20 12413          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
000078C7  4469 7370 
000078CB  6C61 7920 
000078CF  36        
000078D0  3830 3030 12414          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
000078D4  2052 6567 
000078D8  6973 7465 
000078DC  72        
000078DD  7300      12415          dc.b      115,0
                    12416   @m68kde~2_111:
000078E0  0D0A 2020 12417          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
000078E4  5320 2020 
000078E8  2020 2020 
000078EC  2020 20   
000078EF  2020 2D20 12418          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
000078F3  546F 6767 
000078F7  6C65 204F 
000078FB  4E        
000078FC  2F4F 4646 12419          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00007900  2053 696E 
00007904  676C 6520 
00007908  53        
00007909  7465 7020 12420          dc.b      116,101,112,32,77,111,100,101,0
0000790D  4D6F 6465 
00007911  00        
                    12421   @m68kde~2_112:
00007912  0D0A 2020 12422          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00007916  544D 2020 
0000791A  2020 2020 
0000791E  2020 20   
00007921  2020 2D20 12423          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00007925  5465 7374 
00007929  204D 656D 
0000792D  6F        
0000792E  7279 00   12424          dc.b      114,121,0
                    12425   @m68kde~2_113:
00007932  0D0A 2020 12426          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00007936  5453 2020 
0000793A  2020 2020 
0000793E  2020 20   
00007941  2020 2D20 12427          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00007945  5465 7374 
00007949  2053 7769 
0000794D  74        
0000794E  6368 6573 12428          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00007952  3A20 5357 
00007956  372D 3000 
                    12429   @m68kde~2_114:
0000795A  0D0A 2020 12430          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
0000795E  5444 2020 
00007962  2020 2020 
00007966  2020 20   
00007969  2020 2D20 12431          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
0000796D  5465 7374 
00007971  2044 6973 
00007975  70        
00007976  6C61 7973 12432          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
0000797A  3A20 4C45 
0000797E  4473 2061 
00007982  6E        
00007983  6420 372D 12433          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00007987  5365 676D 
0000798B  656E 7400 
                    12434   @m68kde~2_115:
00007990  0D0A 2020 12435          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00007994  5744 2F57 
00007998  532F 5743 
0000799C  2F57 4B   
0000799F  2020 2D20 12436          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
000079A3  5761 7463 
000079A7  6820 506F 
000079AB  696E      
000079AD  743A 2044 12437          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
000079B1  6973 706C 
000079B5  6179 2F53 
000079B9  65        
000079BA  742F 436C 12438          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
000079BE  6561 722F 
000079C2  4B69 6C6C 
000079C6  00        
                    12439   @m68kde~2_116:
000079C8  0D0A 2300 12440          dc.b      13,10,35,0
                    12441   @m68kde~2_117:
000079CC  0D0A 5072 12442          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
000079D0  6F67 7261 
000079D4  6D20 5275 
000079D8  6E        
000079D9  6E69 6E67 12443          dc.b      110,105,110,103,46,46,46,46,46,0
000079DD  2E2E 2E2E 
000079E1  2E00      
                    12444   @m68kde~2_118:
000079E4  0D0A 5072 12445          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
000079E8  6573 7320 
000079EC  3C52 4553 
000079F0  4554      
000079F2  3E20 6275 12446          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
000079F6  7474 6F6E 
000079FA  203C 4B65 
000079FE  79        
000079FF  303E 206F 12447          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00007A03  6E20 4445 
00007A07  3120 746F 
00007A0B  2073      
00007A0D  746F 7000 12448          dc.b      116,111,112,0
                    12449   @m68kde~2_119:
00007A12  0D0A 4572 12450          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00007A16  726F 723A 
00007A1A  2050 7265 
00007A1E  73        
00007A1F  7320 2747 12451          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00007A23  2720 6669 
00007A27  7273 7420 
00007A2B  74        
00007A2C  6F20 7374 12452          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00007A30  6172 7420 
00007A34  7072 6F67 
00007A38  7261 6D00 12453          dc.b      114,97,109,0
                    12454   @m68kde~2_120:
00007A3C  0D0A 5369 12455          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00007A40  6E67 6C65 
00007A44  2053 7465 
00007A48  70        
00007A49  2020 3A5B 12456          dc.b      32,32,58,91,79,78,93,0
00007A4D  4F4E 5D00 
                    12457   @m68kde~2_121:
00007A52  0D0A 5072 12458          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00007A56  6573 7320 
00007A5A  2747 2720 
00007A5E  74        
00007A5F  6F20 5472 12459          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00007A63  6163 6520 
00007A67  5072 6F67 
00007A6B  72        
00007A6C  616D 2066 12460          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00007A70  726F 6D20 
00007A74  6164 6472 
00007A78  6573 7320 12461          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00007A7C  2425 582E 
00007A80  2E2E 2E2E 
00007A84  00        
                    12462   @m68kde~2_122:
00007A86  0D0A 5075 12463          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00007A8A  7368 203C 
00007A8E  5245 5345 
00007A92  5420      
00007A94  4275 7474 12464          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00007A98  6F6E 3E20 
00007A9C  746F 2053 
00007AA0  74        
00007AA1  6F70 2E2E 12465          dc.b      111,112,46,46,46,46,46,0
00007AA5  2E2E 2E00 
                    12466   @m68kde~2_123:
00007AAA  0D0A 5369 12467          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00007AAE  6E67 6C65 
00007AB2  2053 7465 
00007AB6  70        
00007AB7  203A 205B 12468          dc.b      32,58,32,91,79,70,70,93,0
00007ABB  4F46 465D 
00007ABF  00        
                    12469   @m68kde~2_124:
00007AC0  0D0A 4272 12470          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007AC4  6561 6B20 
00007AC8  506F 696E 
00007ACC  74        
00007ACD  7320 3A5B 12471          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00007AD1  456E 6162 
00007AD5  6C65 645D 
00007AD9  00        
                    12472   @m68kde~2_125:
00007ADA  0D0A 5072 12473          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00007ADE  6573 7320 
00007AE2  3C45 5343 
00007AE6  3E20      
00007AE8  746F 2052 12474          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00007AEC  6573 756D 
00007AF0  6520 5573 
00007AF4  6572 2050 12475          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00007AF8  726F 6772 
00007AFC  616D 2E2E 
00007B00  2E        
00007B01  2E2E 00   12476          dc.b      46,46,0
                    12477   @m68kde~2_126:
00007B04  0D0A 5369 12478          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00007B08  6E67 6C65 
00007B0C  2053 7465 
00007B10  70        
00007B11  2020 3A5B 12479          dc.b      32,32,58,91,79,70,70,93,0
00007B15  4F46 465D 
00007B19  00        
                    12480   @m68kde~2_127:
00007B1A  0D0A 0D0A 12481          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00007B1E  5072 6F67 
00007B22  7261 6D20 
00007B26  41        
00007B27  424F 5254 12482          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00007B2B  2021 2121 
00007B2F  2121 210D 
00007B33  0A00      
                    12483   @m68kde~2_128:
00007B36  2573 0D0A 12484          dc.b      37,115,13,10,0
00007B3A  00        
                    12485   @m68kde~2_129:
00007B3C  0D0A 0D0A 12486          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00007B40  5072 6F67 
00007B44  7261 6D20 
00007B48  41        
00007B49  424F 5254 12487          dc.b      66,79,82,84,32,33,33,33,33,33,0
00007B4D  2021 2121 
00007B51  2121 00   
                    12488   @m68kde~2_130:
00007B54  0D0A 556E 12489          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00007B58  6861 6E64 
00007B5C  6C65 6420 
00007B60  49        
00007B61  6E74 6572 12490          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00007B65  7275 7074 
00007B69  3A20 4952 
00007B6D  5125 6420 12491          dc.b      81,37,100,32,33,33,33,33,33,0
00007B71  2121 2121 
00007B75  2100      
                    12492   @m68kde~2_131:
00007B78  4144 4452 12493          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00007B7C  4553 5320 
00007B80  4552 524F 
00007B84  523A 20   
00007B87  3136 206F 12494          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00007B8B  7220 3332 
00007B8F  2042 6974 
00007B93  2054      
00007B95  7261 6E73 12495          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00007B99  6665 7220 
00007B9D  746F 2F66 
00007BA1  726F 6D20 12496          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00007BA5  616E 204F 
00007BA9  4444 2041 
00007BAD  64        
00007BAE  6472 6573 12497          dc.b      100,114,101,115,115,46,46,46,46,0
00007BB2  732E 2E2E 
00007BB6  2E00      
                    12498   @m68kde~2_132:
00007BB8  556E 6861 12499          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00007BBC  6E64 6C65 
00007BC0  6420 5472 
00007BC4  6170 2021 12500          dc.b      97,112,32,33,33,33,33,33,0
00007BC8  2121 2121 
00007BCC  00        
                    12501   @m68kde~2_133:
00007BCE  4255 5320 12502          dc.b      66,85,83,32,69,114,114,111,114,33,0
00007BD2  4572 726F 
00007BD6  7221 00   
                    12503   @m68kde~2_134:
00007BDA  4144 4452 12504          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00007BDE  4553 5320 
00007BE2  4572 726F 
00007BE6  7221      
00007BE8  00        12505          dc.b      0
                    12506   @m68kde~2_135:
00007BEA  494C 4C45 12507          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00007BEE  4741 4C20 
00007BF2  494E 5354 
00007BF6  5255 43   
00007BF9  5449 4F4E 12508          dc.b      84,73,79,78,0
00007BFD  00        
                    12509   @m68kde~2_136:
00007BFE  4449 5649 12510          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00007C02  4445 2042 
00007C06  5920 5A45 
00007C0A  524F 00   
                    12511   @m68kde~2_137:
00007C0E  2743 484B 12512          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00007C12  2720 494E 
00007C16  5354 5255 
00007C1A  4354 49   
00007C1D  4F4E 00   12513          dc.b      79,78,0
                    12514   @m68kde~2_138:
00007C20  5452 4150 12515          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00007C24  5620 494E 
00007C28  5354 5255 
00007C2C  4354 49   
00007C2F  4F4E 00   12516          dc.b      79,78,0
                    12517   @m68kde~2_139:
00007C32  5052 4956 12518          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00007C36  494C 4547 
00007C3A  4520 5649 
00007C3E  4F4C 41   
00007C41  5449 4F4E 12519          dc.b      84,73,79,78,0
00007C45  00        
                    12520   @m68kde~2_140:
00007C46  554E 494E 12521          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00007C4A  4954 4941 
00007C4E  4C49 5345 
00007C52  4420 49   
00007C55  5251 00   12522          dc.b      82,81,0
                    12523   @m68kde~2_141:
00007C58  5350 5552 12524          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00007C5C  494F 5553 
00007C60  2049 5251 
00007C64  00        
                    12525   @m68kde~2_142:
00007C66  0D0A 5374 12526          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00007C6A  6172 7420 
00007C6E  4164 6472 
00007C72  65        
00007C73  7373 2069 12527          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00007C77  6E20 4D65 
00007C7B  6D6F 7279 
00007C7F  3A20 00   12528          dc.b      58,32,0
                    12529   @m68kde~2_143:
00007C82  0D0A 456E 12530          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00007C86  7465 7220 
00007C8A  5374 7269 
00007C8E  6E        
00007C8F  6720 2845 12531          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00007C93  5343 2074 
00007C97  6F20 656E 
00007C9B  64        
00007C9C  2920 3A00 12532          dc.b      41,32,58,0
                    12533   @m68kde~2_144:
00007CA0  0D0A 506C 12534          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00007CA4  6561 7365 
00007CA8  2065 6E74 
00007CAC  65        
00007CAD  7220 6120 12535          dc.b      114,32,97,32,110,117,109,98,101,114,32,116,111
00007CB1  6E75 6D62 
00007CB5  6572 2074 
00007CB9  6F        
00007CBA  2063 686F 12536          dc.b      32,99,104,111,111,115,101,32,111,110,101,32
00007CBE  6F73 6520 
00007CC2  6F6E 6520 
00007CC6  6F66 2074 12537          dc.b      111,102,32,116,104,101,32,102,111,108,108,111
00007CCA  6865 2066 
00007CCE  6F6C 6C6F 
00007CD2  7769 6E67 12538          dc.b      119,105,110,103,32,116,101,115,116,32,111,112
00007CD6  2074 6573 
00007CDA  7420 6F70 
00007CDE  7469 6F6E 12539          dc.b      116,105,111,110,115,58,13,10,49,32,45,32,66
00007CE2  733A 0D0A 
00007CE6  3120 2D20 
00007CEA  42        
00007CEB  7974 6573 12540          dc.b      121,116,101,115,13,10,50,32,45,32,87,111,114
00007CEF  0D0A 3220 
00007CF3  2D20 576F 
00007CF7  72        
00007CF8  6473 0D0A 12541          dc.b      100,115,13,10,51,32,45,32,76,111,110,103,32
00007CFC  3320 2D20 
00007D00  4C6F 6E67 
00007D04  20        
00007D05  576F 7264 12542          dc.b      87,111,114,100,115,13,10,0
00007D09  730D 0A00 
                    12543   @m68kde~2_145:
00007D0E  2564 00   12544          dc.b      37,100,0
                    12545   @m68kde~2_146:
00007D12  0D0A 496E 12546          dc.b      13,10,73,110,118,97,108,105,100,32,83,101,108
00007D16  7661 6C69 
00007D1A  6420 5365 
00007D1E  6C        
00007D1F  6563 7469 12547          dc.b      101,99,116,105,111,110,13,10,0
00007D23  6F6E 0D0A 
00007D27  00        
                    12548   @m68kde~2_147:
00007D28  0D0A 596F 12549          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00007D2C  7520 6861 
00007D30  7665 2073 
00007D34  65        
00007D35  6C65 6374 12550          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00007D39  6564 2074 
00007D3D  6573 7420 
00007D41  6F70 7469 12551          dc.b      111,112,116,105,111,110,32,66,89,84,69,83,13
00007D45  6F6E 2042 
00007D49  5954 4553 
00007D4D  0D        
00007D4E  0A00      12552          dc.b      10,0
                    12553   @m68kde~2_148:
00007D50  0D0A 596F 12554          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00007D54  7520 6861 
00007D58  7665 2073 
00007D5C  65        
00007D5D  6C65 6374 12555          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00007D61  6564 2074 
00007D65  6573 7420 
00007D69  6F70 7469 12556          dc.b      111,112,116,105,111,110,32,87,79,82,68,83,13
00007D6D  6F6E 2057 
00007D71  4F52 4453 
00007D75  0D        
00007D76  0A00      12557          dc.b      10,0
                    12558   @m68kde~2_149:
00007D78  0D0A 596F 12559          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00007D7C  7520 6861 
00007D80  7665 2073 
00007D84  65        
00007D85  6C65 6374 12560          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00007D89  6564 2074 
00007D8D  6573 7420 
00007D91  6F70 7469 12561          dc.b      111,112,116,105,111,110,32,76,79,78,71,32,87
00007D95  6F6E 204C 
00007D99  4F4E 4720 
00007D9D  57        
00007D9E  4F52 4453 12562          dc.b      79,82,68,83,13,10,0
00007DA2  0D0A 00   
                    12563   @m68kde~2_150:
00007DA6  0D0A 4578 12564          dc.b      13,10,69,120,99,101,112,116,105,111,110,32,45
00007DAA  6365 7074 
00007DAE  696F 6E20 
00007DB2  2D        
00007DB3  2069 6E76 12565          dc.b      32,105,110,118,97,108,105,100,32,116,101,115
00007DB7  616C 6964 
00007DBB  2074 6573 
00007DBF  7420 6F70 12566          dc.b      116,32,111,112,116,105,111,110,13,10,0
00007DC3  7469 6F6E 
00007DC7  0D0A 00   
                    12567   @m68kde~2_151:
00007DCA  0D0A 506C 12568          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00007DCE  6561 7365 
00007DD2  2065 6E74 
00007DD6  65        
00007DD7  7220 6120 12569          dc.b      114,32,97,32,110,117,109,98,101,114,32,116,111
00007DDB  6E75 6D62 
00007DDF  6572 2074 
00007DE3  6F        
00007DE4  2063 686F 12570          dc.b      32,99,104,111,111,115,101,32,111,110,101,32
00007DE8  6F73 6520 
00007DEC  6F6E 6520 
00007DF0  6F66 2074 12571          dc.b      111,102,32,116,104,101,32,102,111,108,108,111
00007DF4  6865 2066 
00007DF8  6F6C 6C6F 
00007DFC  7769 6E67 12572          dc.b      119,105,110,103,32,116,101,115,116,32,112,97
00007E00  2074 6573 
00007E04  7420 7061 
00007E08  7474 6572 12573          dc.b      116,116,101,114,110,115,58,13,10,49,32,45,32
00007E0C  6E73 3A0D 
00007E10  0A31 202D 
00007E14  20        
00007E15  3535 0D0A 12574          dc.b      53,53,13,10,50,32,45,32,65,65,13,10,51,32,45
00007E19  3220 2D20 
00007E1D  4141 0D0A 
00007E21  3320 2D   
00007E24  2046 460D 12575          dc.b      32,70,70,13,10,52,32,45,32,48,48,13,10,0
00007E28  0A34 202D 
00007E2C  2030 300D 
00007E30  0A00      
                    12576   @m68kde~2_152:
00007E32  0D0A 596F 12577          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00007E36  7520 6861 
00007E3A  7665 2073 
00007E3E  65        
00007E3F  6C65 6374 12578          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00007E43  6564 2074 
00007E47  6573 7420 
00007E4B  7061 7474 12579          dc.b      112,97,116,116,101,114,110,32,53,53,13,10,0
00007E4F  6572 6E20 
00007E53  3535 0D0A 
00007E57  00        
                    12580   @m68kde~2_153:
00007E58  0D0A 596F 12581          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00007E5C  7520 6861 
00007E60  7665 2073 
00007E64  65        
00007E65  6C65 6374 12582          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00007E69  6564 2074 
00007E6D  6573 7420 
00007E71  7061 7474 12583          dc.b      112,97,116,116,101,114,110,32,65,65,13,10,0
00007E75  6572 6E20 
00007E79  4141 0D0A 
00007E7D  00        
                    12584   @m68kde~2_154:
00007E7E  0D0A 596F 12585          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00007E82  7520 6861 
00007E86  7665 2073 
00007E8A  65        
00007E8B  6C65 6374 12586          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00007E8F  6564 2074 
00007E93  6573 7420 
00007E97  7061 7474 12587          dc.b      112,97,116,116,101,114,110,32,70,70,13,10,0
00007E9B  6572 6E20 
00007E9F  4646 0D0A 
00007EA3  00        
                    12588   @m68kde~2_155:
00007EA4  0D0A 596F 12589          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00007EA8  7520 6861 
00007EAC  7665 2073 
00007EB0  65        
00007EB1  6C65 6374 12590          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00007EB5  6564 2074 
00007EB9  6573 7420 
00007EBD  7061 7474 12591          dc.b      112,97,116,116,101,114,110,32,48,48,13,10,0
00007EC1  6572 6E20 
00007EC5  3030 0D0A 
00007EC9  00        
                    12592   @m68kde~2_156:
00007ECA  0D0A 4578 12593          dc.b      13,10,69,120,99,101,112,116,105,111,110,32,45
00007ECE  6365 7074 
00007ED2  696F 6E20 
00007ED6  2D        
00007ED7  2069 6E76 12594          dc.b      32,105,110,118,97,108,105,100,32,116,101,115
00007EDB  616C 6964 
00007EDF  2074 6573 
00007EE3  7420 7061 12595          dc.b      116,32,112,97,116,116,101,114,110,13,10,0
00007EE7  7474 6572 
00007EEB  6E0D 0A00 
                    12596   @m68kde~2_157:
00007EF0  0D0A 4578 12597          dc.b      13,10,69,120,99,101,112,116,105,111,110,32,45
00007EF4  6365 7074 
00007EF8  696F 6E20 
00007EFC  2D        
00007EFD  2063 6F75 12598          dc.b      32,99,111,117,108,100,32,110,111,116,32,103
00007F01  6C64 206E 
00007F05  6F74 2067 
00007F09  656E 6572 12599          dc.b      101,110,101,114,97,116,101,32,119,114,105,116
00007F0D  6174 6520 
00007F11  7772 6974 
00007F15  655F 6461 12600          dc.b      101,95,100,97,116,97,13,10,0
00007F19  7461 0D0A 
00007F1D  00        
                    12601   @m68kde~2_158:
00007F1E  0D0A 506C 12602          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00007F22  6561 7365 
00007F26  2065 6E74 
00007F2A  65        
00007F2B  7220 6120 12603          dc.b      114,32,97,32,115,116,97,114,116,105,110,103
00007F2F  7374 6172 
00007F33  7469 6E67 
00007F37  2061 6464 12604          dc.b      32,97,100,100,114,101,115,115,32,102,114,111
00007F3B  7265 7373 
00007F3F  2066 726F 
00007F43  6D20 3038 12605          dc.b      109,32,48,56,48,50,48,48,48,48,32,116,111,32
00007F47  3032 3030 
00007F4B  3030 2074 
00007F4F  6F20      
00007F51  3038 3033 12606          dc.b      48,56,48,51,48,48,48,48,13,10,0
00007F55  3030 3030 
00007F59  0D0A 00   
                    12607   @m68kde~2_159:
00007F5C  2578 00   12608          dc.b      37,120,0
                    12609   @m68kde~2_160:
00007F60  0D0A 5374 12610          dc.b      13,10,83,116,97,114,116,32,97,100,100,114,101
00007F64  6172 7420 
00007F68  6164 6472 
00007F6C  65        
00007F6D  7373 2069 12611          dc.b      115,115,32,105,115,32,105,110,118,97,108,105
00007F71  7320 696E 
00007F75  7661 6C69 
00007F79  640D 0A00 12612          dc.b      100,13,10,0
                    12613   @m68kde~2_161:
00007F7E  0D0A 466F 12614          dc.b      13,10,70,111,114,32,119,111,114,100,115,32,111
00007F82  7220 776F 
00007F86  7264 7320 
00007F8A  6F        
00007F8B  7220 6C6F 12615          dc.b      114,32,108,111,110,103,32,119,111,114,100,115
00007F8F  6E67 2077 
00007F93  6F72 6473 
00007F97  2C20 706C 12616          dc.b      44,32,112,108,101,97,115,101,32,101,110,116
00007F9B  6561 7365 
00007F9F  2065 6E74 
00007FA3  6572 2061 12617          dc.b      101,114,32,97,110,32,101,118,101,110,32,110
00007FA7  6E20 6576 
00007FAB  656E 206E 
00007FAF  756D 6265 12618          dc.b      117,109,98,101,114,101,100,32,97,100,100,114
00007FB3  7265 6420 
00007FB7  6164 6472 
00007FBB  6573 730D 12619          dc.b      101,115,115,13,10,0
00007FBF  0A00      
                    12620   @m68kde~2_162:
00007FC2  0D0A 5468 12621          dc.b      13,10,84,104,101,32,99,104,111,115,101,110,32
00007FC6  6520 6368 
00007FCA  6F73 656E 
00007FCE  20        
00007FCF  7374 6172 12622          dc.b      115,116,97,114,116,105,110,103,32,97,100,100
00007FD3  7469 6E67 
00007FD7  2061 6464 
00007FDB  7265 7373 12623          dc.b      114,101,115,115,32,105,115,58,32,37,120,13,10
00007FDF  2069 733A 
00007FE3  2025 780D 
00007FE7  0A        
00007FE8  00        12624          dc.b      0
                    12625   @m68kde~2_163:
00007FEA  0D0A 506C 12626          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00007FEE  6561 7365 
00007FF2  2065 6E74 
00007FF6  65        
00007FF7  7220 616E 12627          dc.b      114,32,97,110,32,101,110,100,32,97,100,100,114
00007FFB  2065 6E64 
00007FFF  2061 6464 
00008003  72        
00008004  6573 7320 12628          dc.b      101,115,115,32,102,114,111,109,32,37,120,32
00008008  6672 6F6D 
0000800C  2025 7820 
00008010  746F 2030 12629          dc.b      116,111,32,48,56,48,51,48,48,48,48,13,10,0
00008014  3830 3330 
00008018  3030 300D 
0000801C  0A00      
                    12630   @m68kde~2_164:
0000801E  0D0A 456E 12631          dc.b      13,10,69,110,100,32,97,100,100,114,101,115,115
00008022  6420 6164 
00008026  6472 6573 
0000802A  73        
0000802B  2069 7320 12632          dc.b      32,105,115,32,105,110,118,97,108,105,100,13
0000802F  696E 7661 
00008033  6C69 640D 
00008037  0A00      12633          dc.b      10,0
                    12634   @m68kde~2_165:
0000803A  0D0A 5468 12635          dc.b      13,10,84,104,101,32,99,104,111,115,101,110,32
0000803E  6520 6368 
00008042  6F73 656E 
00008046  20        
00008047  656E 6469 12636          dc.b      101,110,100,105,110,103,32,97,100,100,114,101
0000804B  6E67 2061 
0000804F  6464 7265 
00008053  7373 2069 12637          dc.b      115,115,32,105,115,58,32,37,120,13,10,0
00008057  733A 2025 
0000805B  780D 0A00 
                    12638   @m68kde~2_166:
00008060  0D0A 5772 12639          dc.b      13,10,87,114,105,116,105,110,103,32,37,120,32
00008064  6974 696E 
00008068  6720 2578 
0000806C  20        
0000806D  696E 746F 12640          dc.b      105,110,116,111,32,97,100,100,114,101,115,115
00008071  2061 6464 
00008075  7265 7373 
00008079  2025 780D 12641          dc.b      32,37,120,13,10,0
0000807D  0A00      
                    12642   @m68kde~2_167:
00008080  0D0A 5772 12643          dc.b      13,10,87,114,105,116,105,110,103,32,99,111,109
00008084  6974 696E 
00008088  6720 636F 
0000808C  6D        
0000808D  706C 6574 12644          dc.b      112,108,101,116,101,100,46,32,87,105,108,108
00008091  6564 2E20 
00008095  5769 6C6C 
00008099  206E 6F77 12645          dc.b      32,110,111,119,32,115,116,97,114,116,32,114
0000809D  2073 7461 
000080A1  7274 2072 
000080A5  6561 6469 12646          dc.b      101,97,100,105,110,103,46,13,10,0
000080A9  6E67 2E0D 
000080AD  0A00      
                    12647   @m68kde~2_168:
000080B0  0D0A 416E 12648          dc.b      13,10,65,110,32,69,114,114,111,114,32,104,97
000080B4  2045 7272 
000080B8  6F72 2068 
000080BC  61        
000080BD  7320 6F63 12649          dc.b      115,32,111,99,99,117,114,114,101,100,58,32,100
000080C1  6375 7272 
000080C5  6564 3A20 
000080C9  64        
000080CA  6174 6120 12650          dc.b      97,116,97,32,97,116,32,97,100,100,114,101,115
000080CE  6174 2061 
000080D2  6464 7265 
000080D6  73        
000080D7  7320 2578 12651          dc.b      115,32,37,120,32,101,120,112,101,99,116,101
000080DB  2065 7870 
000080DF  6563 7465 
000080E3  6420 746F 12652          dc.b      100,32,116,111,32,98,101,32,37,120,44,32,105
000080E7  2062 6520 
000080EB  2578 2C20 
000080EF  69        
000080F0  6E73 7465 12653          dc.b      110,115,116,101,97,100,32,105,115,32,114,101
000080F4  6164 2069 
000080F8  7320 7265 
000080FC  6164 696E 12654          dc.b      97,100,105,110,103,32,37,120,13,10,0
00008100  6720 2578 
00008104  0D0A 00   
                    12655   @m68kde~2_169:
00008108  0D0A 4D65 12656          dc.b      13,10,77,101,109,111,114,121,32,116,101,115
0000810C  6D6F 7279 
00008110  2074 6573 
00008114  7420 6661 12657          dc.b      116,32,102,97,105,108,101,100,46,13,10,0
00008118  696C 6564 
0000811C  2E0D 0A00 
                    12658   @m68kde~2_170:
00008120  0D0A 5265 12659          dc.b      13,10,82,101,97,100,105,110,103,32,100,97,116
00008124  6164 696E 
00008128  6720 6461 
0000812C  74        
0000812D  6120 7661 12660          dc.b      97,32,118,97,108,117,101,32,37,120,32,102,114
00008131  6C75 6520 
00008135  2578 2066 
00008139  72        
0000813A  6F6D 2061 12661          dc.b      111,109,32,97,100,100,114,101,115,115,32,37
0000813E  6464 7265 
00008142  7373 2025 
00008146  780D 0A00 12662          dc.b      120,13,10,0
                    12663   @m68kde~2_171:
0000814A  4445 312D 12664          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
0000814E  3638 6B20 
00008152  4275 6720 
00008156  5631      
00008158  2E37 3700 12665          dc.b      46,55,55,0
                    12666   @m68kde~2_172:
0000815C  436F 7079 12667          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00008160  7269 6768 
00008164  7420 2843 
00008168  2920 504A 12668          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
0000816C  2044 6176 
00008170  6965 7320 
00008174  3230      
00008176  3136 00   12669          dc.b      49,54,0
                    12670   @m68kde~2_173:
0000817A  0D0A 5275 12671          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
0000817E  6E6E 696E 
00008182  672E 2E2E 
00008186  2E        
00008187  2E00      12672          dc.b      46,0
                    12673   @m68kde~2_174:
0000818A  5275 6E6E 12674          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
0000818E  696E 672E 
00008192  2E2E 2E2E 
00008196  00        
                    12675   @m68kde~2_175:
00008198  4279 3A20 12676          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
0000819C  504A 2044 
000081A0  6176 6965 
000081A4  73        
000081A5  00        12677          dc.b      0
                    12678   @m68kde~2_176:
000081A6  0D0A 2573 12679          dc.b      13,10,37,115,0
000081AA  00        
                    12680   @m68kde~2_177:
000081AC  2E42 2000 12681          dc.b      46,66,32,0
                    12682   @m68kde~2_178:
000081B0  2E57 2000 12683          dc.b      46,87,32,0
                    12684   @m68kde~2_179:
000081B4  2E4C 2000 12685          dc.b      46,76,32,0
                    12686   @m68kde~2_180:
000081B8  2324 2558 12687          dc.b      35,36,37,88,0
000081BC  00        
                    12688   @m68kde~2_181:
000081BE  2800      12689          dc.b      40,0
                    12690   @m68kde~2_182:
000081C0  2900      12691          dc.b      41,0
                    12692   @m68kde~2_183:
000081C2  292B 00   12693          dc.b      41,43,0
                    12694   @m68kde~2_184:
000081C6  2D28 00   12695          dc.b      45,40,0
                    12696   @m68kde~2_185:
000081CA  2564 2841 12697          dc.b      37,100,40,65,37,100,41,0
000081CE  2564 2900 
                    12698   @m68kde~2_186:
000081D2  2564 2841 12699          dc.b      37,100,40,65,37,100,44,0
000081D6  2564 2C00 
                    12700   @m68kde~2_187:
000081DA  4400      12701          dc.b      68,0
                    12702   @m68kde~2_188:
000081DC  4100      12703          dc.b      65,0
                    12704   @m68kde~2_189:
000081DE  2E57 2900 12705          dc.b      46,87,41,0
                    12706   @m68kde~2_190:
000081E2  2E4C 2900 12707          dc.b      46,76,41,0
                    12708   @m68kde~2_191:
000081E6  2425 5800 12709          dc.b      36,37,88,0
                    12710   @m68kde~2_192:
000081EA  2564 2850 12711          dc.b      37,100,40,80,67,41,0
000081EE  4329 00   
                    12712   @m68kde~2_193:
000081F2  2564 2850 12713          dc.b      37,100,40,80,67,44,0
000081F6  432C 00   
                    12714   @m68kde~2_194:
000081FA  2C00      12715          dc.b      44,0
                    12716   @m68kde~2_195:
000081FC  4343 00   12717          dc.b      67,67,0
                    12718   @m68kde~2_196:
00008200  4353 00   12719          dc.b      67,83,0
                    12720   @m68kde~2_197:
00008204  4551 00   12721          dc.b      69,81,0
                    12722   @m68kde~2_198:
00008208  4745 00   12723          dc.b      71,69,0
                    12724   @m68kde~2_199:
0000820C  4754 00   12725          dc.b      71,84,0
                    12726   @m68kde~2_200:
00008210  4849 00   12727          dc.b      72,73,0
                    12728   @m68kde~2_201:
00008214  4C45 00   12729          dc.b      76,69,0
                    12730   @m68kde~2_202:
00008218  4C53 00   12731          dc.b      76,83,0
                    12732   @m68kde~2_203:
0000821C  4C54 00   12733          dc.b      76,84,0
                    12734   @m68kde~2_204:
00008220  4D49 00   12735          dc.b      77,73,0
                    12736   @m68kde~2_205:
00008224  4E45 00   12737          dc.b      78,69,0
                    12738   @m68kde~2_206:
00008228  504C 00   12739          dc.b      80,76,0
                    12740   @m68kde~2_207:
0000822C  5653 00   12741          dc.b      86,83,0
                    12742   @m68kde~2_208:
00008230  5643 00   12743          dc.b      86,67,0
                    12744   @m68kde~2_209:
00008234  5241 00   12745          dc.b      82,65,0
                    12746   @m68kde~2_210:
00008238  5352 00   12747          dc.b      83,82,0
                    12748   @m68kde~2_211:
0000823C  556E 6B6E 12749          dc.b      85,110,107,110,111,119,110,0
00008240  6F77 6E00 
                    12750   @m68kde~2_212:
00008244  4142 4344 12751          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
00008248  2044 2564 
0000824C  2C44 2564 
00008250  00        
                    12752   @m68kde~2_213:
00008252  4142 4344 12753          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00008256  202D 2841 
0000825A  2564 292C 
0000825E  2D28 41   
00008261  2564 2900 12754          dc.b      37,100,41,0
                    12755   @m68kde~2_214:
00008266  4144 4441 12756          dc.b      65,68,68,65,46,87,32,0
0000826A  2E57 2000 
                    12757   @m68kde~2_215:
0000826E  4144 4441 12758          dc.b      65,68,68,65,46,76,32,0
00008272  2E4C 2000 
                    12759   @m68kde~2_216:
00008276  2C41 2558 12760          dc.b      44,65,37,88,0
0000827A  00        
                    12761   @m68kde~2_217:
0000827C  4144 4400 12762          dc.b      65,68,68,0
                    12763   @m68kde~2_218:
00008280  4144 4449 12764          dc.b      65,68,68,73,0
00008284  00        
                    12765   @m68kde~2_219:
00008286  414E 4449 12766          dc.b      65,78,68,73,0
0000828A  00        
                    12767   @m68kde~2_220:
0000828C  434D 5049 12768          dc.b      67,77,80,73,0
00008290  00        
                    12769   @m68kde~2_221:
00008292  454F 5249 12770          dc.b      69,79,82,73,0
00008296  00        
                    12771   @m68kde~2_222:
00008298  4F52 4900 12772          dc.b      79,82,73,0
                    12773   @m68kde~2_223:
0000829C  5355 4249 12774          dc.b      83,85,66,73,0
000082A0  00        
                    12775   @m68kde~2_224:
000082A2  414E 4449 12776          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
000082A6  2023 2425 
000082AA  582C 5352 
000082AE  00        
                    12777   @m68kde~2_225:
000082B0  4144 4451 12778          dc.b      65,68,68,81,0
000082B4  00        
                    12779   @m68kde~2_226:
000082B6  2325 3158 12780          dc.b      35,37,49,88,44,0
000082BA  2C00      
                    12781   @m68kde~2_227:
000082BC  4144 4458 12782          dc.b      65,68,68,88,0
000082C0  00        
                    12783   @m68kde~2_228:
000082C2  4425 582C 12784          dc.b      68,37,88,44,68,37,88,0
000082C6  4425 5800 
                    12785   @m68kde~2_229:
000082CA  2D28 4125 12786          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
000082CE  5829 2C2D 
000082D2  2841 2558 
000082D6  2900      
                    12787   @m68kde~2_230:
000082D8  414E 4400 12788          dc.b      65,78,68,0
                    12789   @m68kde~2_231:
000082DC  414E 4449 12790          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
000082E0  2023 2425 
000082E4  3258 2C43 
000082E8  4352 00   
                    12791   @m68kde~2_232:
000082EC  4153 4C00 12792          dc.b      65,83,76,0
                    12793   @m68kde~2_233:
000082F0  4153 5200 12794          dc.b      65,83,82,0
                    12795   @m68kde~2_234:
000082F4  4C53 4C00 12796          dc.b      76,83,76,0
                    12797   @m68kde~2_235:
000082F8  4C53 5200 12798          dc.b      76,83,82,0
                    12799   @m68kde~2_236:
000082FC  524F 4C00 12800          dc.b      82,79,76,0
                    12801   @m68kde~2_237:
00008300  524F 5200 12802          dc.b      82,79,82,0
                    12803   @m68kde~2_238:
00008304  524F 584C 12804          dc.b      82,79,88,76,0
00008308  00        
                    12805   @m68kde~2_239:
0000830A  524F 5852 12806          dc.b      82,79,88,82,0
0000830E  00        
                    12807   @m68kde~2_240:
00008310  2324 2558 12808          dc.b      35,36,37,88,44,68,37,88,0
00008314  2C44 2558 
00008318  00        
                    12809   @m68kde~2_241:
0000831A  4200      12810          dc.b      66,0
                    12811   @m68kde~2_242:
0000831C  4243 4847 12812          dc.b      66,67,72,71,32,0
00008320  2000      
                    12813   @m68kde~2_243:
00008322  4425 642C 12814          dc.b      68,37,100,44,0
00008326  00        
                    12815   @m68kde~2_244:
00008328  2324 2558 12816          dc.b      35,36,37,88,44,0
0000832C  2C00      
                    12817   @m68kde~2_245:
0000832E  4243 4C52 12818          dc.b      66,67,76,82,32,0
00008332  2000      
                    12819   @m68kde~2_246:
00008334  4253 4554 12820          dc.b      66,83,69,84,32,0
00008338  2000      
                    12821   @m68kde~2_247:
0000833A  4254 5354 12822          dc.b      66,84,83,84,32,0
0000833E  2000      
                    12823   @m68kde~2_248:
00008340  4348 4B20 12824          dc.b      67,72,75,32,0
00008344  00        
                    12825   @m68kde~2_249:
00008346  2C44 2564 12826          dc.b      44,68,37,100,0
0000834A  00        
                    12827   @m68kde~2_250:
0000834C  434C 5200 12828          dc.b      67,76,82,0
                    12829   @m68kde~2_251:
00008350  434D 5041 12830          dc.b      67,77,80,65,46,87,32,0
00008354  2E57 2000 
                    12831   @m68kde~2_252:
00008358  434D 5041 12832          dc.b      67,77,80,65,46,76,32,0
0000835C  2E4C 2000 
                    12833   @m68kde~2_253:
00008360  2C41 2564 12834          dc.b      44,65,37,100,0
00008364  00        
                    12835   @m68kde~2_254:
00008366  434D 5000 12836          dc.b      67,77,80,0
                    12837   @m68kde~2_255:
0000836A  434D 504D 12838          dc.b      67,77,80,77,0
0000836E  00        
                    12839   @m68kde~2_256:
00008370  2841 2564 12840          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
00008374  292B 2C28 
00008378  4125 6429 
0000837C  2B00      
                    12841   @m68kde~2_257:
0000837E  4442 00   12842          dc.b      68,66,0
                    12843   @m68kde~2_258:
00008382  4425 642C 12844          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
00008386  252B 6428 
0000838A  5043 2920 
0000838E  746F      
00008390  2041 6464 12845          dc.b      32,65,100,100,114,58,36,37,88,0
00008394  723A 2425 
00008398  5800      
                    12846   @m68kde~2_259:
0000839A  4449 5653 12847          dc.b      68,73,86,83,32,0
0000839E  2000      
                    12848   @m68kde~2_260:
000083A0  4449 5655 12849          dc.b      68,73,86,85,32,0
000083A4  2000      
                    12850   @m68kde~2_261:
000083A6  454F 5200 12851          dc.b      69,79,82,0
                    12852   @m68kde~2_262:
000083AA  454F 5249 12853          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
000083AE  2023 2425 
000083B2  3258 2C43 
000083B6  4352 00   
                    12854   @m68kde~2_263:
000083BA  454F 5249 12855          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
000083BE  2023 2425 
000083C2  582C 5352 
000083C6  00        
                    12856   @m68kde~2_264:
000083C8  4558 4720 12857          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
000083CC  4425 642C 
000083D0  4425 6400 
                    12858   @m68kde~2_265:
000083D4  4558 4720 12859          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
000083D8  4125 642C 
000083DC  4125 6400 
                    12860   @m68kde~2_266:
000083E0  4558 4720 12861          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
000083E4  4425 642C 
000083E8  4125 6400 
                    12862   @m68kde~2_267:
000083EC  4558 5400 12863          dc.b      69,88,84,0
                    12864   @m68kde~2_268:
000083F0  494C 4C45 12865          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
000083F4  4741 4C20 
000083F8  2824 3441 
000083FC  4643 29   
000083FF  00        12866          dc.b      0
                    12867   @m68kde~2_269:
00008400  4A4D 5020 12868          dc.b      74,77,80,32,0
00008404  00        
                    12869   @m68kde~2_270:
00008406  4A53 5220 12870          dc.b      74,83,82,32,0
0000840A  00        
                    12871   @m68kde~2_271:
0000840C  4C45 4120 12872          dc.b      76,69,65,32,0
00008410  00        
                    12873   @m68kde~2_272:
00008412  4C49 4E4B 12874          dc.b      76,73,78,75,32,0
00008416  2000      
                    12875   @m68kde~2_273:
00008418  4125 642C 12876          dc.b      65,37,100,44,35,37,100,0
0000841C  2325 6400 
                    12877   @m68kde~2_274:
00008420  4D4F 5645 12878          dc.b      77,79,86,69,46,66,32,0
00008424  2E42 2000 
                    12879   @m68kde~2_275:
00008428  4D4F 5645 12880          dc.b      77,79,86,69,46,76,32,0
0000842C  2E4C 2000 
                    12881   @m68kde~2_276:
00008430  4D4F 5645 12882          dc.b      77,79,86,69,46,87,32,0
00008434  2E57 2000 
                    12883   @m68kde~2_277:
00008438  4D4F 5645 12884          dc.b      77,79,86,69,32,0
0000843C  2000      
                    12885   @m68kde~2_278:
0000843E  2C43 4352 12886          dc.b      44,67,67,82,0
00008442  00        
                    12887   @m68kde~2_279:
00008444  4D4F 5645 12888          dc.b      77,79,86,69,32,83,82,44,0
00008448  2053 522C 
0000844C  00        
                    12889   @m68kde~2_280:
0000844E  2C53 5200 12890          dc.b      44,83,82,0
                    12891   @m68kde~2_281:
00008452  4D4F 5645 12892          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
00008456  2055 5350 
0000845A  2C41 2564 
0000845E  00        
                    12893   @m68kde~2_282:
00008460  4D4F 5645 12894          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
00008464  2041 2564 
00008468  2C55 5350 
0000846C  00        
                    12895   @m68kde~2_283:
0000846E  4D4F 5645 12896          dc.b      77,79,86,69,77,0
00008472  4D00      
                    12897   @m68kde~2_284:
00008474  4425 6400 12898          dc.b      68,37,100,0
                    12899   @m68kde~2_285:
00008478  2F44 2564 12900          dc.b      47,68,37,100,0
0000847C  00        
                    12901   @m68kde~2_286:
0000847E  4125 6400 12902          dc.b      65,37,100,0
                    12903   @m68kde~2_287:
00008482  2F41 2564 12904          dc.b      47,65,37,100,0
00008486  00        
                    12905   @m68kde~2_288:
00008488  4D4F 5645 12906          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
0000848C  502E 5720 
00008490  2425 5828 
00008494  4125 64   
00008497  292C 4425 12907          dc.b      41,44,68,37,100,0
0000849B  6400      
                    12908   @m68kde~2_289:
0000849E  4D4F 5645 12909          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
000084A2  502E 4C20 
000084A6  2425 5828 
000084AA  4125 64   
000084AD  292C 4425 12910          dc.b      41,44,68,37,100,0
000084B1  6400      
                    12911   @m68kde~2_290:
000084B4  4D4F 5645 12912          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
000084B8  502E 5720 
000084BC  4425 642C 
000084C0  2425 58   
000084C3  2841 2564 12913          dc.b      40,65,37,100,41,0
000084C7  2900      
                    12914   @m68kde~2_291:
000084CA  4D4F 5645 12915          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
000084CE  502E 4C20 
000084D2  4425 642C 
000084D6  2425 58   
000084D9  2841 2564 12916          dc.b      40,65,37,100,41,0
000084DD  2900      
                    12917   @m68kde~2_292:
000084E0  4D4F 5645 12918          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
000084E4  5120 2324 
000084E8  2558 2C44 
000084EC  2564 00   
                    12919   @m68kde~2_293:
000084F0  4D55 4C53 12920          dc.b      77,85,76,83,32,0
000084F4  2000      
                    12921   @m68kde~2_294:
000084F6  4D55 4C55 12922          dc.b      77,85,76,85,32,0
000084FA  2000      
                    12923   @m68kde~2_295:
000084FC  4E42 4344 12924          dc.b      78,66,67,68,32,0
00008500  2000      
                    12925   @m68kde~2_296:
00008502  4E45 4700 12926          dc.b      78,69,71,0
                    12927   @m68kde~2_297:
00008506  4E45 4758 12928          dc.b      78,69,71,88,0
0000850A  00        
                    12929   @m68kde~2_298:
0000850C  4E4F 5000 12930          dc.b      78,79,80,0
                    12931   @m68kde~2_299:
00008510  4E4F 5400 12932          dc.b      78,79,84,0
                    12933   @m68kde~2_300:
00008514  4F52 00   12934          dc.b      79,82,0
                    12935   @m68kde~2_301:
00008518  4F52 4920 12936          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
0000851C  2324 2532 
00008520  582C 4343 
00008524  5200      
                    12937   @m68kde~2_302:
00008526  4F52 4920 12938          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
0000852A  2023 2425 
0000852E  582C 5352 
00008532  00        
                    12939   @m68kde~2_303:
00008534  5045 4120 12940          dc.b      80,69,65,32,0
00008538  00        
                    12941   @m68kde~2_304:
0000853A  5245 5345 12942          dc.b      82,69,83,69,84,0
0000853E  5400      
                    12943   @m68kde~2_305:
00008540  5254 4500 12944          dc.b      82,84,69,0
                    12945   @m68kde~2_306:
00008544  5254 5200 12946          dc.b      82,84,82,0
                    12947   @m68kde~2_307:
00008548  5254 5300 12948          dc.b      82,84,83,0
                    12949   @m68kde~2_308:
0000854C  5354 4F50 12950          dc.b      83,84,79,80,32,35,36,37,88,0
00008550  2023 2425 
00008554  5800      
                    12951   @m68kde~2_309:
00008556  5342 4344 12952          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
0000855A  2044 2564 
0000855E  2C44 2564 
00008562  00        
                    12953   @m68kde~2_310:
00008564  5342 4344 12954          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00008568  202D 2841 
0000856C  2564 292C 
00008570  2D28 41   
00008573  2564 2900 12955          dc.b      37,100,41,0
                    12956   @m68kde~2_311:
00008578  5300      12957          dc.b      83,0
                    12958   @m68kde~2_312:
0000857A  5355 4241 12959          dc.b      83,85,66,65,46,87,32,0
0000857E  2E57 2000 
                    12960   @m68kde~2_313:
00008582  5355 4241 12961          dc.b      83,85,66,65,46,76,32,0
00008586  2E4C 2000 
                    12962   @m68kde~2_314:
0000858A  5355 4200 12963          dc.b      83,85,66,0
                    12964   @m68kde~2_315:
0000858E  5355 4251 12965          dc.b      83,85,66,81,0
00008592  00        
                    12966   @m68kde~2_316:
00008594  5355 4258 12967          dc.b      83,85,66,88,0
00008598  00        
                    12968   @m68kde~2_317:
0000859A  4425 3158 12969          dc.b      68,37,49,88,44,68,37,49,88,0
0000859E  2C44 2531 
000085A2  5800      
                    12970   @m68kde~2_318:
000085A4  2D28 4125 12971          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
000085A8  3158 292C 
000085AC  2D28 4125 
000085B0  3158 29   
000085B3  00        12972          dc.b      0
                    12973   @m68kde~2_319:
000085B4  5357 4150 12974          dc.b      83,87,65,80,32,68,37,100,0
000085B8  2044 2564 
000085BC  00        
                    12975   @m68kde~2_320:
000085BE  5441 5320 12976          dc.b      84,65,83,32,0
000085C2  00        
                    12977   @m68kde~2_321:
000085C4  5452 4150 12978          dc.b      84,82,65,80,32,35,37,100,0
000085C8  2023 2564 
000085CC  00        
                    12979   @m68kde~2_322:
000085CE  5452 4150 12980          dc.b      84,82,65,80,86,0
000085D2  5600      
                    12981   @m68kde~2_323:
000085D4  5453 5400 12982          dc.b      84,83,84,0
                    12983   @m68kde~2_324:
000085D8  554E 4C4B 12984          dc.b      85,78,76,75,32,65,37,100,0
000085DC  2041 2564 
000085E0  00        
                    12985   @doscan_1:
000085E2  0A00      12986          dc.b      10,0
                    12987   @itoa_1:
000085E4  2D32 3134 12988          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
000085E8  3734 3833 
000085EC  3634 3800 
                    12989   __ctype:
000085F0  0040 4040 12990          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
000085F4  4040 4040 
000085F8  4040 5050 
000085FC  5050 50   
000085FF  4040 4040 12991          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00008603  4040 4040 
00008607  4040 4040 
0000860B  4040 40   
0000860E  4040 40D0 12992          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00008612  A0A0 A0A0 
00008616  A0A0 A0A0 
0000861A  A0A0 A0A0 12993          dc.b      160,160,160,160,160,160,160,140,140,140,140
0000861E  A0A0 A08C 
00008622  8C8C 8C   
00008625  8C8C 8C8C 12994          dc.b      140,140,140,140,140,140,160,160,160,160,160
00008629  8C8C A0A0 
0000862D  A0A0 A0   
00008630  A0A0 8A8A 12995          dc.b      160,160,138,138,138,138,138,138,130,130,130
00008634  8A8A 8A8A 
00008638  8282 82   
0000863B  8282 8282 12996          dc.b      130,130,130,130,130,130,130,130,130,130,130
0000863F  8282 8282 
00008643  8282 82   
00008646  8282 8282 12997          dc.b      130,130,130,130,130,130,160,160,160,160,160
0000864A  8282 A0A0 
0000864E  A0A0 A0   
00008651  A089 8989 12998          dc.b      160,137,137,137,137,137,137,129,129,129,129
00008655  8989 8981 
00008659  8181 81   
0000865C  8181 8181 12999          dc.b      129,129,129,129,129,129,129,129,129,129,129
00008660  8181 8181 
00008664  8181 81   
00008667  8181 8181 13000          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
0000866B  81A0 A0A0 
0000866F  A040 0000 
00008673  00        
00008674  0000 0000 13001          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00008678  0000 0000 
0000867C  0000 0000 
00008680  0000 0000 
00008684  0000 0000 
00008688  0000      
0000868A  0000 0000 13002          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000868E  0000 0000 
00008692  0000 0000 
00008696  0000 0000 
0000869A  0000 0000 
0000869E  0000      
000086A0  0000 0000 13003          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000086A4  0000 0000 
000086A8  0000 0000 
000086AC  0000 0000 
000086B0  0000 0000 
000086B4  0000      
000086B6  0000 0000 13004          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000086BA  0000 0000 
000086BE  0000 0000 
000086C2  0000 0000 
000086C6  0000 0000 
000086CA  0000      
000086CC  0000 0000 13005          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000086D0  0000 0000 
000086D4  0000 0000 
000086D8  0000 0000 
000086DC  0000 0000 
000086E0  0000      
000086E2  0000 0000 13006          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000086E6  0000 0000 
000086EA  0000 0000 
000086EE  0000 00   
                    13007          section   data
000086F2            13008                   align
          0000 86F2 13009   DataStart       equ       *
                    13010   
                    13011   *********************************************************************************************************
                    13012   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    13013   * to ram as part of the CStart routine in this file
                    13014   *********************************************************************************************************
                    13015   
                    13016   @doscan_lpbuf:
000086F2  0803 05AA 13017          dc.l      @doscan_buf
                    13018          section   bss
000086F6            13019                   align
          0000 86F6 13020   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    13021   
                    13022   *********************************************************************************************************
                    13023   * Section for Uninitialised Data held in ROM as constants
                    13024   *********************************************************************************************************
                    13025   
08030000            13026                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0004 13027   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    13028   
                    13029   
08030000            13030   bss             org       bss
                    13031   
                    13032   *********************************************************************************************************
                    13033   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    13034   * install the exception handler using the C function InstallExceptionHandler()
                    13035   *********************************************************************************************************
                    13036   
                    13037   
                    13038   
08030000            13039   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            13040   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            13041   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            13042   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            13043   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            13044   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            13045   VCheck           ds.l    1      ditto
0803001C            13046   VTrapV           ds.l    1      ditto
08030020            13047   VPrivilege       ds.l    1      ditto
08030024            13048   VTrace           ds.l    1
08030028            13049   VLine1010emul    ds.l    1
0803002C            13050   VLine1111emul    ds.l    1
08030030            13051   VUnassigned1     ds.l    1
08030034            13052   VUnassigned2     ds.l    1
08030038            13053   VUnassigned3     ds.l    1
0803003C            13054   VUninit_IRQ      ds.l    1
08030040            13055   VUnassigned4     ds.l    1
08030044            13056   VUnassigned5     ds.l    1
08030048            13057   VUnassigned6     ds.l    1
0803004C            13058   VUnassigned7     ds.l    1
08030050            13059   VUnassigned8     ds.l    1
08030054            13060   VUnassigned9     ds.l    1
08030058            13061   VUnassigned10    ds.l    1
0803005C            13062   VUnassigned11    ds.l    1
08030060            13063   VSpuriousIRQ     ds.l    1
                    13064   
                    13065   * Interrupt handlers Vector 25-31
08030064            13066   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            13067   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            13068   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            13069   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            13070   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            13071   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            13072   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    13073   
                    13074   * Trap Handler vectors 32-47
08030080            13075   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            13076   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            13077   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            13078   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            13079   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            13080   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            13081   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            13082   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            13083   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            13084   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            13085   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            13086   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            13087   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            13088   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            13089   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            13090   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    13091   
                    13092   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    13093   
                    13094   ***********************************************************************************************************
                    13095   * Other Variables
                    13096   ***********************************************************************************************************
                    13097   *__DebugA5       ds.l    1
                    13098   *__UserA5        ds.l    1
                    13099   
                    13100   ***********************************************************************************************************
080300C0            13101   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            13102   __allocp:       ds.l    0       ; start of allocation units
080300C4            13103   __heap:         ds.l    0       ; pointers for malloc functions
                    13104   
                    13105   *__himem:       ds.l    himem            ; highest memory location + 1
                    13106   *__stklen:      ds.l    stklen           ; default stack size
                    13107   
                    13108   *********************************************************************************************************
                    13109   * Section for Heap
                    13110   *********************************************************************************************************
                    13111   
                    13112   _i:
080300C4            13113          ds.b      4
                    13114   _x:
080300C8            13115          ds.b      4
                    13116   _y:
080300CC            13117          ds.b      4
                    13118   _z:
080300D0            13119          ds.b      4
                    13120   _PortA_Count:
080300D4            13121          ds.b      4
                    13122   _Trace:
080300D8            13123          ds.b      4
                    13124   _GoFlag:
080300DC            13125          ds.b      4
                    13126   _Echo:
080300E0            13127          ds.b      4
                    13128   _d0:
080300E4            13129          ds.b      4
                    13130   _d1:
080300E8            13131          ds.b      4
                    13132   _d2:
080300EC            13133          ds.b      4
                    13134   _d3:
080300F0            13135          ds.b      4
                    13136   _d4:
080300F4            13137          ds.b      4
                    13138   _d5:
080300F8            13139          ds.b      4
                    13140   _d6:
080300FC            13141          ds.b      4
                    13142   _d7:
08030100            13143          ds.b      4
                    13144   _a0:
08030104            13145          ds.b      4
                    13146   _a1:
08030108            13147          ds.b      4
                    13148   _a2:
0803010C            13149          ds.b      4
                    13150   _a3:
08030110            13151          ds.b      4
                    13152   _a4:
08030114            13153          ds.b      4
                    13154   _a5:
08030118            13155          ds.b      4
                    13156   _a6:
0803011C            13157          ds.b      4
                    13158   _PC:
08030120            13159          ds.b      4
                    13160   _SSP:
08030124            13161          ds.b      4
                    13162   _USP:
08030128            13163          ds.b      4
                    13164   _SR:
0803012C            13165          ds.b      2
                    13166   _BreakPointAddress:
0803012E            13167          ds.b      32
                    13168   _BreakPointInstruction:
0803014E            13169          ds.b      16
                    13170   _BreakPointSetOrCleared:
0803015E            13171          ds.b      32
                    13172   _InstructionSize:
0803017E            13173          ds.b      4
                    13174   _WatchPointAddress:
08030182            13175          ds.b      32
                    13176   _WatchPointSetOrCleared:
080301A2            13177          ds.b      32
                    13178   _WatchPointString:
080301C2            13179          ds.b      800
                    13180   _Instruction:
080304E2            13181          ds.b      100
                    13182   _TempString:
08030546            13183          ds.b      100
                    13184   @doscan_buf:
080305AA            13185          ds.b      80
                    13186          section   heap
080305FA            13187                   align
          0803 05FA 13188   bssEnd          equ *                   end of storage space for unitialised variables
                    13189   *                                       we have to copy all initialised variable from rom to here at startup
          0803 05FA 13190   heap   equ       *
080305FA            13191                    align
          0000 0000

Assembly errors: 0
