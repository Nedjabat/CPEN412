680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 08 Feb 2024      Time: 04:08:59          Source: C:\M68K\M68KDEBUG_PROJECT_LAB1\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0546 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  290C      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  1F86      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68K\PROGRAMS\DEBUGMONITORCODE\M68KDEBUGND.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; #define StartOfExceptionVectorTable 0x08030000
                     473   ; //#define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; #define TopOfStack 0x08040000
                     476   ; //#define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0803  672          move.l    #134414336,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  2D8E      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  36A0      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  36A4      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  36BA      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  36BC      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0803  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  2D8E      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  2CAA      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  36BE      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  36F8      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  3710      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  3718      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  371E      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  36A0      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  2D8E      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  3722      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  36F8      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  3736      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  374C      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  3760      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  2D8E      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0803 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  3790      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  2D72      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  2BDE      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  2CAA      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  37C0      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  37E6      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0803 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  2D8E      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  3808      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  3824      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  386A      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  387C      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  2D0E      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  388E      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /*******************************************************************
                    1547   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1548   ; ********************************************************************/
                    1549   ; void ProgramFlashChip(void)
                    1550   ; {
                    1551   _ProgramFlashChip:
000010C4  4E75      1552          rts
                    1553   ; //
                    1554   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1555   ; // TODO : then verify by reading it back and comparing to memory
                    1556   ; //
                    1557   ; }
                    1558   ; /*************************************************************************
                    1559   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1560   ; **************************************************************************/
                    1561   ; void LoadFromFlashChip(void)
                    1562   ; {
                    1563   _LoadFromFlashChip:
                    1564   ; printf("\r\nLoading Program From SPI Flash....") ;
000010C6  4879 0000 1565          pea       @m68kde~1_22.L
000010CA  38C2      
000010CC  4EB9 0000 1566          jsr       _printf
000010D0  2D8E      
000010D2  584F      1567          addq.w    #4,A7
000010D4  4E75      1568          rts
                    1569   ; //
                    1570   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1571   ; //
                    1572   ; }
                    1573   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1574   ; // IMPORTANT
                    1575   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1576   ; // has to be done with an interrupt (IRQ Level 6)
                    1577   ; //
                    1578   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1579   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1580   ; //
                    1581   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1582   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1583   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1584   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1585   ; // program area
                    1586   ; //
                    1587   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1588   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1589   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1590   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1591   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1592   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1593   ; void DumpRegisters()
                    1594   ; {
                    1595   _DumpRegisters:
000010D6  48E7 3F3C 1596          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000010DA  45F9 0000 1597          lea       _putch.L,A2
000010DE  2CAA      
000010E0  47F9 0000 1598          lea       _printf.L,A3
000010E4  2D8E      
000010E6  49F9 0803 1599          lea       _SR.L,A4
000010EA  012C      
000010EC  4BF9 0803 1600          lea       _WatchPointString.L,A5
000010F0  01C2      
                    1601   ; short i, x, j, k ;
                    1602   ; unsigned char c, *BytePointer;
                    1603   ; // buld up strings for displaying watchpoints
                    1604   ; for(x = 0; x < (short)(8); x++)
000010F2  4242      1605          clr.w     D2
                    1606   DumpRegisters_1:
000010F4  0C42 0008 1607          cmp.w     #8,D2
000010F8  6C00 01C6 1608          bge       DumpRegisters_3
                    1609   ; {
                    1610   ; if(WatchPointSetOrCleared[x] == 1)
000010FC  48C2      1611          ext.l     D2
000010FE  2002      1612          move.l    D2,D0
00001100  E588      1613          lsl.l     #2,D0
00001102  41F9 0803 1614          lea       _WatchPointSetOrCleared.L,A0
00001106  01A2      
00001108  2030 0800 1615          move.l    0(A0,D0.L),D0
0000110C  0C80 0000 1616          cmp.l     #1,D0
00001110  0001      
00001112  6600 0186 1617          bne       DumpRegisters_4
                    1618   ; {
                    1619   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001116  48C2      1620          ext.l     D2
00001118  2202      1621          move.l    D2,D1
0000111A  E589      1622          lsl.l     #2,D1
0000111C  41F9 0803 1623          lea       _WatchPointAddress.L,A0
00001120  0182      
00001122  2F30 1800 1624          move.l    0(A0,D1.L),-(A7)
00001126  4879 0000 1625          pea       @m68kde~1_23.L
0000112A  38E8      
0000112C  220D      1626          move.l    A5,D1
0000112E  48C2      1627          ext.l     D2
00001130  2F00      1628          move.l    D0,-(A7)
00001132  2002      1629          move.l    D2,D0
00001134  C1FC 0064 1630          muls      #100,D0
00001138  D280      1631          add.l     D0,D1
0000113A  201F      1632          move.l    (A7)+,D0
0000113C  2F01      1633          move.l    D1,-(A7)
0000113E  4EB9 0000 1634          jsr       _sprintf
00001142  2D2A      
00001144  DEFC 000C 1635          add.w     #12,A7
                    1636   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001148  48C2      1637          ext.l     D2
0000114A  2002      1638          move.l    D2,D0
0000114C  E588      1639          lsl.l     #2,D0
0000114E  41F9 0803 1640          lea       _WatchPointAddress.L,A0
00001152  0182      
00001154  2A30 0800 1641          move.l    0(A0,D0.L),D5
                    1642   ; for(j = 0; j < (short)(16); j+=2)
00001158  4243      1643          clr.w     D3
                    1644   DumpRegisters_6:
0000115A  0C43 0010 1645          cmp.w     #16,D3
0000115E  6C00 0082 1646          bge       DumpRegisters_8
                    1647   ; {
                    1648   ; for(k = 0; k < (short)(2); k++)
00001162  4246      1649          clr.w     D6
                    1650   DumpRegisters_9:
00001164  0C46 0002 1651          cmp.w     #2,D6
00001168  6C00 0052 1652          bge       DumpRegisters_11
                    1653   ; {
                    1654   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000116C  2045      1655          move.l    D5,A0
0000116E  48C3      1656          ext.l     D3
00001170  2203      1657          move.l    D3,D1
00001172  48C6      1658          ext.l     D6
00001174  D286      1659          add.l     D6,D1
00001176  1230 1800 1660          move.b    0(A0,D1.L),D1
0000117A  C2BC 0000 1661          and.l     #255,D1
0000117E  00FF      
00001180  2F01      1662          move.l    D1,-(A7)
00001182  4879 0000 1663          pea       @m68kde~1_8.L
00001186  3718      
00001188  4879 0803 1664          pea       _TempString.L
0000118C  04E2      
0000118E  4EB9 0000 1665          jsr       _sprintf
00001192  2D2A      
00001194  DEFC 000C 1666          add.w     #12,A7
                    1667   ; strcat(WatchPointString[x], TempString) ;
00001198  4879 0803 1668          pea       _TempString.L
0000119C  04E2      
0000119E  220D      1669          move.l    A5,D1
000011A0  48C2      1670          ext.l     D2
000011A2  2F00      1671          move.l    D0,-(A7)
000011A4  2002      1672          move.l    D2,D0
000011A6  C1FC 0064 1673          muls      #100,D0
000011AA  D280      1674          add.l     D0,D1
000011AC  201F      1675          move.l    (A7)+,D0
000011AE  2F01      1676          move.l    D1,-(A7)
000011B0  4EB9 0000 1677          jsr       _strcat
000011B4  2D5C      
000011B6  504F      1678          addq.w    #8,A7
000011B8  5246      1679          addq.w    #1,D6
000011BA  60A8      1680          bra       DumpRegisters_9
                    1681   DumpRegisters_11:
                    1682   ; }
                    1683   ; strcat(WatchPointString[x]," ") ;
000011BC  4879 0000 1684          pea       @m68kde~1_24.L
000011C0  38F0      
000011C2  220D      1685          move.l    A5,D1
000011C4  48C2      1686          ext.l     D2
000011C6  2F00      1687          move.l    D0,-(A7)
000011C8  2002      1688          move.l    D2,D0
000011CA  C1FC 0064 1689          muls      #100,D0
000011CE  D280      1690          add.l     D0,D1
000011D0  201F      1691          move.l    (A7)+,D0
000011D2  2F01      1692          move.l    D1,-(A7)
000011D4  4EB9 0000 1693          jsr       _strcat
000011D8  2D5C      
000011DA  504F      1694          addq.w    #8,A7
000011DC  5443      1695          addq.w    #2,D3
000011DE  6000 FF7A 1696          bra       DumpRegisters_6
                    1697   DumpRegisters_8:
                    1698   ; }
                    1699   ; strcat(WatchPointString[x], "  ") ;
000011E2  4879 0000 1700          pea       @m68kde~1_9.L
000011E6  371E      
000011E8  220D      1701          move.l    A5,D1
000011EA  48C2      1702          ext.l     D2
000011EC  2F00      1703          move.l    D0,-(A7)
000011EE  2002      1704          move.l    D2,D0
000011F0  C1FC 0064 1705          muls      #100,D0
000011F4  D280      1706          add.l     D0,D1
000011F6  201F      1707          move.l    (A7)+,D0
000011F8  2F01      1708          move.l    D1,-(A7)
000011FA  4EB9 0000 1709          jsr       _strcat
000011FE  2D5C      
00001200  504F      1710          addq.w    #8,A7
                    1711   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001202  48C2      1712          ext.l     D2
00001204  2002      1713          move.l    D2,D0
00001206  E588      1714          lsl.l     #2,D0
00001208  41F9 0803 1715          lea       _WatchPointAddress.L,A0
0000120C  0182      
0000120E  2A30 0800 1716          move.l    0(A0,D0.L),D5
                    1717   ; for(j = 0; j < (short)(16); j++)
00001212  4243      1718          clr.w     D3
                    1719   DumpRegisters_12:
00001214  0C43 0010 1720          cmp.w     #16,D3
00001218  6C00 007E 1721          bge       DumpRegisters_14
                    1722   ; {
                    1723   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000121C  2045      1724          move.l    D5,A0
0000121E  48C3      1725          ext.l     D3
00001220  1030 3800 1726          move.b    0(A0,D3.L),D0
00001224  C03C 007F 1727          and.b     #127,D0
00001228  1E00      1728          move.b    D0,D7
                    1729   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000122A  0C07 007F 1730          cmp.b     #127,D7
0000122E  6206      1731          bhi.s     DumpRegisters_17
00001230  0C07 0020 1732          cmp.b     #32,D7
00001234  6416      1733          bhs.s     DumpRegisters_15
                    1734   DumpRegisters_17:
                    1735   ; sprintf(TempString, ".") ;
00001236  4879 0000 1736          pea       @m68kde~1_25.L
0000123A  38F2      
0000123C  4879 0803 1737          pea       _TempString.L
00001240  04E2      
00001242  4EB9 0000 1738          jsr       _sprintf
00001246  2D2A      
00001248  504F      1739          addq.w    #8,A7
0000124A  6026      1740          bra.s     DumpRegisters_16
                    1741   DumpRegisters_15:
                    1742   ; else
                    1743   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000124C  2045      1744          move.l    D5,A0
0000124E  48C3      1745          ext.l     D3
00001250  1230 3800 1746          move.b    0(A0,D3.L),D1
00001254  C2BC 0000 1747          and.l     #255,D1
00001258  00FF      
0000125A  2F01      1748          move.l    D1,-(A7)
0000125C  4879 0000 1749          pea       @m68kde~1_26.L
00001260  38F4      
00001262  4879 0803 1750          pea       _TempString.L
00001266  04E2      
00001268  4EB9 0000 1751          jsr       _sprintf
0000126C  2D2A      
0000126E  DEFC 000C 1752          add.w     #12,A7
                    1753   DumpRegisters_16:
                    1754   ; strcat(WatchPointString[x], TempString) ;
00001272  4879 0803 1755          pea       _TempString.L
00001276  04E2      
00001278  220D      1756          move.l    A5,D1
0000127A  48C2      1757          ext.l     D2
0000127C  2F00      1758          move.l    D0,-(A7)
0000127E  2002      1759          move.l    D2,D0
00001280  C1FC 0064 1760          muls      #100,D0
00001284  D280      1761          add.l     D0,D1
00001286  201F      1762          move.l    (A7)+,D0
00001288  2F01      1763          move.l    D1,-(A7)
0000128A  4EB9 0000 1764          jsr       _strcat
0000128E  2D5C      
00001290  504F      1765          addq.w    #8,A7
00001292  5243      1766          addq.w    #1,D3
00001294  6000 FF7E 1767          bra       DumpRegisters_12
                    1768   DumpRegisters_14:
00001298  6020      1769          bra.s     DumpRegisters_5
                    1770   DumpRegisters_4:
                    1771   ; }
                    1772   ; }
                    1773   ; else
                    1774   ; strcpy(WatchPointString[x], "") ;
0000129A  4879 0000 1775          pea       @m68kde~1_27.L
0000129E  38F8      
000012A0  220D      1776          move.l    A5,D1
000012A2  48C2      1777          ext.l     D2
000012A4  2F00      1778          move.l    D0,-(A7)
000012A6  2002      1779          move.l    D2,D0
000012A8  C1FC 0064 1780          muls      #100,D0
000012AC  D280      1781          add.l     D0,D1
000012AE  201F      1782          move.l    (A7)+,D0
000012B0  2F01      1783          move.l    D1,-(A7)
000012B2  4EB9 0000 1784          jsr       _strcpy
000012B6  2BBC      
000012B8  504F      1785          addq.w    #8,A7
                    1786   DumpRegisters_5:
000012BA  5242      1787          addq.w    #1,D2
000012BC  6000 FE36 1788          bra       DumpRegisters_1
                    1789   DumpRegisters_3:
                    1790   ; }
                    1791   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000012C0  2F39 0803 1792          move.l    _a0.L,-(A7)
000012C4  0104      
000012C6  2F39 0803 1793          move.l    _d0.L,-(A7)
000012CA  00E4      
000012CC  4879 0000 1794          pea       @m68kde~1_28.L
000012D0  38FA      
000012D2  4E93      1795          jsr       (A3)
000012D4  DEFC 000C 1796          add.w     #12,A7
                    1797   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000012D8  2F39 0803 1798          move.l    _a1.L,-(A7)
000012DC  0108      
000012DE  2F39 0803 1799          move.l    _d1.L,-(A7)
000012E2  00E8      
000012E4  4879 0000 1800          pea       @m68kde~1_29.L
000012E8  3916      
000012EA  4E93      1801          jsr       (A3)
000012EC  DEFC 000C 1802          add.w     #12,A7
                    1803   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000012F0  2F39 0803 1804          move.l    _a2.L,-(A7)
000012F4  010C      
000012F6  2F39 0803 1805          move.l    _d2.L,-(A7)
000012FA  00EC      
000012FC  4879 0000 1806          pea       @m68kde~1_30.L
00001300  3930      
00001302  4E93      1807          jsr       (A3)
00001304  DEFC 000C 1808          add.w     #12,A7
                    1809   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001308  2F39 0803 1810          move.l    _a3.L,-(A7)
0000130C  0110      
0000130E  2F39 0803 1811          move.l    _d3.L,-(A7)
00001312  00F0      
00001314  4879 0000 1812          pea       @m68kde~1_31.L
00001318  394A      
0000131A  4E93      1813          jsr       (A3)
0000131C  DEFC 000C 1814          add.w     #12,A7
                    1815   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001320  2F39 0803 1816          move.l    _a4.L,-(A7)
00001324  0114      
00001326  2F39 0803 1817          move.l    _d4.L,-(A7)
0000132A  00F4      
0000132C  4879 0000 1818          pea       @m68kde~1_32.L
00001330  3964      
00001332  4E93      1819          jsr       (A3)
00001334  DEFC 000C 1820          add.w     #12,A7
                    1821   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001338  2F39 0803 1822          move.l    _a5.L,-(A7)
0000133C  0118      
0000133E  2F39 0803 1823          move.l    _d5.L,-(A7)
00001342  00F8      
00001344  4879 0000 1824          pea       @m68kde~1_33.L
00001348  397E      
0000134A  4E93      1825          jsr       (A3)
0000134C  DEFC 000C 1826          add.w     #12,A7
                    1827   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001350  2F39 0803 1828          move.l    _a6.L,-(A7)
00001354  011C      
00001356  2F39 0803 1829          move.l    _d6.L,-(A7)
0000135A  00FC      
0000135C  4879 0000 1830          pea       @m68kde~1_34.L
00001360  3998      
00001362  4E93      1831          jsr       (A3)
00001364  DEFC 000C 1832          add.w     #12,A7
                    1833   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001368  3214      1834          move.w    (A4),D1
0000136A  C27C 2000 1835          and.w     #8192,D1
0000136E  0C41 2000 1836          cmp.w     #8192,D1
00001372  6608      1837          bne.s     DumpRegisters_18
00001374  2239 0803 1838          move.l    _SSP.L,D1
00001378  0124      
0000137A  6006      1839          bra.s     DumpRegisters_19
                    1840   DumpRegisters_18:
0000137C  2239 0803 1841          move.l    _USP.L,D1
00001380  0128      
                    1842   DumpRegisters_19:
00001382  2F01      1843          move.l    D1,-(A7)
00001384  2F39 0803 1844          move.l    _d7.L,-(A7)
00001388  0100      
0000138A  4879 0000 1845          pea       @m68kde~1_35.L
0000138E  39B2      
00001390  4E93      1846          jsr       (A3)
00001392  DEFC 000C 1847          add.w     #12,A7
                    1848   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001396  2F39 0803 1849          move.l    _USP.L,-(A7)
0000139A  0128      
0000139C  4879 0000 1850          pea       @m68kde~1_36.L
000013A0  39CC      
000013A2  4E93      1851          jsr       (A3)
000013A4  504F      1852          addq.w    #8,A7
                    1853   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000013A6  2F39 0803 1854          move.l    _SSP.L,-(A7)
000013AA  0124      
000013AC  4879 0000 1855          pea       @m68kde~1_37.L
000013B0  39EA      
000013B2  4E93      1856          jsr       (A3)
000013B4  504F      1857          addq.w    #8,A7
                    1858   ; printf("\r\n SR = $%04X   ",SR) ;
000013B6  3214      1859          move.w    (A4),D1
000013B8  C2BC 0000 1860          and.l     #65535,D1
000013BC  FFFF      
000013BE  2F01      1861          move.l    D1,-(A7)
000013C0  4879 0000 1862          pea       @m68kde~1_38.L
000013C4  3A0C      
000013C6  4E93      1863          jsr       (A3)
000013C8  504F      1864          addq.w    #8,A7
                    1865   ; // display the status word in characters etc.
                    1866   ; printf("   [") ;
000013CA  4879 0000 1867          pea       @m68kde~1_39.L
000013CE  3A1E      
000013D0  4E93      1868          jsr       (A3)
000013D2  584F      1869          addq.w    #4,A7
                    1870   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000013D4  3014      1871          move.w    (A4),D0
000013D6  C07C 8000 1872          and.w     #32768,D0
000013DA  0C40 8000 1873          cmp.w     #32768,D0
000013DE  660A      1874          bne.s     DumpRegisters_20
000013E0  4878 0054 1875          pea       84
000013E4  4E92      1876          jsr       (A2)
000013E6  584F      1877          addq.w    #4,A7
000013E8  6008      1878          bra.s     DumpRegisters_21
                    1879   DumpRegisters_20:
000013EA  4878 002D 1880          pea       45
000013EE  4E92      1881          jsr       (A2)
000013F0  584F      1882          addq.w    #4,A7
                    1883   DumpRegisters_21:
                    1884   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000013F2  3014      1885          move.w    (A4),D0
000013F4  C07C 2000 1886          and.w     #8192,D0
000013F8  0C40 2000 1887          cmp.w     #8192,D0
000013FC  660A      1888          bne.s     DumpRegisters_22
000013FE  4878 0053 1889          pea       83
00001402  4E92      1890          jsr       (A2)
00001404  584F      1891          addq.w    #4,A7
00001406  6008      1892          bra.s     DumpRegisters_23
                    1893   DumpRegisters_22:
00001408  4878 0055 1894          pea       85
0000140C  4E92      1895          jsr       (A2)
0000140E  584F      1896          addq.w    #4,A7
                    1897   DumpRegisters_23:
                    1898   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001410  3014      1899          move.w    (A4),D0
00001412  C07C 0400 1900          and.w     #1024,D0
00001416  0C40 0400 1901          cmp.w     #1024,D0
0000141A  660A      1902          bne.s     DumpRegisters_24
0000141C  4878 0031 1903          pea       49
00001420  4E92      1904          jsr       (A2)
00001422  584F      1905          addq.w    #4,A7
00001424  6008      1906          bra.s     DumpRegisters_25
                    1907   DumpRegisters_24:
00001426  4878 0030 1908          pea       48
0000142A  4E92      1909          jsr       (A2)
0000142C  584F      1910          addq.w    #4,A7
                    1911   DumpRegisters_25:
                    1912   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
0000142E  3014      1913          move.w    (A4),D0
00001430  C07C 0200 1914          and.w     #512,D0
00001434  0C40 0200 1915          cmp.w     #512,D0
00001438  660A      1916          bne.s     DumpRegisters_26
0000143A  4878 0031 1917          pea       49
0000143E  4E92      1918          jsr       (A2)
00001440  584F      1919          addq.w    #4,A7
00001442  6008      1920          bra.s     DumpRegisters_27
                    1921   DumpRegisters_26:
00001444  4878 0030 1922          pea       48
00001448  4E92      1923          jsr       (A2)
0000144A  584F      1924          addq.w    #4,A7
                    1925   DumpRegisters_27:
                    1926   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000144C  3014      1927          move.w    (A4),D0
0000144E  C07C 0100 1928          and.w     #256,D0
00001452  0C40 0100 1929          cmp.w     #256,D0
00001456  660A      1930          bne.s     DumpRegisters_28
00001458  4878 0031 1931          pea       49
0000145C  4E92      1932          jsr       (A2)
0000145E  584F      1933          addq.w    #4,A7
00001460  6008      1934          bra.s     DumpRegisters_29
                    1935   DumpRegisters_28:
00001462  4878 0030 1936          pea       48
00001466  4E92      1937          jsr       (A2)
00001468  584F      1938          addq.w    #4,A7
                    1939   DumpRegisters_29:
                    1940   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000146A  3014      1941          move.w    (A4),D0
0000146C  C07C 0010 1942          and.w     #16,D0
00001470  0C40 0010 1943          cmp.w     #16,D0
00001474  660A      1944          bne.s     DumpRegisters_30
00001476  4878 0058 1945          pea       88
0000147A  4E92      1946          jsr       (A2)
0000147C  584F      1947          addq.w    #4,A7
0000147E  6008      1948          bra.s     DumpRegisters_31
                    1949   DumpRegisters_30:
00001480  4878 002D 1950          pea       45
00001484  4E92      1951          jsr       (A2)
00001486  584F      1952          addq.w    #4,A7
                    1953   DumpRegisters_31:
                    1954   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001488  3014      1955          move.w    (A4),D0
0000148A  C07C 0008 1956          and.w     #8,D0
0000148E  0C40 0008 1957          cmp.w     #8,D0
00001492  660A      1958          bne.s     DumpRegisters_32
00001494  4878 004E 1959          pea       78
00001498  4E92      1960          jsr       (A2)
0000149A  584F      1961          addq.w    #4,A7
0000149C  6008      1962          bra.s     DumpRegisters_33
                    1963   DumpRegisters_32:
0000149E  4878 002D 1964          pea       45
000014A2  4E92      1965          jsr       (A2)
000014A4  584F      1966          addq.w    #4,A7
                    1967   DumpRegisters_33:
                    1968   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000014A6  3014      1969          move.w    (A4),D0
000014A8  C07C 0004 1970          and.w     #4,D0
000014AC  0C40 0004 1971          cmp.w     #4,D0
000014B0  660A      1972          bne.s     DumpRegisters_34
000014B2  4878 005A 1973          pea       90
000014B6  4E92      1974          jsr       (A2)
000014B8  584F      1975          addq.w    #4,A7
000014BA  6008      1976          bra.s     DumpRegisters_35
                    1977   DumpRegisters_34:
000014BC  4878 002D 1978          pea       45
000014C0  4E92      1979          jsr       (A2)
000014C2  584F      1980          addq.w    #4,A7
                    1981   DumpRegisters_35:
                    1982   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000014C4  3014      1983          move.w    (A4),D0
000014C6  C07C 0002 1984          and.w     #2,D0
000014CA  0C40 0002 1985          cmp.w     #2,D0
000014CE  660A      1986          bne.s     DumpRegisters_36
000014D0  4878 0056 1987          pea       86
000014D4  4E92      1988          jsr       (A2)
000014D6  584F      1989          addq.w    #4,A7
000014D8  6008      1990          bra.s     DumpRegisters_37
                    1991   DumpRegisters_36:
000014DA  4878 002D 1992          pea       45
000014DE  4E92      1993          jsr       (A2)
000014E0  584F      1994          addq.w    #4,A7
                    1995   DumpRegisters_37:
                    1996   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000014E2  3014      1997          move.w    (A4),D0
000014E4  C07C 0001 1998          and.w     #1,D0
000014E8  0C40 0001 1999          cmp.w     #1,D0
000014EC  660A      2000          bne.s     DumpRegisters_38
000014EE  4878 0043 2001          pea       67
000014F2  4E92      2002          jsr       (A2)
000014F4  584F      2003          addq.w    #4,A7
000014F6  6008      2004          bra.s     DumpRegisters_39
                    2005   DumpRegisters_38:
000014F8  4878 002D 2006          pea       45
000014FC  4E92      2007          jsr       (A2)
000014FE  584F      2008          addq.w    #4,A7
                    2009   DumpRegisters_39:
                    2010   ; putchar(']') ;
00001500  4878 005D 2011          pea       93
00001504  4E92      2012          jsr       (A2)
00001506  584F      2013          addq.w    #4,A7
                    2014   ; printf("\r\n PC = $%08X  ", PC) ;
00001508  2F39 0803 2015          move.l    _PC.L,-(A7)
0000150C  0120      
0000150E  4879 0000 2016          pea       @m68kde~1_40.L
00001512  3A24      
00001514  4E93      2017          jsr       (A3)
00001516  504F      2018          addq.w    #8,A7
                    2019   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001518  2039 0803 2020          move.l    _PC.L,D0
0000151C  0120      
0000151E  2040      2021          move.l    D0,A0
00001520  3010      2022          move.w    (A0),D0
00001522  0C40 4E4E 2023          cmp.w     #20046,D0
00001526  660A      2024          bne.s     DumpRegisters_40
                    2025   ; printf("[@ BREAKPOINT]") ;
00001528  4879 0000 2026          pea       @m68kde~1_41.L
0000152C  3A34      
0000152E  4E93      2027          jsr       (A3)
00001530  584F      2028          addq.w    #4,A7
                    2029   DumpRegisters_40:
                    2030   ; printf("\r\n") ;
00001532  4879 0000 2031          pea       @m68kde~1_1.L
00001536  36A0      
00001538  4E93      2032          jsr       (A3)
0000153A  584F      2033          addq.w    #4,A7
                    2034   ; for(i=0; i < 8; i++)    {
0000153C  4244      2035          clr.w     D4
                    2036   DumpRegisters_42:
0000153E  0C44 0008 2037          cmp.w     #8,D4
00001542  6C00 0040 2038          bge       DumpRegisters_44
                    2039   ; if(WatchPointSetOrCleared[i] == 1)
00001546  48C4      2040          ext.l     D4
00001548  2004      2041          move.l    D4,D0
0000154A  E588      2042          lsl.l     #2,D0
0000154C  41F9 0803 2043          lea       _WatchPointSetOrCleared.L,A0
00001550  01A2      
00001552  2030 0800 2044          move.l    0(A0,D0.L),D0
00001556  0C80 0000 2045          cmp.l     #1,D0
0000155A  0001      
0000155C  6622      2046          bne.s     DumpRegisters_45
                    2047   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000155E  220D      2048          move.l    A5,D1
00001560  48C4      2049          ext.l     D4
00001562  2F00      2050          move.l    D0,-(A7)
00001564  2004      2051          move.l    D4,D0
00001566  C1FC 0064 2052          muls      #100,D0
0000156A  D280      2053          add.l     D0,D1
0000156C  201F      2054          move.l    (A7)+,D0
0000156E  2F01      2055          move.l    D1,-(A7)
00001570  48C4      2056          ext.l     D4
00001572  2F04      2057          move.l    D4,-(A7)
00001574  4879 0000 2058          pea       @m68kde~1_42.L
00001578  3A44      
0000157A  4E93      2059          jsr       (A3)
0000157C  DEFC 000C 2060          add.w     #12,A7
                    2061   DumpRegisters_45:
00001580  5244      2062          addq.w    #1,D4
00001582  60BA      2063          bra       DumpRegisters_42
                    2064   DumpRegisters_44:
00001584  4CDF 3CFC 2065          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001588  4E75      2066          rts
                    2067   ; }
                    2068   ; }
                    2069   ; // Trace Exception Handler
                    2070   ; void DumpRegistersandPause(void)
                    2071   ; {
                    2072   _DumpRegistersandPause:
0000158A  2F0A      2073          move.l    A2,-(A7)
0000158C  45F9 0000 2074          lea       _printf.L,A2
00001590  2D8E      
                    2075   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001592  4879 0000 2076          pea       @m68kde~1_43.L
00001596  3A50      
00001598  4E92      2077          jsr       (A2)
0000159A  584F      2078          addq.w    #4,A7
                    2079   ; printf("\r\nBreak Points :[Disabled]") ;
0000159C  4879 0000 2080          pea       @m68kde~1_44.L
000015A0  3A70      
000015A2  4E92      2081          jsr       (A2)
000015A4  584F      2082          addq.w    #4,A7
                    2083   ; DumpRegisters() ;
000015A6  4EB8 10D6 2084          jsr       _DumpRegisters
                    2085   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000015AA  4879 0000 2086          pea       @m68kde~1_45.L
000015AE  3A8C      
000015B0  4E92      2087          jsr       (A2)
000015B2  584F      2088          addq.w    #4,A7
                    2089   ; printf("\r\nPress <ESC> to Resume Program") ;
000015B4  4879 0000 2090          pea       @m68kde~1_46.L
000015B8  3AB8      
000015BA  4E92      2091          jsr       (A2)
000015BC  584F      2092          addq.w    #4,A7
                    2093   ; menu() ;
000015BE  4EB9 0000 2094          jsr       _menu
000015C2  216E      
000015C4  245F      2095          move.l    (A7)+,A2
000015C6  4E75      2096          rts
                    2097   ; }
                    2098   ; void ChangeRegisters(void)
                    2099   ; {
                    2100   _ChangeRegisters:
000015C8  4E56 FFFC 2101          link      A6,#-4
000015CC  48E7 303C 2102          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000015D0  45F9 0000 2103          lea       _printf.L,A2
000015D4  2D8E      
000015D6  47EE FFFC 2104          lea       -4(A6),A3
000015DA  49F8 0CA4 2105          lea       _Get8HexDigits.L,A4
000015DE  4BF8 0B68 2106          lea       __getch.L,A5
                    2107   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2108   ; int reg_val ;
                    2109   ; char c, reg[3] ;
                    2110   ; reg[0] = tolower(_getch()) ;
000015E2  2F00      2111          move.l    D0,-(A7)
000015E4  4E95      2112          jsr       (A5)
000015E6  2200      2113          move.l    D0,D1
000015E8  201F      2114          move.l    (A7)+,D0
000015EA  2F01      2115          move.l    D1,-(A7)
000015EC  4EB9 0000 2116          jsr       _tolower
000015F0  2D0E      
000015F2  584F      2117          addq.w    #4,A7
000015F4  1680      2118          move.b    D0,(A3)
                    2119   ; reg[1] = c = tolower(_getch()) ;
000015F6  2F00      2120          move.l    D0,-(A7)
000015F8  4E95      2121          jsr       (A5)
000015FA  2200      2122          move.l    D0,D1
000015FC  201F      2123          move.l    (A7)+,D0
000015FE  2F01      2124          move.l    D1,-(A7)
00001600  4EB9 0000 2125          jsr       _tolower
00001604  2D0E      
00001606  584F      2126          addq.w    #4,A7
00001608  1400      2127          move.b    D0,D2
0000160A  1740 0001 2128          move.b    D0,1(A3)
                    2129   ; if(reg[0] == (char)('d'))  {    // change data register
0000160E  1013      2130          move.b    (A3),D0
00001610  0C00 0064 2131          cmp.b     #100,D0
00001614  6600 00AE 2132          bne       ChangeRegisters_1
                    2133   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001618  102B 0001 2134          move.b    1(A3),D0
0000161C  0C00 0037 2135          cmp.b     #55,D0
00001620  6E0A      2136          bgt.s     ChangeRegisters_5
00001622  102B 0001 2137          move.b    1(A3),D0
00001626  0C00 0030 2138          cmp.b     #48,D0
0000162A  6C0E      2139          bge.s     ChangeRegisters_3
                    2140   ChangeRegisters_5:
                    2141   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
0000162C  4879 0000 2142          pea       @m68kde~1_47.L
00001630  3AD8      
00001632  4E92      2143          jsr       (A2)
00001634  584F      2144          addq.w    #4,A7
                    2145   ; return ;
00001636  6000 0244 2146          bra       ChangeRegisters_6
                    2147   ChangeRegisters_3:
                    2148   ; }
                    2149   ; else {
                    2150   ; printf("\r\nD%c = ", c) ;
0000163A  4882      2151          ext.w     D2
0000163C  48C2      2152          ext.l     D2
0000163E  2F02      2153          move.l    D2,-(A7)
00001640  4879 0000 2154          pea       @m68kde~1_48.L
00001644  3B04      
00001646  4E92      2155          jsr       (A2)
00001648  504F      2156          addq.w    #8,A7
                    2157   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000164A  42A7      2158          clr.l     -(A7)
0000164C  4E94      2159          jsr       (A4)
0000164E  584F      2160          addq.w    #4,A7
00001650  2600      2161          move.l    D0,D3
                    2162   ; }
                    2163   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2164   ; if(c == (char)('0'))
00001652  0C02 0030 2165          cmp.b     #48,D2
00001656  660A      2166          bne.s     ChangeRegisters_7
                    2167   ; d0 = reg_val ;
00001658  23C3 0803 2168          move.l    D3,_d0.L
0000165C  00E4      
0000165E  6000 0060 2169          bra       ChangeRegisters_20
                    2170   ChangeRegisters_7:
                    2171   ; else if(c == (char)('1'))
00001662  0C02 0031 2172          cmp.b     #49,D2
00001666  660A      2173          bne.s     ChangeRegisters_9
                    2174   ; d1 = reg_val ;
00001668  23C3 0803 2175          move.l    D3,_d1.L
0000166C  00E8      
0000166E  6000 0050 2176          bra       ChangeRegisters_20
                    2177   ChangeRegisters_9:
                    2178   ; else if(c == (char)('2'))
00001672  0C02 0032 2179          cmp.b     #50,D2
00001676  660A      2180          bne.s     ChangeRegisters_11
                    2181   ; d2 = reg_val ;
00001678  23C3 0803 2182          move.l    D3,_d2.L
0000167C  00EC      
0000167E  6000 0040 2183          bra       ChangeRegisters_20
                    2184   ChangeRegisters_11:
                    2185   ; else if(c == (char)('3'))
00001682  0C02 0033 2186          cmp.b     #51,D2
00001686  6608      2187          bne.s     ChangeRegisters_13
                    2188   ; d3 = reg_val ;
00001688  23C3 0803 2189          move.l    D3,_d3.L
0000168C  00F0      
0000168E  6030      2190          bra.s     ChangeRegisters_20
                    2191   ChangeRegisters_13:
                    2192   ; else if(c == (char)('4'))
00001690  0C02 0034 2193          cmp.b     #52,D2
00001694  6608      2194          bne.s     ChangeRegisters_15
                    2195   ; d4 = reg_val ;
00001696  23C3 0803 2196          move.l    D3,_d4.L
0000169A  00F4      
0000169C  6022      2197          bra.s     ChangeRegisters_20
                    2198   ChangeRegisters_15:
                    2199   ; else if(c == (char)('5'))
0000169E  0C02 0035 2200          cmp.b     #53,D2
000016A2  6608      2201          bne.s     ChangeRegisters_17
                    2202   ; d5 = reg_val ;
000016A4  23C3 0803 2203          move.l    D3,_d5.L
000016A8  00F8      
000016AA  6014      2204          bra.s     ChangeRegisters_20
                    2205   ChangeRegisters_17:
                    2206   ; else if(c == (char)('6'))
000016AC  0C02 0036 2207          cmp.b     #54,D2
000016B0  6608      2208          bne.s     ChangeRegisters_19
                    2209   ; d6 = reg_val ;
000016B2  23C3 0803 2210          move.l    D3,_d6.L
000016B6  00FC      
000016B8  6006      2211          bra.s     ChangeRegisters_20
                    2212   ChangeRegisters_19:
                    2213   ; else
                    2214   ; d7 = reg_val ;
000016BA  23C3 0803 2215          move.l    D3,_d7.L
000016BE  0100      
                    2216   ChangeRegisters_20:
000016C0  6000 01B6 2217          bra       ChangeRegisters_51
                    2218   ChangeRegisters_1:
                    2219   ; }
                    2220   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000016C4  1013      2221          move.b    (A3),D0
000016C6  0C00 0061 2222          cmp.b     #97,D0
000016CA  6600 00A6 2223          bne       ChangeRegisters_21
                    2224   ; if((c > (char)('7')) || (c < (char)('0'))) {
000016CE  0C02 0037 2225          cmp.b     #55,D2
000016D2  6E06      2226          bgt.s     ChangeRegisters_25
000016D4  0C02 0030 2227          cmp.b     #48,D2
000016D8  6C0E      2228          bge.s     ChangeRegisters_23
                    2229   ChangeRegisters_25:
                    2230   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000016DA  4879 0000 2231          pea       @m68kde~1_49.L
000016DE  3B0E      
000016E0  4E92      2232          jsr       (A2)
000016E2  584F      2233          addq.w    #4,A7
                    2234   ; return ;
000016E4  6000 0196 2235          bra       ChangeRegisters_6
                    2236   ChangeRegisters_23:
                    2237   ; }
                    2238   ; else {
                    2239   ; printf("\r\nA%c = ", c) ;
000016E8  4882      2240          ext.w     D2
000016EA  48C2      2241          ext.l     D2
000016EC  2F02      2242          move.l    D2,-(A7)
000016EE  4879 0000 2243          pea       @m68kde~1_50.L
000016F2  3B3C      
000016F4  4E92      2244          jsr       (A2)
000016F6  504F      2245          addq.w    #8,A7
                    2246   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016F8  42A7      2247          clr.l     -(A7)
000016FA  4E94      2248          jsr       (A4)
000016FC  584F      2249          addq.w    #4,A7
000016FE  2600      2250          move.l    D0,D3
                    2251   ; }
                    2252   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2253   ; if(c == (char)('0'))
00001700  0C02 0030 2254          cmp.b     #48,D2
00001704  660A      2255          bne.s     ChangeRegisters_26
                    2256   ; a0 = reg_val ;
00001706  23C3 0803 2257          move.l    D3,_a0.L
0000170A  0104      
0000170C  6000 0060 2258          bra       ChangeRegisters_39
                    2259   ChangeRegisters_26:
                    2260   ; else if(c == (char)('1'))
00001710  0C02 0031 2261          cmp.b     #49,D2
00001714  660A      2262          bne.s     ChangeRegisters_28
                    2263   ; a1 = reg_val ;
00001716  23C3 0803 2264          move.l    D3,_a1.L
0000171A  0108      
0000171C  6000 0050 2265          bra       ChangeRegisters_39
                    2266   ChangeRegisters_28:
                    2267   ; else if(c == (char)('2'))
00001720  0C02 0032 2268          cmp.b     #50,D2
00001724  660A      2269          bne.s     ChangeRegisters_30
                    2270   ; a2 = reg_val ;
00001726  23C3 0803 2271          move.l    D3,_a2.L
0000172A  010C      
0000172C  6000 0040 2272          bra       ChangeRegisters_39
                    2273   ChangeRegisters_30:
                    2274   ; else if(c == (char)('3'))
00001730  0C02 0033 2275          cmp.b     #51,D2
00001734  6608      2276          bne.s     ChangeRegisters_32
                    2277   ; a3 = reg_val ;
00001736  23C3 0803 2278          move.l    D3,_a3.L
0000173A  0110      
0000173C  6030      2279          bra.s     ChangeRegisters_39
                    2280   ChangeRegisters_32:
                    2281   ; else if(c == (char)('4'))
0000173E  0C02 0034 2282          cmp.b     #52,D2
00001742  6608      2283          bne.s     ChangeRegisters_34
                    2284   ; a4 = reg_val ;
00001744  23C3 0803 2285          move.l    D3,_a4.L
00001748  0114      
0000174A  6022      2286          bra.s     ChangeRegisters_39
                    2287   ChangeRegisters_34:
                    2288   ; else if(c == (char)('5'))
0000174C  0C02 0035 2289          cmp.b     #53,D2
00001750  6608      2290          bne.s     ChangeRegisters_36
                    2291   ; a5 = reg_val ;
00001752  23C3 0803 2292          move.l    D3,_a5.L
00001756  0118      
00001758  6014      2293          bra.s     ChangeRegisters_39
                    2294   ChangeRegisters_36:
                    2295   ; else if(c == (char)('6'))
0000175A  0C02 0036 2296          cmp.b     #54,D2
0000175E  6608      2297          bne.s     ChangeRegisters_38
                    2298   ; a6 = reg_val ;
00001760  23C3 0803 2299          move.l    D3,_a6.L
00001764  011C      
00001766  6006      2300          bra.s     ChangeRegisters_39
                    2301   ChangeRegisters_38:
                    2302   ; else
                    2303   ; USP = reg_val ;
00001768  23C3 0803 2304          move.l    D3,_USP.L
0000176C  0128      
                    2305   ChangeRegisters_39:
0000176E  6000 0108 2306          bra       ChangeRegisters_51
                    2307   ChangeRegisters_21:
                    2308   ; }
                    2309   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001772  1013      2310          move.b    (A3),D0
00001774  0C00 0075 2311          cmp.b     #117,D0
00001778  6600 004E 2312          bne       ChangeRegisters_40
0000177C  0C02 0073 2313          cmp.b     #115,D2
00001780  6600 0046 2314          bne       ChangeRegisters_40
                    2315   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001784  2F00      2316          move.l    D0,-(A7)
00001786  4E95      2317          jsr       (A5)
00001788  2200      2318          move.l    D0,D1
0000178A  201F      2319          move.l    (A7)+,D0
0000178C  2F01      2320          move.l    D1,-(A7)
0000178E  4EB9 0000 2321          jsr       _tolower
00001792  2D0E      
00001794  584F      2322          addq.w    #4,A7
00001796  0C80 0000 2323          cmp.l     #112,D0
0000179A  0070      
0000179C  6618      2324          bne.s     ChangeRegisters_42
                    2325   ; printf("\r\nUser SP = ") ;
0000179E  4879 0000 2326          pea       @m68kde~1_51.L
000017A2  3B46      
000017A4  4E92      2327          jsr       (A2)
000017A6  584F      2328          addq.w    #4,A7
                    2329   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017A8  42A7      2330          clr.l     -(A7)
000017AA  4E94      2331          jsr       (A4)
000017AC  584F      2332          addq.w    #4,A7
000017AE  23C0 0803 2333          move.l    D0,_USP.L
000017B2  0128      
000017B4  600E      2334          bra.s     ChangeRegisters_43
                    2335   ChangeRegisters_42:
                    2336   ; }
                    2337   ; else {
                    2338   ; printf("\r\nIllegal Register....") ;
000017B6  4879 0000 2339          pea       @m68kde~1_52.L
000017BA  3B54      
000017BC  4E92      2340          jsr       (A2)
000017BE  584F      2341          addq.w    #4,A7
                    2342   ; return ;
000017C0  6000 00BA 2343          bra       ChangeRegisters_6
                    2344   ChangeRegisters_43:
000017C4  6000 00B2 2345          bra       ChangeRegisters_51
                    2346   ChangeRegisters_40:
                    2347   ; }
                    2348   ; }
                    2349   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000017C8  1013      2350          move.b    (A3),D0
000017CA  0C00 0073 2351          cmp.b     #115,D0
000017CE  6600 004E 2352          bne       ChangeRegisters_44
000017D2  0C02 0073 2353          cmp.b     #115,D2
000017D6  6600 0046 2354          bne       ChangeRegisters_44
                    2355   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000017DA  2F00      2356          move.l    D0,-(A7)
000017DC  4E95      2357          jsr       (A5)
000017DE  2200      2358          move.l    D0,D1
000017E0  201F      2359          move.l    (A7)+,D0
000017E2  2F01      2360          move.l    D1,-(A7)
000017E4  4EB9 0000 2361          jsr       _tolower
000017E8  2D0E      
000017EA  584F      2362          addq.w    #4,A7
000017EC  0C80 0000 2363          cmp.l     #112,D0
000017F0  0070      
000017F2  6618      2364          bne.s     ChangeRegisters_46
                    2365   ; printf("\r\nSystem SP = ") ;
000017F4  4879 0000 2366          pea       @m68kde~1_53.L
000017F8  3B6C      
000017FA  4E92      2367          jsr       (A2)
000017FC  584F      2368          addq.w    #4,A7
                    2369   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017FE  42A7      2370          clr.l     -(A7)
00001800  4E94      2371          jsr       (A4)
00001802  584F      2372          addq.w    #4,A7
00001804  23C0 0803 2373          move.l    D0,_SSP.L
00001808  0124      
0000180A  600E      2374          bra.s     ChangeRegisters_47
                    2375   ChangeRegisters_46:
                    2376   ; }
                    2377   ; else {
                    2378   ; printf("\r\nIllegal Register....") ;
0000180C  4879 0000 2379          pea       @m68kde~1_52.L
00001810  3B54      
00001812  4E92      2380          jsr       (A2)
00001814  584F      2381          addq.w    #4,A7
                    2382   ; return ;
00001816  6000 0064 2383          bra       ChangeRegisters_6
                    2384   ChangeRegisters_47:
0000181A  6000 005C 2385          bra       ChangeRegisters_51
                    2386   ChangeRegisters_44:
                    2387   ; }
                    2388   ; }
                    2389   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
0000181E  1013      2390          move.b    (A3),D0
00001820  0C00 0070 2391          cmp.b     #112,D0
00001824  6620      2392          bne.s     ChangeRegisters_48
00001826  0C02 0063 2393          cmp.b     #99,D2
0000182A  661A      2394          bne.s     ChangeRegisters_48
                    2395   ; printf("\r\nPC = ") ;
0000182C  4879 0000 2396          pea       @m68kde~1_54.L
00001830  3B7C      
00001832  4E92      2397          jsr       (A2)
00001834  584F      2398          addq.w    #4,A7
                    2399   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001836  42A7      2400          clr.l     -(A7)
00001838  4E94      2401          jsr       (A4)
0000183A  584F      2402          addq.w    #4,A7
0000183C  23C0 0803 2403          move.l    D0,_PC.L
00001840  0120      
00001842  6000 0034 2404          bra       ChangeRegisters_51
                    2405   ChangeRegisters_48:
                    2406   ; }
                    2407   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001846  1013      2408          move.b    (A3),D0
00001848  0C00 0073 2409          cmp.b     #115,D0
0000184C  6620      2410          bne.s     ChangeRegisters_50
0000184E  0C02 0072 2411          cmp.b     #114,D2
00001852  661A      2412          bne.s     ChangeRegisters_50
                    2413   ; printf("\r\nSR = ") ;
00001854  4879 0000 2414          pea       @m68kde~1_55.L
00001858  3B84      
0000185A  4E92      2415          jsr       (A2)
0000185C  584F      2416          addq.w    #4,A7
                    2417   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
0000185E  42A7      2418          clr.l     -(A7)
00001860  4EB8 0C58 2419          jsr       _Get4HexDigits
00001864  584F      2420          addq.w    #4,A7
00001866  33C0 0803 2421          move.w    D0,_SR.L
0000186A  012C      
0000186C  600A      2422          bra.s     ChangeRegisters_51
                    2423   ChangeRegisters_50:
                    2424   ; }
                    2425   ; else
                    2426   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
0000186E  4879 0000 2427          pea       @m68kde~1_56.L
00001872  3B8C      
00001874  4E92      2428          jsr       (A2)
00001876  584F      2429          addq.w    #4,A7
                    2430   ChangeRegisters_51:
                    2431   ; DumpRegisters() ;
00001878  4EB8 10D6 2432          jsr       _DumpRegisters
                    2433   ChangeRegisters_6:
0000187C  4CDF 3C0C 2434          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001880  4E5E      2435          unlk      A6
00001882  4E75      2436          rts
                    2437   ; }
                    2438   ; void BreakPointDisplay(void)
                    2439   ; {
                    2440   _BreakPointDisplay:
00001884  48E7 3030 2441          movem.l   D2/D3/A2/A3,-(A7)
00001888  45F9 0000 2442          lea       _printf.L,A2
0000188C  2D8E      
0000188E  47F9 0803 2443          lea       _BreakPointAddress.L,A3
00001892  012E      
                    2444   ; int i, BreakPointsSet = 0 ;
00001894  4283      2445          clr.l     D3
                    2446   ; // any break points  set
                    2447   ; for(i = 0; i < 8; i++)  {
00001896  4282      2448          clr.l     D2
                    2449   BreakPointDisplay_1:
00001898  0C82 0000 2450          cmp.l     #8,D2
0000189C  0008      
0000189E  6C1C      2451          bge.s     BreakPointDisplay_3
                    2452   ; if(BreakPointSetOrCleared[i] == 1)
000018A0  2002      2453          move.l    D2,D0
000018A2  E588      2454          lsl.l     #2,D0
000018A4  41F9 0803 2455          lea       _BreakPointSetOrCleared.L,A0
000018A8  015E      
000018AA  2030 0800 2456          move.l    0(A0,D0.L),D0
000018AE  0C80 0000 2457          cmp.l     #1,D0
000018B2  0001      
000018B4  6602      2458          bne.s     BreakPointDisplay_4
                    2459   ; BreakPointsSet = 1;
000018B6  7601      2460          moveq     #1,D3
                    2461   BreakPointDisplay_4:
000018B8  5282      2462          addq.l    #1,D2
000018BA  60DC      2463          bra       BreakPointDisplay_1
                    2464   BreakPointDisplay_3:
                    2465   ; }
                    2466   ; if(BreakPointsSet == 1) {
000018BC  0C83 0000 2467          cmp.l     #1,D3
000018C0  0001      
000018C2  6616      2468          bne.s     BreakPointDisplay_6
                    2469   ; printf("\r\n\r\nNum     Address      Instruction") ;
000018C4  4879 0000 2470          pea       @m68kde~1_57.L
000018C8  3BC8      
000018CA  4E92      2471          jsr       (A2)
000018CC  584F      2472          addq.w    #4,A7
                    2473   ; printf("\r\n---     ---------    -----------") ;
000018CE  4879 0000 2474          pea       @m68kde~1_58.L
000018D2  3BEE      
000018D4  4E92      2475          jsr       (A2)
000018D6  584F      2476          addq.w    #4,A7
000018D8  600A      2477          bra.s     BreakPointDisplay_7
                    2478   BreakPointDisplay_6:
                    2479   ; }
                    2480   ; else
                    2481   ; printf("\r\nNo BreakPoints Set") ;
000018DA  4879 0000 2482          pea       @m68kde~1_59.L
000018DE  3C12      
000018E0  4E92      2483          jsr       (A2)
000018E2  584F      2484          addq.w    #4,A7
                    2485   BreakPointDisplay_7:
                    2486   ; for(i = 0; i < 8; i++)  {
000018E4  4282      2487          clr.l     D2
                    2488   BreakPointDisplay_8:
000018E6  0C82 0000 2489          cmp.l     #8,D2
000018EA  0008      
000018EC  6C00 005A 2490          bge       BreakPointDisplay_10
                    2491   ; // put opcode back, then put break point back
                    2492   ; if(BreakPointSetOrCleared[i] == 1)  {
000018F0  2002      2493          move.l    D2,D0
000018F2  E588      2494          lsl.l     #2,D0
000018F4  41F9 0803 2495          lea       _BreakPointSetOrCleared.L,A0
000018F8  015E      
000018FA  2030 0800 2496          move.l    0(A0,D0.L),D0
000018FE  0C80 0000 2497          cmp.l     #1,D0
00001902  0001      
00001904  6600 003E 2498          bne       BreakPointDisplay_11
                    2499   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001908  2002      2500          move.l    D2,D0
0000190A  E388      2501          lsl.l     #1,D0
0000190C  41F9 0803 2502          lea       _BreakPointInstruction.L,A0
00001910  014E      
00001912  2202      2503          move.l    D2,D1
00001914  E589      2504          lsl.l     #2,D1
00001916  2233 1800 2505          move.l    0(A3,D1.L),D1
0000191A  2241      2506          move.l    D1,A1
0000191C  32B0 0800 2507          move.w    0(A0,D0.L),(A1)
                    2508   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001920  2002      2509          move.l    D2,D0
00001922  E588      2510          lsl.l     #2,D0
00001924  2033 0800 2511          move.l    0(A3,D0.L),D0
00001928  2040      2512          move.l    D0,A0
0000192A  30BC 4E4E 2513          move.w    #20046,(A0)
                    2514   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
0000192E  2202      2515          move.l    D2,D1
00001930  E589      2516          lsl.l     #2,D1
00001932  2F33 1800 2517          move.l    0(A3,D1.L),-(A7)
00001936  2F02      2518          move.l    D2,-(A7)
00001938  4879 0000 2519          pea       @m68kde~1_60.L
0000193C  3C28      
0000193E  4E92      2520          jsr       (A2)
00001940  DEFC 000C 2521          add.w     #12,A7
                    2522   BreakPointDisplay_11:
00001944  5282      2523          addq.l    #1,D2
00001946  609E      2524          bra       BreakPointDisplay_8
                    2525   BreakPointDisplay_10:
                    2526   ; }
                    2527   ; }
                    2528   ; printf("\r\n") ;
00001948  4879 0000 2529          pea       @m68kde~1_1.L
0000194C  36A0      
0000194E  4E92      2530          jsr       (A2)
00001950  584F      2531          addq.w    #4,A7
00001952  4CDF 0C0C 2532          movem.l   (A7)+,D2/D3/A2/A3
00001956  4E75      2533          rts
                    2534   ; }
                    2535   ; void WatchPointDisplay(void)
                    2536   ; {
                    2537   _WatchPointDisplay:
00001958  48E7 3020 2538          movem.l   D2/D3/A2,-(A7)
0000195C  45F9 0000 2539          lea       _printf.L,A2
00001960  2D8E      
                    2540   ; int i ;
                    2541   ; int WatchPointsSet = 0 ;
00001962  4283      2542          clr.l     D3
                    2543   ; // any watchpoints set
                    2544   ; for(i = 0; i < 8; i++)  {
00001964  4282      2545          clr.l     D2
                    2546   WatchPointDisplay_1:
00001966  0C82 0000 2547          cmp.l     #8,D2
0000196A  0008      
0000196C  6C1C      2548          bge.s     WatchPointDisplay_3
                    2549   ; if(WatchPointSetOrCleared[i] == 1)
0000196E  2002      2550          move.l    D2,D0
00001970  E588      2551          lsl.l     #2,D0
00001972  41F9 0803 2552          lea       _WatchPointSetOrCleared.L,A0
00001976  01A2      
00001978  2030 0800 2553          move.l    0(A0,D0.L),D0
0000197C  0C80 0000 2554          cmp.l     #1,D0
00001980  0001      
00001982  6602      2555          bne.s     WatchPointDisplay_4
                    2556   ; WatchPointsSet = 1;
00001984  7601      2557          moveq     #1,D3
                    2558   WatchPointDisplay_4:
00001986  5282      2559          addq.l    #1,D2
00001988  60DC      2560          bra       WatchPointDisplay_1
                    2561   WatchPointDisplay_3:
                    2562   ; }
                    2563   ; if(WatchPointsSet == 1) {
0000198A  0C83 0000 2564          cmp.l     #1,D3
0000198E  0001      
00001990  6616      2565          bne.s     WatchPointDisplay_6
                    2566   ; printf("\r\nNum     Address") ;
00001992  4879 0000 2567          pea       @m68kde~1_61.L
00001996  3C38      
00001998  4E92      2568          jsr       (A2)
0000199A  584F      2569          addq.w    #4,A7
                    2570   ; printf("\r\n---     ---------") ;
0000199C  4879 0000 2571          pea       @m68kde~1_62.L
000019A0  3C4A      
000019A2  4E92      2572          jsr       (A2)
000019A4  584F      2573          addq.w    #4,A7
000019A6  600A      2574          bra.s     WatchPointDisplay_7
                    2575   WatchPointDisplay_6:
                    2576   ; }
                    2577   ; else
                    2578   ; printf("\r\nNo WatchPoints Set") ;
000019A8  4879 0000 2579          pea       @m68kde~1_63.L
000019AC  3C5E      
000019AE  4E92      2580          jsr       (A2)
000019B0  584F      2581          addq.w    #4,A7
                    2582   WatchPointDisplay_7:
                    2583   ; for(i = 0; i < 8; i++)  {
000019B2  4282      2584          clr.l     D2
                    2585   WatchPointDisplay_8:
000019B4  0C82 0000 2586          cmp.l     #8,D2
000019B8  0008      
000019BA  6C00 0038 2587          bge       WatchPointDisplay_10
                    2588   ; if(WatchPointSetOrCleared[i] == 1)
000019BE  2002      2589          move.l    D2,D0
000019C0  E588      2590          lsl.l     #2,D0
000019C2  41F9 0803 2591          lea       _WatchPointSetOrCleared.L,A0
000019C6  01A2      
000019C8  2030 0800 2592          move.l    0(A0,D0.L),D0
000019CC  0C80 0000 2593          cmp.l     #1,D0
000019D0  0001      
000019D2  661C      2594          bne.s     WatchPointDisplay_11
                    2595   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000019D4  2202      2596          move.l    D2,D1
000019D6  E589      2597          lsl.l     #2,D1
000019D8  41F9 0803 2598          lea       _WatchPointAddress.L,A0
000019DC  0182      
000019DE  2F30 1800 2599          move.l    0(A0,D1.L),-(A7)
000019E2  2F02      2600          move.l    D2,-(A7)
000019E4  4879 0000 2601          pea       @m68kde~1_60.L
000019E8  3C28      
000019EA  4E92      2602          jsr       (A2)
000019EC  DEFC 000C 2603          add.w     #12,A7
                    2604   WatchPointDisplay_11:
000019F0  5282      2605          addq.l    #1,D2
000019F2  60C0      2606          bra       WatchPointDisplay_8
                    2607   WatchPointDisplay_10:
                    2608   ; }
                    2609   ; printf("\r\n") ;
000019F4  4879 0000 2610          pea       @m68kde~1_1.L
000019F8  36A0      
000019FA  4E92      2611          jsr       (A2)
000019FC  584F      2612          addq.w    #4,A7
000019FE  4CDF 040C 2613          movem.l   (A7)+,D2/D3/A2
00001A02  4E75      2614          rts
                    2615   ; }
                    2616   ; void BreakPointClear(void)
                    2617   ; {
                    2618   _BreakPointClear:
00001A04  4E56 FFFC 2619          link      A6,#-4
00001A08  48E7 2020 2620          movem.l   D2/A2,-(A7)
00001A0C  45F9 0000 2621          lea       _printf.L,A2
00001A10  2D8E      
                    2622   ; unsigned int i ;
                    2623   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2624   ; BreakPointDisplay() ;
00001A12  4EB8 1884 2625          jsr       _BreakPointDisplay
                    2626   ; printf("\r\nEnter Break Point Number: ") ;
00001A16  4879 0000 2627          pea       @m68kde~1_64.L
00001A1A  3C74      
00001A1C  4E92      2628          jsr       (A2)
00001A1E  584F      2629          addq.w    #4,A7
                    2630   ; i = xtod(_getch()) ;           // get break pointer number
00001A20  2F00      2631          move.l    D0,-(A7)
00001A22  4EB8 0B68 2632          jsr       __getch
00001A26  2200      2633          move.l    D0,D1
00001A28  201F      2634          move.l    (A7)+,D0
00001A2A  2F01      2635          move.l    D1,-(A7)
00001A2C  4EB8 0BD2 2636          jsr       _xtod
00001A30  584F      2637          addq.w    #4,A7
00001A32  C0BC 0000 2638          and.l     #255,D0
00001A36  00FF      
00001A38  2400      2639          move.l    D0,D2
                    2640   ; if((i < 0) || (i > 7))   {
00001A3A  0C82 0000 2641          cmp.l     #0,D2
00001A3E  0000      
00001A40  6508      2642          blo.s     BreakPointClear_3
00001A42  0C82 0000 2643          cmp.l     #7,D2
00001A46  0007      
00001A48  630E      2644          bls.s     BreakPointClear_1
                    2645   BreakPointClear_3:
                    2646   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001A4A  4879 0000 2647          pea       @m68kde~1_65.L
00001A4E  3C92      
00001A50  4E92      2648          jsr       (A2)
00001A52  584F      2649          addq.w    #4,A7
                    2650   ; return ;
00001A54  6000 0080 2651          bra       BreakPointClear_4
                    2652   BreakPointClear_1:
                    2653   ; }
                    2654   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001A58  2002      2655          move.l    D2,D0
00001A5A  E588      2656          lsl.l     #2,D0
00001A5C  41F9 0803 2657          lea       _BreakPointSetOrCleared.L,A0
00001A60  015E      
00001A62  2030 0800 2658          move.l    0(A0,D0.L),D0
00001A66  0C80 0000 2659          cmp.l     #1,D0
00001A6A  0001      
00001A6C  6600 005A 2660          bne       BreakPointClear_5
                    2661   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001A70  2002      2662          move.l    D2,D0
00001A72  E588      2663          lsl.l     #2,D0
00001A74  41F9 0803 2664          lea       _BreakPointAddress.L,A0
00001A78  012E      
00001A7A  2D70 0800 2665          move.l    0(A0,D0.L),-4(A6)
00001A7E  FFFC      
                    2666   ; BreakPointAddress[i] = 0 ;
00001A80  2002      2667          move.l    D2,D0
00001A82  E588      2668          lsl.l     #2,D0
00001A84  41F9 0803 2669          lea       _BreakPointAddress.L,A0
00001A88  012E      
00001A8A  42B0 0800 2670          clr.l     0(A0,D0.L)
                    2671   ; BreakPointSetOrCleared[i] = 0 ;
00001A8E  2002      2672          move.l    D2,D0
00001A90  E588      2673          lsl.l     #2,D0
00001A92  41F9 0803 2674          lea       _BreakPointSetOrCleared.L,A0
00001A96  015E      
00001A98  42B0 0800 2675          clr.l     0(A0,D0.L)
                    2676   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001A9C  2002      2677          move.l    D2,D0
00001A9E  E388      2678          lsl.l     #1,D0
00001AA0  41F9 0803 2679          lea       _BreakPointInstruction.L,A0
00001AA4  014E      
00001AA6  226E FFFC 2680          move.l    -4(A6),A1
00001AAA  32B0 0800 2681          move.w    0(A0,D0.L),(A1)
                    2682   ; BreakPointInstruction[i] = 0 ;
00001AAE  2002      2683          move.l    D2,D0
00001AB0  E388      2684          lsl.l     #1,D0
00001AB2  41F9 0803 2685          lea       _BreakPointInstruction.L,A0
00001AB6  014E      
00001AB8  4270 0800 2686          clr.w     0(A0,D0.L)
                    2687   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001ABC  4879 0000 2688          pea       @m68kde~1_66.L
00001AC0  3CAE      
00001AC2  4E92      2689          jsr       (A2)
00001AC4  584F      2690          addq.w    #4,A7
00001AC6  600A      2691          bra.s     BreakPointClear_6
                    2692   BreakPointClear_5:
                    2693   ; }
                    2694   ; else
                    2695   ; printf("\r\nBreak Point wasn't Set.....") ;
00001AC8  4879 0000 2696          pea       @m68kde~1_67.L
00001ACC  3CCC      
00001ACE  4E92      2697          jsr       (A2)
00001AD0  584F      2698          addq.w    #4,A7
                    2699   BreakPointClear_6:
                    2700   ; BreakPointDisplay() ;
00001AD2  4EB8 1884 2701          jsr       _BreakPointDisplay
                    2702   ; return ;
                    2703   BreakPointClear_4:
00001AD6  4CDF 0404 2704          movem.l   (A7)+,D2/A2
00001ADA  4E5E      2705          unlk      A6
00001ADC  4E75      2706          rts
                    2707   ; }
                    2708   ; void WatchPointClear(void)
                    2709   ; {
                    2710   _WatchPointClear:
00001ADE  48E7 2020 2711          movem.l   D2/A2,-(A7)
00001AE2  45F9 0000 2712          lea       _printf.L,A2
00001AE6  2D8E      
                    2713   ; unsigned int i ;
                    2714   ; WatchPointDisplay() ;
00001AE8  4EB8 1958 2715          jsr       _WatchPointDisplay
                    2716   ; printf("\r\nEnter Watch Point Number: ") ;
00001AEC  4879 0000 2717          pea       @m68kde~1_68.L
00001AF0  3CEA      
00001AF2  4E92      2718          jsr       (A2)
00001AF4  584F      2719          addq.w    #4,A7
                    2720   ; i = xtod(_getch()) ;           // get watch pointer number
00001AF6  2F00      2721          move.l    D0,-(A7)
00001AF8  4EB8 0B68 2722          jsr       __getch
00001AFC  2200      2723          move.l    D0,D1
00001AFE  201F      2724          move.l    (A7)+,D0
00001B00  2F01      2725          move.l    D1,-(A7)
00001B02  4EB8 0BD2 2726          jsr       _xtod
00001B06  584F      2727          addq.w    #4,A7
00001B08  C0BC 0000 2728          and.l     #255,D0
00001B0C  00FF      
00001B0E  2400      2729          move.l    D0,D2
                    2730   ; if((i < 0) || (i > 7))   {
00001B10  0C82 0000 2731          cmp.l     #0,D2
00001B14  0000      
00001B16  6508      2732          blo.s     WatchPointClear_3
00001B18  0C82 0000 2733          cmp.l     #7,D2
00001B1C  0007      
00001B1E  630E      2734          bls.s     WatchPointClear_1
                    2735   WatchPointClear_3:
                    2736   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001B20  4879 0000 2737          pea       @m68kde~1_65.L
00001B24  3C92      
00001B26  4E92      2738          jsr       (A2)
00001B28  584F      2739          addq.w    #4,A7
                    2740   ; return ;
00001B2A  6000 004E 2741          bra       WatchPointClear_4
                    2742   WatchPointClear_1:
                    2743   ; }
                    2744   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001B2E  2002      2745          move.l    D2,D0
00001B30  E588      2746          lsl.l     #2,D0
00001B32  41F9 0803 2747          lea       _WatchPointSetOrCleared.L,A0
00001B36  01A2      
00001B38  2030 0800 2748          move.l    0(A0,D0.L),D0
00001B3C  0C80 0000 2749          cmp.l     #1,D0
00001B40  0001      
00001B42  6628      2750          bne.s     WatchPointClear_5
                    2751   ; WatchPointAddress[i] = 0 ;
00001B44  2002      2752          move.l    D2,D0
00001B46  E588      2753          lsl.l     #2,D0
00001B48  41F9 0803 2754          lea       _WatchPointAddress.L,A0
00001B4C  0182      
00001B4E  42B0 0800 2755          clr.l     0(A0,D0.L)
                    2756   ; WatchPointSetOrCleared[i] = 0 ;
00001B52  2002      2757          move.l    D2,D0
00001B54  E588      2758          lsl.l     #2,D0
00001B56  41F9 0803 2759          lea       _WatchPointSetOrCleared.L,A0
00001B5A  01A2      
00001B5C  42B0 0800 2760          clr.l     0(A0,D0.L)
                    2761   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001B60  4879 0000 2762          pea       @m68kde~1_69.L
00001B64  3D08      
00001B66  4E92      2763          jsr       (A2)
00001B68  584F      2764          addq.w    #4,A7
00001B6A  600A      2765          bra.s     WatchPointClear_6
                    2766   WatchPointClear_5:
                    2767   ; }
                    2768   ; else
                    2769   ; printf("\r\nWatch Point Was not Set.....") ;
00001B6C  4879 0000 2770          pea       @m68kde~1_70.L
00001B70  3D26      
00001B72  4E92      2771          jsr       (A2)
00001B74  584F      2772          addq.w    #4,A7
                    2773   WatchPointClear_6:
                    2774   ; WatchPointDisplay() ;
00001B76  4EB8 1958 2775          jsr       _WatchPointDisplay
                    2776   ; return ;
                    2777   WatchPointClear_4:
00001B7A  4CDF 0404 2778          movem.l   (A7)+,D2/A2
00001B7E  4E75      2779          rts
                    2780   ; }
                    2781   ; void DisableBreakPoints(void)
                    2782   ; {
                    2783   _DisableBreakPoints:
00001B80  4E56 FFFC 2784          link      A6,#-4
00001B84  2F02      2785          move.l    D2,-(A7)
                    2786   ; int i ;
                    2787   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2788   ; for(i = 0; i < 8; i++)  {
00001B86  4282      2789          clr.l     D2
                    2790   DisableBreakPoints_1:
00001B88  0C82 0000 2791          cmp.l     #8,D2
00001B8C  0008      
00001B8E  6C00 003E 2792          bge       DisableBreakPoints_3
                    2793   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001B92  2002      2794          move.l    D2,D0
00001B94  E588      2795          lsl.l     #2,D0
00001B96  41F9 0803 2796          lea       _BreakPointSetOrCleared.L,A0
00001B9A  015E      
00001B9C  2030 0800 2797          move.l    0(A0,D0.L),D0
00001BA0  0C80 0000 2798          cmp.l     #1,D0
00001BA4  0001      
00001BA6  6622      2799          bne.s     DisableBreakPoints_4
                    2800   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BA8  2002      2801          move.l    D2,D0
00001BAA  E588      2802          lsl.l     #2,D0
00001BAC  41F9 0803 2803          lea       _BreakPointAddress.L,A0
00001BB0  012E      
00001BB2  2D70 0800 2804          move.l    0(A0,D0.L),-4(A6)
00001BB6  FFFC      
                    2805   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001BB8  2002      2806          move.l    D2,D0
00001BBA  E388      2807          lsl.l     #1,D0
00001BBC  41F9 0803 2808          lea       _BreakPointInstruction.L,A0
00001BC0  014E      
00001BC2  226E FFFC 2809          move.l    -4(A6),A1
00001BC6  32B0 0800 2810          move.w    0(A0,D0.L),(A1)
                    2811   DisableBreakPoints_4:
00001BCA  5282      2812          addq.l    #1,D2
00001BCC  60BA      2813          bra       DisableBreakPoints_1
                    2814   DisableBreakPoints_3:
00001BCE  241F      2815          move.l    (A7)+,D2
00001BD0  4E5E      2816          unlk      A6
00001BD2  4E75      2817          rts
                    2818   ; }
                    2819   ; }
                    2820   ; }
                    2821   ; void EnableBreakPoints(void)
                    2822   ; {
                    2823   _EnableBreakPoints:
00001BD4  4E56 FFFC 2824          link      A6,#-4
00001BD8  2F02      2825          move.l    D2,-(A7)
                    2826   ; int i ;
                    2827   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2828   ; for(i = 0; i < 8; i++)  {
00001BDA  4282      2829          clr.l     D2
                    2830   EnableBreakPoints_1:
00001BDC  0C82 0000 2831          cmp.l     #8,D2
00001BE0  0008      
00001BE2  6C32      2832          bge.s     EnableBreakPoints_3
                    2833   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001BE4  2002      2834          move.l    D2,D0
00001BE6  E588      2835          lsl.l     #2,D0
00001BE8  41F9 0803 2836          lea       _BreakPointSetOrCleared.L,A0
00001BEC  015E      
00001BEE  2030 0800 2837          move.l    0(A0,D0.L),D0
00001BF2  0C80 0000 2838          cmp.l     #1,D0
00001BF6  0001      
00001BF8  6618      2839          bne.s     EnableBreakPoints_4
                    2840   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BFA  2002      2841          move.l    D2,D0
00001BFC  E588      2842          lsl.l     #2,D0
00001BFE  41F9 0803 2843          lea       _BreakPointAddress.L,A0
00001C02  012E      
00001C04  2D70 0800 2844          move.l    0(A0,D0.L),-4(A6)
00001C08  FFFC      
                    2845   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001C0A  206E FFFC 2846          move.l    -4(A6),A0
00001C0E  30BC 4E4E 2847          move.w    #20046,(A0)
                    2848   EnableBreakPoints_4:
00001C12  5282      2849          addq.l    #1,D2
00001C14  60C6      2850          bra       EnableBreakPoints_1
                    2851   EnableBreakPoints_3:
00001C16  241F      2852          move.l    (A7)+,D2
00001C18  4E5E      2853          unlk      A6
00001C1A  4E75      2854          rts
                    2855   ; }
                    2856   ; }
                    2857   ; }
                    2858   ; void KillAllBreakPoints(void)
                    2859   ; {
                    2860   _KillAllBreakPoints:
00001C1C  4E56 FFFC 2861          link      A6,#-4
00001C20  2F02      2862          move.l    D2,-(A7)
                    2863   ; int i ;
                    2864   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2865   ; for(i = 0; i < 8; i++)  {
00001C22  4282      2866          clr.l     D2
                    2867   KillAllBreakPoints_1:
00001C24  0C82 0000 2868          cmp.l     #8,D2
00001C28  0008      
00001C2A  6C00 0052 2869          bge       KillAllBreakPoints_3
                    2870   ; // clear BP
                    2871   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C2E  2002      2872          move.l    D2,D0
00001C30  E588      2873          lsl.l     #2,D0
00001C32  41F9 0803 2874          lea       _BreakPointAddress.L,A0
00001C36  012E      
00001C38  2D70 0800 2875          move.l    0(A0,D0.L),-4(A6)
00001C3C  FFFC      
                    2876   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001C3E  2002      2877          move.l    D2,D0
00001C40  E388      2878          lsl.l     #1,D0
00001C42  41F9 0803 2879          lea       _BreakPointInstruction.L,A0
00001C46  014E      
00001C48  226E FFFC 2880          move.l    -4(A6),A1
00001C4C  32B0 0800 2881          move.w    0(A0,D0.L),(A1)
                    2882   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C50  2002      2883          move.l    D2,D0
00001C52  E588      2884          lsl.l     #2,D0
00001C54  41F9 0803 2885          lea       _BreakPointAddress.L,A0
00001C58  012E      
00001C5A  42B0 0800 2886          clr.l     0(A0,D0.L)
                    2887   ; BreakPointInstruction[i] = 0 ;
00001C5E  2002      2888          move.l    D2,D0
00001C60  E388      2889          lsl.l     #1,D0
00001C62  41F9 0803 2890          lea       _BreakPointInstruction.L,A0
00001C66  014E      
00001C68  4270 0800 2891          clr.w     0(A0,D0.L)
                    2892   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C6C  2002      2893          move.l    D2,D0
00001C6E  E588      2894          lsl.l     #2,D0
00001C70  41F9 0803 2895          lea       _BreakPointSetOrCleared.L,A0
00001C74  015E      
00001C76  42B0 0800 2896          clr.l     0(A0,D0.L)
00001C7A  5282      2897          addq.l    #1,D2
00001C7C  60A6      2898          bra       KillAllBreakPoints_1
                    2899   KillAllBreakPoints_3:
00001C7E  241F      2900          move.l    (A7)+,D2
00001C80  4E5E      2901          unlk      A6
00001C82  4E75      2902          rts
                    2903   ; }
                    2904   ; //BreakPointDisplay() ;       // display the break points
                    2905   ; }
                    2906   ; void KillAllWatchPoints(void)
                    2907   ; {
                    2908   _KillAllWatchPoints:
00001C84  2F02      2909          move.l    D2,-(A7)
                    2910   ; int i ;
                    2911   ; for(i = 0; i < 8; i++)  {
00001C86  4282      2912          clr.l     D2
                    2913   KillAllWatchPoints_1:
00001C88  0C82 0000 2914          cmp.l     #8,D2
00001C8C  0008      
00001C8E  6C20      2915          bge.s     KillAllWatchPoints_3
                    2916   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C90  2002      2917          move.l    D2,D0
00001C92  E588      2918          lsl.l     #2,D0
00001C94  41F9 0803 2919          lea       _WatchPointAddress.L,A0
00001C98  0182      
00001C9A  42B0 0800 2920          clr.l     0(A0,D0.L)
                    2921   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C9E  2002      2922          move.l    D2,D0
00001CA0  E588      2923          lsl.l     #2,D0
00001CA2  41F9 0803 2924          lea       _WatchPointSetOrCleared.L,A0
00001CA6  01A2      
00001CA8  42B0 0800 2925          clr.l     0(A0,D0.L)
00001CAC  5282      2926          addq.l    #1,D2
00001CAE  60D8      2927          bra       KillAllWatchPoints_1
                    2928   KillAllWatchPoints_3:
00001CB0  241F      2929          move.l    (A7)+,D2
00001CB2  4E75      2930          rts
                    2931   ; }
                    2932   ; //WatchPointDisplay() ;       // display the break points
                    2933   ; }
                    2934   ; void SetBreakPoint(void)
                    2935   ; {
                    2936   _SetBreakPoint:
00001CB4  4E56 FFFC 2937          link      A6,#-4
00001CB8  48E7 3830 2938          movem.l   D2/D3/D4/A2/A3,-(A7)
00001CBC  45F9 0000 2939          lea       _printf.L,A2
00001CC0  2D8E      
00001CC2  47F9 0803 2940          lea       _BreakPointSetOrCleared.L,A3
00001CC6  015E      
                    2941   ; int i ;
                    2942   ; int BPNumber;
                    2943   ; int BPAddress;
                    2944   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2945   ; // see if any free break points
                    2946   ; for(i = 0; i < 8; i ++) {
00001CC8  4282      2947          clr.l     D2
                    2948   SetBreakPoint_1:
00001CCA  0C82 0000 2949          cmp.l     #8,D2
00001CCE  0008      
00001CD0  6C10      2950          bge.s     SetBreakPoint_3
                    2951   ; if( BreakPointSetOrCleared[i] == 0)
00001CD2  2002      2952          move.l    D2,D0
00001CD4  E588      2953          lsl.l     #2,D0
00001CD6  2033 0800 2954          move.l    0(A3,D0.L),D0
00001CDA  6602      2955          bne.s     SetBreakPoint_4
                    2956   ; break ;         // if spare BP found allow user to set it
00001CDC  6004      2957          bra.s     SetBreakPoint_3
                    2958   SetBreakPoint_4:
00001CDE  5282      2959          addq.l    #1,D2
00001CE0  60E8      2960          bra       SetBreakPoint_1
                    2961   SetBreakPoint_3:
                    2962   ; }
                    2963   ; if(i == 8) {
00001CE2  0C82 0000 2964          cmp.l     #8,D2
00001CE6  0008      
00001CE8  660E      2965          bne.s     SetBreakPoint_6
                    2966   ; printf("\r\nNo FREE Break Points.....") ;
00001CEA  4879 0000 2967          pea       @m68kde~1_71.L
00001CEE  3D46      
00001CF0  4E92      2968          jsr       (A2)
00001CF2  584F      2969          addq.w    #4,A7
                    2970   ; return ;
00001CF4  6000 00D6 2971          bra       SetBreakPoint_15
                    2972   SetBreakPoint_6:
                    2973   ; }
                    2974   ; printf("\r\nBreak Point Address: ") ;
00001CF8  4879 0000 2975          pea       @m68kde~1_72.L
00001CFC  3D62      
00001CFE  4E92      2976          jsr       (A2)
00001D00  584F      2977          addq.w    #4,A7
                    2978   ; BPAddress = Get8HexDigits(0) ;
00001D02  42A7      2979          clr.l     -(A7)
00001D04  4EB8 0CA4 2980          jsr       _Get8HexDigits
00001D08  584F      2981          addq.w    #4,A7
00001D0A  2600      2982          move.l    D0,D3
                    2983   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001D0C  2803      2984          move.l    D3,D4
                    2985   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001D0E  2003      2986          move.l    D3,D0
00001D10  C0BC 0000 2987          and.l     #1,D0
00001D14  0001      
00001D16  0C80 0000 2988          cmp.l     #1,D0
00001D1A  0001      
00001D1C  660E      2989          bne.s     SetBreakPoint_9
                    2990   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001D1E  4879 0000 2991          pea       @m68kde~1_73.L
00001D22  3D7A      
00001D24  4E92      2992          jsr       (A2)
00001D26  584F      2993          addq.w    #4,A7
                    2994   ; return ;
00001D28  6000 00A2 2995          bra       SetBreakPoint_15
                    2996   SetBreakPoint_9:
                    2997   ; }
                    2998   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001D2C  0C83 0000 2999          cmp.l     #32768,D3
00001D30  8000      
00001D32  640E      3000          bhs.s     SetBreakPoint_11
                    3001   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001D34  4879 0000 3002          pea       @m68kde~1_74.L
00001D38  3DB0      
00001D3A  4E92      3003          jsr       (A2)
00001D3C  584F      3004          addq.w    #4,A7
                    3005   ; return ;
00001D3E  6000 008C 3006          bra       SetBreakPoint_15
                    3007   SetBreakPoint_11:
                    3008   ; }
                    3009   ; // search for first free bp or existing same BP
                    3010   ; for(i = 0; i < 8; i++)  {
00001D42  4282      3011          clr.l     D2
                    3012   SetBreakPoint_13:
00001D44  0C82 0000 3013          cmp.l     #8,D2
00001D48  0008      
00001D4A  6C00 0080 3014          bge       SetBreakPoint_15
                    3015   ; if(BreakPointAddress[i] == BPAddress)   {
00001D4E  2002      3016          move.l    D2,D0
00001D50  E588      3017          lsl.l     #2,D0
00001D52  41F9 0803 3018          lea       _BreakPointAddress.L,A0
00001D56  012E      
00001D58  B6B0 0800 3019          cmp.l     0(A0,D0.L),D3
00001D5C  6610      3020          bne.s     SetBreakPoint_16
                    3021   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001D5E  2F03      3022          move.l    D3,-(A7)
00001D60  4879 0000 3023          pea       @m68kde~1_75.L
00001D64  3DF8      
00001D66  4E92      3024          jsr       (A2)
00001D68  504F      3025          addq.w    #8,A7
                    3026   ; return ;
00001D6A  6000 0060 3027          bra       SetBreakPoint_15
                    3028   SetBreakPoint_16:
                    3029   ; }
                    3030   ; if(BreakPointSetOrCleared[i] == 0) {
00001D6E  2002      3031          move.l    D2,D0
00001D70  E588      3032          lsl.l     #2,D0
00001D72  2033 0800 3033          move.l    0(A3,D0.L),D0
00001D76  6600 004E 3034          bne       SetBreakPoint_18
                    3035   ; // set BP here
                    3036   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001D7A  2002      3037          move.l    D2,D0
00001D7C  E588      3038          lsl.l     #2,D0
00001D7E  27BC 0000 3039          move.l    #1,0(A3,D0.L)
00001D82  0001 0800 
                    3040   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001D86  2044      3041          move.l    D4,A0
00001D88  2002      3042          move.l    D2,D0
00001D8A  E388      3043          lsl.l     #1,D0
00001D8C  43F9 0803 3044          lea       _BreakPointInstruction.L,A1
00001D90  014E      
00001D92  3390 0800 3045          move.w    (A0),0(A1,D0.L)
                    3046   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001D96  2F04      3047          move.l    D4,-(A7)
00001D98  4879 0000 3048          pea       @m68kde~1_76.L
00001D9C  3E30      
00001D9E  4E92      3049          jsr       (A2)
00001DA0  504F      3050          addq.w    #8,A7
                    3051   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001DA2  2044      3052          move.l    D4,A0
00001DA4  30BC 4E4E 3053          move.w    #20046,(A0)
                    3054   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001DA8  2002      3055          move.l    D2,D0
00001DAA  E588      3056          lsl.l     #2,D0
00001DAC  41F9 0803 3057          lea       _BreakPointAddress.L,A0
00001DB0  012E      
00001DB2  2183 0800 3058          move.l    D3,0(A0,D0.L)
                    3059   ; printf("\r\n") ;
00001DB6  4879 0000 3060          pea       @m68kde~1_1.L
00001DBA  36A0      
00001DBC  4E92      3061          jsr       (A2)
00001DBE  584F      3062          addq.w    #4,A7
                    3063   ; BreakPointDisplay() ;       // display the break points
00001DC0  4EB8 1884 3064          jsr       _BreakPointDisplay
                    3065   ; return ;
00001DC4  6006      3066          bra.s     SetBreakPoint_15
                    3067   SetBreakPoint_18:
00001DC6  5282      3068          addq.l    #1,D2
00001DC8  6000 FF7A 3069          bra       SetBreakPoint_13
                    3070   SetBreakPoint_15:
00001DCC  4CDF 0C1C 3071          movem.l   (A7)+,D2/D3/D4/A2/A3
00001DD0  4E5E      3072          unlk      A6
00001DD2  4E75      3073          rts
                    3074   ; }
                    3075   ; }
                    3076   ; }
                    3077   ; void SetWatchPoint(void)
                    3078   ; {
                    3079   _SetWatchPoint:
00001DD4  4E56 FFF8 3080          link      A6,#-8
00001DD8  48E7 3030 3081          movem.l   D2/D3/A2/A3,-(A7)
00001DDC  45F9 0000 3082          lea       _printf.L,A2
00001DE0  2D8E      
00001DE2  47F9 0803 3083          lea       _WatchPointSetOrCleared.L,A3
00001DE6  01A2      
                    3084   ; int i ;
                    3085   ; int WPNumber;
                    3086   ; int WPAddress;
                    3087   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3088   ; // see if any free break points
                    3089   ; for(i = 0; i < 8; i ++) {
00001DE8  4282      3090          clr.l     D2
                    3091   SetWatchPoint_1:
00001DEA  0C82 0000 3092          cmp.l     #8,D2
00001DEE  0008      
00001DF0  6C10      3093          bge.s     SetWatchPoint_3
                    3094   ; if( WatchPointSetOrCleared[i] == 0)
00001DF2  2002      3095          move.l    D2,D0
00001DF4  E588      3096          lsl.l     #2,D0
00001DF6  2033 0800 3097          move.l    0(A3,D0.L),D0
00001DFA  6602      3098          bne.s     SetWatchPoint_4
                    3099   ; break ;         // if spare WP found allow user to set it
00001DFC  6004      3100          bra.s     SetWatchPoint_3
                    3101   SetWatchPoint_4:
00001DFE  5282      3102          addq.l    #1,D2
00001E00  60E8      3103          bra       SetWatchPoint_1
                    3104   SetWatchPoint_3:
                    3105   ; }
                    3106   ; if(i == 8) {
00001E02  0C82 0000 3107          cmp.l     #8,D2
00001E06  0008      
00001E08  660E      3108          bne.s     SetWatchPoint_6
                    3109   ; printf("\r\nNo FREE Watch Points.....") ;
00001E0A  4879 0000 3110          pea       @m68kde~1_77.L
00001E0E  3E56      
00001E10  4E92      3111          jsr       (A2)
00001E12  584F      3112          addq.w    #4,A7
                    3113   ; return ;
00001E14  6000 008C 3114          bra       SetWatchPoint_11
                    3115   SetWatchPoint_6:
                    3116   ; }
                    3117   ; printf("\r\nWatch Point Address: ") ;
00001E18  4879 0000 3118          pea       @m68kde~1_78.L
00001E1C  3E72      
00001E1E  4E92      3119          jsr       (A2)
00001E20  584F      3120          addq.w    #4,A7
                    3121   ; WPAddress = Get8HexDigits(0) ;
00001E22  42A7      3122          clr.l     -(A7)
00001E24  4EB8 0CA4 3123          jsr       _Get8HexDigits
00001E28  584F      3124          addq.w    #4,A7
00001E2A  2600      3125          move.l    D0,D3
                    3126   ; // search for first free wp or existing same wp
                    3127   ; for(i = 0; i < 8; i++)  {
00001E2C  4282      3128          clr.l     D2
                    3129   SetWatchPoint_9:
00001E2E  0C82 0000 3130          cmp.l     #8,D2
00001E32  0008      
00001E34  6C00 006C 3131          bge       SetWatchPoint_11
                    3132   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001E38  2002      3133          move.l    D2,D0
00001E3A  E588      3134          lsl.l     #2,D0
00001E3C  41F9 0803 3135          lea       _WatchPointAddress.L,A0
00001E40  0182      
00001E42  B6B0 0800 3136          cmp.l     0(A0,D0.L),D3
00001E46  6614      3137          bne.s     SetWatchPoint_12
00001E48  4A83      3138          tst.l     D3
00001E4A  6710      3139          beq.s     SetWatchPoint_12
                    3140   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001E4C  2F03      3141          move.l    D3,-(A7)
00001E4E  4879 0000 3142          pea       @m68kde~1_79.L
00001E52  3E8A      
00001E54  4E92      3143          jsr       (A2)
00001E56  504F      3144          addq.w    #8,A7
                    3145   ; return ;
00001E58  6000 0048 3146          bra       SetWatchPoint_11
                    3147   SetWatchPoint_12:
                    3148   ; }
                    3149   ; if(WatchPointSetOrCleared[i] == 0) {
00001E5C  2002      3150          move.l    D2,D0
00001E5E  E588      3151          lsl.l     #2,D0
00001E60  2033 0800 3152          move.l    0(A3,D0.L),D0
00001E64  6600 0038 3153          bne       SetWatchPoint_14
                    3154   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001E68  2002      3155          move.l    D2,D0
00001E6A  E588      3156          lsl.l     #2,D0
00001E6C  27BC 0000 3157          move.l    #1,0(A3,D0.L)
00001E70  0001 0800 
                    3158   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001E74  2F03      3159          move.l    D3,-(A7)
00001E76  4879 0000 3160          pea       @m68kde~1_80.L
00001E7A  3EC0      
00001E7C  4E92      3161          jsr       (A2)
00001E7E  504F      3162          addq.w    #8,A7
                    3163   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001E80  2002      3164          move.l    D2,D0
00001E82  E588      3165          lsl.l     #2,D0
00001E84  41F9 0803 3166          lea       _WatchPointAddress.L,A0
00001E88  0182      
00001E8A  2183 0800 3167          move.l    D3,0(A0,D0.L)
                    3168   ; printf("\r\n") ;
00001E8E  4879 0000 3169          pea       @m68kde~1_1.L
00001E92  36A0      
00001E94  4E92      3170          jsr       (A2)
00001E96  584F      3171          addq.w    #4,A7
                    3172   ; WatchPointDisplay() ;       // display the break points
00001E98  4EB8 1958 3173          jsr       _WatchPointDisplay
                    3174   ; return ;
00001E9C  6004      3175          bra.s     SetWatchPoint_11
                    3176   SetWatchPoint_14:
00001E9E  5282      3177          addq.l    #1,D2
00001EA0  608C      3178          bra       SetWatchPoint_9
                    3179   SetWatchPoint_11:
00001EA2  4CDF 0C0C 3180          movem.l   (A7)+,D2/D3/A2/A3
00001EA6  4E5E      3181          unlk      A6
00001EA8  4E75      3182          rts
                    3183   ; }
                    3184   ; }
                    3185   ; }
                    3186   ; void HandleBreakPoint(void)
                    3187   ; {
                    3188   _HandleBreakPoint:
00001EAA  4E56 FFFC 3189          link      A6,#-4
00001EAE  48E7 0038 3190          movem.l   A2/A3/A4,-(A7)
00001EB2  45F9 0803 3191          lea       _i.L,A2
00001EB6  00C4      
00001EB8  47F9 0000 3192          lea       _printf.L,A3
00001EBC  2D8E      
00001EBE  49F9 0803 3193          lea       _PC.L,A4
00001EC2  0120      
                    3194   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3195   ; // now we have to put the break point back to run the instruction
                    3196   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3197   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001EC4  5594      3198          subq.l    #2,(A4)
                    3199   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001EC6  4879 0000 3200          pea       @m68kde~1_81.L
00001ECA  3EE6      
00001ECC  4E93      3201          jsr       (A3)
00001ECE  584F      3202          addq.w    #4,A7
                    3203   ; printf("\r\nSingle Step : [ON]") ;
00001ED0  4879 0000 3204          pea       @m68kde~1_82.L
00001ED4  3EFA      
00001ED6  4E93      3205          jsr       (A3)
00001ED8  584F      3206          addq.w    #4,A7
                    3207   ; printf("\r\nBreakPoints : [Enabled]") ;
00001EDA  4879 0000 3208          pea       @m68kde~1_83.L
00001EDE  3F10      
00001EE0  4E93      3209          jsr       (A3)
00001EE2  584F      3210          addq.w    #4,A7
                    3211   ; // now clear the break point (put original instruction back)
                    3212   ; ProgramBreakPointAddress = PC ;
00001EE4  2D54 FFFC 3213          move.l    (A4),-4(A6)
                    3214   ; for(i = 0; i < 8; i ++) {
00001EE8  4292      3215          clr.l     (A2)
                    3216   HandleBreakPoint_1:
00001EEA  2012      3217          move.l    (A2),D0
00001EEC  0C80 0000 3218          cmp.l     #8,D0
00001EF0  0008      
00001EF2  6400 0056 3219          bhs       HandleBreakPoint_3
                    3220   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001EF6  2012      3221          move.l    (A2),D0
00001EF8  E588      3222          lsl.l     #2,D0
00001EFA  41F9 0803 3223          lea       _BreakPointAddress.L,A0
00001EFE  012E      
00001F00  2230 0800 3224          move.l    0(A0,D0.L),D1
00001F04  B294      3225          cmp.l     (A4),D1
00001F06  6600 003E 3226          bne       HandleBreakPoint_4
                    3227   ; BreakPointAddress[i] = 0 ;
00001F0A  2012      3228          move.l    (A2),D0
00001F0C  E588      3229          lsl.l     #2,D0
00001F0E  41F9 0803 3230          lea       _BreakPointAddress.L,A0
00001F12  012E      
00001F14  42B0 0800 3231          clr.l     0(A0,D0.L)
                    3232   ; BreakPointSetOrCleared[i] = 0 ;
00001F18  2012      3233          move.l    (A2),D0
00001F1A  E588      3234          lsl.l     #2,D0
00001F1C  41F9 0803 3235          lea       _BreakPointSetOrCleared.L,A0
00001F20  015E      
00001F22  42B0 0800 3236          clr.l     0(A0,D0.L)
                    3237   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001F26  2012      3238          move.l    (A2),D0
00001F28  E388      3239          lsl.l     #1,D0
00001F2A  41F9 0803 3240          lea       _BreakPointInstruction.L,A0
00001F2E  014E      
00001F30  226E FFFC 3241          move.l    -4(A6),A1
00001F34  32B0 0800 3242          move.w    0(A0,D0.L),(A1)
                    3243   ; BreakPointInstruction[i] = 0 ;
00001F38  2012      3244          move.l    (A2),D0
00001F3A  E388      3245          lsl.l     #1,D0
00001F3C  41F9 0803 3246          lea       _BreakPointInstruction.L,A0
00001F40  014E      
00001F42  4270 0800 3247          clr.w     0(A0,D0.L)
                    3248   HandleBreakPoint_4:
00001F46  5292      3249          addq.l    #1,(A2)
00001F48  60A0      3250          bra       HandleBreakPoint_1
                    3251   HandleBreakPoint_3:
                    3252   ; }
                    3253   ; }
                    3254   ; DumpRegisters() ;
00001F4A  4EB8 10D6 3255          jsr       _DumpRegisters
                    3256   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001F4E  4879 0000 3257          pea       @m68kde~1_45.L
00001F52  3A8C      
00001F54  4E93      3258          jsr       (A3)
00001F56  584F      3259          addq.w    #4,A7
                    3260   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001F58  4879 0000 3261          pea       @m68kde~1_84.L
00001F5C  3F2A      
00001F5E  4E93      3262          jsr       (A3)
00001F60  584F      3263          addq.w    #4,A7
                    3264   ; menu() ;
00001F62  4EB9 0000 3265          jsr       _menu
00001F66  216E      
00001F68  4CDF 1C00 3266          movem.l   (A7)+,A2/A3/A4
00001F6C  4E5E      3267          unlk      A6
00001F6E  4E75      3268          rts
                    3269   ; }
                    3270   ; void UnknownCommand()
                    3271   ; {
                    3272   _UnknownCommand:
                    3273   ; printf("\r\nUnknown Command.....\r\n") ;
00001F70  4879 0000 3274          pea       @m68kde~1_85.L
00001F74  3F52      
00001F76  4EB9 0000 3275          jsr       _printf
00001F7A  2D8E      
00001F7C  584F      3276          addq.w    #4,A7
                    3277   ; Help() ;
00001F7E  4EB9 0000 3278          jsr       _Help
00001F82  2094      
00001F84  4E75      3279          rts
                    3280   ; }
                    3281   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3282   ; void CallDebugMonitor(void)
                    3283   ; {
                    3284   _CallDebugMonitor:
                    3285   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001F86  4879 0000 3286          pea       @m68kde~1_86.L
00001F8A  3F6C      
00001F8C  4EB9 0000 3287          jsr       _printf
00001F90  2D8E      
00001F92  584F      3288          addq.w    #4,A7
                    3289   ; menu();
00001F94  4EB9 0000 3290          jsr       _menu
00001F98  216E      
00001F9A  4E75      3291          rts
                    3292   ; }
                    3293   ; void Breakpoint(void)
                    3294   ; {
                    3295   _Breakpoint:
00001F9C  2F02      3296          move.l    D2,-(A7)
                    3297   ; char c;
                    3298   ; c = toupper(_getch());
00001F9E  2F00      3299          move.l    D0,-(A7)
00001FA0  4EB8 0B68 3300          jsr       __getch
00001FA4  2200      3301          move.l    D0,D1
00001FA6  201F      3302          move.l    (A7)+,D0
00001FA8  2F01      3303          move.l    D1,-(A7)
00001FAA  4EB9 0000 3304          jsr       _toupper
00001FAE  2D72      
00001FB0  584F      3305          addq.w    #4,A7
00001FB2  1400      3306          move.b    D0,D2
                    3307   ; if( c == (char)('D'))                                      // BreakPoint Display
00001FB4  0C02 0044 3308          cmp.b     #68,D2
00001FB8  6608      3309          bne.s     Breakpoint_1
                    3310   ; BreakPointDisplay() ;
00001FBA  4EB8 1884 3311          jsr       _BreakPointDisplay
00001FBE  6000 0054 3312          bra       Breakpoint_10
                    3313   Breakpoint_1:
                    3314   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001FC2  0C02 004B 3315          cmp.b     #75,D2
00001FC6  6630      3316          bne.s     Breakpoint_3
                    3317   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001FC8  4879 0000 3318          pea       @m68kde~1_87.L
00001FCC  3F8C      
00001FCE  4EB9 0000 3319          jsr       _printf
00001FD2  2D8E      
00001FD4  584F      3320          addq.w    #4,A7
                    3321   ; c = toupper(_getch());
00001FD6  2F00      3322          move.l    D0,-(A7)
00001FD8  4EB8 0B68 3323          jsr       __getch
00001FDC  2200      3324          move.l    D0,D1
00001FDE  201F      3325          move.l    (A7)+,D0
00001FE0  2F01      3326          move.l    D1,-(A7)
00001FE2  4EB9 0000 3327          jsr       _toupper
00001FE6  2D72      
00001FE8  584F      3328          addq.w    #4,A7
00001FEA  1400      3329          move.b    D0,D2
                    3330   ; if(c == (char)('Y'))
00001FEC  0C02 0059 3331          cmp.b     #89,D2
00001FF0  6604      3332          bne.s     Breakpoint_5
                    3333   ; KillAllBreakPoints() ;
00001FF2  4EB8 1C1C 3334          jsr       _KillAllBreakPoints
                    3335   Breakpoint_5:
00001FF6  601C      3336          bra.s     Breakpoint_10
                    3337   Breakpoint_3:
                    3338   ; }
                    3339   ; else if(c == (char)('S')) {
00001FF8  0C02 0053 3340          cmp.b     #83,D2
00001FFC  6606      3341          bne.s     Breakpoint_7
                    3342   ; SetBreakPoint() ;
00001FFE  4EB8 1CB4 3343          jsr       _SetBreakPoint
00002002  6010      3344          bra.s     Breakpoint_10
                    3345   Breakpoint_7:
                    3346   ; }
                    3347   ; else if(c == (char)('C')) {
00002004  0C02 0043 3348          cmp.b     #67,D2
00002008  6606      3349          bne.s     Breakpoint_9
                    3350   ; BreakPointClear() ;
0000200A  4EB8 1A04 3351          jsr       _BreakPointClear
0000200E  6004      3352          bra.s     Breakpoint_10
                    3353   Breakpoint_9:
                    3354   ; }
                    3355   ; else
                    3356   ; UnknownCommand() ;
00002010  4EB8 1F70 3357          jsr       _UnknownCommand
                    3358   Breakpoint_10:
00002014  241F      3359          move.l    (A7)+,D2
00002016  4E75      3360          rts
                    3361   ; }
                    3362   ; void Watchpoint(void)
                    3363   ; {
                    3364   _Watchpoint:
00002018  2F02      3365          move.l    D2,-(A7)
                    3366   ; char c;
                    3367   ; c = toupper(_getch());
0000201A  2F00      3368          move.l    D0,-(A7)
0000201C  4EB8 0B68 3369          jsr       __getch
00002020  2200      3370          move.l    D0,D1
00002022  201F      3371          move.l    (A7)+,D0
00002024  2F01      3372          move.l    D1,-(A7)
00002026  4EB9 0000 3373          jsr       _toupper
0000202A  2D72      
0000202C  584F      3374          addq.w    #4,A7
0000202E  1400      3375          move.b    D0,D2
                    3376   ; if( c == (char)('D'))                                      // WatchPoint Display
00002030  0C02 0044 3377          cmp.b     #68,D2
00002034  6608      3378          bne.s     Watchpoint_1
                    3379   ; WatchPointDisplay() ;
00002036  4EB8 1958 3380          jsr       _WatchPointDisplay
0000203A  6000 0054 3381          bra       Watchpoint_10
                    3382   Watchpoint_1:
                    3383   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000203E  0C02 004B 3384          cmp.b     #75,D2
00002042  6630      3385          bne.s     Watchpoint_3
                    3386   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002044  4879 0000 3387          pea       @m68kde~1_88.L
00002048  3FAE      
0000204A  4EB9 0000 3388          jsr       _printf
0000204E  2D8E      
00002050  584F      3389          addq.w    #4,A7
                    3390   ; c = toupper(_getch());
00002052  2F00      3391          move.l    D0,-(A7)
00002054  4EB8 0B68 3392          jsr       __getch
00002058  2200      3393          move.l    D0,D1
0000205A  201F      3394          move.l    (A7)+,D0
0000205C  2F01      3395          move.l    D1,-(A7)
0000205E  4EB9 0000 3396          jsr       _toupper
00002062  2D72      
00002064  584F      3397          addq.w    #4,A7
00002066  1400      3398          move.b    D0,D2
                    3399   ; if(c == (char)('Y'))
00002068  0C02 0059 3400          cmp.b     #89,D2
0000206C  6604      3401          bne.s     Watchpoint_5
                    3402   ; KillAllWatchPoints() ;
0000206E  4EB8 1C84 3403          jsr       _KillAllWatchPoints
                    3404   Watchpoint_5:
00002072  601C      3405          bra.s     Watchpoint_10
                    3406   Watchpoint_3:
                    3407   ; }
                    3408   ; else if(c == (char)('S')) {
00002074  0C02 0053 3409          cmp.b     #83,D2
00002078  6606      3410          bne.s     Watchpoint_7
                    3411   ; SetWatchPoint() ;
0000207A  4EB8 1DD4 3412          jsr       _SetWatchPoint
0000207E  6010      3413          bra.s     Watchpoint_10
                    3414   Watchpoint_7:
                    3415   ; }
                    3416   ; else if(c == (char)('C')) {
00002080  0C02 0043 3417          cmp.b     #67,D2
00002084  6606      3418          bne.s     Watchpoint_9
                    3419   ; WatchPointClear() ;
00002086  4EB8 1ADE 3420          jsr       _WatchPointClear
0000208A  6004      3421          bra.s     Watchpoint_10
                    3422   Watchpoint_9:
                    3423   ; }
                    3424   ; else
                    3425   ; UnknownCommand() ;
0000208C  4EB8 1F70 3426          jsr       _UnknownCommand
                    3427   Watchpoint_10:
00002090  241F      3428          move.l    (A7)+,D2
00002092  4E75      3429          rts
                    3430   ; }
                    3431   ; void Help(void)
                    3432   ; {
                    3433   _Help:
00002094  48E7 2020 3434          movem.l   D2/A2,-(A7)
00002098  45F9 0000 3435          lea       _printf.L,A2
0000209C  2D8E      
                    3436   ; char *banner = "\r\n----------------------------------------------------------------" ;
0000209E  41F9 0000 3437          lea       @m68kde~1_89.L,A0
000020A2  3FD0      
000020A4  2408      3438          move.l    A0,D2
                    3439   ; printf(banner) ;
000020A6  2F02      3440          move.l    D2,-(A7)
000020A8  4E92      3441          jsr       (A2)
000020AA  584F      3442          addq.w    #4,A7
                    3443   ; printf("\r\n  Debugger Command Summary") ;
000020AC  4879 0000 3444          pea       @m68kde~1_90.L
000020B0  4014      
000020B2  4E92      3445          jsr       (A2)
000020B4  584F      3446          addq.w    #4,A7
                    3447   ; printf(banner) ;
000020B6  2F02      3448          move.l    D2,-(A7)
000020B8  4E92      3449          jsr       (A2)
000020BA  584F      3450          addq.w    #4,A7
                    3451   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000020BC  4879 0000 3452          pea       @m68kde~1_91.L
000020C0  4032      
000020C2  4E92      3453          jsr       (A2)
000020C4  584F      3454          addq.w    #4,A7
                    3455   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000020C6  4879 0000 3456          pea       @m68kde~1_92.L
000020CA  4076      
000020CC  4E92      3457          jsr       (A2)
000020CE  584F      3458          addq.w    #4,A7
                    3459   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000020D0  4879 0000 3460          pea       @m68kde~1_93.L
000020D4  40AE      
000020D6  4E92      3461          jsr       (A2)
000020D8  584F      3462          addq.w    #4,A7
                    3463   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000020DA  4879 0000 3464          pea       @m68kde~1_94.L
000020DE  40E8      
000020E0  4E92      3465          jsr       (A2)
000020E2  584F      3466          addq.w    #4,A7
                    3467   ; printf("\r\n  E            - Enter String into Memory") ;
000020E4  4879 0000 3468          pea       @m68kde~1_95.L
000020E8  411A      
000020EA  4E92      3469          jsr       (A2)
000020EC  584F      3470          addq.w    #4,A7
                    3471   ; printf("\r\n  F            - Fill Memory with Data") ;
000020EE  4879 0000 3472          pea       @m68kde~1_96.L
000020F2  4146      
000020F4  4E92      3473          jsr       (A2)
000020F6  584F      3474          addq.w    #4,A7
                    3475   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000020F8  2F39 0803 3476          move.l    _PC.L,-(A7)
000020FC  0120      
000020FE  4879 0000 3477          pea       @m68kde~1_97.L
00002102  4170      
00002104  4E92      3478          jsr       (A2)
00002106  504F      3479          addq.w    #8,A7
                    3480   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002108  4879 0000 3481          pea       @m68kde~1_98.L
0000210C  41AA      
0000210E  4E92      3482          jsr       (A2)
00002110  584F      3483          addq.w    #4,A7
                    3484   ; printf("\r\n  M            - Memory Examine and Change");
00002112  4879 0000 3485          pea       @m68kde~1_99.L
00002116  41E2      
00002118  4E92      3486          jsr       (A2)
0000211A  584F      3487          addq.w    #4,A7
                    3488   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000211C  4879 0000 3489          pea       @m68kde~1_100.L
00002120  4210      
00002122  4E92      3490          jsr       (A2)
00002124  584F      3491          addq.w    #4,A7
                    3492   ; printf("\r\n  R            - Display 68000 Registers") ;
00002126  4879 0000 3493          pea       @m68kde~1_101.L
0000212A  424A      
0000212C  4E92      3494          jsr       (A2)
0000212E  584F      3495          addq.w    #4,A7
                    3496   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002130  4879 0000 3497          pea       @m68kde~1_102.L
00002134  4276      
00002136  4E92      3498          jsr       (A2)
00002138  584F      3499          addq.w    #4,A7
                    3500   ; printf("\r\n  TM           - Test Memory") ;
0000213A  4879 0000 3501          pea       @m68kde~1_103.L
0000213E  42A8      
00002140  4E92      3502          jsr       (A2)
00002142  584F      3503          addq.w    #4,A7
                    3504   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002144  4879 0000 3505          pea       @m68kde~1_104.L
00002148  42C8      
0000214A  4E92      3506          jsr       (A2)
0000214C  584F      3507          addq.w    #4,A7
                    3508   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
0000214E  4879 0000 3509          pea       @m68kde~1_105.L
00002152  42F0      
00002154  4E92      3510          jsr       (A2)
00002156  584F      3511          addq.w    #4,A7
                    3512   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002158  4879 0000 3513          pea       @m68kde~1_106.L
0000215C  4326      
0000215E  4E92      3514          jsr       (A2)
00002160  584F      3515          addq.w    #4,A7
                    3516   ; printf(banner) ;
00002162  2F02      3517          move.l    D2,-(A7)
00002164  4E92      3518          jsr       (A2)
00002166  584F      3519          addq.w    #4,A7
00002168  4CDF 0404 3520          movem.l   (A7)+,D2/A2
0000216C  4E75      3521          rts
                    3522   ; }
                    3523   ; void menu(void)
                    3524   ; {
                    3525   _menu:
0000216E  48E7 303C 3526          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002172  45F9 0000 3527          lea       _printf.L,A2
00002176  2D8E      
00002178  47F9 0803 3528          lea       _Trace.L,A3
0000217C  00D8      
0000217E  49F9 0803 3529          lea       _x.L,A4
00002182  00C8      
00002184  4BF9 0803 3530          lea       _SR.L,A5
00002188  012C      
                    3531   ; char c,c1 ;
                    3532   ; while(1)    {
                    3533   menu_1:
                    3534   ; FlushKeyboard() ;               // dump unread characters from keyboard
0000218A  4EB8 0BA6 3535          jsr       _FlushKeyboard
                    3536   ; printf("\r\n#") ;
0000218E  4879 0000 3537          pea       @m68kde~1_107.L
00002192  435E      
00002194  4E92      3538          jsr       (A2)
00002196  584F      3539          addq.w    #4,A7
                    3540   ; c = toupper(_getch());
00002198  2F00      3541          move.l    D0,-(A7)
0000219A  4EB8 0B68 3542          jsr       __getch
0000219E  2200      3543          move.l    D0,D1
000021A0  201F      3544          move.l    (A7)+,D0
000021A2  2F01      3545          move.l    D1,-(A7)
000021A4  4EB9 0000 3546          jsr       _toupper
000021A8  2D72      
000021AA  584F      3547          addq.w    #4,A7
000021AC  1400      3548          move.b    D0,D2
                    3549   ; if( c == (char)('L'))                  // load s record file
000021AE  0C02 004C 3550          cmp.b     #76,D2
000021B2  6608      3551          bne.s     menu_4
                    3552   ; Load_SRecordFile() ;
000021B4  4EB8 0E36 3553          jsr       _Load_SRecordFile
000021B8  6000 021E 3554          bra       menu_46
                    3555   menu_4:
                    3556   ; else if( c == (char)('D'))             // dump memory
000021BC  0C02 0044 3557          cmp.b     #68,D2
000021C0  6608      3558          bne.s     menu_6
                    3559   ; DumpMemory() ;
000021C2  4EB8 0CCC 3560          jsr       _DumpMemory
000021C6  6000 0210 3561          bra       menu_46
                    3562   menu_6:
                    3563   ; else if( c == (char)('E'))             // Enter String into memory
000021CA  0C02 0045 3564          cmp.b     #69,D2
000021CE  660A      3565          bne.s     menu_8
                    3566   ; EnterString() ;
000021D0  4EB9 0000 3567          jsr       _EnterString
000021D4  2520      
000021D6  6000 0200 3568          bra       menu_46
                    3569   menu_8:
                    3570   ; else if( c == (char)('F'))             // fill memory
000021DA  0C02 0046 3571          cmp.b     #70,D2
000021DE  6608      3572          bne.s     menu_10
                    3573   ; FillMemory() ;
000021E0  4EB8 0DBC 3574          jsr       _FillMemory
000021E4  6000 01F2 3575          bra       menu_46
                    3576   menu_10:
                    3577   ; else if( c == (char)('G'))  {           // go user program
000021E8  0C02 0047 3578          cmp.b     #71,D2
000021EC  6626      3579          bne.s     menu_12
                    3580   ; printf("\r\nProgram Running.....") ;
000021EE  4879 0000 3581          pea       @m68kde~1_108.L
000021F2  4362      
000021F4  4E92      3582          jsr       (A2)
000021F6  584F      3583          addq.w    #4,A7
                    3584   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000021F8  4879 0000 3585          pea       @m68kde~1_109.L
000021FC  437A      
000021FE  4E92      3586          jsr       (A2)
00002200  584F      3587          addq.w    #4,A7
                    3588   ; GoFlag = 1 ;
00002202  23FC 0000 3589          move.l    #1,_GoFlag.L
00002206  0001 0803 
0000220A  00DC      
                    3590   ; go() ;
0000220C  4EB8 08B8 3591          jsr       _go
00002210  6000 01C6 3592          bra       menu_46
                    3593   menu_12:
                    3594   ; }
                    3595   ; else if( c == (char)('M'))           // memory examine and modify
00002214  0C02 004D 3596          cmp.b     #77,D2
00002218  6608      3597          bne.s     menu_14
                    3598   ; MemoryChange() ;
0000221A  4EB8 0FC4 3599          jsr       _MemoryChange
0000221E  6000 01B8 3600          bra       menu_46
                    3601   menu_14:
                    3602   ; else if( c == (char)('P'))            // Program Flash Chip
00002222  0C02 0050 3603          cmp.b     #80,D2
00002226  6608      3604          bne.s     menu_16
                    3605   ; ProgramFlashChip() ;
00002228  4EB8 10C4 3606          jsr       _ProgramFlashChip
0000222C  6000 01AA 3607          bra       menu_46
                    3608   menu_16:
                    3609   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002230  0C02 0043 3610          cmp.b     #67,D2
00002234  6608      3611          bne.s     menu_18
                    3612   ; LoadFromFlashChip();
00002236  4EB8 10C6 3613          jsr       _LoadFromFlashChip
0000223A  6000 019C 3614          bra       menu_46
                    3615   menu_18:
                    3616   ; else if( c == (char)('R'))             // dump registers
0000223E  0C02 0052 3617          cmp.b     #82,D2
00002242  6608      3618          bne.s     menu_20
                    3619   ; DumpRegisters() ;
00002244  4EB8 10D6 3620          jsr       _DumpRegisters
00002248  6000 018E 3621          bra       menu_46
                    3622   menu_20:
                    3623   ; else if( c == (char)('.'))           // change registers
0000224C  0C02 002E 3624          cmp.b     #46,D2
00002250  6608      3625          bne.s     menu_22
                    3626   ; ChangeRegisters() ;
00002252  4EB8 15C8 3627          jsr       _ChangeRegisters
00002256  6000 0180 3628          bra       menu_46
                    3629   menu_22:
                    3630   ; else if( c == (char)('B'))              // breakpoint command
0000225A  0C02 0042 3631          cmp.b     #66,D2
0000225E  6608      3632          bne.s     menu_24
                    3633   ; Breakpoint() ;
00002260  4EB8 1F9C 3634          jsr       _Breakpoint
00002264  6000 0172 3635          bra       menu_46
                    3636   menu_24:
                    3637   ; else if( c == (char)('T'))  {          // Test command
00002268  0C02 0054 3638          cmp.b     #84,D2
0000226C  6600 0046 3639          bne       menu_26
                    3640   ; c1 = toupper(_getch()) ;
00002270  2F00      3641          move.l    D0,-(A7)
00002272  4EB8 0B68 3642          jsr       __getch
00002276  2200      3643          move.l    D0,D1
00002278  201F      3644          move.l    (A7)+,D0
0000227A  2F01      3645          move.l    D1,-(A7)
0000227C  4EB9 0000 3646          jsr       _toupper
00002280  2D72      
00002282  584F      3647          addq.w    #4,A7
00002284  1600      3648          move.b    D0,D3
                    3649   ; if(c1 == (char)('M'))                    // memory test
00002286  0C03 004D 3650          cmp.b     #77,D3
0000228A  6608      3651          bne.s     menu_28
                    3652   ; MemoryTest() ;
0000228C  4EB9 0000 3653          jsr       _MemoryTest
00002290  2570      
00002292  601C      3654          bra.s     menu_33
                    3655   menu_28:
                    3656   ; else if( c1 == (char)('S'))              // Switch Test command
00002294  0C03 0053 3657          cmp.b     #83,D3
00002298  6606      3658          bne.s     menu_30
                    3659   ; SwitchTest() ;
0000229A  4EB8 0AA4 3660          jsr       _SwitchTest
0000229E  6010      3661          bra.s     menu_33
                    3662   menu_30:
                    3663   ; else if( c1 == (char)('D'))              // display Test command
000022A0  0C03 0044 3664          cmp.b     #68,D3
000022A4  6606      3665          bne.s     menu_32
                    3666   ; TestLEDS() ;
000022A6  4EB8 0A50 3667          jsr       _TestLEDS
000022AA  6004      3668          bra.s     menu_33
                    3669   menu_32:
                    3670   ; else
                    3671   ; UnknownCommand() ;
000022AC  4EB8 1F70 3672          jsr       _UnknownCommand
                    3673   menu_33:
000022B0  6000 0126 3674          bra       menu_46
                    3675   menu_26:
                    3676   ; }
                    3677   ; else if( c == (char)(' ')) {             // Next instruction command
000022B4  0C02 0020 3678          cmp.b     #32,D2
000022B8  6636      3679          bne.s     menu_34
                    3680   ; DisableBreakPoints() ;
000022BA  4EB8 1B80 3681          jsr       _DisableBreakPoints
                    3682   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000022BE  2013      3683          move.l    (A3),D0
000022C0  0C80 0000 3684          cmp.l     #1,D0
000022C4  0001      
000022C6  661A      3685          bne.s     menu_36
000022C8  2039 0803 3686          move.l    _GoFlag.L,D0
000022CC  00DC      
000022CE  0C80 0000 3687          cmp.l     #1,D0
000022D2  0001      
000022D4  660C      3688          bne.s     menu_36
                    3689   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000022D6  13FC 0001 3690          move.b    #1,4194314
000022DA  0040 000A 
                    3691   ; return ;
000022DE  6000 00FC 3692          bra       menu_38
                    3693   menu_36:
                    3694   ; }
                    3695   ; else
                    3696   ; printf("\r\nError: Press 'G' first to start program") ;
000022E2  4879 0000 3697          pea       @m68kde~1_110.L
000022E6  43A8      
000022E8  4E92      3698          jsr       (A2)
000022EA  584F      3699          addq.w    #4,A7
000022EC  6000 00EA 3700          bra       menu_46
                    3701   menu_34:
                    3702   ; }
                    3703   ; else if( c == (char)('S')) {             // single step
000022F0  0C02 0053 3704          cmp.b     #83,D2
000022F4  6600 008C 3705          bne       menu_39
                    3706   ; if(Trace == 0) {
000022F8  2013      3707          move.l    (A3),D0
000022FA  6600 0050 3708          bne       menu_41
                    3709   ; DisableBreakPoints() ;
000022FE  4EB8 1B80 3710          jsr       _DisableBreakPoints
                    3711   ; printf("\r\nSingle Step  :[ON]") ;
00002302  4879 0000 3712          pea       @m68kde~1_111.L
00002306  43D2      
00002308  4E92      3713          jsr       (A2)
0000230A  584F      3714          addq.w    #4,A7
                    3715   ; printf("\r\nBreak Points :[Disabled]") ;
0000230C  4879 0000 3716          pea       @m68kde~1_44.L
00002310  3A70      
00002312  4E92      3717          jsr       (A2)
00002314  584F      3718          addq.w    #4,A7
                    3719   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002316  0055 8000 3720          or.w      #32768,(A5)
                    3721   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000231A  2F39 0803 3722          move.l    _PC.L,-(A7)
0000231E  0120      
00002320  4879 0000 3723          pea       @m68kde~1_112.L
00002324  43E8      
00002326  4E92      3724          jsr       (A2)
00002328  504F      3725          addq.w    #8,A7
                    3726   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000232A  4879 0000 3727          pea       @m68kde~1_113.L
0000232E  441C      
00002330  4E92      3728          jsr       (A2)
00002332  584F      3729          addq.w    #4,A7
                    3730   ; DumpRegisters() ;
00002334  4EB8 10D6 3731          jsr       _DumpRegisters
                    3732   ; Trace = 1;
00002338  26BC 0000 3733          move.l    #1,(A3)
0000233C  0001      
                    3734   ; TraceException = 1;
0000233E  13FC 0001 3735          move.b    #1,4194314
00002342  0040 000A 
                    3736   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002346  28B8 0074 3737          move.l    116,(A4)
0000234A  6032      3738          bra.s     menu_42
                    3739   menu_41:
                    3740   ; }
                    3741   ; else {
                    3742   ; Trace = 0 ;
0000234C  4293      3743          clr.l     (A3)
                    3744   ; TraceException = 0 ;
0000234E  4239 0040 3745          clr.b     4194314
00002352  000A      
                    3746   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002354  28B8 0074 3747          move.l    116,(A4)
                    3748   ; EnableBreakPoints() ;
00002358  4EB8 1BD4 3749          jsr       _EnableBreakPoints
                    3750   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000235C  0255 7FFF 3751          and.w     #32767,(A5)
                    3752   ; printf("\r\nSingle Step : [OFF]") ;
00002360  4879 0000 3753          pea       @m68kde~1_114.L
00002364  4440      
00002366  4E92      3754          jsr       (A2)
00002368  584F      3755          addq.w    #4,A7
                    3756   ; printf("\r\nBreak Points :[Enabled]") ;
0000236A  4879 0000 3757          pea       @m68kde~1_115.L
0000236E  4456      
00002370  4E92      3758          jsr       (A2)
00002372  584F      3759          addq.w    #4,A7
                    3760   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002374  4879 0000 3761          pea       @m68kde~1_116.L
00002378  4470      
0000237A  4E92      3762          jsr       (A2)
0000237C  584F      3763          addq.w    #4,A7
                    3764   menu_42:
0000237E  6000 0058 3765          bra       menu_46
                    3766   menu_39:
                    3767   ; }
                    3768   ; }
                    3769   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002382  0C02 001B 3770          cmp.b     #27,D2
00002386  6600 0040 3771          bne       menu_43
                    3772   ; Trace = 0;
0000238A  4293      3773          clr.l     (A3)
                    3774   ; TraceException = 0;
0000238C  4239 0040 3775          clr.b     4194314
00002390  000A      
                    3776   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002392  28B8 0074 3777          move.l    116,(A4)
                    3778   ; EnableBreakPoints() ;
00002396  4EB8 1BD4 3779          jsr       _EnableBreakPoints
                    3780   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000239A  0255 7FFF 3781          and.w     #32767,(A5)
                    3782   ; printf("\r\nSingle Step  :[OFF]") ;
0000239E  4879 0000 3783          pea       @m68kde~1_117.L
000023A2  449A      
000023A4  4E92      3784          jsr       (A2)
000023A6  584F      3785          addq.w    #4,A7
                    3786   ; printf("\r\nBreak Points :[Enabled]");
000023A8  4879 0000 3787          pea       @m68kde~1_115.L
000023AC  4456      
000023AE  4E92      3788          jsr       (A2)
000023B0  584F      3789          addq.w    #4,A7
                    3790   ; printf("\r\nProgram Running.....") ;
000023B2  4879 0000 3791          pea       @m68kde~1_108.L
000023B6  4362      
000023B8  4E92      3792          jsr       (A2)
000023BA  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000023BC  4879 0000 3795          pea       @m68kde~1_109.L
000023C0  437A      
000023C2  4E92      3796          jsr       (A2)
000023C4  584F      3797          addq.w    #4,A7
                    3798   ; return ;
000023C6  6014      3799          bra.s     menu_38
                    3800   menu_43:
                    3801   ; }
                    3802   ; else if( c == (char)('W'))              // Watchpoint command
000023C8  0C02 0057 3803          cmp.b     #87,D2
000023CC  6606      3804          bne.s     menu_45
                    3805   ; Watchpoint() ;
000023CE  4EB8 2018 3806          jsr       _Watchpoint
000023D2  6004      3807          bra.s     menu_46
                    3808   menu_45:
                    3809   ; else
                    3810   ; UnknownCommand() ;
000023D4  4EB8 1F70 3811          jsr       _UnknownCommand
                    3812   menu_46:
000023D8  6000 FDB0 3813          bra       menu_1
                    3814   menu_38:
000023DC  4CDF 3C0C 3815          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000023E0  4E75      3816          rts
                    3817   ; }
                    3818   ; }
                    3819   ; void PrintErrorMessageandAbort(char *string) {
                    3820   _PrintErrorMessageandAbort:
000023E2  4E56 0000 3821          link      A6,#0
                    3822   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000023E6  4879 0000 3823          pea       @m68kde~1_118.L
000023EA  44B0      
000023EC  4EB9 0000 3824          jsr       _printf
000023F0  2D8E      
000023F2  584F      3825          addq.w    #4,A7
                    3826   ; printf("%s\r\n", string) ;
000023F4  2F2E 0008 3827          move.l    8(A6),-(A7)
000023F8  4879 0000 3828          pea       @m68kde~1_119.L
000023FC  44CC      
000023FE  4EB9 0000 3829          jsr       _printf
00002402  2D8E      
00002404  504F      3830          addq.w    #8,A7
                    3831   ; menu() ;
00002406  4EB8 216E 3832          jsr       _menu
0000240A  4E5E      3833          unlk      A6
0000240C  4E75      3834          rts
                    3835   ; }
                    3836   ; void IRQMessage(int level) {
                    3837   _IRQMessage:
0000240E  4E56 0000 3838          link      A6,#0
                    3839   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002412  4879 0000 3840          pea       @m68kde~1_120.L
00002416  44D2      
00002418  4EB9 0000 3841          jsr       _printf
0000241C  2D8E      
0000241E  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002420  2F2E 0008 3844          move.l    8(A6),-(A7)
00002424  4879 0000 3845          pea       @m68kde~1_121.L
00002428  44EA      
0000242A  4EB9 0000 3846          jsr       _printf
0000242E  2D8E      
00002430  504F      3847          addq.w    #8,A7
                    3848   ; menu() ;
00002432  4EB8 216E 3849          jsr       _menu
00002436  4E5E      3850          unlk      A6
00002438  4E75      3851          rts
                    3852   ; }
                    3853   ; void UnhandledIRQ1(void) {
                    3854   _UnhandledIRQ1:
                    3855   ; IRQMessage(1);
0000243A  4878 0001 3856          pea       1
0000243E  4EB8 240E 3857          jsr       _IRQMessage
00002442  584F      3858          addq.w    #4,A7
00002444  4E75      3859          rts
                    3860   ; }
                    3861   ; void UnhandledIRQ2(void) {
                    3862   _UnhandledIRQ2:
                    3863   ; IRQMessage(2);
00002446  4878 0002 3864          pea       2
0000244A  4EB8 240E 3865          jsr       _IRQMessage
0000244E  584F      3866          addq.w    #4,A7
00002450  4E75      3867          rts
                    3868   ; }
                    3869   ; void UnhandledIRQ3(void){
                    3870   _UnhandledIRQ3:
                    3871   ; IRQMessage(3);
00002452  4878 0003 3872          pea       3
00002456  4EB8 240E 3873          jsr       _IRQMessage
0000245A  584F      3874          addq.w    #4,A7
0000245C  4E75      3875          rts
                    3876   ; }
                    3877   ; void UnhandledIRQ4(void) {
                    3878   _UnhandledIRQ4:
                    3879   ; IRQMessage(4);
0000245E  4878 0004 3880          pea       4
00002462  4EB8 240E 3881          jsr       _IRQMessage
00002466  584F      3882          addq.w    #4,A7
00002468  4E75      3883          rts
                    3884   ; }
                    3885   ; void UnhandledIRQ5(void) {
                    3886   _UnhandledIRQ5:
                    3887   ; IRQMessage(5);
0000246A  4878 0005 3888          pea       5
0000246E  4EB8 240E 3889          jsr       _IRQMessage
00002472  584F      3890          addq.w    #4,A7
00002474  4E75      3891          rts
                    3892   ; }
                    3893   ; void UnhandledIRQ6(void) {
                    3894   _UnhandledIRQ6:
                    3895   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002476  4879 0000 3896          pea       @m68kde~1_122.L
0000247A  450E      
0000247C  4EB8 23E2 3897          jsr       _PrintErrorMessageandAbort
00002480  584F      3898          addq.w    #4,A7
                    3899   ; menu() ;
00002482  4EB8 216E 3900          jsr       _menu
00002486  4E75      3901          rts
                    3902   ; }
                    3903   ; void UnhandledIRQ7(void) {
                    3904   _UnhandledIRQ7:
                    3905   ; IRQMessage(7);
00002488  4878 0007 3906          pea       7
0000248C  4EB8 240E 3907          jsr       _IRQMessage
00002490  584F      3908          addq.w    #4,A7
00002492  4E75      3909          rts
                    3910   ; }
                    3911   ; void UnhandledTrap(void) {
                    3912   _UnhandledTrap:
                    3913   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002494  4879 0000 3914          pea       @m68kde~1_123.L
00002498  454E      
0000249A  4EB8 23E2 3915          jsr       _PrintErrorMessageandAbort
0000249E  584F      3916          addq.w    #4,A7
000024A0  4E75      3917          rts
                    3918   ; }
                    3919   ; void BusError() {
                    3920   _BusError:
                    3921   ; PrintErrorMessageandAbort("BUS Error!") ;
000024A2  4879 0000 3922          pea       @m68kde~1_124.L
000024A6  4564      
000024A8  4EB8 23E2 3923          jsr       _PrintErrorMessageandAbort
000024AC  584F      3924          addq.w    #4,A7
000024AE  4E75      3925          rts
                    3926   ; }
                    3927   ; void AddressError() {
                    3928   _AddressError:
                    3929   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000024B0  4879 0000 3930          pea       @m68kde~1_125.L
000024B4  4570      
000024B6  4EB8 23E2 3931          jsr       _PrintErrorMessageandAbort
000024BA  584F      3932          addq.w    #4,A7
000024BC  4E75      3933          rts
                    3934   ; }
                    3935   ; void IllegalInstruction() {
                    3936   _IllegalInstruction:
                    3937   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000024BE  4879 0000 3938          pea       @m68kde~1_126.L
000024C2  4580      
000024C4  4EB8 23E2 3939          jsr       _PrintErrorMessageandAbort
000024C8  584F      3940          addq.w    #4,A7
000024CA  4E75      3941          rts
                    3942   ; }
                    3943   ; void Dividebyzero() {
                    3944   _Dividebyzero:
                    3945   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000024CC  4879 0000 3946          pea       @m68kde~1_127.L
000024D0  4594      
000024D2  4EB8 23E2 3947          jsr       _PrintErrorMessageandAbort
000024D6  584F      3948          addq.w    #4,A7
000024D8  4E75      3949          rts
                    3950   ; }
                    3951   ; void Check() {
                    3952   _Check:
                    3953   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000024DA  4879 0000 3954          pea       @m68kde~1_128.L
000024DE  45A4      
000024E0  4EB8 23E2 3955          jsr       _PrintErrorMessageandAbort
000024E4  584F      3956          addq.w    #4,A7
000024E6  4E75      3957          rts
                    3958   ; }
                    3959   ; void Trapv() {
                    3960   _Trapv:
                    3961   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000024E8  4879 0000 3962          pea       @m68kde~1_129.L
000024EC  45B6      
000024EE  4EB8 23E2 3963          jsr       _PrintErrorMessageandAbort
000024F2  584F      3964          addq.w    #4,A7
000024F4  4E75      3965          rts
                    3966   ; }
                    3967   ; void PrivError() {
                    3968   _PrivError:
                    3969   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000024F6  4879 0000 3970          pea       @m68kde~1_130.L
000024FA  45C8      
000024FC  4EB8 23E2 3971          jsr       _PrintErrorMessageandAbort
00002500  584F      3972          addq.w    #4,A7
00002502  4E75      3973          rts
                    3974   ; }
                    3975   ; void UnitIRQ() {
                    3976   _UnitIRQ:
                    3977   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002504  4879 0000 3978          pea       @m68kde~1_131.L
00002508  45DC      
0000250A  4EB8 23E2 3979          jsr       _PrintErrorMessageandAbort
0000250E  584F      3980          addq.w    #4,A7
00002510  4E75      3981          rts
                    3982   ; }
                    3983   ; void Spurious() {
                    3984   _Spurious:
                    3985   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002512  4879 0000 3986          pea       @m68kde~1_132.L
00002516  45EE      
00002518  4EB8 23E2 3987          jsr       _PrintErrorMessageandAbort
0000251C  584F      3988          addq.w    #4,A7
0000251E  4E75      3989          rts
                    3990   ; }
                    3991   ; void EnterString(void)
                    3992   ; {
                    3993   _EnterString:
00002520  4E56 FFFC 3994          link      A6,#-4
00002524  2F02      3995          move.l    D2,-(A7)
                    3996   ; unsigned char *Start;
                    3997   ; unsigned char c;
                    3998   ; printf("\r\nStart Address in Memory: ") ;
00002526  4879 0000 3999          pea       @m68kde~1_133.L
0000252A  45FC      
0000252C  4EB9 0000 4000          jsr       _printf
00002530  2D8E      
00002532  584F      4001          addq.w    #4,A7
                    4002   ; Start = Get8HexDigits(0) ;
00002534  42A7      4003          clr.l     -(A7)
00002536  4EB8 0CA4 4004          jsr       _Get8HexDigits
0000253A  584F      4005          addq.w    #4,A7
0000253C  2400      4006          move.l    D0,D2
                    4007   ; printf("\r\nEnter String (ESC to end) :") ;
0000253E  4879 0000 4008          pea       @m68kde~1_134.L
00002542  4618      
00002544  4EB9 0000 4009          jsr       _printf
00002548  2D8E      
0000254A  584F      4010          addq.w    #4,A7
                    4011   ; while((c = getchar()) != 0x1b)
                    4012   EnterString_1:
0000254C  4EB9 0000 4013          jsr       _getch
00002550  2CD6      
00002552  1D40 FFFF 4014          move.b    D0,-1(A6)
00002556  0C00 001B 4015          cmp.b     #27,D0
0000255A  670A      4016          beq.s     EnterString_3
                    4017   ; *Start++ = c ;
0000255C  2042      4018          move.l    D2,A0
0000255E  5282      4019          addq.l    #1,D2
00002560  10AE FFFF 4020          move.b    -1(A6),(A0)
00002564  60E6      4021          bra       EnterString_1
                    4022   EnterString_3:
                    4023   ; *Start = 0x00;  // terminate with a null
00002566  2042      4024          move.l    D2,A0
00002568  4210      4025          clr.b     (A0)
0000256A  241F      4026          move.l    (A7)+,D2
0000256C  4E5E      4027          unlk      A6
0000256E  4E75      4028          rts
                    4029   ; }
                    4030   ; void MemoryTest(void)
                    4031   ; {
                    4032   _MemoryTest:
00002570  4E56 FFFC 4033          link      A6,#-4
00002574  48E7 3F3C 4034          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002578  45F9 0000 4035          lea       _printf.L,A2
0000257C  2D8E      
                    4036   ; unsigned int bit_num = 0;
0000257E  3A7C 0000 4037          move.w    #0,A5
                    4038   ; unsigned int test_pattern = 0;
00002582  4284      4039          clr.l     D4
                    4040   ; unsigned int write_data = 0;
00002584  387C 0000 4041          move.w    #0,A4
                    4042   ; unsigned int start_addr = 0;
00002588  4283      4043          clr.l     D3
                    4044   ; unsigned int end_addr = 0;
0000258A  4285      4045          clr.l     D5
                    4046   ; unsigned int *addr_point = NULL;
0000258C  4282      4047          clr.l     D2
                    4048   ; unsigned int counter = 2000;
0000258E  367C 07D0 4049          move.w    #2000,A3
                    4050   ; unsigned int fail = 0;
00002592  42AE FFFC 4051          clr.l     -4(A6)
                    4052   ; char test_option = 'X';
00002596  7E58      4053          moveq     #88,D7
                    4054   ; char select_pattern = 'X';
00002598  7C58      4055          moveq     #88,D6
                    4056   ; //prompting user for test option BYTES, WORDS, or LONG WORDS
                    4057   ; while(test_option == 'X'){
                    4058   MemoryTest_1:
0000259A  0C07 0058 4059          cmp.b     #88,D7
0000259E  6600 003C 4060          bne       MemoryTest_3
                    4061   ; FlushKeyboard();
000025A2  4EB8 0BA6 4062          jsr       _FlushKeyboard
                    4063   ; printf("\r\nPlease enter a number to choose one of the following test options:"
000025A6  4879 0000 4064          pea       @m68kde~1_135.L
000025AA  4636      
000025AC  4E92      4065          jsr       (A2)
000025AE  584F      4066          addq.w    #4,A7
                    4067   ; "\r\n1 - Bytes"
                    4068   ; "\r\n2 - Words"
                    4069   ; "\r\n3 - Long Words\r\n");
                    4070   ; //scanf("%d", &test_option);
                    4071   ; test_option = (char)(_getch());
000025B0  4EB8 0B68 4072          jsr       __getch
000025B4  1E00      4073          move.b    D0,D7
                    4074   ; if((test_option != '1' && test_option != '2' && test_option != '3') || test_option == 'X'){
000025B6  0C07 0031 4075          cmp.b     #49,D7
000025BA  670C      4076          beq.s     MemoryTest_7
000025BC  0C07 0032 4077          cmp.b     #50,D7
000025C0  6706      4078          beq.s     MemoryTest_7
000025C2  0C07 0033 4079          cmp.b     #51,D7
000025C6  6606      4080          bne.s     MemoryTest_6
                    4081   MemoryTest_7:
000025C8  0C07 0058 4082          cmp.b     #88,D7
000025CC  660C      4083          bne.s     MemoryTest_4
                    4084   MemoryTest_6:
                    4085   ; printf("\r\nInvalid Selection\r\n");
000025CE  4879 0000 4086          pea       @m68kde~1_136.L
000025D2  46A4      
000025D4  4E92      4087          jsr       (A2)
000025D6  584F      4088          addq.w    #4,A7
                    4089   ; test_option = 0;
000025D8  7E00      4090          moveq     #0,D7
                    4091   MemoryTest_4:
000025DA  60BE      4092          bra       MemoryTest_1
                    4093   MemoryTest_3:
                    4094   ; }
                    4095   ; }
                    4096   ; //assigning bit_num based on test_option
                    4097   ; switch(test_option){
000025DC  4887      4098          ext.w     D7
000025DE  48C7      4099          ext.l     D7
000025E0  0C87 0000 4100          cmp.l     #50,D7
000025E4  0032      
000025E6  6728      4101          beq.s     MemoryTest_11
000025E8  6E0C      4102          bgt.s     MemoryTest_14
000025EA  0C87 0000 4103          cmp.l     #49,D7
000025EE  0031      
000025F0  670E      4104          beq.s     MemoryTest_10
000025F2  6000 003C 4105          bra       MemoryTest_8
                    4106   MemoryTest_14:
000025F6  0C87 0000 4107          cmp.l     #51,D7
000025FA  0033      
000025FC  6722      4108          beq.s     MemoryTest_12
000025FE  6030      4109          bra.s     MemoryTest_8
                    4110   MemoryTest_10:
                    4111   ; case '1':
                    4112   ; printf("\r\nYou have selected test option BYTES\r\n");
00002600  4879 0000 4113          pea       @m68kde~1_137.L
00002604  46BA      
00002606  4E92      4114          jsr       (A2)
00002608  584F      4115          addq.w    #4,A7
                    4116   ; bit_num = 8;
0000260A  3A7C 0008 4117          move.w    #8,A5
                    4118   ; break;
0000260E  602A      4119          bra.s     MemoryTest_9
                    4120   MemoryTest_11:
                    4121   ; case '2':
                    4122   ; printf("\r\nYou have selected test option WORDS\r\n");
00002610  4879 0000 4123          pea       @m68kde~1_138.L
00002614  46E2      
00002616  4E92      4124          jsr       (A2)
00002618  584F      4125          addq.w    #4,A7
                    4126   ; bit_num = 16;
0000261A  3A7C 0010 4127          move.w    #16,A5
                    4128   ; break;
0000261E  601A      4129          bra.s     MemoryTest_9
                    4130   MemoryTest_12:
                    4131   ; case '3':
                    4132   ; printf("\r\nYou have selected test option LONG WORDS\r\n");
00002620  4879 0000 4133          pea       @m68kde~1_139.L
00002624  470A      
00002626  4E92      4134          jsr       (A2)
00002628  584F      4135          addq.w    #4,A7
                    4136   ; bit_num = 32;
0000262A  3A7C 0020 4137          move.w    #32,A5
                    4138   ; break;
0000262E  600A      4139          bra.s     MemoryTest_9
                    4140   MemoryTest_8:
                    4141   ; default:
                    4142   ; printf("\r\nException - invalid test option\r\n");
00002630  4879 0000 4143          pea       @m68kde~1_140.L
00002634  4738      
00002636  4E92      4144          jsr       (A2)
00002638  584F      4145          addq.w    #4,A7
                    4146   ; break;
                    4147   MemoryTest_9:
                    4148   ; }
                    4149   ; //prompting user to enter test pattern
                    4150   ; while(select_pattern == 'X'){
                    4151   MemoryTest_15:
0000263A  0C06 0058 4152          cmp.b     #88,D6
0000263E  6600 0042 4153          bne       MemoryTest_17
                    4154   ; FlushKeyboard();
00002642  4EB8 0BA6 4155          jsr       _FlushKeyboard
                    4156   ; printf("\r\nPlease enter a number to choose one of the following test patterns:"
00002646  4879 0000 4157          pea       @m68kde~1_141.L
0000264A  475C      
0000264C  4E92      4158          jsr       (A2)
0000264E  584F      4159          addq.w    #4,A7
                    4160   ; "\r\n1 - 55"
                    4161   ; "\r\n2 - AA"
                    4162   ; "\r\n3 - FF"
                    4163   ; "\r\n4 - 00\r\n");
                    4164   ; //scanf("%d", &select_pattern);
                    4165   ; select_pattern = (char)_getch();
00002650  4EB8 0B68 4166          jsr       __getch
00002654  1C00      4167          move.b    D0,D6
                    4168   ; if((select_pattern != '1' && select_pattern != '2' && select_pattern != '3' && select_pattern != '4') || select_pattern == 'X'){
00002656  0C06 0031 4169          cmp.b     #49,D6
0000265A  6712      4170          beq.s     MemoryTest_21
0000265C  0C06 0032 4171          cmp.b     #50,D6
00002660  670C      4172          beq.s     MemoryTest_21
00002662  0C06 0033 4173          cmp.b     #51,D6
00002666  6706      4174          beq.s     MemoryTest_21
00002668  0C06 0034 4175          cmp.b     #52,D6
0000266C  6606      4176          bne.s     MemoryTest_20
                    4177   MemoryTest_21:
0000266E  0C06 0058 4178          cmp.b     #88,D6
00002672  660C      4179          bne.s     MemoryTest_18
                    4180   MemoryTest_20:
                    4181   ; printf("\r\nInvalid Selection\r\n");
00002674  4879 0000 4182          pea       @m68kde~1_136.L
00002678  46A4      
0000267A  4E92      4183          jsr       (A2)
0000267C  584F      4184          addq.w    #4,A7
                    4185   ; select_pattern = 0;
0000267E  4206      4186          clr.b     D6
                    4187   MemoryTest_18:
00002680  60B8      4188          bra       MemoryTest_15
                    4189   MemoryTest_17:
                    4190   ; }
                    4191   ; }
                    4192   ; //assigning write_data based on test_pattern
                    4193   ; switch(select_pattern){
00002682  4886      4194          ext.w     D6
00002684  48C6      4195          ext.l     D6
00002686  2006      4196          move.l    D6,D0
00002688  0480 0000 4197          sub.l     #49,D0
0000268C  0031      
0000268E  6500 005E 4198          blo       MemoryTest_22
00002692  0C80 0000 4199          cmp.l     #4,D0
00002696  0004      
00002698  6400 0054 4200          bhs       MemoryTest_22
0000269C  E380      4201          asl.l     #1,D0
0000269E  303B 0806 4202          move.w    MemoryTest_24(PC,D0.L),D0
000026A2  4EFB 0002 4203          jmp       MemoryTest_24(PC,D0.W)
                    4204   MemoryTest_24:
000026A6  0008      4205          dc.w      MemoryTest_25-MemoryTest_24
000026A8  0018      4206          dc.w      MemoryTest_26-MemoryTest_24
000026AA  002A      4207          dc.w      MemoryTest_27-MemoryTest_24
000026AC  003C      4208          dc.w      MemoryTest_28-MemoryTest_24
                    4209   MemoryTest_25:
                    4210   ; case '1':
                    4211   ; printf("\r\nYou have selected test pattern 55\r\n");
000026AE  4879 0000 4212          pea       @m68kde~1_142.L
000026B2  47C4      
000026B4  4E92      4213          jsr       (A2)
000026B6  584F      4214          addq.w    #4,A7
                    4215   ; test_pattern = 0x55;
000026B8  7855      4216          moveq     #85,D4
                    4217   ; break;
000026BA  6000 003C 4218          bra       MemoryTest_23
                    4219   MemoryTest_26:
                    4220   ; case '2':
                    4221   ; printf("\r\nYou have selected test pattern AA\r\n");
000026BE  4879 0000 4222          pea       @m68kde~1_143.L
000026C2  47EA      
000026C4  4E92      4223          jsr       (A2)
000026C6  584F      4224          addq.w    #4,A7
                    4225   ; test_pattern = 0xAA;
000026C8  283C 0000 4226          move.l    #170,D4
000026CC  00AA      
                    4227   ; break;
000026CE  6028      4228          bra.s     MemoryTest_23
                    4229   MemoryTest_27:
                    4230   ; case '3':
                    4231   ; printf("\r\nYou have selected test pattern FF\r\n");
000026D0  4879 0000 4232          pea       @m68kde~1_144.L
000026D4  4810      
000026D6  4E92      4233          jsr       (A2)
000026D8  584F      4234          addq.w    #4,A7
                    4235   ; test_pattern = 0xFF;
000026DA  283C 0000 4236          move.l    #255,D4
000026DE  00FF      
                    4237   ; break;
000026E0  6016      4238          bra.s     MemoryTest_23
                    4239   MemoryTest_28:
                    4240   ; case '4':
                    4241   ; printf("\r\nYou have selected test pattern 00\r\n");
000026E2  4879 0000 4242          pea       @m68kde~1_145.L
000026E6  4836      
000026E8  4E92      4243          jsr       (A2)
000026EA  584F      4244          addq.w    #4,A7
                    4245   ; test_pattern = 0x00;
000026EC  4284      4246          clr.l     D4
                    4247   MemoryTest_22:
                    4248   ; default:
                    4249   ; printf("\r\nException - invalid test pattern\r\n");
000026EE  4879 0000 4250          pea       @m68kde~1_146.L
000026F2  485C      
000026F4  4E92      4251          jsr       (A2)
000026F6  584F      4252          addq.w    #4,A7
                    4253   ; break;
                    4254   MemoryTest_23:
                    4255   ; }
                    4256   ; //create appropriate data set based on select_pattern and test_option
                    4257   ; // ie, if select_pattern is AA and test_option is BYTES, write_data must be AAAA
                    4258   ; switch(test_option){
000026F8  4887      4259          ext.w     D7
000026FA  48C7      4260          ext.l     D7
000026FC  0C87 0000 4261          cmp.l     #50,D7
00002700  0032      
00002702  6720      4262          beq.s     MemoryTest_33
00002704  6E0C      4263          bgt.s     MemoryTest_36
00002706  0C87 0000 4264          cmp.l     #49,D7
0000270A  0031      
0000270C  6710      4265          beq.s     MemoryTest_32
0000270E  6000 0040 4266          bra       MemoryTest_30
                    4267   MemoryTest_36:
00002712  0C87 0000 4268          cmp.l     #51,D7
00002716  0033      
00002718  6718      4269          beq.s     MemoryTest_34
0000271A  6000 0034 4270          bra       MemoryTest_30
                    4271   MemoryTest_32:
                    4272   ; case '1':
                    4273   ; write_data = test_pattern;
0000271E  2844      4274          move.l    D4,A4
                    4275   ; break;
00002720  6000 0038 4276          bra       MemoryTest_31
                    4277   MemoryTest_33:
                    4278   ; case '2':
                    4279   ; write_data = test_pattern | test_pattern << 8;
00002724  2004      4280          move.l    D4,D0
00002726  2204      4281          move.l    D4,D1
00002728  E189      4282          lsl.l     #8,D1
0000272A  8081      4283          or.l      D1,D0
0000272C  2840      4284          move.l    D0,A4
                    4285   ; break;
0000272E  6000 002A 4286          bra       MemoryTest_31
                    4287   MemoryTest_34:
                    4288   ; case '3':
                    4289   ; write_data = (test_pattern | (test_pattern << 8) | (test_pattern << 16) | (test_pattern << 24));
00002732  2004      4290          move.l    D4,D0
00002734  2204      4291          move.l    D4,D1
00002736  E189      4292          lsl.l     #8,D1
00002738  8081      4293          or.l      D1,D0
0000273A  2204      4294          move.l    D4,D1
0000273C  E189      4295          lsl.l     #8,D1
0000273E  E189      4296          lsl.l     #8,D1
00002740  8081      4297          or.l      D1,D0
00002742  2204      4298          move.l    D4,D1
00002744  E189      4299          lsl.l     #8,D1
00002746  E189      4300          lsl.l     #8,D1
00002748  E189      4301          lsl.l     #8,D1
0000274A  8081      4302          or.l      D1,D0
0000274C  2840      4303          move.l    D0,A4
                    4304   ; break;
0000274E  600A      4305          bra.s     MemoryTest_31
                    4306   MemoryTest_30:
                    4307   ; default:
                    4308   ; printf("\r\nException - could not generate write_data\r\n");
00002750  4879 0000 4309          pea       @m68kde~1_147.L
00002754  4882      
00002756  4E92      4310          jsr       (A2)
00002758  584F      4311          addq.w    #4,A7
                    4312   ; break;
                    4313   MemoryTest_31:
                    4314   ; }
                    4315   ; //prompting user to enter start address
                    4316   ; while(!start_addr){
                    4317   MemoryTest_37:
0000275A  4A83      4318          tst.l     D3
0000275C  6600 0076 4319          bne       MemoryTest_39
                    4320   ; FlushKeyboard();
00002760  4EB8 0BA6 4321          jsr       _FlushKeyboard
                    4322   ; printf("\r\nPlease enter a starting address from f000 0000 to f3ff ffff\r\n");
00002764  4879 0000 4323          pea       @m68kde~1_148.L
00002768  48B0      
0000276A  4E92      4324          jsr       (A2)
0000276C  584F      4325          addq.w    #4,A7
                    4326   ; start_addr = Get8HexDigits(0);
0000276E  42A7      4327          clr.l     -(A7)
00002770  4EB8 0CA4 4328          jsr       _Get8HexDigits
00002774  584F      4329          addq.w    #4,A7
00002776  2600      4330          move.l    D0,D3
                    4331   ; if(start_addr<0xf0000000 || start_addr>0xf3ffffff){
00002778  0C83 F000 4332          cmp.l     #-268435456,D3
0000277C  0000      
0000277E  6508      4333          blo.s     MemoryTest_42
00002780  0C83 F3FF 4334          cmp.l     #-201326593,D3
00002784  FFFF      
00002786  6310      4335          bls.s     MemoryTest_40
                    4336   MemoryTest_42:
                    4337   ; printf("\r\nStart address is invalid\r\n");
00002788  4879 0000 4338          pea       @m68kde~1_149.L
0000278C  48F0      
0000278E  4E92      4339          jsr       (A2)
00002790  584F      4340          addq.w    #4,A7
                    4341   ; start_addr = 0;
00002792  4283      4342          clr.l     D3
00002794  6000 003C 4343          bra       MemoryTest_44
                    4344   MemoryTest_40:
                    4345   ; } else if(bit_num>8 && start_addr % 2 != 0){
00002798  200D      4346          move.l    A5,D0
0000279A  0C80 0000 4347          cmp.l     #8,D0
0000279E  0008      
000027A0  6324      4348          bls.s     MemoryTest_43
000027A2  2F03      4349          move.l    D3,-(A7)
000027A4  4878 0002 4350          pea       2
000027A8  4EB9 0000 4351          jsr       ULDIV
000027AC  2BCC      
000027AE  202F 0004 4352          move.l    4(A7),D0
000027B2  504F      4353          addq.w    #8,A7
000027B4  4A80      4354          tst.l     D0
000027B6  670E      4355          beq.s     MemoryTest_43
                    4356   ; printf("\r\nFor words or long words, please enter an even numbered address\r\n");
000027B8  4879 0000 4357          pea       @m68kde~1_150.L
000027BC  490E      
000027BE  4E92      4358          jsr       (A2)
000027C0  584F      4359          addq.w    #4,A7
                    4360   ; start_addr = 0;
000027C2  4283      4361          clr.l     D3
000027C4  600C      4362          bra.s     MemoryTest_44
                    4363   MemoryTest_43:
                    4364   ; } else{
                    4365   ; printf("\r\nThe chosen starting address is: %x\r\n", start_addr);
000027C6  2F03      4366          move.l    D3,-(A7)
000027C8  4879 0000 4367          pea       @m68kde~1_151.L
000027CC  4952      
000027CE  4E92      4368          jsr       (A2)
000027D0  504F      4369          addq.w    #8,A7
                    4370   MemoryTest_44:
000027D2  6086      4371          bra       MemoryTest_37
                    4372   MemoryTest_39:
                    4373   ; }
                    4374   ; }
                    4375   ; //prompting user to enter end address
                    4376   ; while(!end_addr){
                    4377   MemoryTest_45:
000027D4  4A85      4378          tst.l     D5
000027D6  6600 0074 4379          bne       MemoryTest_47
                    4380   ; FlushKeyboard();
000027DA  4EB8 0BA6 4381          jsr       _FlushKeyboard
                    4382   ; printf("\r\nPlease enter an end address from %x to f3ff ffff\r\n", start_addr);
000027DE  2F03      4383          move.l    D3,-(A7)
000027E0  4879 0000 4384          pea       @m68kde~1_152.L
000027E4  497A      
000027E6  4E92      4385          jsr       (A2)
000027E8  504F      4386          addq.w    #8,A7
                    4387   ; end_addr = Get8HexDigits(0);
000027EA  42A7      4388          clr.l     -(A7)
000027EC  4EB8 0CA4 4389          jsr       _Get8HexDigits
000027F0  584F      4390          addq.w    #4,A7
000027F2  2A00      4391          move.l    D0,D5
                    4392   ; if(end_addr<start_addr || end_addr>0xf3ffffff){
000027F4  BA83      4393          cmp.l     D3,D5
000027F6  6508      4394          blo.s     MemoryTest_50
000027F8  0C85 F3FF 4395          cmp.l     #-201326593,D5
000027FC  FFFF      
000027FE  6310      4396          bls.s     MemoryTest_48
                    4397   MemoryTest_50:
                    4398   ; printf("\r\nEnd address is invalid\r\n");
00002800  4879 0000 4399          pea       @m68kde~1_153.L
00002804  49B0      
00002806  4E92      4400          jsr       (A2)
00002808  584F      4401          addq.w    #4,A7
                    4402   ; end_addr = 0;
0000280A  4285      4403          clr.l     D5
0000280C  6000 003C 4404          bra       MemoryTest_52
                    4405   MemoryTest_48:
                    4406   ; } else if(bit_num>8 && end_addr % 2 != 0){
00002810  200D      4407          move.l    A5,D0
00002812  0C80 0000 4408          cmp.l     #8,D0
00002816  0008      
00002818  6324      4409          bls.s     MemoryTest_51
0000281A  2F05      4410          move.l    D5,-(A7)
0000281C  4878 0002 4411          pea       2
00002820  4EB9 0000 4412          jsr       ULDIV
00002824  2BCC      
00002826  202F 0004 4413          move.l    4(A7),D0
0000282A  504F      4414          addq.w    #8,A7
0000282C  4A80      4415          tst.l     D0
0000282E  670E      4416          beq.s     MemoryTest_51
                    4417   ; printf("\r\nFor words or long words, please enter an even numbered address\r\n");
00002830  4879 0000 4418          pea       @m68kde~1_150.L
00002834  490E      
00002836  4E92      4419          jsr       (A2)
00002838  584F      4420          addq.w    #4,A7
                    4421   ; end_addr = 0;
0000283A  4285      4422          clr.l     D5
0000283C  600C      4423          bra.s     MemoryTest_52
                    4424   MemoryTest_51:
                    4425   ; } else{
                    4426   ; printf("\r\nThe chosen ending address is: %x\r\n", end_addr);
0000283E  2F05      4427          move.l    D5,-(A7)
00002840  4879 0000 4428          pea       @m68kde~1_154.L
00002844  49CC      
00002846  4E92      4429          jsr       (A2)
00002848  504F      4430          addq.w    #8,A7
                    4431   MemoryTest_52:
0000284A  6088      4432          bra       MemoryTest_45
                    4433   MemoryTest_47:
                    4434   ; }
                    4435   ; }
                    4436   ; FlushKeyboard();
0000284C  4EB8 0BA6 4437          jsr       _FlushKeyboard
                    4438   ; //set address pointer to start pointer
                    4439   ; addr_point = start_addr;
00002850  2403      4440          move.l    D3,D2
                    4441   ; //writing data
                    4442   ; while(addr_point<end_addr){
                    4443   MemoryTest_53:
00002852  B485      4444          cmp.l     D5,D2
00002854  642A      4445          bhs.s     MemoryTest_55
                    4446   ; *addr_point++ = write_data;
00002856  2042      4447          move.l    D2,A0
00002858  5882      4448          addq.l    #4,D2
0000285A  208C      4449          move.l    A4,(A0)
                    4450   ; counter++;
0000285C  524B      4451          addq.w    #1,A3
                    4452   ; if(counter >= 2000){
0000285E  200B      4453          move.l    A3,D0
00002860  0C80 0000 4454          cmp.l     #2000,D0
00002864  07D0      
00002866  6516      4455          blo.s     MemoryTest_56
                    4456   ; printf("\r\nWriting %x into address %x\r\n", *addr_point, addr_point);
00002868  2F02      4457          move.l    D2,-(A7)
0000286A  2042      4458          move.l    D2,A0
0000286C  2F10      4459          move.l    (A0),-(A7)
0000286E  4879 0000 4460          pea       @m68kde~1_155.L
00002872  49F2      
00002874  4E92      4461          jsr       (A2)
00002876  DEFC 000C 4462          add.w     #12,A7
                    4463   ; counter = 1;
0000287A  367C 0001 4464          move.w    #1,A3
                    4465   MemoryTest_56:
0000287E  60D2      4466          bra       MemoryTest_53
                    4467   MemoryTest_55:
                    4468   ; }
                    4469   ; }
                    4470   ; printf("\r\nWriting completed. Will now start reading.\r\n");
00002880  4879 0000 4471          pea       @m68kde~1_156.L
00002884  4A12      
00002886  4E92      4472          jsr       (A2)
00002888  584F      4473          addq.w    #4,A7
                    4474   ; addr_point = start_addr;
0000288A  2403      4475          move.l    D3,D2
                    4476   ; counter = 2000;
0000288C  367C 07D0 4477          move.w    #2000,A3
                    4478   ; //reading data
                    4479   ; while(addr_point<end_addr){
                    4480   MemoryTest_58:
00002890  B485      4481          cmp.l     D5,D2
00002892  6400 004E 4482          bhs       MemoryTest_60
                    4483   ; if(*addr_point != write_data){
00002896  2042      4484          move.l    D2,A0
00002898  200C      4485          move.l    A4,D0
0000289A  B090      4486          cmp.l     (A0),D0
0000289C  671E      4487          beq.s     MemoryTest_61
                    4488   ; printf("\r\nAn Error has occurred: data at address %x expected to be %x, instead is reading %x\r\n", addr_point, write_data, *addr_point);
0000289E  2042      4489          move.l    D2,A0
000028A0  2F10      4490          move.l    (A0),-(A7)
000028A2  2F0C      4491          move.l    A4,-(A7)
000028A4  2F02      4492          move.l    D2,-(A7)
000028A6  4879 0000 4493          pea       @m68kde~1_157.L
000028AA  4A42      
000028AC  4E92      4494          jsr       (A2)
000028AE  DEFC 0010 4495          add.w     #16,A7
                    4496   ; fail = 1;
000028B2  2D7C 0000 4497          move.l    #1,-4(A6)
000028B6  0001 FFFC 
                    4498   ; break;
000028BA  6026      4499          bra.s     MemoryTest_60
                    4500   MemoryTest_61:
                    4501   ; }
                    4502   ; counter++;
000028BC  524B      4503          addq.w    #1,A3
                    4504   ; if(counter >= 2000){
000028BE  200B      4505          move.l    A3,D0
000028C0  0C80 0000 4506          cmp.l     #2000,D0
000028C4  07D0      
000028C6  6516      4507          blo.s     MemoryTest_63
                    4508   ; printf("\r\nReading data value %x from address %x\r\n", *addr_point, addr_point);
000028C8  2F02      4509          move.l    D2,-(A7)
000028CA  2042      4510          move.l    D2,A0
000028CC  2F10      4511          move.l    (A0),-(A7)
000028CE  4879 0000 4512          pea       @m68kde~1_158.L
000028D2  4A9A      
000028D4  4E92      4513          jsr       (A2)
000028D6  DEFC 000C 4514          add.w     #12,A7
                    4515   ; counter = 1;
000028DA  367C 0001 4516          move.w    #1,A3
                    4517   MemoryTest_63:
                    4518   ; }
                    4519   ; addr_point++;
000028DE  5882      4520          addq.l    #4,D2
000028E0  60AE      4521          bra       MemoryTest_58
                    4522   MemoryTest_60:
                    4523   ; }
                    4524   ; if(fail == 1){
000028E2  202E FFFC 4525          move.l    -4(A6),D0
000028E6  0C80 0000 4526          cmp.l     #1,D0
000028EA  0001      
000028EC  660C      4527          bne.s     MemoryTest_65
                    4528   ; printf("\r\nMemory test failed.\r\n");
000028EE  4879 0000 4529          pea       @m68kde~1_159.L
000028F2  4AC4      
000028F4  4E92      4530          jsr       (A2)
000028F6  584F      4531          addq.w    #4,A7
000028F8  600A      4532          bra.s     MemoryTest_66
                    4533   MemoryTest_65:
                    4534   ; } else {
                    4535   ; printf("\r\nMemory test successful.\r\n");
000028FA  4879 0000 4536          pea       @m68kde~1_160.L
000028FE  4ADC      
00002900  4E92      4537          jsr       (A2)
00002902  584F      4538          addq.w    #4,A7
                    4539   MemoryTest_66:
00002904  4CDF 3CFC 4540          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002908  4E5E      4541          unlk      A6
0000290A  4E75      4542          rts
                    4543   ; }
                    4544   ; }
                    4545   ; void main(void)
                    4546   ; {
                    4547   _main:
0000290C  4E56 FFF4 4548          link      A6,#-12
00002910  48E7 3030 4549          movem.l   D2/D3/A2/A3,-(A7)
00002914  45F8 0A30 4550          lea       _InstallExceptionHandler.L,A2
00002918  47F9 0000 4551          lea       _printf.L,A3
0000291C  2D8E      
                    4552   ; char c ;
                    4553   ; int i, j ;
                    4554   ; char *BugMessage = "CPEN412 - Lab 2";
0000291E  41F9 0000 4555          lea       @m68kde~1_161.L,A0
00002922  4AF8      
00002924  2608      4556          move.l    A0,D3
                    4557   ; char *CopyrightMessage = "Ryan Nedjabat 67501510; Anna Yun 94902673";
00002926  41F9 0000 4558          lea       @m68kde~1_162.L,A0
0000292A  4B08      
0000292C  2D48 FFFC 4559          move.l    A0,-4(A6)
                    4560   ; KillAllBreakPoints() ;
00002930  4EB8 1C1C 4561          jsr       _KillAllBreakPoints
                    4562   ; i = x = y = z = PortA_Count = 0;
00002934  42B9 0803 4563          clr.l     _PortA_Count.L
00002938  00D4      
0000293A  42B9 0803 4564          clr.l     _z.L
0000293E  00D0      
00002940  42B9 0803 4565          clr.l     _y.L
00002944  00CC      
00002946  42B9 0803 4566          clr.l     _x.L
0000294A  00C8      
0000294C  4282      4567          clr.l     D2
                    4568   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
0000294E  42B9 0803 4569          clr.l     _GoFlag.L
00002952  00DC      
00002954  42B9 0803 4570          clr.l     _Trace.L
00002958  00D8      
                    4571   ; Echo = 1 ;
0000295A  23FC 0000 4572          move.l    #1,_Echo.L
0000295E  0001 0803 
00002962  00E0      
                    4573   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002964  42B9 0803 4574          clr.l     _d7.L
00002968  0100      
0000296A  42B9 0803 4575          clr.l     _d6.L
0000296E  00FC      
00002970  42B9 0803 4576          clr.l     _d5.L
00002974  00F8      
00002976  42B9 0803 4577          clr.l     _d4.L
0000297A  00F4      
0000297C  42B9 0803 4578          clr.l     _d3.L
00002980  00F0      
00002982  42B9 0803 4579          clr.l     _d2.L
00002986  00EC      
00002988  42B9 0803 4580          clr.l     _d1.L
0000298C  00E8      
0000298E  42B9 0803 4581          clr.l     _d0.L
00002992  00E4      
                    4582   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002994  42B9 0803 4583          clr.l     _a6.L
00002998  011C      
0000299A  42B9 0803 4584          clr.l     _a5.L
0000299E  0118      
000029A0  42B9 0803 4585          clr.l     _a4.L
000029A4  0114      
000029A6  42B9 0803 4586          clr.l     _a3.L
000029AA  0110      
000029AC  42B9 0803 4587          clr.l     _a2.L
000029B0  010C      
000029B2  42B9 0803 4588          clr.l     _a1.L
000029B6  0108      
000029B8  42B9 0803 4589          clr.l     _a0.L
000029BC  0104      
                    4590   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
000029BE  23FC 0800 4591          move.l    #134217728,_PC.L
000029C2  0000 0803 
000029C6  0120      
000029C8  23FC 0804 4592          move.l    #134479872,_SSP.L
000029CC  0000 0803 
000029D0  0124      
000029D2  23FC 0804 4593          move.l    #134479872,_USP.L
000029D6  0000 0803 
000029DA  0128      
                    4594   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
000029DC  33FC 2000 4595          move.w    #8192,_SR.L
000029E0  0803 012C 
                    4596   ; // Initialise Breakpoint variables
                    4597   ; for(i = 0; i < 8; i++)  {
000029E4  4282      4598          clr.l     D2
                    4599   main_1:
000029E6  0C82 0000 4600          cmp.l     #8,D2
000029EA  0008      
000029EC  6C00 004C 4601          bge       main_3
                    4602   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
000029F0  2002      4603          move.l    D2,D0
000029F2  E588      4604          lsl.l     #2,D0
000029F4  41F9 0803 4605          lea       _BreakPointAddress.L,A0
000029F8  012E      
000029FA  42B0 0800 4606          clr.l     0(A0,D0.L)
                    4607   ; WatchPointAddress[i] = 0 ;
000029FE  2002      4608          move.l    D2,D0
00002A00  E588      4609          lsl.l     #2,D0
00002A02  41F9 0803 4610          lea       _WatchPointAddress.L,A0
00002A06  0182      
00002A08  42B0 0800 4611          clr.l     0(A0,D0.L)
                    4612   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002A0C  2002      4613          move.l    D2,D0
00002A0E  E388      4614          lsl.l     #1,D0
00002A10  41F9 0803 4615          lea       _BreakPointInstruction.L,A0
00002A14  014E      
00002A16  4270 0800 4616          clr.w     0(A0,D0.L)
                    4617   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002A1A  2002      4618          move.l    D2,D0
00002A1C  E588      4619          lsl.l     #2,D0
00002A1E  41F9 0803 4620          lea       _BreakPointSetOrCleared.L,A0
00002A22  015E      
00002A24  42B0 0800 4621          clr.l     0(A0,D0.L)
                    4622   ; WatchPointSetOrCleared[i] = 0;
00002A28  2002      4623          move.l    D2,D0
00002A2A  E588      4624          lsl.l     #2,D0
00002A2C  41F9 0803 4625          lea       _WatchPointSetOrCleared.L,A0
00002A30  01A2      
00002A32  42B0 0800 4626          clr.l     0(A0,D0.L)
00002A36  5282      4627          addq.l    #1,D2
00002A38  60AC      4628          bra       main_1
                    4629   main_3:
                    4630   ; }
                    4631   ; Init_RS232() ;     // initialise the RS232 port
00002A3A  4EB8 0B12 4632          jsr       _Init_RS232
                    4633   ; Init_LCD() ;
00002A3E  4EB8 095E 4634          jsr       _Init_LCD
                    4635   ; for( i = 32; i < 48; i++)
00002A42  7420      4636          moveq     #32,D2
                    4637   main_4:
00002A44  0C82 0000 4638          cmp.l     #48,D2
00002A48  0030      
00002A4A  6C0E      4639          bge.s     main_6
                    4640   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002A4C  2F02      4641          move.l    D2,-(A7)
00002A4E  4878 2494 4642          pea       _UnhandledTrap.L
00002A52  4E92      4643          jsr       (A2)
00002A54  504F      4644          addq.w    #8,A7
00002A56  5282      4645          addq.l    #1,D2
00002A58  60EA      4646          bra       main_4
                    4647   main_6:
                    4648   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002A5A  4878 002F 4649          pea       47
00002A5E  4878 216E 4650          pea       _menu.L
00002A62  4E92      4651          jsr       (A2)
00002A64  504F      4652          addq.w    #8,A7
                    4653   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002A66  4878 0019 4654          pea       25
00002A6A  4878 243A 4655          pea       _UnhandledIRQ1.L
00002A6E  4E92      4656          jsr       (A2)
00002A70  504F      4657          addq.w    #8,A7
                    4658   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002A72  4878 001A 4659          pea       26
00002A76  4878 2446 4660          pea       _UnhandledIRQ2.L
00002A7A  4E92      4661          jsr       (A2)
00002A7C  504F      4662          addq.w    #8,A7
                    4663   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002A7E  4878 001B 4664          pea       27
00002A82  4878 2452 4665          pea       _UnhandledIRQ3.L
00002A86  4E92      4666          jsr       (A2)
00002A88  504F      4667          addq.w    #8,A7
                    4668   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002A8A  4878 001C 4669          pea       28
00002A8E  4878 245E 4670          pea       _UnhandledIRQ4.L
00002A92  4E92      4671          jsr       (A2)
00002A94  504F      4672          addq.w    #8,A7
                    4673   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002A96  4878 001D 4674          pea       29
00002A9A  4878 246A 4675          pea       _UnhandledIRQ5.L
00002A9E  4E92      4676          jsr       (A2)
00002AA0  504F      4677          addq.w    #8,A7
                    4678   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002AA2  4878 001E 4679          pea       30
00002AA6  4878 2476 4680          pea       _UnhandledIRQ6.L
00002AAA  4E92      4681          jsr       (A2)
00002AAC  504F      4682          addq.w    #8,A7
                    4683   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002AAE  4878 001F 4684          pea       31
00002AB2  4878 2488 4685          pea       _UnhandledIRQ7.L
00002AB6  4E92      4686          jsr       (A2)
00002AB8  504F      4687          addq.w    #8,A7
                    4688   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002ABA  4878 002E 4689          pea       46
00002ABE  4878 1EAA 4690          pea       _HandleBreakPoint.L
00002AC2  4E92      4691          jsr       (A2)
00002AC4  504F      4692          addq.w    #8,A7
                    4693   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002AC6  4878 001D 4694          pea       29
00002ACA  4878 158A 4695          pea       _DumpRegistersandPause.L
00002ACE  4E92      4696          jsr       (A2)
00002AD0  504F      4697          addq.w    #8,A7
                    4698   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002AD2  4878 0002 4699          pea       2
00002AD6  4878 24A2 4700          pea       _BusError.L
00002ADA  4E92      4701          jsr       (A2)
00002ADC  504F      4702          addq.w    #8,A7
                    4703   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002ADE  4878 0003 4704          pea       3
00002AE2  4878 24B0 4705          pea       _AddressError.L
00002AE6  4E92      4706          jsr       (A2)
00002AE8  504F      4707          addq.w    #8,A7
                    4708   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002AEA  4878 0004 4709          pea       4
00002AEE  4878 24BE 4710          pea       _IllegalInstruction.L
00002AF2  4E92      4711          jsr       (A2)
00002AF4  504F      4712          addq.w    #8,A7
                    4713   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002AF6  4878 0005 4714          pea       5
00002AFA  4878 24CC 4715          pea       _Dividebyzero.L
00002AFE  4E92      4716          jsr       (A2)
00002B00  504F      4717          addq.w    #8,A7
                    4718   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002B02  4878 0006 4719          pea       6
00002B06  4878 24DA 4720          pea       _Check.L
00002B0A  4E92      4721          jsr       (A2)
00002B0C  504F      4722          addq.w    #8,A7
                    4723   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002B0E  4878 0007 4724          pea       7
00002B12  4878 24E8 4725          pea       _Trapv.L
00002B16  4E92      4726          jsr       (A2)
00002B18  504F      4727          addq.w    #8,A7
                    4728   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002B1A  4878 0008 4729          pea       8
00002B1E  4878 24F6 4730          pea       _PrivError.L
00002B22  4E92      4731          jsr       (A2)
00002B24  504F      4732          addq.w    #8,A7
                    4733   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002B26  4878 000F 4734          pea       15
00002B2A  4878 2504 4735          pea       _UnitIRQ.L
00002B2E  4E92      4736          jsr       (A2)
00002B30  504F      4737          addq.w    #8,A7
                    4738   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002B32  4878 0018 4739          pea       24
00002B36  4878 24DA 4740          pea       _Check.L
00002B3A  4E92      4741          jsr       (A2)
00002B3C  504F      4742          addq.w    #8,A7
                    4743   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002B3E  4EB8 0BA6 4744          jsr       _FlushKeyboard
                    4745   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002B42  4239 0040 4746          clr.b     4194314
00002B46  000A      
                    4747   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4748   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4749   main_7:
00002B48  1039 0040 4750          move.b    4194306,D0
00002B4C  0002      
00002B4E  C03C 0002 4751          and.b     #2,D0
00002B52  0C00 0002 4752          cmp.b     #2,D0
00002B56  662A      4753          bne.s     main_9
                    4754   ; LoadFromFlashChip();
00002B58  4EB8 10C6 4755          jsr       _LoadFromFlashChip
                    4756   ; printf("\r\nRunning.....") ;
00002B5C  4879 0000 4757          pea       @m68kde~1_163.L
00002B60  4B32      
00002B62  4E93      4758          jsr       (A3)
00002B64  584F      4759          addq.w    #4,A7
                    4760   ; Oline1("Running.....") ;
00002B66  4879 0000 4761          pea       @m68kde~1_164.L
00002B6A  4B42      
00002B6C  4EB8 0A02 4762          jsr       _Oline1
00002B70  584F      4763          addq.w    #4,A7
                    4764   ; GoFlag = 1;
00002B72  23FC 0000 4765          move.l    #1,_GoFlag.L
00002B76  0001 0803 
00002B7A  00DC      
                    4766   ; go() ;
00002B7C  4EB8 08B8 4767          jsr       _go
00002B80  60C6      4768          bra       main_7
                    4769   main_9:
                    4770   ; }
                    4771   ; // otherwise start the debug monitor
                    4772   ; Oline0(BugMessage) ;
00002B82  2F03      4773          move.l    D3,-(A7)
00002B84  4EB8 09D4 4774          jsr       _Oline0
00002B88  584F      4775          addq.w    #4,A7
                    4776   ; Oline1("By: PJ Davies") ;
00002B8A  4879 0000 4777          pea       @m68kde~1_165.L
00002B8E  4B50      
00002B90  4EB8 0A02 4778          jsr       _Oline1
00002B94  584F      4779          addq.w    #4,A7
                    4780   ; printf("\r\n%s", BugMessage) ;
00002B96  2F03      4781          move.l    D3,-(A7)
00002B98  4879 0000 4782          pea       @m68kde~1_166.L
00002B9C  4B5E      
00002B9E  4E93      4783          jsr       (A3)
00002BA0  504F      4784          addq.w    #8,A7
                    4785   ; printf("\r\n%s", CopyrightMessage) ;
00002BA2  2F2E FFFC 4786          move.l    -4(A6),-(A7)
00002BA6  4879 0000 4787          pea       @m68kde~1_166.L
00002BAA  4B5E      
00002BAC  4E93      4788          jsr       (A3)
00002BAE  504F      4789          addq.w    #8,A7
                    4790   ; menu();
00002BB0  4EB8 216E 4791          jsr       _menu
00002BB4  4CDF 0C0C 4792          movem.l   (A7)+,D2/D3/A2/A3
00002BB8  4E5E      4793          unlk      A6
00002BBA  4E75      4794          rts
                    4795   ; }
                    4796   _strcpy:
00002BBC  206F 0004 4797          move.l    (4,A7),A0
00002BC0  226F 0008 4798          move.l    (8,A7),A1
00002BC4  2008      4799          move.l    A0,D0
                    4800   strcpy_1:
00002BC6  10D9      4801          move.b    (A1)+,(A0)+
00002BC8  66FC      4802          bne.s     strcpy_1
00002BCA  4E75      4803          rts
                    4804   ULDIV:
00002BCC  4E56 0000 4805          link    A6,#0
00002BD0  48E7 C000 4806          movem.l D0/D1,-(A7)
00002BD4  222E 0008 4807          move.l  8(A6),D1
00002BD8  202E 000C 4808          move.l  12(A6),D0
00002BDC  6036      4809          bra.s   ldiv_3
                    4810   LDIV:
00002BDE  4E56 0000 4811          link    A6,#0
00002BE2  48E7 C000 4812          movem.l D0/D1,-(A7)
00002BE6  222E 0008 4813          move.l  8(A6),D1
00002BEA  202E 000C 4814          move.l  12(A6),D0
00002BEE  4A80      4815          tst.l   D0
00002BF0  6A0E      4816          bpl.s   ldiv_1
00002BF2  4480      4817          neg.l   D0
00002BF4  4A81      4818          tst.l   D1
00002BF6  6A14      4819          bpl.s   ldiv_2
00002BF8  4481      4820          neg.l   D1
00002BFA  612A      4821          bsr.s   dodiv
00002BFC  4481      4822          neg.l   D1
00002BFE  6016      4823          bra.s   ldiv_4
                    4824   ldiv_1:
00002C00  4A81      4825          tst.l   D1
00002C02  6A10      4826          bpl.s   ldiv_3
00002C04  4481      4827          neg.l   D1
00002C06  611E      4828          bsr.s   dodiv
00002C08  4480      4829          neg.l   D0
00002C0A  600A      4830          bra.s   ldiv_4
                    4831   ldiv_2:
00002C0C  6118      4832          bsr.s   dodiv
00002C0E  4480      4833          neg.l   D0
00002C10  4481      4834          neg.l   D1
00002C12  6002      4835          bra.s   ldiv_4
                    4836   ldiv_3:
00002C14  6110      4837          bsr.s   dodiv
                    4838   ldiv_4:
00002C16  2D40 0008 4839          move.l  D0,8(A6)
00002C1A  2D41 000C 4840          move.l  D1,12(A6)
00002C1E  4CDF 0003 4841          movem.l (A7)+,D0/D1
00002C22  4E5E      4842          unlk    A6
00002C24  4E75      4843          rts
                    4844   dodiv:
00002C26  0C81 0000 4845          cmpi.l  #$FFFF,D1
00002C2A  FFFF      
00002C2C  6236      4846          bhi.s   dodiv_2
00002C2E  0C80 0000 4847          cmpi.l  #$FFFF,D0
00002C32  FFFF      
00002C34  6210      4848          bhi.s   dodiv_1
00002C36  80C1      4849          divu    D1,D0
00002C38  2200      4850          move.l  D0,D1
00002C3A  4241      4851          clr.w   D1
00002C3C  4841      4852          swap    D1
00002C3E  0280 0000 4853          andi.l  #$FFFF,D0
00002C42  FFFF      
00002C44  4E75      4854          rts
                    4855   dodiv_1:
00002C46  48A7 A000 4856          movem.w D0/D2,-(A7)
00002C4A  4240      4857          clr.w   D0
00002C4C  4840      4858          swap    D0
00002C4E  80C1      4859          divu    D1,D0
00002C50  3400      4860          move.w  D0,D2
00002C52  301F      4861          move.w  (A7)+,D0
00002C54  80C1      4862          divu    D1,D0
00002C56  4840      4863          swap    D0
00002C58  4281      4864          clr.l   D1
00002C5A  3200      4865          move.w  D0,D1
00002C5C  3002      4866          move.w  D2,D0
00002C5E  4840      4867          swap    D0
00002C60  341F      4868          move.w  (A7)+,D2
00002C62  4E75      4869          rts
                    4870   dodiv_2:
00002C64  48E7 3800 4871          movem.l D2/D3/D4,-(A7)
00002C68  2401      4872          move.l  D1,D2
00002C6A  4242      4873          clr.w   D2
00002C6C  4842      4874          swap    D2
00002C6E  5282      4875          addq.l  #1,D2
00002C70  2600      4876          move.l  D0,D3
00002C72  2801      4877          move.l  D1,D4
00002C74  2202      4878          move.l  D2,D1
00002C76  61CE      4879          bsr.s   dodiv_1
00002C78  2204      4880          move.l  D4,D1
00002C7A  82C2      4881          divu    D2,D1
00002C7C  80C1      4882          divu    D1,D0
00002C7E  0280 0000 4883          andi.l  #$FFFF,D0
00002C82  FFFF      
                    4884   dodiv_3:
00002C84  2204      4885          move.l  D4,D1
00002C86  2404      4886          move.l  D4,D2
00002C88  4842      4887          swap    D2
00002C8A  C2C0      4888          mulu    D0,D1
00002C8C  C4C0      4889          mulu    D0,D2
00002C8E  4842      4890          swap    D2
00002C90  D282      4891          add.l   D2,D1
00002C92  9283      4892          sub.l   D3,D1
00002C94  620A      4893          bhi.s   dodiv_4
00002C96  4481      4894          neg.l   D1
00002C98  B881      4895          cmp.l   D1,D4
00002C9A  6208      4896          bhi.s   dodiv_5
00002C9C  5280      4897          addq.l  #1,D0
00002C9E  60E4      4898          bra.s   dodiv_3
                    4899   dodiv_4:
00002CA0  5380      4900          subq.l  #1,D0
00002CA2  60E0      4901          bra.s   dodiv_3
                    4902   dodiv_5:
00002CA4  4CDF 001C 4903          movem.l (A7)+,D2/D3/D4
00002CA8  4E75      4904          rts
                    4905   _putch:
00002CAA  4E56 0000 4906          link      A6,#0
00002CAE  2F02      4907          move.l    D2,-(A7)
00002CB0  242E 0008 4908          move.l    8(A6),D2
00002CB4  0C82 0000 4909          cmp.l     #10,D2
00002CB8  000A      
00002CBA  660A      4910          bne.s     putch_1
00002CBC  4878 000D 4911          pea       13
00002CC0  4EB8 0B3C 4912          jsr       __putch
00002CC4  584F      4913          addq.w    #4,A7
                    4914   putch_1:
00002CC6  2F02      4915          move.l    D2,-(A7)
00002CC8  4EB8 0B3C 4916          jsr       __putch
00002CCC  584F      4917          addq.w    #4,A7
00002CCE  2002      4918          move.l    D2,D0
00002CD0  241F      4919          move.l    (A7)+,D2
00002CD2  4E5E      4920          unlk      A6
00002CD4  4E75      4921          rts
                    4922   _getch:
00002CD6  2F02      4923          move.l    D2,-(A7)
00002CD8  2439 0803 4924          move.l    __ungetbuf.L,D2
00002CDC  00C0      
00002CDE  2039 0803 4925          move.l    __ungetbuf.L,D0
00002CE2  00C0      
00002CE4  0C80 FFFF 4926          cmp.l     #-1,D0
00002CE8  FFFF      
00002CEA  670C      4927          beq.s     getch_1
00002CEC  23FC FFFF 4928          move.l    #-1,__ungetbuf.L
00002CF0  FFFF 0803 
00002CF4  00C0      
00002CF6  6010      4929          bra.s     getch_3
                    4930   getch_1:
00002CF8  4EB8 0B68 4931          jsr       __getch
00002CFC  2400      4932          move.l    D0,D2
00002CFE  0C80 0000 4933          cmp.l     #13,D0
00002D02  000D      
00002D04  6602      4934          bne.s     getch_3
00002D06  740A      4935          moveq     #10,D2
                    4936   getch_3:
00002D08  2002      4937          move.l    D2,D0
00002D0A  241F      4938          move.l    (A7)+,D2
00002D0C  4E75      4939          rts
                    4940   _tolower:
00002D0E  202F 0004 4941          move.l    4(A7),D0
00002D12  0C80 0000 4942          cmp.l     #'A',D0
00002D16  0041      
00002D18  6D0E      4943          blt.s     tolower_1
00002D1A  0C80 0000 4944          cmp.l     #'Z',D0
00002D1E  005A      
00002D20  6E06      4945          bgt.s     tolower_1
00002D22  0680 0000 4946          add.l     #$20,D0
00002D26  0020      
                    4947   tolower_1:
00002D28  4E75      4948          rts
                    4949   _sprintf:
00002D2A  4E56 FFFC 4950          link      A6,#-4
00002D2E  2F02      4951          move.l    D2,-(A7)
00002D30  41EE 000C 4952          lea       12(A6),A0
00002D34  5848      4953          addq.w    #4,A0
00002D36  2408      4954          move.l    A0,D2
00002D38  2F02      4955          move.l    D2,-(A7)
00002D3A  2F2E 000C 4956          move.l    12(A6),-(A7)
00002D3E  2F2E 0008 4957          move.l    8(A6),-(A7)
00002D42  4EB9 0000 4958          jsr       _doprint
00002D46  2E64      
00002D48  DEFC 000C 4959          add.w     #12,A7
00002D4C  2D40 FFFC 4960          move.l    D0,-4(A6)
00002D50  4282      4961          clr.l     D2
00002D52  202E FFFC 4962          move.l    -4(A6),D0
00002D56  241F      4963          move.l    (A7)+,D2
00002D58  4E5E      4964          unlk      A6
00002D5A  4E75      4965          rts
                    4966   _strcat:
00002D5C  206F 0004 4967          move.l    (4,A7),A0
00002D60  226F 0008 4968          move.l    (8,A7),A1
00002D64  2008      4969          move.l    A0,D0
                    4970   strcat_1:
00002D66  4A18      4971          tst.b     (A0)+
00002D68  66FC      4972          bne.s     strcat_1
00002D6A  5388      4973          subq.l    #1,A0
                    4974   strcat_2:
00002D6C  10D9      4975          move.b    (A1)+,(A0)+
00002D6E  66FC      4976          bne.s     strcat_2
00002D70  4E75      4977          rts
                    4978   _toupper:
00002D72  202F 0004 4979          move.l    4(A7),D0
00002D76  0C80 0000 4980          cmp.l     #'a',D0
00002D7A  0061      
00002D7C  6D0E      4981          blt.s     toupper_1
00002D7E  0C80 0000 4982          cmp.l     #'z',D0
00002D82  007A      
00002D84  6E06      4983          bgt.s     toupper_1
00002D86  0480 0000 4984          sub.l     #$20,D0
00002D8A  0020      
                    4985   toupper_1:
00002D8C  4E75      4986          rts
                    4987   _printf:
00002D8E  4E56 FFFC 4988          link      A6,#-4
00002D92  2F02      4989          move.l    D2,-(A7)
00002D94  41EE 0008 4990          lea       8(A6),A0
00002D98  5848      4991          addq.w    #4,A0
00002D9A  2408      4992          move.l    A0,D2
00002D9C  2F02      4993          move.l    D2,-(A7)
00002D9E  2F2E 0008 4994          move.l    8(A6),-(A7)
00002DA2  42A7      4995          clr.l     -(A7)
00002DA4  4EB9 0000 4996          jsr       _doprint
00002DA8  2E64      
00002DAA  DEFC 000C 4997          add.w     #12,A7
00002DAE  2D40 FFFC 4998          move.l    D0,-4(A6)
00002DB2  4282      4999          clr.l     D2
00002DB4  202E FFFC 5000          move.l    -4(A6),D0
00002DB8  241F      5001          move.l    (A7)+,D2
00002DBA  4E5E      5002          unlk      A6
00002DBC  4E75      5003          rts
                    5004   @doprint_copy:
00002DBE  4E56 0000 5005          link      A6,#0
00002DC2  206E 0008 5006          move.l    8(A6),A0
00002DC6  4A90      5007          tst.l     (A0)
00002DC8  6710      5008          beq.s     @doprint_copy_1
00002DCA  202E 000C 5009          move.l    12(A6),D0
00002DCE  206E 0008 5010          move.l    8(A6),A0
00002DD2  2250      5011          move.l    (A0),A1
00002DD4  5290      5012          addq.l    #1,(A0)
00002DD6  1280      5013          move.b    D0,(A1)
00002DD8  600A      5014          bra.s     @doprint_copy_2
                    5015   @doprint_copy_1:
00002DDA  2F2E 000C 5016          move.l    12(A6),-(A7)
00002DDE  4EB8 2CAA 5017          jsr       _putch
00002DE2  584F      5018          addq.w    #4,A7
                    5019   @doprint_copy_2:
00002DE4  4E5E      5020          unlk      A6
00002DE6  4E75      5021          rts
                    5022   @doprint_getval:
00002DE8  4E56 0000 5023          link      A6,#0
00002DEC  48E7 3000 5024          movem.l   D2/D3,-(A7)
00002DF0  262E 0008 5025          move.l    8(A6),D3
00002DF4  4282      5026          clr.l     D2
00002DF6  2043      5027          move.l    D3,A0
00002DF8  2050      5028          move.l    (A0),A0
00002DFA  1010      5029          move.b    (A0),D0
00002DFC  0C00 002A 5030          cmp.b     #42,D0
00002E00  6612      5031          bne.s     @doprint_getval_1
00002E02  206E 000C 5032          move.l    12(A6),A0
00002E06  2250      5033          move.l    (A0),A1
00002E08  5890      5034          addq.l    #4,(A0)
00002E0A  2411      5035          move.l    (A1),D2
00002E0C  2043      5036          move.l    D3,A0
00002E0E  5290      5037          addq.l    #1,(A0)
00002E10  6000 0048 5038          bra       @doprint_getval_5
                    5039   @doprint_getval_1:
00002E14  7001      5040          moveq     #1,D0
00002E16  2043      5041          move.l    D3,A0
00002E18  2050      5042          move.l    (A0),A0
00002E1A  1210      5043          move.b    (A0),D1
00002E1C  4881      5044          ext.w     D1
00002E1E  48C1      5045          ext.l     D1
00002E20  D081      5046          add.l     D1,D0
00002E22  41F9 0000 5047          lea       __ctype.L,A0
00002E26  4B70      
00002E28  1030 0800 5048          move.b    0(A0,D0.L),D0
00002E2C  C03C 0004 5049          and.b     #4,D0
00002E30  6728      5050          beq.s     @doprint_getval_5
00002E32  2F02      5051          move.l    D2,-(A7)
00002E34  4878 000A 5052          pea       10
00002E38  4EB9 0000 5053          jsr       LMUL
00002E3C  3600      
00002E3E  2017      5054          move.l    (A7),D0
00002E40  504F      5055          addq.w    #8,A7
00002E42  2043      5056          move.l    D3,A0
00002E44  2250      5057          move.l    (A0),A1
00002E46  5290      5058          addq.l    #1,(A0)
00002E48  1211      5059          move.b    (A1),D1
00002E4A  4881      5060          ext.w     D1
00002E4C  48C1      5061          ext.l     D1
00002E4E  D081      5062          add.l     D1,D0
00002E50  0480 0000 5063          sub.l     #48,D0
00002E54  0030      
00002E56  2400      5064          move.l    D0,D2
00002E58  60BA      5065          bra       @doprint_getval_1
                    5066   @doprint_getval_5:
00002E5A  2002      5067          move.l    D2,D0
00002E5C  4CDF 000C 5068          movem.l   (A7)+,D2/D3
00002E60  4E5E      5069          unlk      A6
00002E62  4E75      5070          rts
                    5071   _doprint:
00002E64  4E56 FFCC 5072          link      A6,#-52
00002E68  48E7 3F3C 5073          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002E6C  45EE 0008 5074          lea       8(A6),A2
00002E70  47F8 2DBE 5075          lea       @doprint_copy.L,A3
00002E74  49F9 0000 5076          lea       _ultoa.L,A4
00002E78  358C      
00002E7A  4286      5077          clr.l     D6
                    5078   doprint_1:
00002E7C  206E 000C 5079          move.l    12(A6),A0
00002E80  4A10      5080          tst.b     (A0)
00002E82  6700 05EA 5081          beq       doprint_3
00002E86  206E 000C 5082          move.l    12(A6),A0
00002E8A  1010      5083          move.b    (A0),D0
00002E8C  0C00 0025 5084          cmp.b     #37,D0
00002E90  671C      5085          beq.s     doprint_4
00002E92  206E 000C 5086          move.l    12(A6),A0
00002E96  52AE 000C 5087          addq.l    #1,12(A6)
00002E9A  1210      5088          move.b    (A0),D1
00002E9C  4881      5089          ext.w     D1
00002E9E  48C1      5090          ext.l     D1
00002EA0  2F01      5091          move.l    D1,-(A7)
00002EA2  2F0A      5092          move.l    A2,-(A7)
00002EA4  4E93      5093          jsr       (A3)
00002EA6  504F      5094          addq.w    #8,A7
00002EA8  5286      5095          addq.l    #1,D6
00002EAA  6000 05BE 5096          bra       doprint_2
                    5097   doprint_4:
00002EAE  52AE 000C 5098          addq.l    #1,12(A6)
00002EB2  422E FFD3 5099          clr.b     -45(A6)
00002EB6  422E FFD2 5100          clr.b     -46(A6)
00002EBA  422E FFD0 5101          clr.b     -48(A6)
00002EBE  422E FFCF 5102          clr.b     -49(A6)
00002EC2  422E FFCE 5103          clr.b     -50(A6)
00002EC6  422E FFCD 5104          clr.b     -51(A6)
00002ECA  42AE FFFC 5105          clr.l     -4(A6)
00002ECE  7AFF      5106          moveq     #-1,D5
00002ED0  41EE FFDC 5107          lea       -36(A6),A0
00002ED4  2608      5108          move.l    A0,D3
00002ED6  2408      5109          move.l    A0,D2
                    5110   doprint_6:
00002ED8  206E 000C 5111          move.l    12(A6),A0
00002EDC  1010      5112          move.b    (A0),D0
00002EDE  4880      5113          ext.w     D0
00002EE0  48C0      5114          ext.l     D0
00002EE2  0C80 0000 5115          cmp.l     #43,D0
00002EE6  002B      
00002EE8  6730      5116          beq.s     doprint_12
00002EEA  6E18      5117          bgt.s     doprint_15
00002EEC  0C80 0000 5118          cmp.l     #35,D0
00002EF0  0023      
00002EF2  6700 003E 5119          beq       doprint_14
00002EF6  6E00 0046 5120          bgt       doprint_9
00002EFA  0C80 0000 5121          cmp.l     #32,D0
00002EFE  0020      
00002F00  6724      5122          beq.s     doprint_13
00002F02  603A      5123          bra.s     doprint_9
                    5124   doprint_15:
00002F04  0C80 0000 5125          cmp.l     #45,D0
00002F08  002D      
00002F0A  6702      5126          beq.s     doprint_11
00002F0C  6030      5127          bra.s     doprint_9
                    5128   doprint_11:
00002F0E  1D7C 0001 5129          move.b    #1,-51(A6)
00002F12  FFCD      
00002F14  52AE 000C 5130          addq.l    #1,12(A6)
00002F18  6026      5131          bra.s     doprint_7
                    5132   doprint_12:
00002F1A  1D7C 0001 5133          move.b    #1,-50(A6)
00002F1E  FFCE      
00002F20  52AE 000C 5134          addq.l    #1,12(A6)
00002F24  601A      5135          bra.s     doprint_7
                    5136   doprint_13:
00002F26  1D7C 0001 5137          move.b    #1,-49(A6)
00002F2A  FFCF      
00002F2C  52AE 000C 5138          addq.l    #1,12(A6)
00002F30  600E      5139          bra.s     doprint_7
                    5140   doprint_14:
00002F32  1D7C 0001 5141          move.b    #1,-48(A6)
00002F36  FFD0      
00002F38  52AE 000C 5142          addq.l    #1,12(A6)
00002F3C  6002      5143          bra.s     doprint_7
                    5144   doprint_9:
00002F3E  6002      5145          bra.s     doprint_8
                    5146   doprint_7:
00002F40  6096      5147          bra       doprint_6
                    5148   doprint_8:
00002F42  206E 000C 5149          move.l    12(A6),A0
00002F46  1010      5150          move.b    (A0),D0
00002F48  0C00 0030 5151          cmp.b     #48,D0
00002F4C  660A      5152          bne.s     doprint_16
00002F4E  52AE 000C 5153          addq.l    #1,12(A6)
00002F52  1D7C 0001 5154          move.b    #1,-46(A6)
00002F56  FFD2      
                    5155   doprint_16:
00002F58  486E 0010 5156          pea       16(A6)
00002F5C  486E 000C 5157          pea       12(A6)
00002F60  4EB8 2DE8 5158          jsr       @doprint_getval
00002F64  504F      5159          addq.w    #8,A7
00002F66  2A40      5160          move.l    D0,A5
00002F68  206E 000C 5161          move.l    12(A6),A0
00002F6C  1010      5162          move.b    (A0),D0
00002F6E  0C00 002E 5163          cmp.b     #46,D0
00002F72  6614      5164          bne.s     doprint_18
00002F74  52AE 000C 5165          addq.l    #1,12(A6)
00002F78  486E 0010 5166          pea       16(A6)
00002F7C  486E 000C 5167          pea       12(A6)
00002F80  4EB8 2DE8 5168          jsr       @doprint_getval
00002F84  504F      5169          addq.w    #8,A7
00002F86  2A00      5170          move.l    D0,D5
                    5171   doprint_18:
00002F88  206E 000C 5172          move.l    12(A6),A0
00002F8C  1010      5173          move.b    (A0),D0
00002F8E  0C00 006C 5174          cmp.b     #108,D0
00002F92  660A      5175          bne.s     doprint_20
00002F94  52AE 000C 5176          addq.l    #1,12(A6)
00002F98  1D7C 0001 5177          move.b    #1,-45(A6)
00002F9C  FFD3      
                    5178   doprint_20:
00002F9E  206E 000C 5179          move.l    12(A6),A0
00002FA2  1010      5180          move.b    (A0),D0
00002FA4  4880      5181          ext.w     D0
00002FA6  48C0      5182          ext.l     D0
00002FA8  0C80 0000 5183          cmp.l     #111,D0
00002FAC  006F      
00002FAE  6700 00D8 5184          beq       doprint_27
00002FB2  6E34      5185          bgt.s     doprint_33
00002FB4  0C80 0000 5186          cmp.l     #100,D0
00002FB8  0064      
00002FBA  6700 0054 5187          beq       doprint_24
00002FBE  6E1C      5188          bgt.s     doprint_34
00002FC0  0C80 0000 5189          cmp.l     #99,D0
00002FC4  0063      
00002FC6  6700 0130 5190          beq       doprint_30
00002FCA  6E00 0174 5191          bgt       doprint_22
00002FCE  0C80 0000 5192          cmp.l     #88,D0
00002FD2  0058      
00002FD4  6700 00EA 5193          beq       doprint_28
00002FD8  6000 0166 5194          bra       doprint_22
                    5195   doprint_34:
00002FDC  0C80 0000 5196          cmp.l     #105,D0
00002FE0  0069      
00002FE2  672C      5197          beq.s     doprint_24
00002FE4  6000 015A 5198          bra       doprint_22
                    5199   doprint_33:
00002FE8  0C80 0000 5200          cmp.l     #117,D0
00002FEC  0075      
00002FEE  6700 0060 5201          beq       doprint_26
00002FF2  6E0E      5202          bgt.s     doprint_35
00002FF4  0C80 0000 5203          cmp.l     #115,D0
00002FF8  0073      
00002FFA  6700 0124 5204          beq       doprint_31
00002FFE  6000 0140 5205          bra       doprint_22
                    5206   doprint_35:
00003002  0C80 0000 5207          cmp.l     #120,D0
00003006  0078      
00003008  6700 00B6 5208          beq       doprint_28
0000300C  6000 0132 5209          bra       doprint_22
                    5210   doprint_24:
00003010  4A2E FFD3 5211          tst.b     -45(A6)
00003014  671C      5212          beq.s     doprint_36
00003016  4878 000A 5213          pea       10
0000301A  2F03      5214          move.l    D3,-(A7)
0000301C  206E 0010 5215          move.l    16(A6),A0
00003020  58AE 0010 5216          addq.l    #4,16(A6)
00003024  2F10      5217          move.l    (A0),-(A7)
00003026  4EB9 0000 5218          jsr       _ltoa
0000302A  3508      
0000302C  DEFC 000C 5219          add.w     #12,A7
00003030  601A      5220          bra.s     doprint_37
                    5221   doprint_36:
00003032  4878 000A 5222          pea       10
00003036  2F03      5223          move.l    D3,-(A7)
00003038  206E 0010 5224          move.l    16(A6),A0
0000303C  58AE 0010 5225          addq.l    #4,16(A6)
00003040  2F10      5226          move.l    (A0),-(A7)
00003042  4EB9 0000 5227          jsr       _ltoa
00003046  3508      
00003048  DEFC 000C 5228          add.w     #12,A7
                    5229   doprint_37:
0000304C  6000 0100 5230          bra       doprint_23
                    5231   doprint_26:
00003050  4A2E FFD3 5232          tst.b     -45(A6)
00003054  6718      5233          beq.s     doprint_38
00003056  4878 000A 5234          pea       10
0000305A  2F03      5235          move.l    D3,-(A7)
0000305C  206E 0010 5236          move.l    16(A6),A0
00003060  58AE 0010 5237          addq.l    #4,16(A6)
00003064  2F10      5238          move.l    (A0),-(A7)
00003066  4E94      5239          jsr       (A4)
00003068  DEFC 000C 5240          add.w     #12,A7
0000306C  6016      5241          bra.s     doprint_39
                    5242   doprint_38:
0000306E  4878 000A 5243          pea       10
00003072  2F03      5244          move.l    D3,-(A7)
00003074  206E 0010 5245          move.l    16(A6),A0
00003078  58AE 0010 5246          addq.l    #4,16(A6)
0000307C  2F10      5247          move.l    (A0),-(A7)
0000307E  4E94      5248          jsr       (A4)
00003080  DEFC 000C 5249          add.w     #12,A7
                    5250   doprint_39:
00003084  6000 00C8 5251          bra       doprint_23
                    5252   doprint_27:
00003088  4A2E FFD3 5253          tst.b     -45(A6)
0000308C  6718      5254          beq.s     doprint_40
0000308E  4878 0008 5255          pea       8
00003092  2F03      5256          move.l    D3,-(A7)
00003094  206E 0010 5257          move.l    16(A6),A0
00003098  58AE 0010 5258          addq.l    #4,16(A6)
0000309C  2F10      5259          move.l    (A0),-(A7)
0000309E  4E94      5260          jsr       (A4)
000030A0  DEFC 000C 5261          add.w     #12,A7
000030A4  6016      5262          bra.s     doprint_41
                    5263   doprint_40:
000030A6  4878 0008 5264          pea       8
000030AA  2F03      5265          move.l    D3,-(A7)
000030AC  206E 0010 5266          move.l    16(A6),A0
000030B0  58AE 0010 5267          addq.l    #4,16(A6)
000030B4  2F10      5268          move.l    (A0),-(A7)
000030B6  4E94      5269          jsr       (A4)
000030B8  DEFC 000C 5270          add.w     #12,A7
                    5271   doprint_41:
000030BC  6000 0090 5272          bra       doprint_23
                    5273   doprint_28:
000030C0  4A2E FFD3 5274          tst.b     -45(A6)
000030C4  6718      5275          beq.s     doprint_42
000030C6  4878 0010 5276          pea       16
000030CA  2F03      5277          move.l    D3,-(A7)
000030CC  206E 0010 5278          move.l    16(A6),A0
000030D0  58AE 0010 5279          addq.l    #4,16(A6)
000030D4  2F10      5280          move.l    (A0),-(A7)
000030D6  4E94      5281          jsr       (A4)
000030D8  DEFC 000C 5282          add.w     #12,A7
000030DC  6016      5283          bra.s     doprint_43
                    5284   doprint_42:
000030DE  4878 0010 5285          pea       16
000030E2  2F03      5286          move.l    D3,-(A7)
000030E4  206E 0010 5287          move.l    16(A6),A0
000030E8  58AE 0010 5288          addq.l    #4,16(A6)
000030EC  2F10      5289          move.l    (A0),-(A7)
000030EE  4E94      5290          jsr       (A4)
000030F0  DEFC 000C 5291          add.w     #12,A7
                    5292   doprint_43:
000030F4  6000 0058 5293          bra       doprint_23
                    5294   doprint_30:
000030F8  206E 0010 5295          move.l    16(A6),A0
000030FC  58AE 0010 5296          addq.l    #4,16(A6)
00003100  2010      5297          move.l    (A0),D0
00003102  2042      5298          move.l    D2,A0
00003104  5282      5299          addq.l    #1,D2
00003106  1080      5300          move.b    D0,(A0)
00003108  2042      5301          move.l    D2,A0
0000310A  4210      5302          clr.b     (A0)
0000310C  200D      5303          move.l    A5,D0
0000310E  6704      5304          beq.s     doprint_44
00003110  200D      5305          move.l    A5,D0
00003112  6006      5306          bra.s     doprint_45
                    5307   doprint_44:
00003114  7001      5308          moveq     #1,D0
00003116  4880      5309          ext.w     D0
00003118  48C0      5310          ext.l     D0
                    5311   doprint_45:
0000311A  2A00      5312          move.l    D0,D5
0000311C  6000 0030 5313          bra       doprint_23
                    5314   doprint_31:
00003120  206E 0010 5315          move.l    16(A6),A0
00003124  58AE 0010 5316          addq.l    #4,16(A6)
00003128  2610      5317          move.l    (A0),D3
0000312A  0C85 FFFF 5318          cmp.l     #-1,D5
0000312E  FFFF      
00003130  660C      5319          bne.s     doprint_46
00003132  2F03      5320          move.l    D3,-(A7)
00003134  4EB9 0000 5321          jsr       _strlen
00003138  368E      
0000313A  584F      5322          addq.w    #4,A7
0000313C  2A00      5323          move.l    D0,D5
                    5324   doprint_46:
0000313E  600E      5325          bra.s     doprint_23
                    5326   doprint_22:
00003140  206E 000C 5327          move.l    12(A6),A0
00003144  2242      5328          move.l    D2,A1
00003146  5282      5329          addq.l    #1,D2
00003148  1290      5330          move.b    (A0),(A1)
0000314A  2042      5331          move.l    D2,A0
0000314C  4210      5332          clr.b     (A0)
                    5333   doprint_23:
0000314E  2F03      5334          move.l    D3,-(A7)
00003150  4EB9 0000 5335          jsr       _strlen
00003154  368E      
00003156  584F      5336          addq.w    #4,A7
00003158  1800      5337          move.b    D0,D4
0000315A  206E 000C 5338          move.l    12(A6),A0
0000315E  1010      5339          move.b    (A0),D0
00003160  0C00 0073 5340          cmp.b     #115,D0
00003164  661C      5341          bne.s     doprint_48
00003166  0C85 0000 5342          cmp.l     #0,D5
0000316A  0000      
0000316C  6D14      5343          blt.s     doprint_48
0000316E  4884      5344          ext.w     D4
00003170  48C4      5345          ext.l     D4
00003172  B885      5346          cmp.l     D5,D4
00003174  6F04      5347          ble.s     doprint_50
00003176  2005      5348          move.l    D5,D0
00003178  6006      5349          bra.s     doprint_51
                    5350   doprint_50:
0000317A  1004      5351          move.b    D4,D0
0000317C  4880      5352          ext.w     D0
0000317E  48C0      5353          ext.l     D0
                    5354   doprint_51:
00003180  1800      5355          move.b    D0,D4
                    5356   doprint_48:
00003182  206E 000C 5357          move.l    12(A6),A0
00003186  1010      5358          move.b    (A0),D0
00003188  0C00 0058 5359          cmp.b     #88,D0
0000318C  6600 0026 5360          bne       doprint_56
00003190  41EE FFDC 5361          lea       -36(A6),A0
00003194  2408      5362          move.l    A0,D2
                    5363   doprint_54:
00003196  2042      5364          move.l    D2,A0
00003198  4A10      5365          tst.b     (A0)
0000319A  6718      5366          beq.s     doprint_56
0000319C  2042      5367          move.l    D2,A0
0000319E  1210      5368          move.b    (A0),D1
000031A0  4881      5369          ext.w     D1
000031A2  48C1      5370          ext.l     D1
000031A4  2F01      5371          move.l    D1,-(A7)
000031A6  4EB8 2D72 5372          jsr       _toupper
000031AA  584F      5373          addq.w    #4,A7
000031AC  2042      5374          move.l    D2,A0
000031AE  1080      5375          move.b    D0,(A0)
000031B0  5282      5376          addq.l    #1,D2
000031B2  60E2      5377          bra       doprint_54
                    5378   doprint_56:
000031B4  7E00      5379          moveq     #0,D7
000031B6  41EE FFD4 5380          lea       -44(A6),A0
000031BA  2408      5381          move.l    A0,D2
000031BC  206E 000C 5382          move.l    12(A6),A0
000031C0  1010      5383          move.b    (A0),D0
000031C2  0C00 0064 5384          cmp.b     #100,D0
000031C6  670E      5385          beq.s     doprint_59
000031C8  206E 000C 5386          move.l    12(A6),A0
000031CC  1010      5387          move.b    (A0),D0
000031CE  0C00 0069 5388          cmp.b     #105,D0
000031D2  6600 0068 5389          bne       doprint_65
                    5390   doprint_59:
000031D6  102E FFCE 5391          move.b    -50(A6),D0
000031DA  4880      5392          ext.w     D0
000031DC  48C0      5393          ext.l     D0
000031DE  4A80      5394          tst.l     D0
000031E0  660C      5395          bne.s     doprint_62
000031E2  2043      5396          move.l    D3,A0
000031E4  1010      5397          move.b    (A0),D0
000031E6  0C00 002D 5398          cmp.b     #45,D0
000031EA  6600 0028 5399          bne       doprint_60
                    5400   doprint_62:
000031EE  2043      5401          move.l    D3,A0
000031F0  1010      5402          move.b    (A0),D0
000031F2  0C00 002D 5403          cmp.b     #45,D0
000031F6  660E      5404          bne.s     doprint_63
000031F8  2043      5405          move.l    D3,A0
000031FA  5283      5406          addq.l    #1,D3
000031FC  2242      5407          move.l    D2,A1
000031FE  5282      5408          addq.l    #1,D2
00003200  1290      5409          move.b    (A0),(A1)
00003202  5304      5410          subq.b    #1,D4
00003204  6008      5411          bra.s     doprint_64
                    5412   doprint_63:
00003206  2042      5413          move.l    D2,A0
00003208  5282      5414          addq.l    #1,D2
0000320A  10BC 002B 5415          move.b    #43,(A0)
                    5416   doprint_64:
0000320E  5287      5417          addq.l    #1,D7
00003210  6000 002A 5418          bra       doprint_65
                    5419   doprint_60:
00003214  4A2E FFCF 5420          tst.b     -49(A6)
00003218  6722      5421          beq.s     doprint_65
0000321A  2043      5422          move.l    D3,A0
0000321C  1010      5423          move.b    (A0),D0
0000321E  0C00 002D 5424          cmp.b     #45,D0
00003222  660E      5425          bne.s     doprint_67
00003224  2043      5426          move.l    D3,A0
00003226  5283      5427          addq.l    #1,D3
00003228  2242      5428          move.l    D2,A1
0000322A  5282      5429          addq.l    #1,D2
0000322C  1290      5430          move.b    (A0),(A1)
0000322E  5304      5431          subq.b    #1,D4
00003230  6008      5432          bra.s     doprint_68
                    5433   doprint_67:
00003232  2042      5434          move.l    D2,A0
00003234  5282      5435          addq.l    #1,D2
00003236  10BC 0020 5436          move.b    #32,(A0)
                    5437   doprint_68:
0000323A  5287      5438          addq.l    #1,D7
                    5439   doprint_65:
0000323C  4A2E FFD0 5440          tst.b     -48(A6)
00003240  6700 005A 5441          beq       doprint_77
00003244  206E 000C 5442          move.l    12(A6),A0
00003248  1010      5443          move.b    (A0),D0
0000324A  4880      5444          ext.w     D0
0000324C  48C0      5445          ext.l     D0
0000324E  0C80 0000 5446          cmp.l     #111,D0
00003252  006F      
00003254  671A      5447          beq.s     doprint_73
00003256  6E0C      5448          bgt.s     doprint_76
00003258  0C80 0000 5449          cmp.l     #88,D0
0000325C  0058      
0000325E  6710      5450          beq.s     doprint_73
00003260  6000 003A 5451          bra       doprint_77
                    5452   doprint_76:
00003264  0C80 0000 5453          cmp.l     #120,D0
00003268  0078      
0000326A  6704      5454          beq.s     doprint_73
0000326C  6000 002E 5455          bra       doprint_77
                    5456   doprint_73:
00003270  2042      5457          move.l    D2,A0
00003272  5282      5458          addq.l    #1,D2
00003274  10BC 0030 5459          move.b    #48,(A0)
00003278  5287      5460          addq.l    #1,D7
0000327A  206E 000C 5461          move.l    12(A6),A0
0000327E  1010      5462          move.b    (A0),D0
00003280  0C00 0078 5463          cmp.b     #120,D0
00003284  670C      5464          beq.s     doprint_79
00003286  206E 000C 5465          move.l    12(A6),A0
0000328A  1010      5466          move.b    (A0),D0
0000328C  0C00 0058 5467          cmp.b     #88,D0
00003290  660A      5468          bne.s     doprint_77
                    5469   doprint_79:
00003292  2042      5470          move.l    D2,A0
00003294  5282      5471          addq.l    #1,D2
00003296  10BC 0078 5472          move.b    #120,(A0)
0000329A  5287      5473          addq.l    #1,D7
                    5474   doprint_77:
0000329C  2042      5475          move.l    D2,A0
0000329E  4210      5476          clr.b     (A0)
000032A0  206E 000C 5477          move.l    12(A6),A0
000032A4  1010      5478          move.b    (A0),D0
000032A6  4880      5479          ext.w     D0
000032A8  48C0      5480          ext.l     D0
000032AA  0C80 0000 5481          cmp.l     #105,D0
000032AE  0069      
000032B0  6700 0076 5482          beq       doprint_82
000032B4  6E42      5483          bgt.s     doprint_93
000032B6  0C80 0000 5484          cmp.l     #99,D0
000032BA  0063      
000032BC  6700 0084 5485          beq       doprint_96
000032C0  6E1C      5486          bgt.s     doprint_94
000032C2  0C80 0000 5487          cmp.l     #88,D0
000032C6  0058      
000032C8  6700 005E 5488          beq       doprint_82
000032CC  6E00 0184 5489          bgt       doprint_80
000032D0  0C80 0000 5490          cmp.l     #69,D0
000032D4  0045      
000032D6  6700 0050 5491          beq       doprint_82
000032DA  6000 0176 5492          bra       doprint_80
                    5493   doprint_94:
000032DE  0C80 0000 5494          cmp.l     #101,D0
000032E2  0065      
000032E4  6700 0042 5495          beq       doprint_82
000032E8  6E00 0168 5496          bgt       doprint_80
000032EC  0C80 0000 5497          cmp.l     #100,D0
000032F0  0064      
000032F2  6734      5498          beq.s     doprint_82
000032F4  6000 015C 5499          bra       doprint_80
                    5500   doprint_93:
000032F8  0C80 0000 5501          cmp.l     #117,D0
000032FC  0075      
000032FE  6728      5502          beq.s     doprint_82
00003300  6E1A      5503          bgt.s     doprint_95
00003302  0C80 0000 5504          cmp.l     #115,D0
00003306  0073      
00003308  6700 0038 5505          beq       doprint_96
0000330C  6E00 0144 5506          bgt       doprint_80
00003310  0C80 0000 5507          cmp.l     #111,D0
00003314  006F      
00003316  6710      5508          beq.s     doprint_82
00003318  6000 0138 5509          bra       doprint_80
                    5510   doprint_95:
0000331C  0C80 0000 5511          cmp.l     #120,D0
00003320  0078      
00003322  6704      5512          beq.s     doprint_82
00003324  6000 012C 5513          bra       doprint_80
                    5514   doprint_82:
00003328  4A2E FFD2 5515          tst.b     -46(A6)
0000332C  6714      5516          beq.s     doprint_96
0000332E  4A2E FFCD 5517          tst.b     -51(A6)
00003332  660E      5518          bne.s     doprint_96
00003334  200D      5519          move.l    A5,D0
00003336  9087      5520          sub.l     D7,D0
00003338  4884      5521          ext.w     D4
0000333A  48C4      5522          ext.l     D4
0000333C  9084      5523          sub.l     D4,D0
0000333E  2D40 FFFC 5524          move.l    D0,-4(A6)
                    5525   doprint_96:
00003342  202E FFFC 5526          move.l    -4(A6),D0
00003346  0C80 0000 5527          cmp.l     #0,D0
0000334A  0000      
0000334C  6C04      5528          bge.s     doprint_98
0000334E  42AE FFFC 5529          clr.l     -4(A6)
                    5530   doprint_98:
00003352  4A2E FFCD 5531          tst.b     -51(A6)
00003356  6600 0030 5532          bne       doprint_104
0000335A  1004      5533          move.b    D4,D0
0000335C  4880      5534          ext.w     D0
0000335E  48C0      5535          ext.l     D0
00003360  D0AE FFFC 5536          add.l     -4(A6),D0
00003364  D087      5537          add.l     D7,D0
00003366  1D40 FFD1 5538          move.b    D0,-47(A6)
                    5539   doprint_102:
0000336A  102E FFD1 5540          move.b    -47(A6),D0
0000336E  4880      5541          ext.w     D0
00003370  48C0      5542          ext.l     D0
00003372  220D      5543          move.l    A5,D1
00003374  534D      5544          subq.w    #1,A5
00003376  B081      5545          cmp.l     D1,D0
00003378  6C0E      5546          bge.s     doprint_104
0000337A  4878 0020 5547          pea       32
0000337E  2F0A      5548          move.l    A2,-(A7)
00003380  4E93      5549          jsr       (A3)
00003382  504F      5550          addq.w    #8,A7
00003384  5286      5551          addq.l    #1,D6
00003386  60E2      5552          bra       doprint_102
                    5553   doprint_104:
00003388  41EE FFD4 5554          lea       -44(A6),A0
0000338C  2408      5555          move.l    A0,D2
                    5556   doprint_105:
0000338E  2042      5557          move.l    D2,A0
00003390  4A10      5558          tst.b     (A0)
00003392  6716      5559          beq.s     doprint_107
00003394  2042      5560          move.l    D2,A0
00003396  5282      5561          addq.l    #1,D2
00003398  1210      5562          move.b    (A0),D1
0000339A  4881      5563          ext.w     D1
0000339C  48C1      5564          ext.l     D1
0000339E  2F01      5565          move.l    D1,-(A7)
000033A0  2F0A      5566          move.l    A2,-(A7)
000033A2  4E93      5567          jsr       (A3)
000033A4  504F      5568          addq.w    #8,A7
000033A6  5286      5569          addq.l    #1,D6
000033A8  60E4      5570          bra       doprint_105
                    5571   doprint_107:
000033AA  202E FFFC 5572          move.l    -4(A6),D0
000033AE  1D40 FFD1 5573          move.b    D0,-47(A6)
                    5574   doprint_108:
000033B2  102E FFD1 5575          move.b    -47(A6),D0
000033B6  532E FFD1 5576          subq.b    #1,-47(A6)
000033BA  4A00      5577          tst.b     D0
000033BC  670E      5578          beq.s     doprint_110
000033BE  4878 0030 5579          pea       48
000033C2  2F0A      5580          move.l    A2,-(A7)
000033C4  4E93      5581          jsr       (A3)
000033C6  504F      5582          addq.w    #8,A7
000033C8  5286      5583          addq.l    #1,D6
000033CA  60E6      5584          bra       doprint_108
                    5585   doprint_110:
000033CC  2043      5586          move.l    D3,A0
000033CE  4A10      5587          tst.b     (A0)
000033D0  6700 0048 5588          beq       doprint_113
000033D4  206E 000C 5589          move.l    12(A6),A0
000033D8  1010      5590          move.b    (A0),D0
000033DA  4880      5591          ext.w     D0
000033DC  48C0      5592          ext.l     D0
000033DE  0C80 0000 5593          cmp.l     #115,D0
000033E2  0073      
000033E4  670C      5594          beq.s     doprint_116
000033E6  6E18      5595          bgt.s     doprint_119
000033E8  0C80 0000 5596          cmp.l     #99,D0
000033EC  0063      
000033EE  6702      5597          beq.s     doprint_116
000033F0  600E      5598          bra.s     doprint_119
                    5599   doprint_116:
000033F2  2005      5600          move.l    D5,D0
000033F4  5385      5601          subq.l    #1,D5
000033F6  0C80 0000 5602          cmp.l     #0,D0
000033FA  0000      
000033FC  6E02      5603          bgt.s     doprint_119
000033FE  6016      5604          bra.s     doprint_115
                    5605   doprint_119:
00003400  2043      5606          move.l    D3,A0
00003402  5283      5607          addq.l    #1,D3
00003404  1210      5608          move.b    (A0),D1
00003406  4881      5609          ext.w     D1
00003408  48C1      5610          ext.l     D1
0000340A  2F01      5611          move.l    D1,-(A7)
0000340C  2F0A      5612          move.l    A2,-(A7)
0000340E  4E93      5613          jsr       (A3)
00003410  504F      5614          addq.w    #8,A7
00003412  5286      5615          addq.l    #1,D6
00003414  6002      5616          bra.s     doprint_112
                    5617   doprint_115:
00003416  6002      5618          bra.s     doprint_113
                    5619   doprint_112:
00003418  60B2      5620          bra       doprint_110
                    5621   doprint_113:
0000341A  4A2E FFCD 5622          tst.b     -51(A6)
0000341E  6700 0030 5623          beq       doprint_125
00003422  1004      5624          move.b    D4,D0
00003424  4880      5625          ext.w     D0
00003426  48C0      5626          ext.l     D0
00003428  D0AE FFFC 5627          add.l     -4(A6),D0
0000342C  D087      5628          add.l     D7,D0
0000342E  1D40 FFD1 5629          move.b    D0,-47(A6)
                    5630   doprint_123:
00003432  102E FFD1 5631          move.b    -47(A6),D0
00003436  4880      5632          ext.w     D0
00003438  48C0      5633          ext.l     D0
0000343A  220D      5634          move.l    A5,D1
0000343C  534D      5635          subq.w    #1,A5
0000343E  B081      5636          cmp.l     D1,D0
00003440  6C0E      5637          bge.s     doprint_125
00003442  4878 0020 5638          pea       32
00003446  2F0A      5639          move.l    A2,-(A7)
00003448  4E93      5640          jsr       (A3)
0000344A  504F      5641          addq.w    #8,A7
0000344C  5386      5642          subq.l    #1,D6
0000344E  60E2      5643          bra       doprint_123
                    5644   doprint_125:
00003450  6014      5645          bra.s     doprint_81
                    5646   doprint_80:
00003452  206E 000C 5647          move.l    12(A6),A0
00003456  1210      5648          move.b    (A0),D1
00003458  4881      5649          ext.w     D1
0000345A  48C1      5650          ext.l     D1
0000345C  2F01      5651          move.l    D1,-(A7)
0000345E  2F0A      5652          move.l    A2,-(A7)
00003460  4E93      5653          jsr       (A3)
00003462  504F      5654          addq.w    #8,A7
00003464  5286      5655          addq.l    #1,D6
                    5656   doprint_81:
00003466  52AE 000C 5657          addq.l    #1,12(A6)
                    5658   doprint_2:
0000346A  6000 FA10 5659          bra       doprint_1
                    5660   doprint_3:
0000346E  4A92      5661          tst.l     (A2)
00003470  6710      5662          beq.s     doprint_126
00003472  4201      5663          clr.b     D1
00003474  C2BC 0000 5664          and.l     #255,D1
00003478  00FF      
0000347A  2F01      5665          move.l    D1,-(A7)
0000347C  2F0A      5666          move.l    A2,-(A7)
0000347E  4E93      5667          jsr       (A3)
00003480  504F      5668          addq.w    #8,A7
                    5669   doprint_126:
00003482  2006      5670          move.l    D6,D0
00003484  4CDF 3CFC 5671          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003488  4E5E      5672          unlk      A6
0000348A  4E75      5673          rts
                    5674   @itoa_convert:
0000348C  4E56 0000 5675          link      A6,#0
00003490  48E7 3C00 5676          movem.l   D2/D3/D4/D5,-(A7)
00003494  242E 0008 5677          move.l    8(A6),D2
00003498  262E 0010 5678          move.l    16(A6),D3
0000349C  2A2E 000C 5679          move.l    12(A6),D5
000034A0  2F05      5680          move.l    D5,-(A7)
000034A2  2F03      5681          move.l    D3,-(A7)
000034A4  4EB8 2BCC 5682          jsr       ULDIV
000034A8  202F 0004 5683          move.l    4(A7),D0
000034AC  504F      5684          addq.w    #8,A7
000034AE  2800      5685          move.l    D0,D4
000034B0  BA83      5686          cmp.l     D3,D5
000034B2  651C      5687          blo.s     @itoa_convert_1
000034B4  2F03      5688          move.l    D3,-(A7)
000034B6  2F05      5689          move.l    D5,-(A7)
000034B8  2F03      5690          move.l    D3,-(A7)
000034BA  4EB8 2BCC 5691          jsr       ULDIV
000034BE  2217      5692          move.l    (A7),D1
000034C0  504F      5693          addq.w    #8,A7
000034C2  2F01      5694          move.l    D1,-(A7)
000034C4  2F02      5695          move.l    D2,-(A7)
000034C6  4EB8 348C 5696          jsr       @itoa_convert
000034CA  DEFC 000C 5697          add.w     #12,A7
000034CE  2400      5698          move.l    D0,D2
                    5699   @itoa_convert_1:
000034D0  0C84 0000 5700          cmp.l     #9,D4
000034D4  0009      
000034D6  6E0E      5701          bgt.s     @itoa_convert_3
000034D8  2004      5702          move.l    D4,D0
000034DA  7230      5703          moveq     #48,D1
000034DC  C2BC 0000 5704          and.l     #255,D1
000034E0  00FF      
000034E2  D081      5705          add.l     D1,D0
000034E4  6012      5706          bra.s     @itoa_convert_4
                    5707   @itoa_convert_3:
000034E6  2004      5708          move.l    D4,D0
000034E8  7261      5709          moveq     #97,D1
000034EA  C2BC 0000 5710          and.l     #255,D1
000034EE  00FF      
000034F0  D081      5711          add.l     D1,D0
000034F2  0480 0000 5712          sub.l     #10,D0
000034F6  000A      
                    5713   @itoa_convert_4:
000034F8  2042      5714          move.l    D2,A0
000034FA  1080      5715          move.b    D0,(A0)
000034FC  2002      5716          move.l    D2,D0
000034FE  5280      5717          addq.l    #1,D0
00003500  4CDF 003C 5718          movem.l   (A7)+,D2/D3/D4/D5
00003504  4E5E      5719          unlk      A6
00003506  4E75      5720          rts
                    5721   _ltoa:
00003508  4E56 0000 5722          link      A6,#0
0000350C  48E7 3C00 5723          movem.l   D2/D3/D4/D5,-(A7)
00003510  242E 0008 5724          move.l    8(A6),D2
00003514  262E 000C 5725          move.l    12(A6),D3
00003518  2A2E 0010 5726          move.l    16(A6),D5
0000351C  2803      5727          move.l    D3,D4
0000351E  0C85 0000 5728          cmp.l     #2,D5
00003522  0002      
00003524  6D08      5729          blt.s     ltoa_3
00003526  0C85 0000 5730          cmp.l     #36,D5
0000352A  0024      
0000352C  6F06      5731          ble.s     ltoa_1
                    5732   ltoa_3:
0000352E  2003      5733          move.l    D3,D0
00003530  6000 0052 5734          bra       ltoa_4
                    5735   ltoa_1:
00003534  0C85 0000 5736          cmp.l     #10,D5
00003538  000A      
0000353A  6600 0032 5737          bne       ltoa_5
0000353E  0C82 0000 5738          cmp.l     #0,D2
00003542  0000      
00003544  6C28      5739          bge.s     ltoa_5
00003546  2002      5740          move.l    D2,D0
00003548  4480      5741          neg.l     D0
0000354A  2400      5742          move.l    D0,D2
0000354C  0C82 0000 5743          cmp.l     #0,D2
00003550  0000      
00003552  6C12      5744          bge.s     ltoa_7
00003554  4879 0000 5745          pea       @itoa_1.L
00003558  4B64      
0000355A  2F03      5746          move.l    D3,-(A7)
0000355C  4EB8 2BBC 5747          jsr       _strcpy
00003560  504F      5748          addq.w    #8,A7
00003562  2003      5749          move.l    D3,D0
00003564  601E      5750          bra.s     ltoa_4
                    5751   ltoa_7:
00003566  2044      5752          move.l    D4,A0
00003568  5284      5753          addq.l    #1,D4
0000356A  10BC 002D 5754          move.b    #45,(A0)
                    5755   ltoa_5:
0000356E  2F05      5756          move.l    D5,-(A7)
00003570  2F02      5757          move.l    D2,-(A7)
00003572  2F04      5758          move.l    D4,-(A7)
00003574  4EB8 348C 5759          jsr       @itoa_convert
00003578  DEFC 000C 5760          add.w     #12,A7
0000357C  2800      5761          move.l    D0,D4
0000357E  2044      5762          move.l    D4,A0
00003580  4210      5763          clr.b     (A0)
00003582  2003      5764          move.l    D3,D0
                    5765   ltoa_4:
00003584  4CDF 003C 5766          movem.l   (A7)+,D2/D3/D4/D5
00003588  4E5E      5767          unlk      A6
0000358A  4E75      5768          rts
                    5769   _ultoa:
0000358C  4E56 0000 5770          link      A6,#0
00003590  48E7 3800 5771          movem.l   D2/D3/D4,-(A7)
00003594  262E 0010 5772          move.l    16(A6),D3
00003598  282E 000C 5773          move.l    12(A6),D4
0000359C  2404      5774          move.l    D4,D2
0000359E  0C83 0000 5775          cmp.l     #2,D3
000035A2  0002      
000035A4  6D08      5776          blt.s     ultoa_3
000035A6  0C83 0000 5777          cmp.l     #36,D3
000035AA  0024      
000035AC  6F04      5778          ble.s     ultoa_1
                    5779   ultoa_3:
000035AE  2004      5780          move.l    D4,D0
000035B0  6018      5781          bra.s     ultoa_4
                    5782   ultoa_1:
000035B2  2F03      5783          move.l    D3,-(A7)
000035B4  2F2E 0008 5784          move.l    8(A6),-(A7)
000035B8  2F02      5785          move.l    D2,-(A7)
000035BA  4EB8 348C 5786          jsr       @itoa_convert
000035BE  DEFC 000C 5787          add.w     #12,A7
000035C2  2400      5788          move.l    D0,D2
000035C4  2042      5789          move.l    D2,A0
000035C6  4210      5790          clr.b     (A0)
000035C8  2004      5791          move.l    D4,D0
                    5792   ultoa_4:
000035CA  4CDF 001C 5793          movem.l   (A7)+,D2/D3/D4
000035CE  4E5E      5794          unlk      A6
000035D0  4E75      5795          rts
                    5796   _itoa:
000035D2  4E56 0000 5797          link      A6,#0
000035D6  2F2E 0010 5798          move.l    16(A6),-(A7)
000035DA  2F2E 000C 5799          move.l    12(A6),-(A7)
000035DE  2F2E 0008 5800          move.l    8(A6),-(A7)
000035E2  4EB8 3508 5801          jsr       _ltoa
000035E6  DEFC 000C 5802          add.w     #12,A7
000035EA  4E5E      5803          unlk      A6
000035EC  4E75      5804          rts
                    5805   ULMUL:
000035EE  4E56 0000 5806          link    A6,#0
000035F2  48E7 C000 5807          movem.l D0/D1,-(A7)
000035F6  222E 0008 5808          move.l  8(A6),D1
000035FA  202E 000C 5809          move.l  12(A6),D0
000035FE  602C      5810          bra.s   lmul_3
                    5811   LMUL:
00003600  4E56 0000 5812          link    A6,#0
00003604  48E7 C000 5813          movem.l D0/D1,-(A7)
00003608  222E 0008 5814          move.l  8(A6),D1
0000360C  202E 000C 5815          move.l  12(A6),D0
00003610  4A80      5816          tst.l   D0
00003612  6A0A      5817          bpl.s   lmul_1
00003614  4480      5818          neg.l   D0
00003616  4A81      5819          tst.l   D1
00003618  6A0A      5820          bpl.s   lmul_2
0000361A  4481      5821          neg.l   D1
0000361C  600E      5822          bra.s   lmul_3
                    5823   lmul_1:
0000361E  4A81      5824          tst.l   D1
00003620  6A0A      5825          bpl.s   lmul_3
00003622  4481      5826          neg.l   D1
                    5827   lmul_2:
00003624  6114      5828          bsr.s   domul
00003626  4481      5829          neg.l   D1
00003628  4080      5830          negx.l  D0
0000362A  6002      5831          bra.s   lmul_4
                    5832   lmul_3:
0000362C  610C      5833          bsr.s   domul
                    5834   lmul_4:
0000362E  2D41 0008 5835          move.l  D1,8(A6)
00003632  4CDF 0003 5836          movem.l (A7)+,D0/D1
00003636  4E5E      5837          unlk    A6
00003638  4E75      5838          rts
                    5839   domul:
0000363A  0C81 0000 5840          cmpi.l  #$FFFF,D1
0000363E  FFFF      
00003640  620C      5841          bhi.s   domul_1
00003642  0C80 0000 5842          cmpi.l  #$FFFF,D0
00003646  FFFF      
00003648  620E      5843          bhi.s   domul_2
0000364A  C2C0      5844          mulu    D0,D1
0000364C  4E75      5845          rts
                    5846   domul_1:
0000364E  0C80 0000 5847          cmpi.l  #$FFFF,D0
00003652  FFFF      
00003654  6218      5848          bhi.s   domul_4
00003656  6002      5849          bra.s   domul_3
                    5850   domul_2
00003658  C141      5851          exg     D0,D1
                    5852   domul_3:
0000365A  2F02      5853          move.l  D2,-(A7)
0000365C  2401      5854          move.l  D1,D2
0000365E  4842      5855          swap    D2
00003660  C2C0      5856          mulu    D0,D1
00003662  C4C0      5857          mulu    D0,D2
00003664  4842      5858          swap    D2
00003666  4242      5859          clr.w   D2
00003668  D282      5860          add.l   D2,D1
0000366A  241F      5861          move.l  (A7)+,D2
0000366C  4E75      5862          rts
                    5863   domul_4:
0000366E  48E7 3000 5864          movem.l D2/D3,-(A7)
00003672  2401      5865          move.l  D1,D2
00003674  2601      5866          move.l  D1,D3
00003676  C2C0      5867          mulu    D0,D1
00003678  4842      5868          swap    D2
0000367A  C4C0      5869          mulu    D0,D2
0000367C  4840      5870          swap    D0
0000367E  C6C0      5871          mulu    D0,D3
00003680  D483      5872          add.l   D3,D2
00003682  4842      5873          swap    D2
00003684  4242      5874          clr.w   D2
00003686  D282      5875          add.l   D2,D1
00003688  4CDF 000C 5876          movem.l (A7)+,D2/D3
0000368C  4E75      5877          rts
                    5878   _strlen:
0000368E  206F 0004 5879          move.l    (4,A7),A0
00003692  2248      5880          move.l    A0,A1
                    5881   strlen_1:
00003694  4A19      5882          tst.b     (A1)+
00003696  66FC      5883          bne       strlen_1
00003698  2009      5884          move.l    A1,D0
0000369A  9088      5885          sub.l     A0,D0
0000369C  5380      5886          subq.l    #1,D0
0000369E  4E75      5887          rts
                    5888          section   const
                    5889   
                    5890   @m68kde~1_1:
000036A0  0D0A 00   5891          dc.b      13,10,0
                    5892   @m68kde~1_2:
000036A4  0D53 7769 5893          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
000036A8  7463 6865 
000036AC  7320 5357 
000036B0  5B        
000036B1  372D 305D 5894          dc.b      55,45,48,93,32,61,32,0
000036B5  203D 2000 
                    5895   @m68kde~1_3:
000036BA  3000      5896          dc.b      48,0
                    5897   @m68kde~1_4:
000036BC  3100      5898          dc.b      49,0
                    5899   @m68kde~1_5:
000036BE  0D0A 4475 5900          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000036C2  6D70 204D 
000036C6  656D 6F72 
000036CA  79        
000036CB  2042 6C6F 5901          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
000036CF  636B 3A20 
000036D3  3C45 5343 
000036D7  3E20      
000036D9  746F 2041 5902          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
000036DD  626F 7274 
000036E1  2C20 3C53 
000036E5  50        
000036E6  4143 453E 5903          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
000036EA  2074 6F20 
000036EE  436F 6E74 
000036F2  69        
000036F3  6E75 6500 5904          dc.b      110,117,101,0
                    5905   @m68kde~1_6:
000036F8  0D0A 456E 5906          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
000036FC  7465 7220 
00003700  5374 6172 
00003704  74        
00003705  2041 6464 5907          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003709  7265 7373 
0000370D  3A20 00   
                    5908   @m68kde~1_7:
00003710  0D0A 2530 5909          dc.b      13,10,37,48,56,120,32,0
00003714  3878 2000 
                    5910   @m68kde~1_8:
00003718  2530 3258 5911          dc.b      37,48,50,88,0
0000371C  00        
                    5912   @m68kde~1_9:
0000371E  2020 00   5913          dc.b      32,32,0
                    5914   @m68kde~1_10:
00003722  0D0A 4669 5915          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00003726  6C6C 204D 
0000372A  656D 6F72 
0000372E  79        
0000372F  2042 6C6F 5916          dc.b      32,66,108,111,99,107,0
00003733  636B 00   
                    5917   @m68kde~1_11:
00003736  0D0A 456E 5918          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
0000373A  7465 7220 
0000373E  456E 6420 
00003742  41        
00003743  6464 7265 5919          dc.b      100,100,114,101,115,115,58,32,0
00003747  7373 3A20 
0000374B  00        
                    5920   @m68kde~1_12:
0000374C  0D0A 456E 5921          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00003750  7465 7220 
00003754  4669 6C6C 
00003758  20        
00003759  4461 7461 5922          dc.b      68,97,116,97,58,32,0
0000375D  3A20 00   
                    5923   @m68kde~1_13:
00003760  0D0A 4669 5924          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00003764  6C6C 696E 
00003768  6720 4164 
0000376C  64        
0000376D  7265 7373 5925          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00003771  6573 205B 
00003775  2425 3038 
00003779  58        
0000377A  202D 2024 5926          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
0000377E  2530 3858 
00003782  5D20 7769 
00003786  7468      
00003788  2024 2530 5927          dc.b      32,36,37,48,50,88,0
0000378C  3258 00   
                    5928   @m68kde~1_14:
00003790  0D0A 5573 5929          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00003794  6520 4879 
00003798  7065 7254 
0000379C  65        
0000379D  726D 696E 5930          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000037A1  616C 2074 
000037A5  6F20 5365 
000037A9  6E64 2054 5931          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000037AD  6578 7420 
000037B1  4669 6C65 
000037B5  2028 2E68 5932          dc.b      32,40,46,104,101,120,41,13,10,0
000037B9  6578 290D 
000037BD  0A00      
                    5933   @m68kde~1_15:
000037C0  0D0A 4C6F 5934          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000037C4  6164 2046 
000037C8  6169 6C65 
000037CC  64        
000037CD  2061 7420 5935          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
000037D1  4164 6472 
000037D5  6573 7320 
000037D9  3D        
000037DA  205B 2425 5936          dc.b      32,91,36,37,48,56,88,93,13,10,0
000037DE  3038 585D 
000037E2  0D0A 00   
                    5937   @m68kde~1_16:
000037E6  0D0A 5375 5938          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
000037EA  6363 6573 
000037EE  733A 2044 
000037F2  6F        
000037F3  776E 6C6F 5939          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
000037F7  6164 6564 
000037FB  2025 6420 
000037FF  6279 7465 5940          dc.b      98,121,116,101,115,13,10,0
00003803  730D 0A00 
                    5941   @m68kde~1_17:
00003808  0D0A 4578 5942          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
0000380C  616D 696E 
00003810  6520 616E 
00003814  64        
00003815  2043 6861 5943          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00003819  6E67 6520 
0000381D  4D65 6D6F 
00003821  72        
00003822  7900      5944          dc.b      121,0
                    5945   @m68kde~1_18:
00003824  0D0A 3C45 5946          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00003828  5343 3E20 
0000382C  746F 2053 
00003830  746F      
00003832  702C 203C 5947          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00003836  5350 4143 
0000383A  453E 2074 
0000383E  6F20      
00003840  4164 7661 5948          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00003844  6E63 652C 
00003848  2027 2D27 
0000384C  2074      
0000384E  6F20 476F 5949          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00003852  2042 6163 
00003856  6B2C 203C 
0000385A  4441      
0000385C  5441 3E20 5950          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00003860  746F 2063 
00003864  6861 6E67 
00003868  65        
00003869  00        5951          dc.b      0
                    5952   @m68kde~1_19:
0000386A  0D0A 456E 5953          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
0000386E  7465 7220 
00003872  4164 6472 
00003876  65        
00003877  7373 3A20 5954          dc.b      115,115,58,32,0
0000387B  00        
                    5955   @m68kde~1_20:
0000387C  0D0A 5B25 5956          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00003880  3038 785D 
00003884  203A 2025 
00003888  3032 78   
0000388B  2020 00   5957          dc.b      32,32,0
                    5958   @m68kde~1_21:
0000388E  0D0A 5761 5959          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00003892  726E 696E 
00003896  6720 4368 
0000389A  61        
0000389B  6E67 6520 5960          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
0000389F  4661 696C 
000038A3  6564 3A20 
000038A7  57        
000038A8  726F 7465 5961          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000038AC  205B 2530 
000038B0  3278 5D2C 
000038B4  20        
000038B5  5265 6164 5962          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000038B9  205B 2530 
000038BD  3278 5D00 
                    5963   @m68kde~1_22:
000038C2  0D0A 4C6F 5964          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
000038C6  6164 696E 
000038CA  6720 5072 
000038CE  6F        
000038CF  6772 616D 5965          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
000038D3  2046 726F 
000038D7  6D20 5350 
000038DB  49        
000038DC  2046 6C61 5966          dc.b      32,70,108,97,115,104,46,46,46,46,0
000038E0  7368 2E2E 
000038E4  2E2E 00   
                    5967   @m68kde~1_23:
000038E8  2425 3038 5968          dc.b      36,37,48,56,88,32,32,0
000038EC  5820 2000 
                    5969   @m68kde~1_24:
000038F0  2000      5970          dc.b      32,0
                    5971   @m68kde~1_25:
000038F2  2E00      5972          dc.b      46,0
                    5973   @m68kde~1_26:
000038F4  2563 00   5974          dc.b      37,99,0
                    5975   @m68kde~1_27:
000038F8  00        5976          dc.b      0
                    5977   @m68kde~1_28:
000038FA  0D0A 0D0A 5978          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
000038FE  2044 3020 
00003902  3D20 2425 
00003906  3038 58   
00003909  2020 4130 5979          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
0000390D  203D 2024 
00003911  2530 3858 
00003915  00        
                    5980   @m68kde~1_29:
00003916  0D0A 2044 5981          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
0000391A  3120 3D20 
0000391E  2425 3038 
00003922  5820 20   
00003925  4131 203D 5982          dc.b      65,49,32,61,32,36,37,48,56,88,0
00003929  2024 2530 
0000392D  3858 00   
                    5983   @m68kde~1_30:
00003930  0D0A 2044 5984          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00003934  3220 3D20 
00003938  2425 3038 
0000393C  5820 20   
0000393F  4132 203D 5985          dc.b      65,50,32,61,32,36,37,48,56,88,0
00003943  2024 2530 
00003947  3858 00   
                    5986   @m68kde~1_31:
0000394A  0D0A 2044 5987          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
0000394E  3320 3D20 
00003952  2425 3038 
00003956  5820 20   
00003959  4133 203D 5988          dc.b      65,51,32,61,32,36,37,48,56,88,0
0000395D  2024 2530 
00003961  3858 00   
                    5989   @m68kde~1_32:
00003964  0D0A 2044 5990          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00003968  3420 3D20 
0000396C  2425 3038 
00003970  5820 20   
00003973  4134 203D 5991          dc.b      65,52,32,61,32,36,37,48,56,88,0
00003977  2024 2530 
0000397B  3858 00   
                    5992   @m68kde~1_33:
0000397E  0D0A 2044 5993          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00003982  3520 3D20 
00003986  2425 3038 
0000398A  5820 20   
0000398D  4135 203D 5994          dc.b      65,53,32,61,32,36,37,48,56,88,0
00003991  2024 2530 
00003995  3858 00   
                    5995   @m68kde~1_34:
00003998  0D0A 2044 5996          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
0000399C  3620 3D20 
000039A0  2425 3038 
000039A4  5820 20   
000039A7  4136 203D 5997          dc.b      65,54,32,61,32,36,37,48,56,88,0
000039AB  2024 2530 
000039AF  3858 00   
                    5998   @m68kde~1_35:
000039B2  0D0A 2044 5999          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000039B6  3720 3D20 
000039BA  2425 3038 
000039BE  5820 20   
000039C1  4137 203D 6000          dc.b      65,55,32,61,32,36,37,48,56,88,0
000039C5  2024 2530 
000039C9  3858 00   
                    6001   @m68kde~1_36:
000039CC  0D0A 0D0A 6002          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000039D0  5553 5020 
000039D4  3D20 2425 
000039D8  3038 58   
000039DB  2020 2841 6003          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000039DF  3729 2055 
000039E3  7365 7220 
000039E7  5350      
000039E9  00        6004          dc.b      0
                    6005   @m68kde~1_37:
000039EA  0D0A 5353 6006          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000039EE  5020 3D20 
000039F2  2425 3038 
000039F6  5820 20   
000039F9  2841 3729 6007          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
000039FD  2053 7570 
00003A01  6572 7669 
00003A05  73        
00003A06  6F72 2053 6008          dc.b      111,114,32,83,80,0
00003A0A  5000      
                    6009   @m68kde~1_38:
00003A0C  0D0A 2053 6010          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00003A10  5220 3D20 
00003A14  2425 3034 
00003A18  5820 20   
00003A1B  2000      6011          dc.b      32,0
                    6012   @m68kde~1_39:
00003A1E  2020 205B 6013          dc.b      32,32,32,91,0
00003A22  00        
                    6014   @m68kde~1_40:
00003A24  0D0A 2050 6015          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00003A28  4320 3D20 
00003A2C  2425 3038 
00003A30  5820 20   
00003A33  00        6016          dc.b      0
                    6017   @m68kde~1_41:
00003A34  5B40 2042 6018          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00003A38  5245 414B 
00003A3C  504F 494E 
00003A40  545D 00   
                    6019   @m68kde~1_42:
00003A44  0D0A 5750 6020          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00003A48  2564 203D 
00003A4C  2025 7300 
                    6021   @m68kde~1_43:
00003A50  0D0A 0D0A 6022          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00003A54  0D0A 0D0A 
00003A58  0D0A 0D0A 
00003A5C  5369 6E   
00003A5F  676C 6520 6023          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00003A63  5374 6570 
00003A67  2020 3A5B 
00003A6B  4F        
00003A6C  4E5D 00   6024          dc.b      78,93,0
                    6025   @m68kde~1_44:
00003A70  0D0A 4272 6026          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003A74  6561 6B20 
00003A78  506F 696E 
00003A7C  74        
00003A7D  7320 3A5B 6027          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00003A81  4469 7361 
00003A85  626C 6564 
00003A89  5D        
00003A8A  00        6028          dc.b      0
                    6029   @m68kde~1_45:
00003A8C  0D0A 5072 6030          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00003A90  6573 7320 
00003A94  3C53 5041 
00003A98  4345      
00003A9A  3E20 746F 6031          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00003A9E  2045 7865 
00003AA2  6375 7465 
00003AA6  20        
00003AA7  4E65 7874 6032          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00003AAB  2049 6E73 
00003AAF  7472 7563 
00003AB3  7469 6F6E 6033          dc.b      116,105,111,110,0
00003AB7  00        
                    6034   @m68kde~1_46:
00003AB8  0D0A 5072 6035          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00003ABC  6573 7320 
00003AC0  3C45 5343 
00003AC4  3E20      
00003AC6  746F 2052 6036          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00003ACA  6573 756D 
00003ACE  6520 5072 
00003AD2  6F67 7261 6037          dc.b      111,103,114,97,109,0
00003AD6  6D00      
                    6038   @m68kde~1_47:
00003AD8  0D0A 496C 6039          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00003ADC  6C65 6761 
00003AE0  6C20 4461 
00003AE4  74        
00003AE5  6120 5265 6040          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00003AE9  6769 7374 
00003AED  6572 203A 
00003AF1  20        
00003AF2  5573 6520 6041          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00003AF6  4430 2D44 
00003AFA  372E 2E2E 
00003AFE  2E2E      
00003B00  0D0A 00   6042          dc.b      13,10,0
                    6043   @m68kde~1_48:
00003B04  0D0A 4425 6044          dc.b      13,10,68,37,99,32,61,32,0
00003B08  6320 3D20 
00003B0C  00        
                    6045   @m68kde~1_49:
00003B0E  0D0A 496C 6046          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00003B12  6C65 6761 
00003B16  6C20 4164 
00003B1A  64        
00003B1B  7265 7373 6047          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00003B1F  2052 6567 
00003B23  6973 7465 
00003B27  7220 3A20 6048          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00003B2B  5573 6520 
00003B2F  4130 2D41 
00003B33  372E      
00003B35  2E2E 2E2E 6049          dc.b      46,46,46,46,13,10,0
00003B39  0D0A 00   
                    6050   @m68kde~1_50:
00003B3C  0D0A 4125 6051          dc.b      13,10,65,37,99,32,61,32,0
00003B40  6320 3D20 
00003B44  00        
                    6052   @m68kde~1_51:
00003B46  0D0A 5573 6053          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00003B4A  6572 2053 
00003B4E  5020 3D20 
00003B52  00        
                    6054   @m68kde~1_52:
00003B54  0D0A 496C 6055          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00003B58  6C65 6761 
00003B5C  6C20 5265 
00003B60  67        
00003B61  6973 7465 6056          dc.b      105,115,116,101,114,46,46,46,46,0
00003B65  722E 2E2E 
00003B69  2E00      
                    6057   @m68kde~1_53:
00003B6C  0D0A 5379 6058          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00003B70  7374 656D 
00003B74  2053 5020 
00003B78  3D        
00003B79  2000      6059          dc.b      32,0
                    6060   @m68kde~1_54:
00003B7C  0D0A 5043 6061          dc.b      13,10,80,67,32,61,32,0
00003B80  203D 2000 
                    6062   @m68kde~1_55:
00003B84  0D0A 5352 6063          dc.b      13,10,83,82,32,61,32,0
00003B88  203D 2000 
                    6064   @m68kde~1_56:
00003B8C  0D0A 496C 6065          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00003B90  6C65 6761 
00003B94  6C20 5265 
00003B98  67        
00003B99  6973 7465 6066          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00003B9D  723A 2055 
00003BA1  7365 2041 
00003BA5  30        
00003BA6  2D41 372C 6067          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00003BAA  2044 302D 
00003BAE  4437 2C20 
00003BB2  5353 50   
00003BB5  2C20 5553 6068          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00003BB9  502C 2050 
00003BBD  4320 6F72 
00003BC1  2053      
00003BC3  520D 0A00 6069          dc.b      82,13,10,0
                    6070   @m68kde~1_57:
00003BC8  0D0A 0D0A 6071          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00003BCC  4E75 6D20 
00003BD0  2020 2020 
00003BD4  4164      
00003BD6  6472 6573 6072          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00003BDA  7320 2020 
00003BDE  2020 2049 
00003BE2  6E        
00003BE3  7374 7275 6073          dc.b      115,116,114,117,99,116,105,111,110,0
00003BE7  6374 696F 
00003BEB  6E00      
                    6074   @m68kde~1_58:
00003BEE  0D0A 2D2D 6075          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00003BF2  2D20 2020 
00003BF6  2020 2D2D 
00003BFA  2D2D 2D   
00003BFD  2D2D 2D2D 6076          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00003C01  2020 2020 
00003C05  2D2D 2D2D 
00003C09  2D2D 2D   
00003C0C  2D2D 2D2D 6077          dc.b      45,45,45,45,0
00003C10  00        
                    6078   @m68kde~1_59:
00003C12  0D0A 4E6F 6079          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00003C16  2042 7265 
00003C1A  616B 506F 
00003C1E  69        
00003C1F  6E74 7320 6080          dc.b      110,116,115,32,83,101,116,0
00003C23  5365 7400 
                    6081   @m68kde~1_60:
00003C28  0D0A 2533 6082          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00003C2C  6420 2020 
00003C30  2020 2425 
00003C34  3038 78   
00003C37  00        6083          dc.b      0
                    6084   @m68kde~1_61:
00003C38  0D0A 4E75 6085          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00003C3C  6D20 2020 
00003C40  2020 4164 
00003C44  6472      
00003C46  6573 7300 6086          dc.b      101,115,115,0
                    6087   @m68kde~1_62:
00003C4A  0D0A 2D2D 6088          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00003C4E  2D20 2020 
00003C52  2020 2D2D 
00003C56  2D2D 2D   
00003C59  2D2D 2D2D 6089          dc.b      45,45,45,45,0
00003C5D  00        
                    6090   @m68kde~1_63:
00003C5E  0D0A 4E6F 6091          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00003C62  2057 6174 
00003C66  6368 506F 
00003C6A  69        
00003C6B  6E74 7320 6092          dc.b      110,116,115,32,83,101,116,0
00003C6F  5365 7400 
                    6093   @m68kde~1_64:
00003C74  0D0A 456E 6094          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00003C78  7465 7220 
00003C7C  4272 6561 
00003C80  6B        
00003C81  2050 6F69 6095          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00003C85  6E74 204E 
00003C89  756D 6265 
00003C8D  72        
00003C8E  3A20 00   6096          dc.b      58,32,0
                    6097   @m68kde~1_65:
00003C92  0D0A 496C 6098          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00003C96  6C65 6761 
00003C9A  6C20 5261 
00003C9E  6E        
00003C9F  6765 203A 6099          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00003CA3  2055 7365 
00003CA7  2030 202D 
00003CAB  2037      
00003CAD  00        6100          dc.b      0
                    6101   @m68kde~1_66:
00003CAE  0D0A 4272 6102          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003CB2  6561 6B20 
00003CB6  506F 696E 
00003CBA  74        
00003CBB  2043 6C65 6103          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00003CBF  6172 6564 
00003CC3  2E2E 2E2E 
00003CC7  2E        
00003CC8  0D0A 00   6104          dc.b      13,10,0
                    6105   @m68kde~1_67:
00003CCC  0D0A 4272 6106          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003CD0  6561 6B20 
00003CD4  506F 696E 
00003CD8  74        
00003CD9  2077 6173 6107          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00003CDD  6E27 7420 
00003CE1  5365 742E 
00003CE5  2E        
00003CE6  2E2E 2E00 6108          dc.b      46,46,46,0
                    6109   @m68kde~1_68:
00003CEA  0D0A 456E 6110          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00003CEE  7465 7220 
00003CF2  5761 7463 
00003CF6  68        
00003CF7  2050 6F69 6111          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00003CFB  6E74 204E 
00003CFF  756D 6265 
00003D03  72        
00003D04  3A20 00   6112          dc.b      58,32,0
                    6113   @m68kde~1_69:
00003D08  0D0A 5761 6114          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00003D0C  7463 6820 
00003D10  506F 696E 
00003D14  74        
00003D15  2043 6C65 6115          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00003D19  6172 6564 
00003D1D  2E2E 2E2E 
00003D21  2E        
00003D22  0D0A 00   6116          dc.b      13,10,0
                    6117   @m68kde~1_70:
00003D26  0D0A 5761 6118          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00003D2A  7463 6820 
00003D2E  506F 696E 
00003D32  74        
00003D33  2057 6173 6119          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00003D37  206E 6F74 
00003D3B  2053 6574 
00003D3F  2E        
00003D40  2E2E 2E2E 6120          dc.b      46,46,46,46,0
00003D44  00        
                    6121   @m68kde~1_71:
00003D46  0D0A 4E6F 6122          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00003D4A  2046 5245 
00003D4E  4520 4272 
00003D52  6561      
00003D54  6B20 506F 6123          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00003D58  696E 7473 
00003D5C  2E2E 2E2E 
00003D60  2E        
00003D61  00        6124          dc.b      0
                    6125   @m68kde~1_72:
00003D62  0D0A 4272 6126          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003D66  6561 6B20 
00003D6A  506F 696E 
00003D6E  74        
00003D6F  2041 6464 6127          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003D73  7265 7373 
00003D77  3A20 00   
                    6128   @m68kde~1_73:
00003D7A  0D0A 4572 6129          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00003D7E  726F 7220 
00003D82  3A20 4272 
00003D86  65        
00003D87  616B 2050 6130          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00003D8B  6F69 6E74 
00003D8F  7320 4341 
00003D93  4E        
00003D94  4E4F 5420 6131          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00003D98  6265 2073 
00003D9C  6574 2061 
00003DA0  74        
00003DA1  204F 4444 6132          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00003DA5  2061 6464 
00003DA9  7265 7373 
00003DAD  65        
00003DAE  7300      6133          dc.b      115,0
                    6134   @m68kde~1_74:
00003DB0  0D0A 4572 6135          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00003DB4  726F 7220 
00003DB8  3A20 4272 
00003DBC  65        
00003DBD  616B 2050 6136          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00003DC1  6F69 6E74 
00003DC5  7320 4341 
00003DC9  4E        
00003DCA  4E4F 5420 6137          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00003DCE  6265 2073 
00003DD2  6574 2066 
00003DD6  6F        
00003DD7  7220 524F 6138          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00003DDB  4D20 696E 
00003DDF  2052 616E 
00003DE3  67        
00003DE4  6520 3A20 6139          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00003DE8  5B24 302D 
00003DEC  2430 3030 
00003DF0  3037 46   
00003DF3  4646 5D00 6140          dc.b      70,70,93,0
                    6141   @m68kde~1_75:
00003DF8  0D0A 4572 6142          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00003DFC  726F 723A 
00003E00  2042 7265 
00003E04  61        
00003E05  6B20 506F 6143          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00003E09  696E 7420 
00003E0D  416C 7265 
00003E11  6164 7920 6144          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00003E15  4578 6973 
00003E19  7473 2061 
00003E1D  74        
00003E1E  2041 6464 6145          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00003E22  7265 7373 
00003E26  203A 2025 
00003E2A  30        
00003E2B  3878 0D0A 6146          dc.b      56,120,13,10,0
00003E2F  00        
                    6147   @m68kde~1_76:
00003E30  0D0A 4272 6148          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003E34  6561 6B20 
00003E38  506F 696E 
00003E3C  74        
00003E3D  2053 6574 6149          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00003E41  2061 7420 
00003E45  4164 6472 
00003E49  65        
00003E4A  7373 3A20 6150          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00003E4E  5B24 2530 
00003E52  3878 5D00 
                    6151   @m68kde~1_77:
00003E56  0D0A 4E6F 6152          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00003E5A  2046 5245 
00003E5E  4520 5761 
00003E62  7463      
00003E64  6820 506F 6153          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00003E68  696E 7473 
00003E6C  2E2E 2E2E 
00003E70  2E        
00003E71  00        6154          dc.b      0
                    6155   @m68kde~1_78:
00003E72  0D0A 5761 6156          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00003E76  7463 6820 
00003E7A  506F 696E 
00003E7E  74        
00003E7F  2041 6464 6157          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003E83  7265 7373 
00003E87  3A20 00   
                    6158   @m68kde~1_79:
00003E8A  0D0A 4572 6159          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00003E8E  726F 723A 
00003E92  2057 6174 
00003E96  63        
00003E97  6820 506F 6160          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00003E9B  696E 7420 
00003E9F  416C 7265 
00003EA3  6164 7920 6161          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00003EA7  5365 7420 
00003EAB  6174 2041 
00003EAF  64        
00003EB0  6472 6573 6162          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00003EB4  7320 3A20 
00003EB8  2530 3878 
00003EBC  0D        
00003EBD  0A00      6163          dc.b      10,0
                    6164   @m68kde~1_80:
00003EC0  0D0A 5761 6165          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00003EC4  7463 6820 
00003EC8  506F 696E 
00003ECC  74        
00003ECD  2053 6574 6166          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00003ED1  2061 7420 
00003ED5  4164 6472 
00003ED9  65        
00003EDA  7373 3A20 6167          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00003EDE  5B24 2530 
00003EE2  3878 5D00 
                    6168   @m68kde~1_81:
00003EE6  0D0A 0D0A 6169          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00003EEA  0D0A 0D0A 
00003EEE  4042 5245 
00003EF2  414B 50   
00003EF5  4F49 4E54 6170          dc.b      79,73,78,84,0
00003EF9  00        
                    6171   @m68kde~1_82:
00003EFA  0D0A 5369 6172          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00003EFE  6E67 6C65 
00003F02  2053 7465 
00003F06  70        
00003F07  203A 205B 6173          dc.b      32,58,32,91,79,78,93,0
00003F0B  4F4E 5D00 
                    6174   @m68kde~1_83:
00003F10  0D0A 4272 6175          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00003F14  6561 6B50 
00003F18  6F69 6E74 
00003F1C  73        
00003F1D  203A 205B 6176          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00003F21  456E 6162 
00003F25  6C65 645D 
00003F29  00        
                    6177   @m68kde~1_84:
00003F2A  0D0A 5072 6178          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00003F2E  6573 7320 
00003F32  3C45 5343 
00003F36  3E20      
00003F38  746F 2052 6179          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00003F3C  6573 756D 
00003F40  6520 5573 
00003F44  6572 2050 6180          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00003F48  726F 6772 
00003F4C  616D 0D0A 
00003F50  00        
                    6181   @m68kde~1_85:
00003F52  0D0A 556E 6182          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00003F56  6B6E 6F77 
00003F5A  6E20 436F 
00003F5E  6D        
00003F5F  6D61 6E64 6183          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00003F63  2E2E 2E2E 
00003F67  2E0D 0A00 
                    6184   @m68kde~1_86:
00003F6C  0D0A 5072 6185          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00003F70  6F67 7261 
00003F74  6D20 456E 
00003F78  64        
00003F79  6564 2028 6186          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00003F7D  5452 4150 
00003F81  2023 3135 
00003F85  292E      
00003F87  2E2E 2E00 6187          dc.b      46,46,46,0
                    6188   @m68kde~1_87:
00003F8C  0D0A 4B69 6189          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00003F90  6C6C 2041 
00003F94  6C6C 2042 
00003F98  72        
00003F99  6561 6B20 6190          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00003F9D  506F 696E 
00003FA1  7473 2E2E 
00003FA5  2E        
00003FA6  2879 2F6E 6191          dc.b      40,121,47,110,41,63,0
00003FAA  293F 00   
                    6192   @m68kde~1_88:
00003FAE  0D0A 4B69 6193          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00003FB2  6C6C 2041 
00003FB6  6C6C 2057 
00003FBA  61        
00003FBB  7463 6820 6194          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00003FBF  506F 696E 
00003FC3  7473 2E2E 
00003FC7  2E        
00003FC8  2879 2F6E 6195          dc.b      40,121,47,110,41,63,0
00003FCC  293F 00   
                    6196   @m68kde~1_89:
00003FD0  0D0A 2D2D 6197          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00003FD4  2D2D 2D2D 
00003FD8  2D2D 2D2D 
00003FDC  2D2D 2D   
00003FDF  2D2D 2D2D 6198          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00003FE3  2D2D 2D2D 
00003FE7  2D2D 2D2D 
00003FEB  2D2D 2D   
00003FEE  2D2D 2D2D 6199          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00003FF2  2D2D 2D2D 
00003FF6  2D2D 2D2D 
00003FFA  2D2D 2D   
00003FFD  2D2D 2D2D 6200          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004001  2D2D 2D2D 
00004005  2D2D 2D2D 
00004009  2D2D 2D   
0000400C  2D2D 2D2D 6201          dc.b      45,45,45,45,45,45,0
00004010  2D2D 00   
                    6202   @m68kde~1_90:
00004014  0D0A 2020 6203          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004018  4465 6275 
0000401C  6767 6572 
00004020  20        
00004021  436F 6D6D 6204          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004025  616E 6420 
00004029  5375 6D6D 
0000402D  6172 7900 6205          dc.b      97,114,121,0
                    6206   @m68kde~1_91:
00004032  0D0A 2020 6207          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004036  2E28 7265 
0000403A  6729 2020 
0000403E  2020      
00004040  2020 202D 6208          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004044  2043 6861 
00004048  6E67 6520 
0000404C  5265      
0000404E  6769 7374 6209          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004052  6572 733A 
00004056  2065 2E67 
0000405A  2041 302D 6210          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
0000405E  4137 2C44 
00004062  302D 4437 
00004066  2C50 43   
00004069  2C53 5350 6211          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
0000406D  2C55 5350 
00004071  2C53 5200 
                    6212   @m68kde~1_92:
00004076  0D0A 2020 6213          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
0000407A  4244 2F42 
0000407E  532F 4243 
00004082  2F42 4B   
00004085  2020 2D20 6214          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004089  4272 6561 
0000408D  6B20 506F 
00004091  69        
00004092  6E74 3A20 6215          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004096  4469 7370 
0000409A  6C61 792F 
0000409E  53        
0000409F  6574 2F43 6216          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
000040A3  6C65 6172 
000040A7  2F4B 696C 
000040AB  6C        
000040AC  00        6217          dc.b      0
                    6218   @m68kde~1_93:
000040AE  0D0A 2020 6219          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
000040B2  4320 2020 
000040B6  2020 2020 
000040BA  2020 20   
000040BD  2020 2D20 6220          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
000040C1  436F 7079 
000040C5  2050 726F 
000040C9  67        
000040CA  7261 6D20 6221          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
000040CE  6672 6F6D 
000040D2  2046 6C61 
000040D6  73        
000040D7  6820 746F 6222          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
000040DB  204D 6169 
000040DF  6E20 4D65 
000040E3  6D        
000040E4  6F72 7900 6223          dc.b      111,114,121,0
                    6224   @m68kde~1_94:
000040E8  0D0A 2020 6225          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
000040EC  4420 2020 
000040F0  2020 2020 
000040F4  2020 20   
000040F7  2020 2D20 6226          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
000040FB  4475 6D70 
000040FF  204D 656D 
00004103  6F        
00004104  7279 2043 6227          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00004108  6F6E 7465 
0000410C  6E74 7320 
00004110  746F 2053 6228          dc.b      116,111,32,83,99,114,101,101,110,0
00004114  6372 6565 
00004118  6E00      
                    6229   @m68kde~1_95:
0000411A  0D0A 2020 6230          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
0000411E  4520 2020 
00004122  2020 2020 
00004126  2020 20   
00004129  2020 2D20 6231          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
0000412D  456E 7465 
00004131  7220 5374 
00004135  72        
00004136  696E 6720 6232          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
0000413A  696E 746F 
0000413E  204D 656D 
00004142  6F72 7900 6233          dc.b      111,114,121,0
                    6234   @m68kde~1_96:
00004146  0D0A 2020 6235          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
0000414A  4620 2020 
0000414E  2020 2020 
00004152  2020 20   
00004155  2020 2D20 6236          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00004159  4669 6C6C 
0000415D  204D 656D 
00004161  6F        
00004162  7279 2077 6237          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004166  6974 6820 
0000416A  4461 7461 
0000416E  00        
                    6238   @m68kde~1_97:
00004170  0D0A 2020 6239          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004174  4720 2020 
00004178  2020 2020 
0000417C  2020 20   
0000417F  2020 2D20 6240          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004183  476F 2050 
00004187  726F 6772 
0000418B  61        
0000418C  6D20 5374 6241          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004190  6172 7469 
00004194  6E67 2061 
00004198  74        
00004199  2041 6464 6242          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
0000419D  7265 7373 
000041A1  3A20 2425 
000041A5  30        
000041A6  3858 00   6243          dc.b      56,88,0
                    6244   @m68kde~1_98:
000041AA  0D0A 2020 6245          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
000041AE  4C20 2020 
000041B2  2020 2020 
000041B6  2020 20   
000041B9  2020 2D20 6246          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
000041BD  4C6F 6164 
000041C1  2050 726F 
000041C5  67        
000041C6  7261 6D20 6247          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
000041CA  282E 4845 
000041CE  5820 6669 
000041D2  6C        
000041D3  6529 2066 6248          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
000041D7  726F 6D20 
000041DB  4C61 7074 
000041DF  6F        
000041E0  7000      6249          dc.b      112,0
                    6250   @m68kde~1_99:
000041E2  0D0A 2020 6251          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
000041E6  4D20 2020 
000041EA  2020 2020 
000041EE  2020 20   
000041F1  2020 2D20 6252          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
000041F5  4D65 6D6F 
000041F9  7279 2045 
000041FD  78        
000041FE  616D 696E 6253          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004202  6520 616E 
00004206  6420 4368 
0000420A  61        
0000420B  6E67 6500 6254          dc.b      110,103,101,0
                    6255   @m68kde~1_100:
00004210  0D0A 2020 6256          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00004214  5020 2020 
00004218  2020 2020 
0000421C  2020 20   
0000421F  2020 2D20 6257          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004223  5072 6F67 
00004227  7261 6D20 
0000422B  46        
0000422C  6C61 7368 6258          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004230  204D 656D 
00004234  6F72 7920 
00004238  7769 7468 6259          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
0000423C  2055 7365 
00004240  7220 5072 
00004244  6F67 7261 6260          dc.b      111,103,114,97,109,0
00004248  6D00      
                    6261   @m68kde~1_101:
0000424A  0D0A 2020 6262          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
0000424E  5220 2020 
00004252  2020 2020 
00004256  2020 20   
00004259  2020 2D20 6263          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
0000425D  4469 7370 
00004261  6C61 7920 
00004265  36        
00004266  3830 3030 6264          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
0000426A  2052 6567 
0000426E  6973 7465 
00004272  72        
00004273  7300      6265          dc.b      115,0
                    6266   @m68kde~1_102:
00004276  0D0A 2020 6267          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
0000427A  5320 2020 
0000427E  2020 2020 
00004282  2020 20   
00004285  2020 2D20 6268          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004289  546F 6767 
0000428D  6C65 204F 
00004291  4E        
00004292  2F4F 4646 6269          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004296  2053 696E 
0000429A  676C 6520 
0000429E  53        
0000429F  7465 7020 6270          dc.b      116,101,112,32,77,111,100,101,0
000042A3  4D6F 6465 
000042A7  00        
                    6271   @m68kde~1_103:
000042A8  0D0A 2020 6272          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
000042AC  544D 2020 
000042B0  2020 2020 
000042B4  2020 20   
000042B7  2020 2D20 6273          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
000042BB  5465 7374 
000042BF  204D 656D 
000042C3  6F        
000042C4  7279 00   6274          dc.b      114,121,0
                    6275   @m68kde~1_104:
000042C8  0D0A 2020 6276          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
000042CC  5453 2020 
000042D0  2020 2020 
000042D4  2020 20   
000042D7  2020 2D20 6277          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
000042DB  5465 7374 
000042DF  2053 7769 
000042E3  74        
000042E4  6368 6573 6278          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
000042E8  3A20 5357 
000042EC  372D 3000 
                    6279   @m68kde~1_105:
000042F0  0D0A 2020 6280          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
000042F4  5444 2020 
000042F8  2020 2020 
000042FC  2020 20   
000042FF  2020 2D20 6281          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004303  5465 7374 
00004307  2044 6973 
0000430B  70        
0000430C  6C61 7973 6282          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004310  3A20 4C45 
00004314  4473 2061 
00004318  6E        
00004319  6420 372D 6283          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
0000431D  5365 676D 
00004321  656E 7400 
                    6284   @m68kde~1_106:
00004326  0D0A 2020 6285          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
0000432A  5744 2F57 
0000432E  532F 5743 
00004332  2F57 4B   
00004335  2020 2D20 6286          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004339  5761 7463 
0000433D  6820 506F 
00004341  696E      
00004343  743A 2044 6287          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004347  6973 706C 
0000434B  6179 2F53 
0000434F  65        
00004350  742F 436C 6288          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004354  6561 722F 
00004358  4B69 6C6C 
0000435C  00        
                    6289   @m68kde~1_107:
0000435E  0D0A 2300 6290          dc.b      13,10,35,0
                    6291   @m68kde~1_108:
00004362  0D0A 5072 6292          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004366  6F67 7261 
0000436A  6D20 5275 
0000436E  6E        
0000436F  6E69 6E67 6293          dc.b      110,105,110,103,46,46,46,46,46,0
00004373  2E2E 2E2E 
00004377  2E00      
                    6294   @m68kde~1_109:
0000437A  0D0A 5072 6295          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
0000437E  6573 7320 
00004382  3C52 4553 
00004386  4554      
00004388  3E20 6275 6296          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
0000438C  7474 6F6E 
00004390  203C 4B65 
00004394  79        
00004395  303E 206F 6297          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00004399  6E20 4445 
0000439D  3120 746F 
000043A1  2073      
000043A3  746F 7000 6298          dc.b      116,111,112,0
                    6299   @m68kde~1_110:
000043A8  0D0A 4572 6300          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
000043AC  726F 723A 
000043B0  2050 7265 
000043B4  73        
000043B5  7320 2747 6301          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
000043B9  2720 6669 
000043BD  7273 7420 
000043C1  74        
000043C2  6F20 7374 6302          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000043C6  6172 7420 
000043CA  7072 6F67 
000043CE  7261 6D00 6303          dc.b      114,97,109,0
                    6304   @m68kde~1_111:
000043D2  0D0A 5369 6305          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000043D6  6E67 6C65 
000043DA  2053 7465 
000043DE  70        
000043DF  2020 3A5B 6306          dc.b      32,32,58,91,79,78,93,0
000043E3  4F4E 5D00 
                    6307   @m68kde~1_112:
000043E8  0D0A 5072 6308          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
000043EC  6573 7320 
000043F0  2747 2720 
000043F4  74        
000043F5  6F20 5472 6309          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
000043F9  6163 6520 
000043FD  5072 6F67 
00004401  72        
00004402  616D 2066 6310          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00004406  726F 6D20 
0000440A  6164 6472 
0000440E  6573 7320 6311          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00004412  2425 582E 
00004416  2E2E 2E2E 
0000441A  00        
                    6312   @m68kde~1_113:
0000441C  0D0A 5075 6313          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00004420  7368 203C 
00004424  5245 5345 
00004428  5420      
0000442A  4275 7474 6314          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
0000442E  6F6E 3E20 
00004432  746F 2053 
00004436  74        
00004437  6F70 2E2E 6315          dc.b      111,112,46,46,46,46,46,0
0000443B  2E2E 2E00 
                    6316   @m68kde~1_114:
00004440  0D0A 5369 6317          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004444  6E67 6C65 
00004448  2053 7465 
0000444C  70        
0000444D  203A 205B 6318          dc.b      32,58,32,91,79,70,70,93,0
00004451  4F46 465D 
00004455  00        
                    6319   @m68kde~1_115:
00004456  0D0A 4272 6320          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000445A  6561 6B20 
0000445E  506F 696E 
00004462  74        
00004463  7320 3A5B 6321          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00004467  456E 6162 
0000446B  6C65 645D 
0000446F  00        
                    6322   @m68kde~1_116:
00004470  0D0A 5072 6323          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004474  6573 7320 
00004478  3C45 5343 
0000447C  3E20      
0000447E  746F 2052 6324          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004482  6573 756D 
00004486  6520 5573 
0000448A  6572 2050 6325          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
0000448E  726F 6772 
00004492  616D 2E2E 
00004496  2E        
00004497  2E2E 00   6326          dc.b      46,46,0
                    6327   @m68kde~1_117:
0000449A  0D0A 5369 6328          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000449E  6E67 6C65 
000044A2  2053 7465 
000044A6  70        
000044A7  2020 3A5B 6329          dc.b      32,32,58,91,79,70,70,93,0
000044AB  4F46 465D 
000044AF  00        
                    6330   @m68kde~1_118:
000044B0  0D0A 0D0A 6331          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000044B4  5072 6F67 
000044B8  7261 6D20 
000044BC  41        
000044BD  424F 5254 6332          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000044C1  2021 2121 
000044C5  2121 210D 
000044C9  0A00      
                    6333   @m68kde~1_119:
000044CC  2573 0D0A 6334          dc.b      37,115,13,10,0
000044D0  00        
                    6335   @m68kde~1_120:
000044D2  0D0A 0D0A 6336          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000044D6  5072 6F67 
000044DA  7261 6D20 
000044DE  41        
000044DF  424F 5254 6337          dc.b      66,79,82,84,32,33,33,33,33,33,0
000044E3  2021 2121 
000044E7  2121 00   
                    6338   @m68kde~1_121:
000044EA  0D0A 556E 6339          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
000044EE  6861 6E64 
000044F2  6C65 6420 
000044F6  49        
000044F7  6E74 6572 6340          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
000044FB  7275 7074 
000044FF  3A20 4952 
00004503  5125 6420 6341          dc.b      81,37,100,32,33,33,33,33,33,0
00004507  2121 2121 
0000450B  2100      
                    6342   @m68kde~1_122:
0000450E  4144 4452 6343          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004512  4553 5320 
00004516  4552 524F 
0000451A  523A 20   
0000451D  3136 206F 6344          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004521  7220 3332 
00004525  2042 6974 
00004529  2054      
0000452B  7261 6E73 6345          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
0000452F  6665 7220 
00004533  746F 2F66 
00004537  726F 6D20 6346          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
0000453B  616E 204F 
0000453F  4444 2041 
00004543  64        
00004544  6472 6573 6347          dc.b      100,114,101,115,115,46,46,46,46,0
00004548  732E 2E2E 
0000454C  2E00      
                    6348   @m68kde~1_123:
0000454E  556E 6861 6349          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004552  6E64 6C65 
00004556  6420 5472 
0000455A  6170 2021 6350          dc.b      97,112,32,33,33,33,33,33,0
0000455E  2121 2121 
00004562  00        
                    6351   @m68kde~1_124:
00004564  4255 5320 6352          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004568  4572 726F 
0000456C  7221 00   
                    6353   @m68kde~1_125:
00004570  4144 4452 6354          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004574  4553 5320 
00004578  4572 726F 
0000457C  7221      
0000457E  00        6355          dc.b      0
                    6356   @m68kde~1_126:
00004580  494C 4C45 6357          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004584  4741 4C20 
00004588  494E 5354 
0000458C  5255 43   
0000458F  5449 4F4E 6358          dc.b      84,73,79,78,0
00004593  00        
                    6359   @m68kde~1_127:
00004594  4449 5649 6360          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004598  4445 2042 
0000459C  5920 5A45 
000045A0  524F 00   
                    6361   @m68kde~1_128:
000045A4  2743 484B 6362          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
000045A8  2720 494E 
000045AC  5354 5255 
000045B0  4354 49   
000045B3  4F4E 00   6363          dc.b      79,78,0
                    6364   @m68kde~1_129:
000045B6  5452 4150 6365          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
000045BA  5620 494E 
000045BE  5354 5255 
000045C2  4354 49   
000045C5  4F4E 00   6366          dc.b      79,78,0
                    6367   @m68kde~1_130:
000045C8  5052 4956 6368          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
000045CC  494C 4547 
000045D0  4520 5649 
000045D4  4F4C 41   
000045D7  5449 4F4E 6369          dc.b      84,73,79,78,0
000045DB  00        
                    6370   @m68kde~1_131:
000045DC  554E 494E 6371          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
000045E0  4954 4941 
000045E4  4C49 5345 
000045E8  4420 49   
000045EB  5251 00   6372          dc.b      82,81,0
                    6373   @m68kde~1_132:
000045EE  5350 5552 6374          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
000045F2  494F 5553 
000045F6  2049 5251 
000045FA  00        
                    6375   @m68kde~1_133:
000045FC  0D0A 5374 6376          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004600  6172 7420 
00004604  4164 6472 
00004608  65        
00004609  7373 2069 6377          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
0000460D  6E20 4D65 
00004611  6D6F 7279 
00004615  3A20 00   6378          dc.b      58,32,0
                    6379   @m68kde~1_134:
00004618  0D0A 456E 6380          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
0000461C  7465 7220 
00004620  5374 7269 
00004624  6E        
00004625  6720 2845 6381          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00004629  5343 2074 
0000462D  6F20 656E 
00004631  64        
00004632  2920 3A00 6382          dc.b      41,32,58,0
                    6383   @m68kde~1_135:
00004636  0D0A 506C 6384          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
0000463A  6561 7365 
0000463E  2065 6E74 
00004642  65        
00004643  7220 6120 6385          dc.b      114,32,97,32,110,117,109,98,101,114,32,116,111
00004647  6E75 6D62 
0000464B  6572 2074 
0000464F  6F        
00004650  2063 686F 6386          dc.b      32,99,104,111,111,115,101,32,111,110,101,32
00004654  6F73 6520 
00004658  6F6E 6520 
0000465C  6F66 2074 6387          dc.b      111,102,32,116,104,101,32,102,111,108,108,111
00004660  6865 2066 
00004664  6F6C 6C6F 
00004668  7769 6E67 6388          dc.b      119,105,110,103,32,116,101,115,116,32,111,112
0000466C  2074 6573 
00004670  7420 6F70 
00004674  7469 6F6E 6389          dc.b      116,105,111,110,115,58,13,10,49,32,45,32,66
00004678  733A 0D0A 
0000467C  3120 2D20 
00004680  42        
00004681  7974 6573 6390          dc.b      121,116,101,115,13,10,50,32,45,32,87,111,114
00004685  0D0A 3220 
00004689  2D20 576F 
0000468D  72        
0000468E  6473 0D0A 6391          dc.b      100,115,13,10,51,32,45,32,76,111,110,103,32
00004692  3320 2D20 
00004696  4C6F 6E67 
0000469A  20        
0000469B  576F 7264 6392          dc.b      87,111,114,100,115,13,10,0
0000469F  730D 0A00 
                    6393   @m68kde~1_136:
000046A4  0D0A 496E 6394          dc.b      13,10,73,110,118,97,108,105,100,32,83,101,108
000046A8  7661 6C69 
000046AC  6420 5365 
000046B0  6C        
000046B1  6563 7469 6395          dc.b      101,99,116,105,111,110,13,10,0
000046B5  6F6E 0D0A 
000046B9  00        
                    6396   @m68kde~1_137:
000046BA  0D0A 596F 6397          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
000046BE  7520 6861 
000046C2  7665 2073 
000046C6  65        
000046C7  6C65 6374 6398          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
000046CB  6564 2074 
000046CF  6573 7420 
000046D3  6F70 7469 6399          dc.b      111,112,116,105,111,110,32,66,89,84,69,83,13
000046D7  6F6E 2042 
000046DB  5954 4553 
000046DF  0D        
000046E0  0A00      6400          dc.b      10,0
                    6401   @m68kde~1_138:
000046E2  0D0A 596F 6402          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
000046E6  7520 6861 
000046EA  7665 2073 
000046EE  65        
000046EF  6C65 6374 6403          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
000046F3  6564 2074 
000046F7  6573 7420 
000046FB  6F70 7469 6404          dc.b      111,112,116,105,111,110,32,87,79,82,68,83,13
000046FF  6F6E 2057 
00004703  4F52 4453 
00004707  0D        
00004708  0A00      6405          dc.b      10,0
                    6406   @m68kde~1_139:
0000470A  0D0A 596F 6407          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
0000470E  7520 6861 
00004712  7665 2073 
00004716  65        
00004717  6C65 6374 6408          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
0000471B  6564 2074 
0000471F  6573 7420 
00004723  6F70 7469 6409          dc.b      111,112,116,105,111,110,32,76,79,78,71,32,87
00004727  6F6E 204C 
0000472B  4F4E 4720 
0000472F  57        
00004730  4F52 4453 6410          dc.b      79,82,68,83,13,10,0
00004734  0D0A 00   
                    6411   @m68kde~1_140:
00004738  0D0A 4578 6412          dc.b      13,10,69,120,99,101,112,116,105,111,110,32,45
0000473C  6365 7074 
00004740  696F 6E20 
00004744  2D        
00004745  2069 6E76 6413          dc.b      32,105,110,118,97,108,105,100,32,116,101,115
00004749  616C 6964 
0000474D  2074 6573 
00004751  7420 6F70 6414          dc.b      116,32,111,112,116,105,111,110,13,10,0
00004755  7469 6F6E 
00004759  0D0A 00   
                    6415   @m68kde~1_141:
0000475C  0D0A 506C 6416          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00004760  6561 7365 
00004764  2065 6E74 
00004768  65        
00004769  7220 6120 6417          dc.b      114,32,97,32,110,117,109,98,101,114,32,116,111
0000476D  6E75 6D62 
00004771  6572 2074 
00004775  6F        
00004776  2063 686F 6418          dc.b      32,99,104,111,111,115,101,32,111,110,101,32
0000477A  6F73 6520 
0000477E  6F6E 6520 
00004782  6F66 2074 6419          dc.b      111,102,32,116,104,101,32,102,111,108,108,111
00004786  6865 2066 
0000478A  6F6C 6C6F 
0000478E  7769 6E67 6420          dc.b      119,105,110,103,32,116,101,115,116,32,112,97
00004792  2074 6573 
00004796  7420 7061 
0000479A  7474 6572 6421          dc.b      116,116,101,114,110,115,58,13,10,49,32,45,32
0000479E  6E73 3A0D 
000047A2  0A31 202D 
000047A6  20        
000047A7  3535 0D0A 6422          dc.b      53,53,13,10,50,32,45,32,65,65,13,10,51,32,45
000047AB  3220 2D20 
000047AF  4141 0D0A 
000047B3  3320 2D   
000047B6  2046 460D 6423          dc.b      32,70,70,13,10,52,32,45,32,48,48,13,10,0
000047BA  0A34 202D 
000047BE  2030 300D 
000047C2  0A00      
                    6424   @m68kde~1_142:
000047C4  0D0A 596F 6425          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
000047C8  7520 6861 
000047CC  7665 2073 
000047D0  65        
000047D1  6C65 6374 6426          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
000047D5  6564 2074 
000047D9  6573 7420 
000047DD  7061 7474 6427          dc.b      112,97,116,116,101,114,110,32,53,53,13,10,0
000047E1  6572 6E20 
000047E5  3535 0D0A 
000047E9  00        
                    6428   @m68kde~1_143:
000047EA  0D0A 596F 6429          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
000047EE  7520 6861 
000047F2  7665 2073 
000047F6  65        
000047F7  6C65 6374 6430          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
000047FB  6564 2074 
000047FF  6573 7420 
00004803  7061 7474 6431          dc.b      112,97,116,116,101,114,110,32,65,65,13,10,0
00004807  6572 6E20 
0000480B  4141 0D0A 
0000480F  00        
                    6432   @m68kde~1_144:
00004810  0D0A 596F 6433          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00004814  7520 6861 
00004818  7665 2073 
0000481C  65        
0000481D  6C65 6374 6434          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00004821  6564 2074 
00004825  6573 7420 
00004829  7061 7474 6435          dc.b      112,97,116,116,101,114,110,32,70,70,13,10,0
0000482D  6572 6E20 
00004831  4646 0D0A 
00004835  00        
                    6436   @m68kde~1_145:
00004836  0D0A 596F 6437          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
0000483A  7520 6861 
0000483E  7665 2073 
00004842  65        
00004843  6C65 6374 6438          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00004847  6564 2074 
0000484B  6573 7420 
0000484F  7061 7474 6439          dc.b      112,97,116,116,101,114,110,32,48,48,13,10,0
00004853  6572 6E20 
00004857  3030 0D0A 
0000485B  00        
                    6440   @m68kde~1_146:
0000485C  0D0A 4578 6441          dc.b      13,10,69,120,99,101,112,116,105,111,110,32,45
00004860  6365 7074 
00004864  696F 6E20 
00004868  2D        
00004869  2069 6E76 6442          dc.b      32,105,110,118,97,108,105,100,32,116,101,115
0000486D  616C 6964 
00004871  2074 6573 
00004875  7420 7061 6443          dc.b      116,32,112,97,116,116,101,114,110,13,10,0
00004879  7474 6572 
0000487D  6E0D 0A00 
                    6444   @m68kde~1_147:
00004882  0D0A 4578 6445          dc.b      13,10,69,120,99,101,112,116,105,111,110,32,45
00004886  6365 7074 
0000488A  696F 6E20 
0000488E  2D        
0000488F  2063 6F75 6446          dc.b      32,99,111,117,108,100,32,110,111,116,32,103
00004893  6C64 206E 
00004897  6F74 2067 
0000489B  656E 6572 6447          dc.b      101,110,101,114,97,116,101,32,119,114,105,116
0000489F  6174 6520 
000048A3  7772 6974 
000048A7  655F 6461 6448          dc.b      101,95,100,97,116,97,13,10,0
000048AB  7461 0D0A 
000048AF  00        
                    6449   @m68kde~1_148:
000048B0  0D0A 506C 6450          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
000048B4  6561 7365 
000048B8  2065 6E74 
000048BC  65        
000048BD  7220 6120 6451          dc.b      114,32,97,32,115,116,97,114,116,105,110,103
000048C1  7374 6172 
000048C5  7469 6E67 
000048C9  2061 6464 6452          dc.b      32,97,100,100,114,101,115,115,32,102,114,111
000048CD  7265 7373 
000048D1  2066 726F 
000048D5  6D20 6630 6453          dc.b      109,32,102,48,48,48,32,48,48,48,48,32,116,111
000048D9  3030 2030 
000048DD  3030 3020 
000048E1  746F      
000048E3  2066 3366 6454          dc.b      32,102,51,102,102,32,102,102,102,102,13,10,0
000048E7  6620 6666 
000048EB  6666 0D0A 
000048EF  00        
                    6455   @m68kde~1_149:
000048F0  0D0A 5374 6456          dc.b      13,10,83,116,97,114,116,32,97,100,100,114,101
000048F4  6172 7420 
000048F8  6164 6472 
000048FC  65        
000048FD  7373 2069 6457          dc.b      115,115,32,105,115,32,105,110,118,97,108,105
00004901  7320 696E 
00004905  7661 6C69 
00004909  640D 0A00 6458          dc.b      100,13,10,0
                    6459   @m68kde~1_150:
0000490E  0D0A 466F 6460          dc.b      13,10,70,111,114,32,119,111,114,100,115,32,111
00004912  7220 776F 
00004916  7264 7320 
0000491A  6F        
0000491B  7220 6C6F 6461          dc.b      114,32,108,111,110,103,32,119,111,114,100,115
0000491F  6E67 2077 
00004923  6F72 6473 
00004927  2C20 706C 6462          dc.b      44,32,112,108,101,97,115,101,32,101,110,116
0000492B  6561 7365 
0000492F  2065 6E74 
00004933  6572 2061 6463          dc.b      101,114,32,97,110,32,101,118,101,110,32,110
00004937  6E20 6576 
0000493B  656E 206E 
0000493F  756D 6265 6464          dc.b      117,109,98,101,114,101,100,32,97,100,100,114
00004943  7265 6420 
00004947  6164 6472 
0000494B  6573 730D 6465          dc.b      101,115,115,13,10,0
0000494F  0A00      
                    6466   @m68kde~1_151:
00004952  0D0A 5468 6467          dc.b      13,10,84,104,101,32,99,104,111,115,101,110,32
00004956  6520 6368 
0000495A  6F73 656E 
0000495E  20        
0000495F  7374 6172 6468          dc.b      115,116,97,114,116,105,110,103,32,97,100,100
00004963  7469 6E67 
00004967  2061 6464 
0000496B  7265 7373 6469          dc.b      114,101,115,115,32,105,115,58,32,37,120,13,10
0000496F  2069 733A 
00004973  2025 780D 
00004977  0A        
00004978  00        6470          dc.b      0
                    6471   @m68kde~1_152:
0000497A  0D0A 506C 6472          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
0000497E  6561 7365 
00004982  2065 6E74 
00004986  65        
00004987  7220 616E 6473          dc.b      114,32,97,110,32,101,110,100,32,97,100,100,114
0000498B  2065 6E64 
0000498F  2061 6464 
00004993  72        
00004994  6573 7320 6474          dc.b      101,115,115,32,102,114,111,109,32,37,120,32
00004998  6672 6F6D 
0000499C  2025 7820 
000049A0  746F 2066 6475          dc.b      116,111,32,102,51,102,102,32,102,102,102,102
000049A4  3366 6620 
000049A8  6666 6666 
000049AC  0D0A 00   6476          dc.b      13,10,0
                    6477   @m68kde~1_153:
000049B0  0D0A 456E 6478          dc.b      13,10,69,110,100,32,97,100,100,114,101,115,115
000049B4  6420 6164 
000049B8  6472 6573 
000049BC  73        
000049BD  2069 7320 6479          dc.b      32,105,115,32,105,110,118,97,108,105,100,13
000049C1  696E 7661 
000049C5  6C69 640D 
000049C9  0A00      6480          dc.b      10,0
                    6481   @m68kde~1_154:
000049CC  0D0A 5468 6482          dc.b      13,10,84,104,101,32,99,104,111,115,101,110,32
000049D0  6520 6368 
000049D4  6F73 656E 
000049D8  20        
000049D9  656E 6469 6483          dc.b      101,110,100,105,110,103,32,97,100,100,114,101
000049DD  6E67 2061 
000049E1  6464 7265 
000049E5  7373 2069 6484          dc.b      115,115,32,105,115,58,32,37,120,13,10,0
000049E9  733A 2025 
000049ED  780D 0A00 
                    6485   @m68kde~1_155:
000049F2  0D0A 5772 6486          dc.b      13,10,87,114,105,116,105,110,103,32,37,120,32
000049F6  6974 696E 
000049FA  6720 2578 
000049FE  20        
000049FF  696E 746F 6487          dc.b      105,110,116,111,32,97,100,100,114,101,115,115
00004A03  2061 6464 
00004A07  7265 7373 
00004A0B  2025 780D 6488          dc.b      32,37,120,13,10,0
00004A0F  0A00      
                    6489   @m68kde~1_156:
00004A12  0D0A 5772 6490          dc.b      13,10,87,114,105,116,105,110,103,32,99,111,109
00004A16  6974 696E 
00004A1A  6720 636F 
00004A1E  6D        
00004A1F  706C 6574 6491          dc.b      112,108,101,116,101,100,46,32,87,105,108,108
00004A23  6564 2E20 
00004A27  5769 6C6C 
00004A2B  206E 6F77 6492          dc.b      32,110,111,119,32,115,116,97,114,116,32,114
00004A2F  2073 7461 
00004A33  7274 2072 
00004A37  6561 6469 6493          dc.b      101,97,100,105,110,103,46,13,10,0
00004A3B  6E67 2E0D 
00004A3F  0A00      
                    6494   @m68kde~1_157:
00004A42  0D0A 416E 6495          dc.b      13,10,65,110,32,69,114,114,111,114,32,104,97
00004A46  2045 7272 
00004A4A  6F72 2068 
00004A4E  61        
00004A4F  7320 6F63 6496          dc.b      115,32,111,99,99,117,114,114,101,100,58,32,100
00004A53  6375 7272 
00004A57  6564 3A20 
00004A5B  64        
00004A5C  6174 6120 6497          dc.b      97,116,97,32,97,116,32,97,100,100,114,101,115
00004A60  6174 2061 
00004A64  6464 7265 
00004A68  73        
00004A69  7320 2578 6498          dc.b      115,32,37,120,32,101,120,112,101,99,116,101
00004A6D  2065 7870 
00004A71  6563 7465 
00004A75  6420 746F 6499          dc.b      100,32,116,111,32,98,101,32,37,120,44,32,105
00004A79  2062 6520 
00004A7D  2578 2C20 
00004A81  69        
00004A82  6E73 7465 6500          dc.b      110,115,116,101,97,100,32,105,115,32,114,101
00004A86  6164 2069 
00004A8A  7320 7265 
00004A8E  6164 696E 6501          dc.b      97,100,105,110,103,32,37,120,13,10,0
00004A92  6720 2578 
00004A96  0D0A 00   
                    6502   @m68kde~1_158:
00004A9A  0D0A 5265 6503          dc.b      13,10,82,101,97,100,105,110,103,32,100,97,116
00004A9E  6164 696E 
00004AA2  6720 6461 
00004AA6  74        
00004AA7  6120 7661 6504          dc.b      97,32,118,97,108,117,101,32,37,120,32,102,114
00004AAB  6C75 6520 
00004AAF  2578 2066 
00004AB3  72        
00004AB4  6F6D 2061 6505          dc.b      111,109,32,97,100,100,114,101,115,115,32,37
00004AB8  6464 7265 
00004ABC  7373 2025 
00004AC0  780D 0A00 6506          dc.b      120,13,10,0
                    6507   @m68kde~1_159:
00004AC4  0D0A 4D65 6508          dc.b      13,10,77,101,109,111,114,121,32,116,101,115
00004AC8  6D6F 7279 
00004ACC  2074 6573 
00004AD0  7420 6661 6509          dc.b      116,32,102,97,105,108,101,100,46,13,10,0
00004AD4  696C 6564 
00004AD8  2E0D 0A00 
                    6510   @m68kde~1_160:
00004ADC  0D0A 4D65 6511          dc.b      13,10,77,101,109,111,114,121,32,116,101,115
00004AE0  6D6F 7279 
00004AE4  2074 6573 
00004AE8  7420 7375 6512          dc.b      116,32,115,117,99,99,101,115,115,102,117,108
00004AEC  6363 6573 
00004AF0  7366 756C 
00004AF4  2E0D 0A00 6513          dc.b      46,13,10,0
                    6514   @m68kde~1_161:
00004AF8  4350 454E 6515          dc.b      67,80,69,78,52,49,50,32,45,32,76,97,98,32,50
00004AFC  3431 3220 
00004B00  2D20 4C61 
00004B04  6220 32   
00004B07  00        6516          dc.b      0
                    6517   @m68kde~1_162:
00004B08  5279 616E 6518          dc.b      82,121,97,110,32,78,101,100,106,97,98,97,116
00004B0C  204E 6564 
00004B10  6A61 6261 
00004B14  74        
00004B15  2036 3735 6519          dc.b      32,54,55,53,48,49,53,49,48,59,32,65,110,110
00004B19  3031 3531 
00004B1D  303B 2041 
00004B21  6E6E      
00004B23  6120 5975 6520          dc.b      97,32,89,117,110,32,57,52,57,48,50,54,55,51
00004B27  6E20 3934 
00004B2B  3930 3236 
00004B2F  3733      
00004B31  00        6521          dc.b      0
                    6522   @m68kde~1_163:
00004B32  0D0A 5275 6523          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00004B36  6E6E 696E 
00004B3A  672E 2E2E 
00004B3E  2E        
00004B3F  2E00      6524          dc.b      46,0
                    6525   @m68kde~1_164:
00004B42  5275 6E6E 6526          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00004B46  696E 672E 
00004B4A  2E2E 2E2E 
00004B4E  00        
                    6527   @m68kde~1_165:
00004B50  4279 3A20 6528          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00004B54  504A 2044 
00004B58  6176 6965 
00004B5C  73        
00004B5D  00        6529          dc.b      0
                    6530   @m68kde~1_166:
00004B5E  0D0A 2573 6531          dc.b      13,10,37,115,0
00004B62  00        
                    6532   @itoa_1:
00004B64  2D32 3134 6533          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00004B68  3734 3833 
00004B6C  3634 3800 
                    6534   __ctype:
00004B70  0040 4040 6535          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00004B74  4040 4040 
00004B78  4040 5050 
00004B7C  5050 50   
00004B7F  4040 4040 6536          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00004B83  4040 4040 
00004B87  4040 4040 
00004B8B  4040 40   
00004B8E  4040 40D0 6537          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00004B92  A0A0 A0A0 
00004B96  A0A0 A0A0 
00004B9A  A0A0 A0A0 6538          dc.b      160,160,160,160,160,160,160,140,140,140,140
00004B9E  A0A0 A08C 
00004BA2  8C8C 8C   
00004BA5  8C8C 8C8C 6539          dc.b      140,140,140,140,140,140,160,160,160,160,160
00004BA9  8C8C A0A0 
00004BAD  A0A0 A0   
00004BB0  A0A0 8A8A 6540          dc.b      160,160,138,138,138,138,138,138,130,130,130
00004BB4  8A8A 8A8A 
00004BB8  8282 82   
00004BBB  8282 8282 6541          dc.b      130,130,130,130,130,130,130,130,130,130,130
00004BBF  8282 8282 
00004BC3  8282 82   
00004BC6  8282 8282 6542          dc.b      130,130,130,130,130,130,160,160,160,160,160
00004BCA  8282 A0A0 
00004BCE  A0A0 A0   
00004BD1  A089 8989 6543          dc.b      160,137,137,137,137,137,137,129,129,129,129
00004BD5  8989 8981 
00004BD9  8181 81   
00004BDC  8181 8181 6544          dc.b      129,129,129,129,129,129,129,129,129,129,129
00004BE0  8181 8181 
00004BE4  8181 81   
00004BE7  8181 8181 6545          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00004BEB  81A0 A0A0 
00004BEF  A040 0000 
00004BF3  00        
00004BF4  0000 0000 6546          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00004BF8  0000 0000 
00004BFC  0000 0000 
00004C00  0000 0000 
00004C04  0000 0000 
00004C08  0000      
00004C0A  0000 0000 6547          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00004C0E  0000 0000 
00004C12  0000 0000 
00004C16  0000 0000 
00004C1A  0000 0000 
00004C1E  0000      
00004C20  0000 0000 6548          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00004C24  0000 0000 
00004C28  0000 0000 
00004C2C  0000 0000 
00004C30  0000 0000 
00004C34  0000      
00004C36  0000 0000 6549          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00004C3A  0000 0000 
00004C3E  0000 0000 
00004C42  0000 0000 
00004C46  0000 0000 
00004C4A  0000      
00004C4C  0000 0000 6550          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00004C50  0000 0000 
00004C54  0000 0000 
00004C58  0000 0000 
00004C5C  0000 0000 
00004C60  0000      
00004C62  0000 0000 6551          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00004C66  0000 0000 
00004C6A  0000 0000 
00004C6E  0000 00   
                    6552          section   data
00004C72            6553                   align
          0000 4C72 6554   DataStart       equ       *
                    6555   
                    6556   *********************************************************************************************************
                    6557   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    6558   * to ram as part of the CStart routine in this file
                    6559   *********************************************************************************************************
                    6560   
                    6561          section   bss
00004C72            6562                   align
          0000 4C72 6563   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    6564   
                    6565   *********************************************************************************************************
                    6566   * Section for Uninitialised Data held in ROM as constants
                    6567   *********************************************************************************************************
                    6568   
08030000            6569                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0000 6570   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    6571   
                    6572   
08030000            6573   bss             org       bss
                    6574   
                    6575   *********************************************************************************************************
                    6576   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    6577   * install the exception handler using the C function InstallExceptionHandler()
                    6578   *********************************************************************************************************
                    6579   
                    6580   
                    6581   
08030000            6582   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            6583   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            6584   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            6585   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            6586   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            6587   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            6588   VCheck           ds.l    1      ditto
0803001C            6589   VTrapV           ds.l    1      ditto
08030020            6590   VPrivilege       ds.l    1      ditto
08030024            6591   VTrace           ds.l    1
08030028            6592   VLine1010emul    ds.l    1
0803002C            6593   VLine1111emul    ds.l    1
08030030            6594   VUnassigned1     ds.l    1
08030034            6595   VUnassigned2     ds.l    1
08030038            6596   VUnassigned3     ds.l    1
0803003C            6597   VUninit_IRQ      ds.l    1
08030040            6598   VUnassigned4     ds.l    1
08030044            6599   VUnassigned5     ds.l    1
08030048            6600   VUnassigned6     ds.l    1
0803004C            6601   VUnassigned7     ds.l    1
08030050            6602   VUnassigned8     ds.l    1
08030054            6603   VUnassigned9     ds.l    1
08030058            6604   VUnassigned10    ds.l    1
0803005C            6605   VUnassigned11    ds.l    1
08030060            6606   VSpuriousIRQ     ds.l    1
                    6607   
                    6608   * Interrupt handlers Vector 25-31
08030064            6609   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            6610   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            6611   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            6612   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            6613   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            6614   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            6615   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6616   
                    6617   * Trap Handler vectors 32-47
08030080            6618   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            6619   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            6620   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            6621   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            6622   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            6623   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            6624   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            6625   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            6626   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            6627   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            6628   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            6629   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            6630   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            6631   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            6632   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            6633   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6634   
                    6635   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    6636   
                    6637   ***********************************************************************************************************
                    6638   * Other Variables
                    6639   ***********************************************************************************************************
                    6640   *__DebugA5       ds.l    1
                    6641   *__UserA5        ds.l    1
                    6642   
                    6643   ***********************************************************************************************************
080300C0            6644   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            6645   __allocp:       ds.l    0       ; start of allocation units
080300C4            6646   __heap:         ds.l    0       ; pointers for malloc functions
                    6647   
                    6648   *__himem:       ds.l    himem            ; highest memory location + 1
                    6649   *__stklen:      ds.l    stklen           ; default stack size
                    6650   
                    6651   *********************************************************************************************************
                    6652   * Section for Heap
                    6653   *********************************************************************************************************
                    6654   
                    6655   _i:
080300C4            6656          ds.b      4
                    6657   _x:
080300C8            6658          ds.b      4
                    6659   _y:
080300CC            6660          ds.b      4
                    6661   _z:
080300D0            6662          ds.b      4
                    6663   _PortA_Count:
080300D4            6664          ds.b      4
                    6665   _Trace:
080300D8            6666          ds.b      4
                    6667   _GoFlag:
080300DC            6668          ds.b      4
                    6669   _Echo:
080300E0            6670          ds.b      4
                    6671   _d0:
080300E4            6672          ds.b      4
                    6673   _d1:
080300E8            6674          ds.b      4
                    6675   _d2:
080300EC            6676          ds.b      4
                    6677   _d3:
080300F0            6678          ds.b      4
                    6679   _d4:
080300F4            6680          ds.b      4
                    6681   _d5:
080300F8            6682          ds.b      4
                    6683   _d6:
080300FC            6684          ds.b      4
                    6685   _d7:
08030100            6686          ds.b      4
                    6687   _a0:
08030104            6688          ds.b      4
                    6689   _a1:
08030108            6690          ds.b      4
                    6691   _a2:
0803010C            6692          ds.b      4
                    6693   _a3:
08030110            6694          ds.b      4
                    6695   _a4:
08030114            6696          ds.b      4
                    6697   _a5:
08030118            6698          ds.b      4
                    6699   _a6:
0803011C            6700          ds.b      4
                    6701   _PC:
08030120            6702          ds.b      4
                    6703   _SSP:
08030124            6704          ds.b      4
                    6705   _USP:
08030128            6706          ds.b      4
                    6707   _SR:
0803012C            6708          ds.b      2
                    6709   _BreakPointAddress:
0803012E            6710          ds.b      32
                    6711   _BreakPointInstruction:
0803014E            6712          ds.b      16
                    6713   _BreakPointSetOrCleared:
0803015E            6714          ds.b      32
                    6715   _InstructionSize:
0803017E            6716          ds.b      4
                    6717   _WatchPointAddress:
08030182            6718          ds.b      32
                    6719   _WatchPointSetOrCleared:
080301A2            6720          ds.b      32
                    6721   _WatchPointString:
080301C2            6722          ds.b      800
                    6723   _TempString:
080304E2            6724          ds.b      100
                    6725          section   heap
08030546            6726                   align
          0803 0546 6727   bssEnd          equ *                   end of storage space for unitialised variables
                    6728   *                                       we have to copy all initialised variable from rom to here at startup
          0803 0546 6729   heap   equ       *
08030546            6730                    align
          0000 0000

Assembly errors: 0
