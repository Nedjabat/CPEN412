       section   code
**********************************************************************************************************
* CSTART.ASM  -  C startup-code
*
*          Initialises the system prior to running the users main() program
*
*          1) Sets up the user program stack pointer
*          2) Switches to User mode in the 68000
*          3) Enables All Interrupts 1-7 on 68000
*          4) Copies all initialised C program variables from Rom to Ram prior to running main()
*
**********************************************************************************************************
                align


**********************************************************************************************************
* The Following ORG Statement marks the address of the start of the this CStart Program
*
* The debug Monitor and Flash Load and Program routines assume your program lives here
**********************************************************************************************************
                org       $08000000
start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode

******************************************************************************************
* Set unitialised global variables to 0 at startup
******************************************************************************************
mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
                move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
                beq       go_main               if no data to copy go straight to program
Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
                subq.l    #1,d0
                bne       Zeroinit

*******************************************************************************************
* last minute initialisation before calling main
*******************************************************************************************

                move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
                clr.l     __allocp               used by malloc() in C
                move.l    #heap,__heap           pointer to free memory
go_main         jsr       _main
                bra       start

; C:\M68KV6.0 - 800BY480\SNAKE_GAME_SOFTWARE\M68KUSERPROGRAM (DE1).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
; #include <stdio.h>
; #include <string.h>
; #include <ctype.h>
; #include "snake.h"
; //IMPORTANT
; //
; // Uncomment one of the two #defines below
; // Define StartOfExceptionVectorTable as 08030000 if running programs from sram or
; // 0B000000 for running programs from dram
; //
; // In your labs, you will initially start by designing a system with SRam and later move to
; // Dram, so these constants will need to be changed based on the version of the system you have
; // building
; //
; // The working 68k system SOF file posted on canvas that you can use for your pre-lab
; // is based around Dram so #define accordingly before building
; //#define StartOfExceptionVectorTable 0x08030000
; #define StartOfExceptionVectorTable 0x0B000000
; /**********************************************************************************************
; **	Parallel port addresses
; **********************************************************************************************/
; #define PortA   *(volatile unsigned char *)(0x00400000)
; #define PortB   *(volatile unsigned char *)(0x00400002)
; #define PortC   *(volatile unsigned char *)(0x00400004)
; #define PortD   *(volatile unsigned char *)(0x00400006)
; #define PortE   *(volatile unsigned char *)(0x00400008)
; /*********************************************************************************************
; **	Hex 7 seg displays port addresses
; *********************************************************************************************/
; #define HEX_A        *(volatile unsigned char *)(0x00400010)
; #define HEX_B        *(volatile unsigned char *)(0x00400012)
; #define HEX_C        *(volatile unsigned char *)(0x00400014)    // de2 only
; #define HEX_D        *(volatile unsigned char *)(0x00400016)    // de2 only
; /**********************************************************************************************
; **	LCD display port addresses
; **********************************************************************************************/
; #define LCDcommand   *(volatile unsigned char *)(0x00400020)
; #define LCDdata      *(volatile unsigned char *)(0x00400022)
; /********************************************************************************************
; **	Timer Port addresses
; *********************************************************************************************/
; #define Timer1Data      *(volatile unsigned char *)(0x00400030)
; #define Timer1Control   *(volatile unsigned char *)(0x00400032)
; #define Timer1Status    *(volatile unsigned char *)(0x00400032)
; #define Timer2Data      *(volatile unsigned char *)(0x00400034)
; #define Timer2Control   *(volatile unsigned char *)(0x00400036)
; #define Timer2Status    *(volatile unsigned char *)(0x00400036)
; #define Timer3Data      *(volatile unsigned char *)(0x00400038)
; #define Timer3Control   *(volatile unsigned char *)(0x0040003A)
; #define Timer3Status    *(volatile unsigned char *)(0x0040003A)
; #define Timer4Data      *(volatile unsigned char *)(0x0040003C)
; #define Timer4Control   *(volatile unsigned char *)(0x0040003E)
; #define Timer4Status    *(volatile unsigned char *)(0x0040003E)
; #define Timer5Data      *(volatile unsigned char *)(0x00400130)
; #define Timer5Control   *(volatile unsigned char *)(0x00400132)
; #define Timer5Status    *(volatile unsigned char *)(0x00400132)
; #define Timer6Data      *(volatile unsigned char *)(0x00400134)
; #define Timer6Control   *(volatile unsigned char *)(0x00400136)
; #define Timer6Status    *(volatile unsigned char *)(0x00400136)
; #define Timer7Data      *(volatile unsigned char *)(0x00400138)
; #define Timer7Control   *(volatile unsigned char *)(0x0040013A)
; #define Timer7Status    *(volatile unsigned char *)(0x0040013A)
; #define Timer8Data      *(volatile unsigned char *)(0x0040013C)
; #define Timer8Control   *(volatile unsigned char *)(0x0040013E)
; #define Timer8Status    *(volatile unsigned char *)(0x0040013E)
; /*********************************************************************************************
; **	RS232 port addresses
; *********************************************************************************************/
; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
; /*********************************************************************************************
; **	PIA 1 and 2 port addresses
; *********************************************************************************************/
; #define PIA1_PortA_Data     *(volatile unsigned char *)(0x00400050)         // combined data and data direction register share same address
; #define PIA1_PortA_Control *(volatile unsigned char *)(0x00400052)
; #define PIA1_PortB_Data     *(volatile unsigned char *)(0x00400054)         // combined data and data direction register share same address
; #define PIA1_PortB_Control *(volatile unsigned char *)(0x00400056)
; #define PIA2_PortA_Data     *(volatile unsigned char *)(0x00400060)         // combined data and data direction register share same address
; #define PIA2_PortA_Control *(volatile unsigned char *)(0x00400062)
; #define PIA2_PortB_data     *(volatile unsigned char *)(0x00400064)         // combined data and data direction register share same address
; #define PIA2_PortB_Control *(volatile unsigned char *)(0x00400066)
; /*********************************************************************************************************************************
; (( DO NOT initialise global variables here, do it main even if you want 0
; (( it's a limitation of the compiler
; (( YOU HAVE BEEN WARNED
; *********************************************************************************************************************************/
; unsigned int i, x, y, z, PortA_Count;
; unsigned char Timer1Count, Timer2Count, Timer3Count, Timer4Count ;
; /*******************************************************************************************
; ** Function Prototypes
; *******************************************************************************************/
; void Wait1ms(void);
; void Wait3ms(void);
; void Init_LCD(void) ;
; void LCDOutchar(int c);
; void LCDOutMess(char *theMessage);
; void LCDClearln(void);
; void LCDline1Message(char *theMessage);
; void LCDline2Message(char *theMessage);
; int sprintf(char *out, const char *format, ...) ;
; /*****************************************************************************************
; **	Interrupt service routine for Timers
; **
; **  Timers 1 - 4 share a common IRQ on the CPU  so this function uses polling to figure
; **  out which timer is producing the interrupt
; **
; *****************************************************************************************/
; void Timer_ISR()
; {
_Timer_ISR:
; if(Timer1Status == 1) {         // Did Timer 1 produce the Interrupt?
       move.b    4194354,D0
       cmp.b     #1,D0
       bne.s     Timer_ISR_1
; Timer1Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
       move.b    #3,4194354
; PortA = Timer1Count++ ;     // increment an LED count on PortA with each tick of Timer 1
       move.b    _Timer1Count.L,D0
       addq.b    #1,_Timer1Count.L
       move.b    D0,4194304
Timer_ISR_1:
; }
; if(Timer2Status == 1) {         // Did Timer 2 produce the Interrupt?
       move.b    4194358,D0
       cmp.b     #1,D0
       bne.s     Timer_ISR_3
; Timer2Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
       move.b    #3,4194358
; PortC = Timer2Count++ ;     // increment an LED count on PortC with each tick of Timer 2
       move.b    _Timer2Count.L,D0
       addq.b    #1,_Timer2Count.L
       move.b    D0,4194308
Timer_ISR_3:
; }
; if(Timer3Status == 1) {         // Did Timer 3 produce the Interrupt?
       move.b    4194362,D0
       cmp.b     #1,D0
       bne.s     Timer_ISR_5
; Timer3Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
       move.b    #3,4194362
; HEX_A = Timer3Count++ ;     // increment a HEX count on Port HEX_A with each tick of Timer 3
       move.b    _Timer3Count.L,D0
       addq.b    #1,_Timer3Count.L
       move.b    D0,4194320
Timer_ISR_5:
; }
; if(Timer4Status == 1) {         // Did Timer 4 produce the Interrupt?
       move.b    4194366,D0
       cmp.b     #1,D0
       bne.s     Timer_ISR_7
; Timer4Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
       move.b    #3,4194366
; HEX_B = Timer4Count++ ;     // increment a HEX count on HEX_B with each tick of Timer 4
       move.b    _Timer4Count.L,D0
       addq.b    #1,_Timer4Count.L
       move.b    D0,4194322
Timer_ISR_7:
       rts
; }
; }
; /*****************************************************************************************
; **	Interrupt service routine for ACIA. This device has it's own dedicate IRQ level
; **  Add your code here to poll Status register and clear interrupt
; *****************************************************************************************/
; void ACIA_ISR()
; {}
_ACIA_ISR:
       rts
; /***************************************************************************************
; **	Interrupt service routine for PIAs 1 and 2. These devices share an IRQ level
; **  Add your code here to poll Status register and clear interrupt
; *****************************************************************************************/
; void PIA_ISR()
; {}
_PIA_ISR:
       rts
; /***********************************************************************************
; **	Interrupt service routine for Key 2 on DE1 board. Add your own response here
; ************************************************************************************/
; void Key2PressISR()
; {}
_Key2PressISR:
       rts
; /***********************************************************************************
; **	Interrupt service routine for Key 1 on DE1 board. Add your own response here
; ************************************************************************************/
; void Key1PressISR()
; {}
_Key1PressISR:
       rts
; /************************************************************************************
; **   Delay Subroutine to give the 68000 something useless to do to waste 1 mSec
; ************************************************************************************/
; void Wait1ms(void)
; {
_Wait1ms:
       move.l    D2,-(A7)
; int  i ;
; for(i = 0; i < 1000; i ++)
       clr.l     D2
Wait1ms_1:
       cmp.l     #1000,D2
       bge.s     Wait1ms_3
       addq.l    #1,D2
       bra       Wait1ms_1
Wait1ms_3:
       move.l    (A7)+,D2
       rts
; ;
; }
; /************************************************************************************
; **  Subroutine to give the 68000 something useless to do to waste 3 mSec
; **************************************************************************************/
; void Wait3ms(void)
; {
_Wait3ms:
       move.l    D2,-(A7)
; int i ;
; for(i = 0; i < 3; i++)
       clr.l     D2
Wait3ms_1:
       cmp.l     #3,D2
       bge.s     Wait3ms_3
; Wait1ms() ;
       jsr       _Wait1ms
       addq.l    #1,D2
       bra       Wait3ms_1
Wait3ms_3:
       move.l    (A7)+,D2
       rts
; }
; /*********************************************************************************************
; **  Subroutine to initialise the LCD display by writing some commands to the LCD internal registers
; **  Sets it for parallel port and 2 line display mode (if I recall correctly)
; *********************************************************************************************/
; void Init_LCD(void)
; {
_Init_LCD:
; LCDcommand = 0x0c ;
       move.b    #12,4194336
; Wait3ms() ;
       jsr       _Wait3ms
; LCDcommand = 0x38 ;
       move.b    #56,4194336
; Wait3ms() ;
       jsr       _Wait3ms
       rts
; }
; /*********************************************************************************************
; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
; *********************************************************************************************/
; void Init_RS232(void)
; {
_Init_RS232:
; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
       move.b    #21,4194368
; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
       move.b    #1,4194372
       rts
; }
; int kbhit(void)
; {
_kbhit:
; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Tx bit in status register to be '1'
       move.b    4194368,D0
       and.b     #1,D0
       cmp.b     #1,D0
       bne.s     kbhit_1
; return 1 ;
       moveq     #1,D0
       bra.s     kbhit_3
kbhit_1:
; else
; return 0 ;
       clr.l     D0
kbhit_3:
       rts
; }
; /*********************************************************************************************************
; **  Subroutine to provide a low level output function to 6850 ACIA
; **  This routine provides the basic functionality to output a single character to the serial Port
; **  to allow the board to communicate with HyperTerminal Program
; **
; **  NOTE you do not call this function directly, instead you call the normal putchar() function
; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
; **  call _putch() also
; *********************************************************************************************************/
; int _putch( int c)
; {
__putch:
       link      A6,#0
; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
_putch_1:
       move.b    4194368,D0
       and.b     #2,D0
       cmp.b     #2,D0
       beq.s     _putch_3
       bra       _putch_1
_putch_3:
; ;
; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
       move.l    8(A6),D0
       and.l     #127,D0
       move.b    D0,4194370
; return c ;                                              // putchar() expects the character to be returned
       move.l    8(A6),D0
       unlk      A6
       rts
; }
; /*********************************************************************************************************
; **  Subroutine to provide a low level input function to 6850 ACIA
; **  This routine provides the basic functionality to input a single character from the serial Port
; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
; **
; **  NOTE you do not call this function directly, instead you call the normal getchar() function
; **  which in turn calls _getch() below). Other functions like gets(), scanf() call getchar() so will
; **  call _getch() also
; *********************************************************************************************************/
; int _getch( void )
; {
__getch:
       link      A6,#-4
; char c ;
; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
_getch_1:
       move.b    4194368,D0
       and.b     #1,D0
       cmp.b     #1,D0
       beq.s     _getch_3
       bra       _getch_1
_getch_3:
; ;
; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
       move.b    4194370,D0
       and.l     #255,D0
       and.l     #127,D0
       unlk      A6
       rts
; }
; /******************************************************************************
; **  Subroutine to output a single character to the 2 row LCD display
; **  It is assumed the character is an ASCII code and it will be displayed at the
; **  current cursor position
; *******************************************************************************/
; void LCDOutchar(int c)
; {
_LCDOutchar:
       link      A6,#0
; LCDdata = (char)(c);
       move.l    8(A6),D0
       move.b    D0,4194338
; Wait1ms() ;
       jsr       _Wait1ms
       unlk      A6
       rts
; }
; /**********************************************************************************
; *subroutine to output a message at the current cursor position of the LCD display
; ************************************************************************************/
; void LCDOutMessage(char *theMessage)
; {
_LCDOutMessage:
       link      A6,#-4
; char c ;
; while((c = *theMessage++) != 0)     // output characters from the string until NULL
LCDOutMessage_1:
       move.l    8(A6),A0
       addq.l    #1,8(A6)
       move.b    (A0),-1(A6)
       move.b    (A0),D0
       beq.s     LCDOutMessage_3
; LCDOutchar(c) ;
       move.b    -1(A6),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       jsr       _LCDOutchar
       addq.w    #4,A7
       bra       LCDOutMessage_1
LCDOutMessage_3:
       unlk      A6
       rts
; }
; /******************************************************************************
; *subroutine to clear the line by issuing 24 space characters
; *******************************************************************************/
; void LCDClearln(void)
; {
_LCDClearln:
       move.l    D2,-(A7)
; int i ;
; for(i = 0; i < 24; i ++)
       clr.l     D2
LCDClearln_1:
       cmp.l     #24,D2
       bge.s     LCDClearln_3
; LCDOutchar(' ') ;       // write a space char to the LCD display
       pea       32
       jsr       _LCDOutchar
       addq.w    #4,A7
       addq.l    #1,D2
       bra       LCDClearln_1
LCDClearln_3:
       move.l    (A7)+,D2
       rts
; }
; /******************************************************************************
; **  Subroutine to move the LCD cursor to the start of line 1 and clear that line
; *******************************************************************************/
; void LCDLine1Message(char *theMessage)
; {
_LCDLine1Message:
       link      A6,#0
; LCDcommand = 0x80 ;
       move.b    #128,4194336
; Wait3ms();
       jsr       _Wait3ms
; LCDClearln() ;
       jsr       _LCDClearln
; LCDcommand = 0x80 ;
       move.b    #128,4194336
; Wait3ms() ;
       jsr       _Wait3ms
; LCDOutMessage(theMessage) ;
       move.l    8(A6),-(A7)
       jsr       _LCDOutMessage
       addq.w    #4,A7
       unlk      A6
       rts
; }
; /******************************************************************************
; **  Subroutine to move the LCD cursor to the start of line 2 and clear that line
; *******************************************************************************/
; void LCDLine2Message(char *theMessage)
; {
_LCDLine2Message:
       link      A6,#0
; LCDcommand = 0xC0 ;
       move.b    #192,4194336
; Wait3ms();
       jsr       _Wait3ms
; LCDClearln() ;
       jsr       _LCDClearln
; LCDcommand = 0xC0 ;
       move.b    #192,4194336
; Wait3ms() ;
       jsr       _Wait3ms
; LCDOutMessage(theMessage) ;
       move.l    8(A6),-(A7)
       jsr       _LCDOutMessage
       addq.w    #4,A7
       unlk      A6
       rts
; }
; /*********************************************************************************************************************************
; **  IMPORTANT FUNCTION
; **  This function install an exception handler so you can capture and deal with any 68000 exception in your program
; **  You pass it the name of a function in your code that will get called in response to the exception (as the 1st parameter)
; **  and in the 2nd parameter, you pass it the exception number that you want to take over (see 68000 exceptions for details)
; **  Calling this function allows you to deal with Interrupts for example
; ***********************************************************************************************************************************/
; void InstallExceptionHandler( void (*function_ptr)(), int level)
; {
_InstallExceptionHandler:
       link      A6,#-4
; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
       move.l    #184549376,-4(A6)
; RamVectorAddress[level] = (long int *)(function_ptr);                       // install the address of our function into the exception table
       move.l    -4(A6),A0
       move.l    12(A6),D0
       lsl.l     #2,D0
       move.l    8(A6),0(A0,D0.L)
       unlk      A6
       rts
; }
; /******************************************************************************************************************************
; * Start of user program
; ******************************************************************************************************************************/
; void main()
; {
_main:
       link      A6,#-176
       move.l    A2,-(A7)
       lea       _InstallExceptionHandler.L,A2
; unsigned int row, i=0, count=0, counter1=1;
       clr.l     -172(A6)
       clr.l     -168(A6)
       move.l    #1,-164(A6)
; char c, text[150] ;
; unsigned char temp, potential, light;
; char hehe;
; int PassFailFlag = 1;
       move.l    #1,-4(A6)
; i = x = y = z = PortA_Count = 0;
       clr.l     _PortA_Count.L
       clr.l     _z.L
       clr.l     _y.L
       clr.l     _x.L
       clr.l     -172(A6)
; Timer1Count = Timer2Count = Timer3Count = Timer4Count = 0;
       clr.b     _Timer4Count.L
       clr.b     _Timer3Count.L
       clr.b     _Timer2Count.L
       clr.b     _Timer1Count.L
; InstallExceptionHandler(PIA_ISR, 25) ;          // install interrupt handler for PIAs 1 and 2 on level 1 IRQ
       pea       25
       pea       _PIA_ISR.L
       jsr       (A2)
       addq.w    #8,A7
; InstallExceptionHandler(ACIA_ISR, 26) ;		    // install interrupt handler for ACIA on level 2 IRQ
       pea       26
       pea       _ACIA_ISR.L
       jsr       (A2)
       addq.w    #8,A7
; InstallExceptionHandler(Timer_ISR, 27) ;		// install interrupt handler for Timers 1-4 on level 3 IRQ
       pea       27
       pea       _Timer_ISR.L
       jsr       (A2)
       addq.w    #8,A7
; InstallExceptionHandler(Key2PressISR, 28) ;	    // install interrupt handler for Key Press 2 on DE1 board for level 4 IRQ
       pea       28
       pea       _Key2PressISR.L
       jsr       (A2)
       addq.w    #8,A7
; InstallExceptionHandler(Key1PressISR, 29) ;	    // install interrupt handler for Key Press 1 on DE1 board for level 5 IRQ
       pea       29
       pea       _Key1PressISR.L
       jsr       (A2)
       addq.w    #8,A7
; Timer1Data = 0x10;		// program time delay into timers 1-4
       move.b    #16,4194352
; Timer2Data = 0x20;
       move.b    #32,4194356
; Timer3Data = 0x15;
       move.b    #21,4194360
; Timer4Data = 0x25;
       move.b    #37,4194364
; Timer1Control = 3;		// write 3 to control register to Bit0 = 1 (enable interrupt from timers) 1 - 4 and allow them to count Bit 1 = 1
       move.b    #3,4194354
; Timer2Control = 3;
       move.b    #3,4194358
; Timer3Control = 3;
       move.b    #3,4194362
; Timer4Control = 3;
       move.b    #3,4194366
; Init_LCD();             // initialise the LCD display to use a parallel data interface and 2 lines of display
       jsr       _Init_LCD
; Init_RS232() ;          // initialise the RS232 port for use with hyper terminal
       jsr       _Init_RS232
; printf("\nPlaying the Snake Game!\n");
       pea       @m68kus~1_1.L
       jsr       _printf
       addq.w    #4,A7
; //print_at_xy(1, 39, "Matthew");
; //cls();
; //gameOver();
; //set_vga_control_reg(0xF2);
; //cls();
; //drawRect(1,1,79,38, BORDER);
; //gotoxy(10,10);
; //updateScore();
; //gotoxy(30, 30);
; //printf("%X", get_vga_control_reg());
; /*set_vga_control_reg(0xF2);
; hehe = get_vga_control_reg();
; printf("%x\n", hehe);
; set_vga_control_reg(0xF1);
; hehe = get_vga_control_reg();
; printf("%x\n", hehe);*/
; //snake_main();
; while(1){
main_1:
; if (kbhit()) {
       jsr       _kbhit
       tst.l     D0
       beq.s     main_4
; switch (_getch())
       jsr       __getch
       cmp.l     #103,D0
       beq.s     main_8
       bra.s     main_6
main_8:
; {
; case 'g':
; snake_main();
       jsr       _snake_main
main_6:
; default:
; //do nothing
; break;
main_4:
       bra       main_1
; }
; }
; }
; }
; C:\M68KV6.0 - 800BY480\SNAKE_GAME_SOFTWARE\SNAKE.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
; #include <stdio.h>
; #include <stdlib.h>
; #include <limits.h>
; #include <string.h>
; #include "snake.h"
; int score;
; int timer;
; unsigned long long Timer8ISRCount;
; struct
; {
; coord_t xy[SNAKE_LENGTH_LIMIT];
; int length;
; dir_t direction;
; int speed;
; int speed_increase;
; coord_t food;
; } Snake;
; const coord_t screensize = {NUM_VGA_COLUMNS,NUM_VGA_ROWS};
; int waiting_for_direction_to_be_implemented;
; /////////////////////////////////////////////////////////////////////////////////////////////////////
; //
; //
; //                        functions to implement
; //
; //
; /////////////////////////////////////////////////////////////////////////////////////////////////////
; void putcharxy(int x, int y, char ch) {
_putcharxy:
       link      A6,#0
       move.l    D2,-(A7)
; //display on the VGA char ch at column x, line y
; //00F0 0000 - 00F0 FFFF
; unsigned char * pointer = VGA_START;
       move.l    #15728640,D2
; pointer = pointer + (NUM_VGA_COLUMNS * y + x);
       move.l    12(A6),-(A7)
       pea       80
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       add.l     8(A6),D0
       add.l     D0,D2
; *pointer = (unsigned char)ch;
       move.l    D2,A0
       move.b    19(A6),(A0)
       move.l    (A7)+,D2
       unlk      A6
       rts
; }
; void print_at_xy(int x, int y, const char* str) {
_print_at_xy:
       link      A6,#-12
       movem.l   D2/D3,-(A7)
       move.l    8(A6),D2
; //print a string on the VGA, starting at column x, line y. 
; //Wrap around to the next line if we reach the edge of the screen
; int i, j, len;
; char ch;
; len = strlen(str);
       move.l    16(A6),-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.l    D0,-6(A6)
; for(i = 0; i < len; i++){
       clr.l     D3
print_at_xy_1:
       cmp.l     -6(A6),D3
       bge       print_at_xy_3
; ch = str[i];
       move.l    16(A6),A0
       move.b    0(A0,D3.L),-1(A6)
; putcharxy(x, y, ch);
       move.b    -1(A6),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    12(A6),-(A7)
       move.l    D2,-(A7)
       jsr       _putcharxy
       add.w     #12,A7
; if(x == (NUM_VGA_COLUMNS - 1)){
       cmp.l     #79,D2
       bne.s     print_at_xy_4
; x = 0;
       clr.l     D2
; y++;
       addq.l    #1,12(A6)
       bra.s     print_at_xy_5
print_at_xy_4:
; }else{
; x++;
       addq.l    #1,D2
print_at_xy_5:
       addq.l    #1,D3
       bra       print_at_xy_1
print_at_xy_3:
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
; }
; }
; }
; void cls()
; {
_cls:
       movem.l   D2/D3,-(A7)
; //clear the screen
; int x,y;
; for(x = 0; x < NUM_VGA_COLUMNS; x++){
       clr.l     D3
cls_1:
       cmp.l     #80,D3
       bge.s     cls_3
; for(y = 0; y < NUM_VGA_ROWS; y++){
       clr.l     D2
cls_4:
       cmp.l     #40,D2
       bge.s     cls_6
; putcharxy(x, y, ' ');
       pea       32
       move.l    D2,-(A7)
       move.l    D3,-(A7)
       jsr       _putcharxy
       add.w     #12,A7
       addq.l    #1,D2
       bra       cls_4
cls_6:
       addq.l    #1,D3
       bra       cls_1
cls_3:
       movem.l   (A7)+,D2/D3
       rts
; }
; }
; };
; void gotoxy(int x, int y)
; {
_gotoxy:
       link      A6,#-8
; //move the cursor to location column = x, row = y
; unsigned char * x_ptr = VGA_ocrx;
       move.l    #15790098,-8(A6)
; unsigned char * y_ptr = VGA_ocry;
       move.l    #15790114,-4(A6)
; *x_ptr = x;
       move.l    8(A6),D0
       move.l    -8(A6),A0
       move.b    D0,(A0)
; *y_ptr = y;
       move.l    12(A6),D0
       move.l    -4(A6),A0
       move.b    D0,(A0)
       unlk      A6
       rts
; }
; void set_vga_control_reg(char x) 
; {
_set_vga_control_reg:
       link      A6,#-4
; //Set the VGA control (OCTL) value
; unsigned char * octl_ptr = VGA_octl;
       move.l    #15790148,-4(A6)
; *octl_ptr = x;
       move.l    -4(A6),A0
       move.b    11(A6),(A0)
       unlk      A6
       rts
; }
; char get_vga_control_reg()
; {
_get_vga_control_reg:
       link      A6,#-4
; //return the VGA control (OCTL) value
; unsigned char * octl_ptr = VGA_octl;
       move.l    #15790148,-4(A6)
; return *octl_ptr;
       move.l    -4(A6),A0
       move.b    (A0),D0
       unlk      A6
       rts
; }
; int clock() {
_clock:
; //return the current value of a milliseconds counter, with a resolution of 10ms or better
; return (Timer8ISRCount * 10);
       move.l    _Timer8ISRCount.L,-(A7)
       pea       10
       jsr       ULMUL
       move.l    (A7),D0
       addq.w    #8,A7
       rts
; }
; void Timer_IRQ()
; {
_Timer_IRQ:
; if (Timer8Status == 1) {        
       move.b    4194622,D0
       cmp.b     #1,D0
       bne.s     Timer_IRQ_1
; Timer8Control = 3;      	
       move.b    #3,4194622
; PortC = Timer8ISRCount++;
       move.l    _Timer8ISRCount.L,D0
       addq.l    #1,_Timer8ISRCount.L
       move.b    D0,4194308
Timer_IRQ_1:
       rts
; }
; }
; void initTimer(){
_initTimer:
; //initialize parameters for timer
; Timer8ISRCount = 0;
       clr.l     _Timer8ISRCount.L
; InstallExceptionHandler(Timer_IRQ, 30);
       pea       30
       pea       _Timer_IRQ.L
       jsr       _InstallExceptionHandler
       addq.w    #8,A7
; Timer8Data = 0x03;
       move.b    #3,4194620
; Timer8Control = 3;
       move.b    #3,4194622
       rts
; }
; void delay_ms(int num_ms) {
_delay_ms:
       link      A6,#0
       move.l    D2,-(A7)
; //delay a certain number of milliseconds
; int i;
; for(i = 0; i < 75 * num_ms; i++);
       clr.l     D2
delay_ms_1:
       move.l    8(A6),-(A7)
       pea       75
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       cmp.l     D0,D2
       bge.s     delay_ms_3
       addq.l    #1,D2
       bra       delay_ms_1
delay_ms_3:
       move.l    (A7)+,D2
       unlk      A6
       rts
; }
; void gameOver()
; {
_gameOver:
       link      A6,#-8
       movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
       lea       _set_vga_control_reg.L,A3
       lea       -4(A6),A4
       lea       _putcharxy.L,A5
; int i, j, z, len;
; int x, y;
; char ch;
; char score_string[3];
; const char* str = "Game Over!";
       lea       @snake_1.L,A0
       move.l    A0,D7
; x = 35;
       moveq     #35,D2
; y = 19;
       moveq     #19,D4
; cls();
       jsr       _cls
; set_vga_control_reg(0xE4);
       pea       228
       jsr       (A3)
       addq.w    #4,A7
; gotoxy(x+1,y); //Commented out due to bug, it breaks entire game
       move.l    D4,-(A7)
       move.l    D2,D1
       addq.l    #1,D1
       move.l    D1,-(A7)
       jsr       _gotoxy
       addq.w    #8,A7
; len = strlen(str);
       move.l    D7,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.l    D0,D6
; for(i = 0; i < len; i++){
       clr.l     D3
gameOver_1:
       cmp.l     D6,D3
       bge       gameOver_3
; ch = str[i];
       move.l    D7,A0
       move.b    0(A0,D3.L),D5
; putcharxy(x, y, ch);
       ext.w     D5
       ext.l     D5
       move.l    D5,-(A7)
       move.l    D4,-(A7)
       move.l    D2,-(A7)
       jsr       (A5)
       add.w     #12,A7
; delay_ms(100);
       pea       100
       jsr       _delay_ms
       addq.w    #4,A7
; gotoxy(x+1,y); //Commented out due to bug, it breaks entire game
       move.l    D4,-(A7)
       move.l    D2,D1
       addq.l    #1,D1
       move.l    D1,-(A7)
       jsr       _gotoxy
       addq.w    #8,A7
; if(x == (NUM_VGA_COLUMNS - 1)){
       cmp.l     #79,D2
       bne.s     gameOver_4
; x = 0;
       clr.l     D2
; y++;
       addq.l    #1,D4
       bra.s     gameOver_5
gameOver_4:
; }else{
; x++;
       addq.l    #1,D2
gameOver_5:
       addq.l    #1,D3
       bra       gameOver_1
gameOver_3:
; }
; }
; str = "Score: ";
       lea       @snake_2.L,A0
       move.l    A0,D7
; x = 35;
       moveq     #35,D2
; y = 20;
       moveq     #20,D4
; len = strlen(str);
       move.l    D7,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.l    D0,D6
; for(i = 0; i < len; i++){
       clr.l     D3
gameOver_6:
       cmp.l     D6,D3
       bge       gameOver_8
; ch = str[i];
       move.l    D7,A0
       move.b    0(A0,D3.L),D5
; putcharxy(x, y, ch);
       ext.w     D5
       ext.l     D5
       move.l    D5,-(A7)
       move.l    D4,-(A7)
       move.l    D2,-(A7)
       jsr       (A5)
       add.w     #12,A7
; delay_ms(100);
       pea       100
       jsr       _delay_ms
       addq.w    #4,A7
; gotoxy(x+1,y); //Commented out due to bug, it breaks entire game
       move.l    D4,-(A7)
       move.l    D2,D1
       addq.l    #1,D1
       move.l    D1,-(A7)
       jsr       _gotoxy
       addq.w    #8,A7
; if(x == (NUM_VGA_COLUMNS - 1)){
       cmp.l     #79,D2
       bne.s     gameOver_9
; x = 0;
       clr.l     D2
; y++;
       addq.l    #1,D4
       bra.s     gameOver_10
gameOver_9:
; }else{
; x++;
       addq.l    #1,D2
gameOver_10:
       addq.l    #1,D3
       bra       gameOver_6
gameOver_8:
; }
; }
; sprintf(score_string, "%d", score);
       move.l    _score.L,-(A7)
       pea       @snake_3.L
       move.l    A4,-(A7)
       jsr       _sprintf
       add.w     #12,A7
; len = strlen(score_string);
       move.l    A4,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.l    D0,D6
; for(i = 0; i < len; i++){
       clr.l     D3
gameOver_11:
       cmp.l     D6,D3
       bge       gameOver_13
; ch = score_string[i];
       move.b    0(A4,D3.L),D5
; putcharxy(x, y, ch);
       ext.w     D5
       ext.l     D5
       move.l    D5,-(A7)
       move.l    D4,-(A7)
       move.l    D2,-(A7)
       jsr       (A5)
       add.w     #12,A7
; delay_ms(100);
       pea       100
       jsr       _delay_ms
       addq.w    #4,A7
; gotoxy(x+1,y); //Commented out due to bug, it breaks entire game
       move.l    D4,-(A7)
       move.l    D2,D1
       addq.l    #1,D1
       move.l    D1,-(A7)
       jsr       _gotoxy
       addq.w    #8,A7
; if(x == (NUM_VGA_COLUMNS - 1)){
       cmp.l     #79,D2
       bne.s     gameOver_14
; x = 0;
       clr.l     D2
; y++;
       addq.l    #1,D4
       bra.s     gameOver_15
gameOver_14:
; }else{
; x++;
       addq.l    #1,D2
gameOver_15:
       addq.l    #1,D3
       bra       gameOver_11
gameOver_13:
; }
; }
; while(!(kbhit())){
gameOver_16:
       jsr       _kbhit
       tst.l     D0
       bne       gameOver_18
; for(z = 0; z < 6; z++){
       move.w    #0,A2
gameOver_19:
       move.l    A2,D0
       cmp.l     #6,D0
       bge       gameOver_21
; if(z == 0){
       move.l    A2,D0
       bne.s     gameOver_22
; set_vga_control_reg(0xE1);
       pea       225
       jsr       (A3)
       addq.w    #4,A7
       bra       gameOver_33
gameOver_22:
; }else if(z == 1){
       move.l    A2,D0
       cmp.l     #1,D0
       bne.s     gameOver_24
; set_vga_control_reg(0xE3);
       pea       227
       jsr       (A3)
       addq.w    #4,A7
       bra       gameOver_33
gameOver_24:
; }else if(z == 2){
       move.l    A2,D0
       cmp.l     #2,D0
       bne.s     gameOver_26
; set_vga_control_reg(0xE4);
       pea       228
       jsr       (A3)
       addq.w    #4,A7
       bra       gameOver_33
gameOver_26:
; }else if(z == 3){
       move.l    A2,D0
       cmp.l     #3,D0
       bne.s     gameOver_28
; set_vga_control_reg(0xE5);
       pea       229
       jsr       (A3)
       addq.w    #4,A7
       bra       gameOver_33
gameOver_28:
; }else if(z == 4){
       move.l    A2,D0
       cmp.l     #4,D0
       bne.s     gameOver_30
; set_vga_control_reg(0xE6);
       pea       230
       jsr       (A3)
       addq.w    #4,A7
       bra.s     gameOver_33
gameOver_30:
; }else if(z == 5){
       move.l    A2,D0
       cmp.l     #5,D0
       bne.s     gameOver_32
; set_vga_control_reg(0xE7);
       pea       231
       jsr       (A3)
       addq.w    #4,A7
       bra.s     gameOver_33
gameOver_32:
; }else{
; set_vga_control_reg(0xE2);
       pea       226
       jsr       (A3)
       addq.w    #4,A7
gameOver_33:
; }
; str = "Game Over!";
       lea       @snake_1.L,A0
       move.l    A0,D7
; x = 35;
       moveq     #35,D2
; y = 19;
       moveq     #19,D4
; cls();
       jsr       _cls
; len = strlen(str);
       move.l    D7,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.l    D0,D6
; for(i = 0; i < len; i++){
       clr.l     D3
gameOver_34:
       cmp.l     D6,D3
       bge       gameOver_36
; ch = str[i];
       move.l    D7,A0
       move.b    0(A0,D3.L),D5
; putcharxy(x, y, ch);
       ext.w     D5
       ext.l     D5
       move.l    D5,-(A7)
       move.l    D4,-(A7)
       move.l    D2,-(A7)
       jsr       (A5)
       add.w     #12,A7
; if(x == (NUM_VGA_COLUMNS - 1)){
       cmp.l     #79,D2
       bne.s     gameOver_37
; x = 0;
       clr.l     D2
; y++;
       addq.l    #1,D4
       bra.s     gameOver_38
gameOver_37:
; }else{
; x++;
       addq.l    #1,D2
gameOver_38:
       addq.l    #1,D3
       bra       gameOver_34
gameOver_36:
; }
; }
; str = "Score: ";
       lea       @snake_2.L,A0
       move.l    A0,D7
; x = 35;
       moveq     #35,D2
; y = 20;
       moveq     #20,D4
; len = strlen(str);
       move.l    D7,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.l    D0,D6
; for(i = 0; i < len; i++){
       clr.l     D3
gameOver_39:
       cmp.l     D6,D3
       bge       gameOver_41
; ch = str[i];
       move.l    D7,A0
       move.b    0(A0,D3.L),D5
; putcharxy(x, y, ch);
       ext.w     D5
       ext.l     D5
       move.l    D5,-(A7)
       move.l    D4,-(A7)
       move.l    D2,-(A7)
       jsr       (A5)
       add.w     #12,A7
; if(x == (NUM_VGA_COLUMNS - 1)){
       cmp.l     #79,D2
       bne.s     gameOver_42
; x = 0;
       clr.l     D2
; y++;
       addq.l    #1,D4
       bra.s     gameOver_43
gameOver_42:
; }else{
; x++;
       addq.l    #1,D2
gameOver_43:
       addq.l    #1,D3
       bra       gameOver_39
gameOver_41:
; }
; }
; sprintf(score_string, "%d", score);
       move.l    _score.L,-(A7)
       pea       @snake_3.L
       move.l    A4,-(A7)
       jsr       _sprintf
       add.w     #12,A7
; len = strlen(score_string);
       move.l    A4,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.l    D0,D6
; for(i = 0; i < len; i++){
       clr.l     D3
gameOver_44:
       cmp.l     D6,D3
       bge       gameOver_46
; ch = score_string[i];
       move.b    0(A4,D3.L),D5
; putcharxy(x, y, ch);
       ext.w     D5
       ext.l     D5
       move.l    D5,-(A7)
       move.l    D4,-(A7)
       move.l    D2,-(A7)
       jsr       (A5)
       add.w     #12,A7
; if(x == (NUM_VGA_COLUMNS - 1)){
       cmp.l     #79,D2
       bne.s     gameOver_47
; x = 0;
       clr.l     D2
; y++;
       addq.l    #1,D4
       bra.s     gameOver_48
gameOver_47:
; }else{
; x++;
       addq.l    #1,D2
gameOver_48:
       addq.l    #1,D3
       bra       gameOver_44
gameOver_46:
; }
; }
; gotoxy(x+1,y); //Commented out due to bug, it breaks entire game
       move.l    D4,-(A7)
       move.l    D2,D1
       addq.l    #1,D1
       move.l    D1,-(A7)
       jsr       _gotoxy
       addq.w    #8,A7
; delay_ms(250);
       pea       250
       jsr       _delay_ms
       addq.w    #4,A7
       addq.w    #1,A2
       bra       gameOver_19
gameOver_21:
       bra       gameOver_16
gameOver_18:
; }
; }
; set_vga_control_reg(0xF2);
       pea       242
       jsr       (A3)
       addq.w    #4,A7
       movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
       unlk      A6
       rts
; }
; void updateScore() ///////////////////////////////////////
; {
_updateScore:
       link      A6,#-16
       movem.l   D2/D3/D4/A2,-(A7)
       lea       -4(A6),A2
; //print the score at the bottom of the screen
; int i, x, y, len, offset;
; char ch;
; char score_string[3];
; x = 1;
       moveq     #1,D2
; y = 39;
       moveq     #39,D4
; print_at_xy(x, y, "Score: ");
       pea       @snake_2.L
       move.l    D4,-(A7)
       move.l    D2,-(A7)
       jsr       _print_at_xy
       add.w     #12,A7
; sprintf(score_string, "%d", score);
       move.l    _score.L,-(A7)
       pea       @snake_3.L
       move.l    A2,-(A7)
       jsr       _sprintf
       add.w     #12,A7
; len = strlen(score_string);
       move.l    A2,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.l    D0,-14(A6)
; offset = strlen("Score: ");
       pea       @snake_2.L
       jsr       _strlen
       addq.w    #4,A7
       move.l    D0,-10(A6)
; x+=offset;
       move.l    -10(A6),D0
       add.l     D0,D2
; for(i = 0; i < len; i++){
       clr.l     D3
updateScore_1:
       cmp.l     -14(A6),D3
       bge       updateScore_3
; ch = score_string[i];
       move.b    0(A2,D3.L),-5(A6)
; putcharxy(x, y, ch);
       move.b    -5(A6),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    D4,-(A7)
       move.l    D2,-(A7)
       jsr       _putcharxy
       add.w     #12,A7
; if(x == (NUM_VGA_COLUMNS - 1)){
       cmp.l     #79,D2
       bne.s     updateScore_4
; x = 0;
       clr.l     D2
; y++;
       addq.l    #1,D4
       bra.s     updateScore_5
updateScore_4:
; }else{
; x++;
       addq.l    #1,D2
updateScore_5:
       addq.l    #1,D3
       bra       updateScore_1
updateScore_3:
       movem.l   (A7)+,D2/D3/D4/A2
       unlk      A6
       rts
; }
; }
; }
; void drawRect(int x, int y, int x2, int y2, char ch)
; {
_drawRect:
       link      A6,#0
       movem.l   D2/D3/A2,-(A7)
       move.b    27(A6),D3
       ext.w     D3
       ext.l     D3
       lea       _putcharxy.L,A2
; //draws a rectangle. Left top corner: (x1,y1) length of sides = x2,y2
; //drawRect(1,1,79,38, BORDER);
; int i;
; set_vga_control_reg(0xB2);
       pea       178
       jsr       _set_vga_control_reg
       addq.w    #4,A7
; for(i = y; i <= y2; i++){
       move.l    12(A6),D2
drawRect_1:
       cmp.l     20(A6),D2
       bgt       drawRect_3
; putcharxy(x, i, ch);
       ext.w     D3
       ext.l     D3
       move.l    D3,-(A7)
       move.l    D2,-(A7)
       move.l    8(A6),-(A7)
       jsr       (A2)
       add.w     #12,A7
; putcharxy(x2, i, ch);
       ext.w     D3
       ext.l     D3
       move.l    D3,-(A7)
       move.l    D2,-(A7)
       move.l    16(A6),-(A7)
       jsr       (A2)
       add.w     #12,A7
       addq.l    #1,D2
       bra       drawRect_1
drawRect_3:
; }
; for(i = x; i <= x2; i++){
       move.l    8(A6),D2
drawRect_4:
       cmp.l     16(A6),D2
       bgt       drawRect_6
; putcharxy(i, y, ch);
       ext.w     D3
       ext.l     D3
       move.l    D3,-(A7)
       move.l    12(A6),-(A7)
       move.l    D2,-(A7)
       jsr       (A2)
       add.w     #12,A7
; putcharxy(i, y2, ch);
       ext.w     D3
       ext.l     D3
       move.l    D3,-(A7)
       move.l    20(A6),-(A7)
       move.l    D2,-(A7)
       jsr       (A2)
       add.w     #12,A7
       addq.l    #1,D2
       bra       drawRect_4
drawRect_6:
       movem.l   (A7)+,D2/D3/A2
       unlk      A6
       rts
; }
; }
; /////////////////////////////////////////////////////////////////////////////
; //
; //  End functions you need to implement
; //
; /////////////////////////////////////////////////////////////////////////////
; void initSnake()
; {
_initSnake:
; Snake.speed          = INITIAL_SNAKE_SPEED ;         
       move.l    #2,_Snake+16390.L
; Snake.speed_increase = SNAKE_SPEED_INCREASE;
       move.l    #1,_Snake+16394.L
       rts
; }
; void drawSnake()
; {
_drawSnake:
       movem.l   D2/A2,-(A7)
       lea       _Snake.L,A2
; int i;
; for(i = 0; i < Snake.length; i++)
       clr.l     D2
drawSnake_1:
       cmp.l     16384(A2),D2
       bge.s     drawSnake_3
; {
; putcharxy(Snake.xy[i].x, Snake.xy[i].y,SNAKE);
       pea       83
       move.l    D2,D1
       lsl.l     #3,D1
       lea       0(A2,D1.L),A0
       move.l    4(A0),-(A7)
       move.l    D2,D1
       lsl.l     #3,D1
       move.l    0(A2,D1.L),-(A7)
       jsr       _putcharxy
       add.w     #12,A7
       addq.l    #1,D2
       bra       drawSnake_1
drawSnake_3:
       movem.l   (A7)+,D2/A2
       rts
; }
; }
; void drawFood()
; {
_drawFood:
; putcharxy(Snake.food.x, Snake.food.y,FOOD);
       pea       64
       move.l    _Snake+16402.L,-(A7)
       move.l    _Snake+16398.L,-(A7)
       jsr       _putcharxy
       add.w     #12,A7
       rts
; }
; void moveSnake()//remove tail, move array, add new head based on direction
; {
_moveSnake:
       movem.l   D2/D3/D4/A2,-(A7)
       lea       _Snake.L,A2
; int i;
; int x;
; int y;
; x = Snake.xy[0].x;
       move.l    (A2),D3
; y = Snake.xy[0].y;
       move.l    4(A2),D2
; //saves initial head for direction determination
; putcharxy(Snake.xy[Snake.length-1].x, Snake.xy[Snake.length-1].y,' ');
       pea       32
       move.l    16384(A2),D1
       subq.l    #1,D1
       lsl.l     #3,D1
       lea       0(A2,D1.L),A0
       move.l    4(A0),-(A7)
       move.l    16384(A2),D1
       subq.l    #1,D1
       lsl.l     #3,D1
       move.l    0(A2,D1.L),-(A7)
       jsr       _putcharxy
       add.w     #12,A7
; for(i = Snake.length; i > 1; i--)
       move.l    16384(A2),D4
moveSnake_1:
       cmp.l     #1,D4
       ble       moveSnake_3
; {
; Snake.xy[i-1] = Snake.xy[i-2];
       move.l    A2,D0
       move.l    D4,D1
       subq.l    #1,D1
       lsl.l     #3,D1
       add.l     D1,D0
       move.l    D0,A0
       move.l    A2,D0
       move.l    D4,D1
       subq.l    #2,D1
       lsl.l     #3,D1
       add.l     D1,D0
       move.l    D0,A1
       move.l    (A1)+,(A0)+
       move.l    (A1)+,(A0)+
       subq.l    #1,D4
       bra       moveSnake_1
moveSnake_3:
; }
; //moves the snake array to the right
; switch (Snake.direction)
       move.w    16388(A2),D0
       ext.l     D0
       cmp.l     #4,D0
       bhs       moveSnake_4
       asl.l     #1,D0
       move.w    moveSnake_6(PC,D0.L),D0
       jmp       moveSnake_6(PC,D0.W)
moveSnake_6:
       dc.w      moveSnake_7-moveSnake_6
       dc.w      moveSnake_8-moveSnake_6
       dc.w      moveSnake_9-moveSnake_6
       dc.w      moveSnake_10-moveSnake_6
moveSnake_7:
; {
; case north:
; if (y > 0)  { y--; }
       cmp.l     #0,D2
       ble.s     moveSnake_12
       subq.l    #1,D2
moveSnake_12:
; break;
       bra.s     moveSnake_5
moveSnake_8:
; case south:
; if (y < (NUM_VGA_ROWS-1)) { y++; }
       cmp.l     #39,D2
       bge.s     moveSnake_14
       addq.l    #1,D2
moveSnake_14:
; break;
       bra.s     moveSnake_5
moveSnake_9:
; case west:
; if (x > 0) { x--; }
       cmp.l     #0,D3
       ble.s     moveSnake_16
       subq.l    #1,D3
moveSnake_16:
; break;
       bra.s     moveSnake_5
moveSnake_10:
; case east:
; if (x < (NUM_VGA_COLUMNS-1))  { x++; }
       cmp.l     #79,D3
       bge.s     moveSnake_18
       addq.l    #1,D3
moveSnake_18:
; break;
       bra       moveSnake_5
moveSnake_4:
; default:
; break;
moveSnake_5:
; }
; //adds new snake head
; Snake.xy[0].x = x;
       move.l    D3,(A2)
; Snake.xy[0].y = y;
       move.l    D2,4(A2)
; waiting_for_direction_to_be_implemented = 0;
       clr.l     _waiting_for_direction_to_be_imp.L
; putcharxy(Snake.xy[0].x,Snake.xy[0].y,SNAKE);
       pea       83
       move.l    4(A2),-(A7)
       move.l    (A2),-(A7)
       jsr       _putcharxy
       add.w     #12,A7
       movem.l   (A7)+,D2/D3/D4/A2
       rts
; }
; /* Compute x mod y using binary long division. */
; int mod_bld(int x, int y)
; {
_mod_bld:
       link      A6,#0
       movem.l   D2/D3,-(A7)
; int modulus = x, divisor = y;
       move.l    8(A6),D3
       move.l    12(A6),D2
; while (divisor <= modulus && divisor <= 16384)
mod_bld_1:
       cmp.l     D3,D2
       bgt.s     mod_bld_3
       cmp.l     #16384,D2
       bgt.s     mod_bld_3
; divisor <<= 1;
       asl.l     #1,D2
       bra       mod_bld_1
mod_bld_3:
; while (modulus >= y) {
mod_bld_4:
       cmp.l     12(A6),D3
       blt.s     mod_bld_6
; while (divisor > modulus)
mod_bld_7:
       cmp.l     D3,D2
       ble.s     mod_bld_9
; divisor >>= 1;
       asr.l     #1,D2
       bra       mod_bld_7
mod_bld_9:
; modulus -= divisor;
       sub.l     D2,D3
       bra       mod_bld_4
mod_bld_6:
; }
; return modulus;
       move.l    D3,D0
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
; }
; void generateFood()
; {
_generateFood:
       movem.l   D2/D3/A2,-(A7)
       lea       _Snake.L,A2
; int bol;
; int i;
; static int firsttime = 1;
; //removes last food
; if (!firsttime) {
       tst.l     generateFood_firsttime.L
       bne.s     generateFood_2
; putcharxy(Snake.food.x,Snake.food.y,' ');
       pea       32
       move.l    16402(A2),-(A7)
       move.l    16398(A2),-(A7)
       jsr       _putcharxy
       add.w     #12,A7
       bra.s     generateFood_3
generateFood_2:
; } else {
; firsttime = 0;
       clr.l     generateFood_firsttime.L
generateFood_3:
; }
; do
; {
generateFood_4:
; bol = 0;
       clr.l     D3
; //pseudo-randomly set food location
; //use clock instead of random function that is
; //not implemented in ide68k
; Snake.food.x = 3+ mod_bld(((clock()& 0xFFF0) >> 4),screensize.x-6); 
       moveq     #3,D0
       ext.w     D0
       ext.l     D0
       move.l    D0,-(A7)
       move.l    _screensize.L,D0
       subq.l    #6,D0
       move.l    D0,-(A7)
       move.l    D1,-(A7)
       jsr       _clock
       move.l    (A7)+,D1
       and.l     #65520,D0
       asr.l     #4,D0
       move.l    D0,-(A7)
       jsr       _mod_bld
       addq.w    #8,A7
       move.l    D0,D1
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,16398(A2)
; Snake.food.y = 3+ mod_bld(clock()& 0xFFFF,screensize.y-6); 
       moveq     #3,D0
       ext.w     D0
       ext.l     D0
       move.l    D0,-(A7)
       move.l    D0,-(A7)
       move.l    _screensize+4.L,D0
       subq.l    #6,D0
       move.l    D0,-(A7)
       move.l    D1,-(A7)
       jsr       _clock
       move.l    (A7)+,D1
       and.l     #65535,D0
       move.l    D0,-(A7)
       jsr       _mod_bld
       addq.w    #8,A7
       move.l    D0,D1
       move.l    (A7)+,D0
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,16402(A2)
; for(i = 0; i < Snake.length; i++)
       clr.l     D2
generateFood_6:
       cmp.l     16384(A2),D2
       bge.s     generateFood_8
; {
; if (Snake.food.x == Snake.xy[i].x && Snake.food.y == Snake.xy[i].y) {
       move.l    D2,D0
       lsl.l     #3,D0
       move.l    16398(A2),D1
       cmp.l     0(A2,D0.L),D1
       bne.s     generateFood_9
       move.l    D2,D0
       lsl.l     #3,D0
       lea       0(A2,D0.L),A0
       move.l    16402(A2),D0
       cmp.l     4(A0),D0
       bne.s     generateFood_9
; bol = 1; //resets loop if collision detected
       moveq     #1,D3
generateFood_9:
       addq.l    #1,D2
       bra       generateFood_6
generateFood_8:
       tst.l     D3
       bne       generateFood_4
; }
; }
; } while (bol);//while colliding with snake
; drawFood();
       jsr       _drawFood
       movem.l   (A7)+,D2/D3/A2
       rts
; }
; int getKeypress()
; {
_getKeypress:
       movem.l   A2/A3,-(A7)
       lea       _Snake.L,A2
       lea       _waiting_for_direction_to_be_imp.L,A3
; if (kbhit()) {
       jsr       _kbhit
       tst.l     D0
       beq       getKeypress_4
; switch (_getch())
       jsr       __getch
       cmp.l     #113,D0
       beq       getKeypress_10
       bgt.s     getKeypress_12
       cmp.l     #100,D0
       beq       getKeypress_8
       bgt.s     getKeypress_13
       cmp.l     #97,D0
       beq       getKeypress_7
       bra       getKeypress_3
getKeypress_13:
       cmp.l     #112,D0
       beq       getKeypress_9
       bra       getKeypress_3
getKeypress_12:
       cmp.l     #119,D0
       beq.s     getKeypress_5
       bgt       getKeypress_3
       cmp.l     #115,D0
       beq.s     getKeypress_6
       bra       getKeypress_3
getKeypress_5:
; {
; case 'w':
; if (!waiting_for_direction_to_be_implemented && (Snake.direction != south)){
       tst.l     (A3)
       bne.s     getKeypress_14
       move.w    16388(A2),D0
       ext.l     D0
       cmp.l     #1,D0
       beq.s     getKeypress_14
; Snake.direction = north;
       clr.w     16388(A2)
; waiting_for_direction_to_be_implemented = 1;
       move.l    #1,(A3)
getKeypress_14:
; }
; break;
       bra       getKeypress_4
getKeypress_6:
; case 's':
; if (!waiting_for_direction_to_be_implemented && (Snake.direction != north)){
       tst.l     (A3)
       bne.s     getKeypress_16
       move.w    16388(A2),D0
       ext.l     D0
       tst.l     D0
       beq.s     getKeypress_16
; Snake.direction = south;
       move.w    #1,16388(A2)
; waiting_for_direction_to_be_implemented = 1;
       move.l    #1,(A3)
getKeypress_16:
; }
; break;
       bra       getKeypress_4
getKeypress_7:
; case 'a':
; if (!waiting_for_direction_to_be_implemented && (Snake.direction != east)){
       tst.l     (A3)
       bne.s     getKeypress_18
       move.w    16388(A2),D0
       ext.l     D0
       cmp.l     #3,D0
       beq.s     getKeypress_18
; Snake.direction = west;
       move.w    #2,16388(A2)
; waiting_for_direction_to_be_implemented = 1;
       move.l    #1,(A3)
getKeypress_18:
; }
; break;
       bra.s     getKeypress_4
getKeypress_8:
; case 'd':
; if (!waiting_for_direction_to_be_implemented && (Snake.direction != west)){
       tst.l     (A3)
       bne.s     getKeypress_20
       move.w    16388(A2),D0
       ext.l     D0
       cmp.l     #2,D0
       beq.s     getKeypress_20
; Snake.direction = east;
       move.w    #3,16388(A2)
; waiting_for_direction_to_be_implemented = 1;
       move.l    #1,(A3)
getKeypress_20:
; }
; break;
       bra.s     getKeypress_4
getKeypress_9:
; case 'p':
; _getch();
       jsr       __getch
; break;
       bra.s     getKeypress_4
getKeypress_10:
; case 'q':
; gameOver();
       jsr       _gameOver
; return 0;
       clr.l     D0
       bra.s     getKeypress_22
getKeypress_3:
; default:
; //do nothing
; break;
getKeypress_4:
; }
; }
; return 1;
       moveq     #1,D0
getKeypress_22:
       movem.l   (A7)+,A2/A3
       rts
; }
; int detectCollision()//with self -> game over, food -> delete food add score (only head checks)
; // returns 0 for no collision, 1 for game over
; {
_detectCollision:
       movem.l   D2/D3/A2,-(A7)
       lea       _Snake.L,A2
; int i;
; int retval;
; retval = 0;
       clr.l     D3
; if (Snake.xy[0].x == Snake.food.x && Snake.xy[0].y == Snake.food.y) {
       move.l    (A2),D0
       cmp.l     16398(A2),D0
       bne       detectCollision_1
       move.l    4(A2),D0
       cmp.l     16402(A2),D0
       bne       detectCollision_1
; //detect collision with food
; Snake.length++;
       move.l    A2,D0
       add.l     #16384,D0
       move.l    D0,A0
       addq.l    #1,(A0)
; Snake.xy[Snake.length-1].x = Snake.xy[Snake.length-2].x;
       move.l    16384(A2),D0
       subq.l    #2,D0
       lsl.l     #3,D0
       move.l    16384(A2),D1
       subq.l    #1,D1
       lsl.l     #3,D1
       move.l    0(A2,D0.L),0(A2,D1.L)
; Snake.xy[Snake.length-1].y = Snake.xy[Snake.length-2].y;
       move.l    16384(A2),D0
       subq.l    #2,D0
       lsl.l     #3,D0
       lea       0(A2,D0.L),A0
       move.l    16384(A2),D0
       subq.l    #1,D0
       lsl.l     #3,D0
       lea       0(A2,D0.L),A1
       move.l    4(A0),4(A1)
; Snake.speed = Snake.speed + Snake.speed_increase;
       move.l    16390(A2),D0
       add.l     16394(A2),D0
       move.l    D0,16390(A2)
; generateFood();
       jsr       _generateFood
; score++;
       addq.l    #1,_score.L
; updateScore();
       jsr       _updateScore
detectCollision_1:
; }
; for(i = 2; i < Snake.length; i++)
       moveq     #2,D2
detectCollision_3:
       cmp.l     16384(A2),D2
       bge.s     detectCollision_5
; {
; //detects collision of the head
; if (Snake.xy[i].x == Snake.xy[0].x && Snake.xy[i].y == Snake.xy[0].y) {
       move.l    D2,D0
       lsl.l     #3,D0
       move.l    0(A2,D0.L),D1
       cmp.l     (A2),D1
       bne.s     detectCollision_6
       move.l    D2,D0
       lsl.l     #3,D0
       lea       0(A2,D0.L),A0
       move.l    4(A0),D0
       cmp.l     4(A2),D0
       bne.s     detectCollision_6
; gameOver();
       jsr       _gameOver
; retval = 1;
       moveq     #1,D3
detectCollision_6:
       addq.l    #1,D2
       bra       detectCollision_3
detectCollision_5:
; }
; }
; if (Snake.xy[0].x == 1 || Snake.xy[0].x == (screensize.x-1) || Snake.xy[0].y == 1 || Snake.xy[0].y == (screensize.y-2)) {
       move.l    (A2),D0
       cmp.l     #1,D0
       beq.s     detectCollision_10
       move.l    _screensize.L,D0
       subq.l    #1,D0
       cmp.l     (A2),D0
       beq.s     detectCollision_10
       move.l    4(A2),D0
       cmp.l     #1,D0
       beq.s     detectCollision_10
       move.l    _screensize+4.L,D0
       subq.l    #2,D0
       cmp.l     4(A2),D0
       bne.s     detectCollision_8
detectCollision_10:
; //collision with wall
; gameOver();
       jsr       _gameOver
; retval = 1;
       moveq     #1,D3
detectCollision_8:
; }
; return retval;
       move.l    D3,D0
       movem.l   (A7)+,D2/D3/A2
       rts
; }
; void mainloop()
; {
_mainloop:
       link      A6,#-4
       move.l    D2,-(A7)
; int current_time;
; int got_game_over;
; while(1){    
mainloop_1:
; if (!getKeypress()) {
       jsr       _getKeypress
       tst.l     D0
       bne.s     mainloop_4
; return;
       bra       mainloop_3
mainloop_4:
; }
; current_time = clock();
       jsr       _clock
       move.l    D0,D2
; if (current_time >= ((MILLISECONDS_PER_SEC/Snake.speed) + timer)) {
       pea       1000
       move.l    _Snake+16390.L,-(A7)
       jsr       LDIV
       move.l    (A7),D0
       addq.w    #8,A7
       add.l     _timer.L,D0
       cmp.l     D0,D2
       blt.s     mainloop_7
; moveSnake(); //draws new snake position
       jsr       _moveSnake
; got_game_over = detectCollision();
       jsr       _detectCollision
       move.l    D0,-4(A6)
; if (got_game_over) {
       tst.l     -4(A6)
       beq.s     mainloop_9
; break;
       bra.s     mainloop_3
mainloop_9:
; }
; timer = current_time;
       move.l    D2,_timer.L
mainloop_7:
       bra       mainloop_1
mainloop_3:
       move.l    (A7)+,D2
       unlk      A6
       rts
; }
; }
; }
; void snake_main()
; {
_snake_main:
       move.l    A2,-(A7)
       lea       _Snake.L,A2
; score = 0;
       clr.l     _score.L
; waiting_for_direction_to_be_implemented = 0;
       clr.l     _waiting_for_direction_to_be_imp.L
; Snake.xy[0].x = 4;
       move.l    #4,(A2)
; Snake.xy[0].y = 3;
       move.l    #3,4(A2)
; Snake.xy[1].x = 3;
       move.l    #3,8(A2)
; Snake.xy[1].y = 3;
       move.l    #3,12(A2)
; Snake.xy[2].x = 2;
       move.l    #2,16(A2)
; Snake.xy[2].y = 3;
       move.l    #3,20(A2)
; Snake.length = INITIAL_SNAKE_LENGTH;
       move.l    #3,16384(A2)
; Snake.direction = east;
       move.w    #3,16388(A2)
; initSnake();
       jsr       _initSnake
; initTimer();
       jsr       _initTimer
; cls();
       jsr       _cls
; drawRect(1,1,screensize.x-1,screensize.y-2, BORDER);
       pea       35
       move.l    _screensize+4.L,D1
       subq.l    #2,D1
       move.l    D1,-(A7)
       move.l    _screensize.L,D1
       subq.l    #1,D1
       move.l    D1,-(A7)
       pea       1
       pea       1
       jsr       _drawRect
       add.w     #20,A7
; drawSnake();
       jsr       _drawSnake
; generateFood();
       jsr       _generateFood
; drawFood();
       jsr       _drawFood
; timer = clock();
       jsr       _clock
       move.l    D0,_timer.L
; updateScore();
       jsr       _updateScore
; mainloop();
       jsr       _mainloop
       move.l    (A7)+,A2
       rts
; }
_printf:
       link      A6,#-4
       movem.l   D2,-(A7)
       lea       8(A6),A0
       addq.w    #4,A0
       move.l    A0,D2
       move.l    D2,-(A7)
       move.l    8(A6),-(A7)
       clr.l     -(A7)
       bsr       _vsprintf
       add.w     #12,A7
       move.l    D0,-4(A6)
       clr.l     D2
       move.l    -4(A6),D0
       movem.l   (A7)+,D2
       unlk      A6
       rts
ULDIV:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       bra.s   ldiv_3
LDIV:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       tst.l   D0
       bpl.s   ldiv_1
       neg.l   D0
       tst.l   D1
       bpl.s   ldiv_2
       neg.l   D1
       bsr.s   dodiv
       neg.l   D1
       bra.s   ldiv_4
ldiv_1:
       tst.l   D1
       bpl.s   ldiv_3
       neg.l   D1
       bsr.s   dodiv
       neg.l   D0
       bra.s   ldiv_4
ldiv_2:
       bsr.s   dodiv
       neg.l   D0
       neg.l   D1
       bra.s   ldiv_4
ldiv_3:
       bsr.s   dodiv
ldiv_4:
       move.l  D0,8(A6)
       move.l  D1,12(A6)
       movem.l (A7)+,D0/D1
       unlk    A6
       rts
dodiv:
       cmpi.l  #$FFFF,D1
       bhi.s   dodiv_2
       cmpi.l  #$FFFF,D0
       bhi.s   dodiv_1
       divu    D1,D0
       move.l  D0,D1
       clr.w   D1
       swap    D1
       andi.l  #$FFFF,D0
       rts
dodiv_1:
       movem.w D0/D2,-(A7)
       clr.w   D0
       swap    D0
       divu    D1,D0
       move.w  D0,D2
       move.w  (A7)+,D0
       divu    D1,D0
       swap    D0
       clr.l   D1
       move.w  D0,D1
       move.w  D2,D0
       swap    D0
       move.w  (A7)+,D2
       rts
dodiv_2:
       movem.l D2/D3/D4,-(A7)
       move.l  D1,D2
       clr.w   D2
       swap    D2
       addq.l  #1,D2
       move.l  D0,D3
       move.l  D1,D4
       move.l  D2,D1
       bsr.s   dodiv_1
       move.l  D4,D1
       divu    D2,D1
       divu    D1,D0
       andi.l  #$FFFF,D0
dodiv_3:
       move.l  D4,D1
       move.l  D4,D2
       swap    D2
       mulu    D0,D1
       mulu    D0,D2
       swap    D2
       add.l   D2,D1
       sub.l   D3,D1
       bhi.s   dodiv_4
       neg.l   D1
       cmp.l   D1,D4
       bhi.s   dodiv_5
       addq.l  #1,D0
       bra.s   dodiv_3
dodiv_4:
       subq.l  #1,D0
       bra.s   dodiv_3
dodiv_5:
       movem.l (A7)+,D2/D3/D4
       rts
ULMUL:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       bra.s   lmul_3
LMUL:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       tst.l   D0
       bpl.s   lmul_1
       neg.l   D0
       tst.l   D1
       bpl.s   lmul_2
       neg.l   D1
       bra.s   lmul_3
lmul_1:
       tst.l   D1
       bpl.s   lmul_3
       neg.l   D1
lmul_2:
       bsr.s   domul
       neg.l   D1
       negx.l  D0
       bra.s   lmul_4
lmul_3:
       bsr.s   domul
lmul_4:
       move.l  D1,8(A6)
       movem.l (A7)+,D0/D1
       unlk    A6
       rts
domul:
       cmpi.l  #$FFFF,D1
       bhi.s   domul_1
       cmpi.l  #$FFFF,D0
       bhi.s   domul_2
       mulu    D0,D1
       rts
domul_1:
       cmpi.l  #$FFFF,D0
       bhi.s   domul_4
       bra.s   domul_3
domul_2
       exg     D0,D1
domul_3:
       move.l  D2,-(A7)
       move.l  D1,D2
       swap    D2
       mulu    D0,D1
       mulu    D0,D2
       swap    D2
       clr.w   D2
       add.l   D2,D1
       move.l  (A7)+,D2
       rts
domul_4:
       movem.l D2/D3,-(A7)
       move.l  D1,D2
       move.l  D1,D3
       mulu    D0,D1
       swap    D2
       mulu    D0,D2
       swap    D0
       mulu    D0,D3
       add.l   D3,D2
       swap    D2
       clr.w   D2
       add.l   D2,D1
       movem.l (A7)+,D2/D3
       rts
_strlen:
       move.l    (4,A7),A0
       move.l    A0,A1
strlen_1:
       tst.b     (A1)+
       bne       strlen_1
       move.l    A1,D0
       sub.l     A0,D0
       subq.l    #1,D0
       rts
_sprintf:
       link      A6,#-4
       movem.l   D2,-(A7)
       lea       12(A6),A0
       addq.w    #4,A0
       move.l    A0,D2
       move.l    D2,-(A7)
       move.l    12(A6),-(A7)
       move.l    8(A6),-(A7)
       bsr       _vsprintf
       add.w     #12,A7
       move.l    D0,-4(A6)
       clr.l     D2
       move.l    -4(A6),D0
       movem.l   (A7)+,D2
       unlk      A6
       rts
@vsprintf_copy:
       link      A6,#0
       move.l    8(A6),A0
       tst.l     (A0)
       beq.s     @vsprintf_copy_1
       move.l    12(A6),D0
       move.l    8(A6),A0
       move.l    (A0),A1
       addq.l    #1,(A0)
       move.b    D0,(A1)
       bra.s     @vsprintf_copy_2
@vsprintf_copy_1:
       move.l    12(A6),-(A7)
       bsr       _putch
       addq.w    #4,A7
@vsprintf_copy_2:
       unlk      A6
       rts
@vsprintf_getval:
       link      A6,#0
       movem.l   D2/D3,-(A7)
       move.l    8(A6),D2
       clr.l     D3
       move.l    D2,A0
       move.l    (A0),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #42,D0
       bne.s     @vsprintf_getval_1
       move.l    12(A6),A0
       move.l    (A0),A1
       addq.l    #4,(A0)
       move.l    (A1),D3
       move.l    D2,A0
       addq.l    #1,(A0)
       bra       @vsprintf_getval_5
@vsprintf_getval_1:
       move.l    D2,A0
       move.l    (A0),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #48,D0
       blt       @vsprintf_getval_5
       move.l    D2,A0
       move.l    (A0),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #57,D0
       bgt.s     @vsprintf_getval_5
       move.l    D3,-(A7)
       pea       10
       bsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       move.l    D2,A0
       move.l    (A0),A1
       addq.l    #1,(A0)
       move.b    (A1),D1
       ext.w     D1
       ext.l     D1
       add.l     D1,D0
       sub.l     #48,D0
       move.l    D0,D3
       bra       @vsprintf_getval_1
@vsprintf_getval_5:
       move.l    D3,D0
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
_vsprintf:
       link      A6,#-52
       movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
       lea       8(A6),A2
       lea       @vsprintf_copy,A3
       lea       _ultoa,A4
       clr.l     D6
vsprintf_1:
       move.l    12(A6),A0
       tst.b     (A0)
       beq       vsprintf_3
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #37,D0
       beq.s     vsprintf_4
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       vsprintf_2
vsprintf_4:
       addq.l    #1,12(A6)
       clr.b     -45(A6)
       clr.b     -46(A6)
       clr.b     -48(A6)
       clr.b     -49(A6)
       clr.b     -50(A6)
       clr.b     -51(A6)
       clr.l     -4(A6)
       moveq     #-1,D5
       lea       -36(A6),A0
       move.l    A0,D3
       move.l    A0,D2
vsprintf_6:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #43,D0
       beq.s     vsprintf_12
       bgt.s     vsprintf_15
       cmp.l     #35,D0
       beq       vsprintf_14
       bgt       vsprintf_9
       cmp.l     #32,D0
       beq.s     vsprintf_13
       bra.s     vsprintf_9
vsprintf_15:
       cmp.l     #45,D0
       beq.s     vsprintf_11
       bra.s     vsprintf_9
vsprintf_11:
       move.b    #1,-51(A6)
       addq.l    #1,12(A6)
       bra.s     vsprintf_7
vsprintf_12:
       move.b    #1,-50(A6)
       addq.l    #1,12(A6)
       bra.s     vsprintf_7
vsprintf_13:
       move.b    #1,-49(A6)
       addq.l    #1,12(A6)
       bra.s     vsprintf_7
vsprintf_14:
       move.b    #1,-48(A6)
       addq.l    #1,12(A6)
       bra.s     vsprintf_7
vsprintf_9:
       bra.s     vsprintf_8
vsprintf_7:
       bra       vsprintf_6
vsprintf_8:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #48,D0
       bne.s     vsprintf_16
       addq.l    #1,12(A6)
       move.b    #1,-46(A6)
vsprintf_16:
       pea       16(A6)
       pea       12(A6)
       bsr       @vsprintf_getval
       addq.w    #8,A7
       move.l    D0,A5
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #46,D0
       bne.s     vsprintf_18
       addq.l    #1,12(A6)
       pea       16(A6)
       pea       12(A6)
       bsr       @vsprintf_getval
       addq.w    #8,A7
       move.l    D0,D5
vsprintf_18:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #108,D0
       bne.s     vsprintf_20
       addq.l    #1,12(A6)
       move.b    #1,-45(A6)
vsprintf_20:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #111,D0
       beq       vsprintf_27
       bgt.s     vsprintf_33
       cmp.l     #100,D0
       beq       vsprintf_24
       bgt.s     vsprintf_34
       cmp.l     #99,D0
       beq       vsprintf_30
       bgt       vsprintf_22
       cmp.l     #88,D0
       beq       vsprintf_28
       bra       vsprintf_22
vsprintf_34:
       cmp.l     #105,D0
       beq.s     vsprintf_24
       bra       vsprintf_22
vsprintf_33:
       cmp.l     #117,D0
       beq       vsprintf_26
       bgt.s     vsprintf_35
       cmp.l     #115,D0
       beq       vsprintf_31
       bra       vsprintf_22
vsprintf_35:
       cmp.l     #120,D0
       beq       vsprintf_28
       bra       vsprintf_22
vsprintf_24:
       tst.b     -45(A6)
       beq.s     vsprintf_36
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       bsr       _ltoa
       add.w     #12,A7
       bra.s     vsprintf_37
vsprintf_36:
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       bsr       _ltoa
       add.w     #12,A7
vsprintf_37:
       bra       vsprintf_23
vsprintf_26:
       tst.b     -45(A6)
       beq.s     vsprintf_38
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     vsprintf_39
vsprintf_38:
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
vsprintf_39:
       bra       vsprintf_23
vsprintf_27:
       tst.b     -45(A6)
       beq.s     vsprintf_40
       pea       8
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     vsprintf_41
vsprintf_40:
       pea       8
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
vsprintf_41:
       bra       vsprintf_23
vsprintf_28:
       tst.b     -45(A6)
       beq.s     vsprintf_42
       pea       16
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     vsprintf_43
vsprintf_42:
       pea       16
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
vsprintf_43:
       bra       vsprintf_23
vsprintf_30:
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D0
       move.l    D2,A0
       addq.l    #1,D2
       move.b    D0,(A0)
       move.l    D2,A0
       clr.b     (A0)
       move.l    A5,D0
       beq.s     vsprintf_44
       move.l    A5,D0
       bra.s     vsprintf_45
vsprintf_44:
       moveq     #1,D0
vsprintf_45:
       move.l    D0,D5
       bra       vsprintf_23
vsprintf_31:
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D3
       cmp.l     #-1,D5
       bne.s     vsprintf_46
       move.l    D3,-(A7)
       bsr       _strlen
       addq.w    #4,A7
       move.l    D0,D5
vsprintf_46:
       bra.s     vsprintf_23
vsprintf_22:
       move.l    12(A6),A0
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       move.l    D2,A0
       clr.b     (A0)
vsprintf_23:
       move.l    D3,-(A7)
       bsr       _strlen
       addq.w    #4,A7
       move.b    D0,D4
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #115,D0
       bne.s     vsprintf_48
       cmp.l     #0,D5
       blt.s     vsprintf_48
       ext.w     D4
       ext.l     D4
       cmp.l     D5,D4
       ble.s     vsprintf_50
       move.b    D5,D0
       bra.s     vsprintf_51
vsprintf_50:
       move.b    D4,D0
vsprintf_51:
       move.b    D0,D4
vsprintf_48:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #88,D0
       bne       vsprintf_56
       lea       -36(A6),A0
       move.l    A0,D2
vsprintf_54:
       move.l    D2,A0
       tst.b     (A0)
       beq.s     vsprintf_56
       move.l    D2,A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       bsr       _toupper
       addq.w    #4,A7
       move.l    D2,A0
       move.b    D0,(A0)
       addq.l    #1,D2
       bra       vsprintf_54
vsprintf_56:
       moveq     #0,D7
       lea       -44(A6),A0
       move.l    A0,D2
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #100,D0
       beq.s     vsprintf_59
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #105,D0
       bne       vsprintf_65
vsprintf_59:
       tst.b     -50(A6)
       bne.s     vsprintf_62
       move.l    D3,A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #45,D0
       bne       vsprintf_60
vsprintf_62:
       move.l    D3,A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #45,D0
       bne.s     vsprintf_63
       move.l    D3,A0
       addq.l    #1,D3
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       subq.b    #1,D4
       bra.s     vsprintf_64
vsprintf_63:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #43,(A0)
vsprintf_64:
       addq.l    #1,D7
       bra       vsprintf_65
vsprintf_60:
       tst.b     -49(A6)
       beq       vsprintf_65
       move.l    D3,A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #45,D0
       bne.s     vsprintf_67
       move.l    D3,A0
       addq.l    #1,D3
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       subq.b    #1,D4
       bra.s     vsprintf_68
vsprintf_67:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #32,(A0)
vsprintf_68:
       addq.l    #1,D7
vsprintf_65:
       tst.b     -48(A6)
       beq       vsprintf_77
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #111,D0
       beq.s     vsprintf_73
       bgt.s     vsprintf_76
       cmp.l     #88,D0
       beq.s     vsprintf_73
       bra       vsprintf_77
vsprintf_76:
       cmp.l     #120,D0
       beq.s     vsprintf_73
       bra       vsprintf_77
vsprintf_73:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #48,(A0)
       addq.l    #1,D7
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #120,D0
       beq.s     vsprintf_79
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #88,D0
       bne.s     vsprintf_77
vsprintf_79:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #120,(A0)
       addq.l    #1,D7
vsprintf_77:
       move.l    D2,A0
       clr.b     (A0)
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #105,D0
       beq       vsprintf_82
       bgt.s     vsprintf_93
       cmp.l     #99,D0
       beq       vsprintf_96
       bgt.s     vsprintf_94
       cmp.l     #88,D0
       beq       vsprintf_82
       bgt       vsprintf_80
       cmp.l     #69,D0
       beq       vsprintf_82
       bra       vsprintf_80
vsprintf_94:
       cmp.l     #101,D0
       beq       vsprintf_82
       bgt       vsprintf_80
       cmp.l     #100,D0
       beq.s     vsprintf_82
       bra       vsprintf_80
vsprintf_93:
       cmp.l     #117,D0
       beq.s     vsprintf_82
       bgt.s     vsprintf_95
       cmp.l     #115,D0
       beq       vsprintf_96
       bgt       vsprintf_80
       cmp.l     #111,D0
       beq.s     vsprintf_82
       bra       vsprintf_80
vsprintf_95:
       cmp.l     #120,D0
       beq.s     vsprintf_82
       bra       vsprintf_80
vsprintf_82:
       tst.b     -46(A6)
       beq.s     vsprintf_96
       tst.b     -51(A6)
       bne.s     vsprintf_96
       move.l    A5,D0
       sub.l     D7,D0
       ext.w     D4
       ext.l     D4
       sub.l     D4,D0
       move.l    D0,-4(A6)
vsprintf_96:
       move.l    -4(A6),D0
       cmp.l     #0,D0
       bge.s     vsprintf_98
       clr.l     -4(A6)
vsprintf_98:
       tst.b     -51(A6)
       bne       vsprintf_104
       ext.w     D4
       ext.l     D4
       move.l    D4,D0
       add.l     -4(A6),D0
       add.l     D7,D0
       move.b    D0,-47(A6)
vsprintf_102:
       move.b    -47(A6),D0
       ext.w     D0
       ext.l     D0
       move.l    A5,D1
       subq.w    #1,A5
       cmp.l     D1,D0
       bge.s     vsprintf_104
       pea       32
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       vsprintf_102
vsprintf_104:
       lea       -44(A6),A0
       move.l    A0,D2
vsprintf_105:
       move.l    D2,A0
       tst.b     (A0)
       beq.s     vsprintf_107
       move.l    D2,A0
       addq.l    #1,D2
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       vsprintf_105
vsprintf_107:
       move.l    -4(A6),D0
       move.b    D0,-47(A6)
vsprintf_108:
       move.b    -47(A6),D0
       subq.b    #1,-47(A6)
       tst.b     D0
       beq.s     vsprintf_110
       pea       48
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       vsprintf_108
vsprintf_110:
       move.l    D3,A0
       tst.b     (A0)
       beq       vsprintf_113
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #115,D0
       beq.s     vsprintf_116
       bgt.s     vsprintf_119
       cmp.l     #99,D0
       beq.s     vsprintf_116
       bra.s     vsprintf_119
vsprintf_116:
       move.l    D5,D0
       subq.l    #1,D5
       cmp.l     #0,D0
       bgt.s     vsprintf_119
       bra.s     vsprintf_115
vsprintf_119:
       move.l    D3,A0
       addq.l    #1,D3
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra.s     vsprintf_112
vsprintf_115:
       bra.s     vsprintf_113
vsprintf_112:
       bra       vsprintf_110
vsprintf_113:
       tst.b     -51(A6)
       beq       vsprintf_125
       ext.w     D4
       ext.l     D4
       move.l    D4,D0
       add.l     -4(A6),D0
       add.l     D7,D0
       move.b    D0,-47(A6)
vsprintf_123:
       move.b    -47(A6),D0
       ext.w     D0
       ext.l     D0
       move.l    A5,D1
       subq.w    #1,A5
       cmp.l     D1,D0
       bge.s     vsprintf_125
       pea       32
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       subq.l    #1,D6
       bra       vsprintf_123
vsprintf_125:
       bra.s     vsprintf_81
vsprintf_80:
       move.l    12(A6),A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
vsprintf_81:
       addq.l    #1,12(A6)
vsprintf_2:
       bra       vsprintf_1
vsprintf_3:
       tst.l     (A2)
       beq.s     vsprintf_126
       clr.b     D1
       and.l     #255,D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
vsprintf_126:
       move.l    D6,D0
       movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
       unlk      A6
       rts
@itoa_convert:
       link      A6,#0
       movem.l   D2/D3/D4/D5,-(A7)
       move.l    8(A6),D2
       move.l    16(A6),D3
       move.l    12(A6),D5
       move.l    D5,-(A7)
       move.l    D3,-(A7)
       bsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,D4
       cmp.l     D3,D5
       blo.s     @itoa_convert_1
       move.l    D3,-(A7)
       move.l    D5,-(A7)
       move.l    D3,-(A7)
       bsr       ULDIV
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    D1,-(A7)
       move.l    D2,-(A7)
       bsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D2
@itoa_convert_1:
       cmp.l     #9,D4
       bgt.s     @itoa_convert_3
       move.l    D4,D0
       add.l     #48,D0
       bra.s     @itoa_convert_4
@itoa_convert_3:
       move.l    D4,D0
       add.l     #97,D0
       sub.l     #10,D0
@itoa_convert_4:
       move.l    D2,A0
       move.b    D0,(A0)
       move.l    D2,D0
       addq.l    #1,D0
       movem.l   (A7)+,D2/D3/D4/D5
       unlk      A6
       rts
_ltoa:
       link      A6,#0
       movem.l   D2/D3/D4/D5,-(A7)
       move.l    8(A6),D2
       move.l    12(A6),D3
       move.l    16(A6),D5
       move.l    D3,D4
       cmp.l     #2,D5
       blt.s     ltoa_3
       cmp.l     #36,D5
       ble.s     ltoa_1
ltoa_3:
       move.l    D3,D0
       bra       ltoa_4
ltoa_1:
       cmp.l     #10,D5
       bne       ltoa_5
       cmp.l     #0,D2
       bge.s     ltoa_5
       move.l    D2,D0
       neg.l     D0
       move.l    D0,D2
       cmp.l     #0,D2
       bge.s     ltoa_7
       pea       @itoa_1
       move.l    D3,-(A7)
       bsr       _strcpy
       addq.w    #8,A7
       move.l    D3,D0
       bra.s     ltoa_4
ltoa_7:
       move.l    D4,A0
       addq.l    #1,D4
       move.b    #45,(A0)
ltoa_5:
       move.l    D5,-(A7)
       move.l    D2,-(A7)
       move.l    D4,-(A7)
       bsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D4
       move.l    D4,A0
       clr.b     (A0)
       move.l    D3,D0
ltoa_4:
       movem.l   (A7)+,D2/D3/D4/D5
       unlk      A6
       rts
_ultoa:
       link      A6,#0
       movem.l   D2/D3/D4,-(A7)
       move.l    16(A6),D3
       move.l    12(A6),D4
       move.l    D4,D2
       cmp.l     #2,D3
       blt.s     ultoa_3
       cmp.l     #36,D3
       ble.s     ultoa_1
ultoa_3:
       move.l    D4,D0
       bra.s     ultoa_4
ultoa_1:
       move.l    D3,-(A7)
       move.l    8(A6),-(A7)
       move.l    D2,-(A7)
       bsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D2
       move.l    D2,A0
       clr.b     (A0)
       move.l    D4,D0
ultoa_4:
       movem.l   (A7)+,D2/D3/D4
       unlk      A6
       rts
_itoa:
       link      A6,#0
       move.l    16(A6),-(A7)
       move.l    12(A6),-(A7)
       move.l    8(A6),-(A7)
       bsr       _ltoa
       add.w     #12,A7
       unlk      A6
       rts
_putch:
       link      A6,#0
       movem.l   D2,-(A7)
       move.l    8(A6),D2
       cmp.l     #10,D2
       bne.s     putch_1
       pea       13
       bsr       __putch
       addq.w    #4,A7
putch_1:
       move.l    D2,-(A7)
       bsr       __putch
       addq.w    #4,A7
       move.l    D2,D0
       movem.l   (A7)+,D2
       unlk      A6
       rts
_toupper:
       link      A6,#0
       movem.l   D2,-(A7)
       move.l    8(A6),D2
       cmp.l     #97,D2
       blt.s     toupper_1
       cmp.l     #122,D2
       bgt.s     toupper_1
       and.l     #95,D2
toupper_1:
       move.l    D2,D0
       movem.l   (A7)+,D2
       unlk      A6
       rts
_strcpy:
       move.l    (4,A7),A0
       move.l    (8,A7),A1
       move.l    A0,D0
strcpy_1:
       move.b    (A1)+,(A0)+
       bne       strcpy_1
       rts
       section   const
                align


@m68kus~1_1:
       dc.b      10,80,108,97,121,105,110,103,32,116,104,101
       dc.b      32,83,110,97,107,101,32,71,97,109,101,33,10
       dc.b      0
@snake_1:
       dc.b      71,97,109,101,32,79,118,101,114,33,0
@snake_2:
       dc.b      83,99,111,114,101,58,32,0
@snake_3:
       dc.b      37,100,0
_screensize:
       dc.l      80,40
       section   data
                align

*********************************************************************************************************************************************************
* Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
********************************************************************************************************************************************************

DataStart       equ       *
__ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
__allocp:       ds.l      1                    start of free memory block list
__heap:         ds.l      1                    begin of free memory


generateFood_firsttime:
       dc.l      1
@itoa_1:
       dc.b      45,50,49,52,55,52,56,51,54,52,56,0
       section   bss
                align

DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup

*********************************************************************************************************
* Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
*********************************************************************************************************
BssStart       equ       *

_i:
       ds.b      4
_x:
       ds.b      4
_y:
       ds.b      4
_z:
       ds.b      4
_PortA_Count:
       ds.b      4
_Timer1Count:
       ds.b      1
_Timer2Count:
       ds.b      1
_Timer3Count:
       ds.b      1
_Timer4Count:
       ds.b      1
_score:
       ds.b      4
_timer:
       ds.b      4
_Timer8ISRCount:
       ds.b      4
_Snake:
       ds.b      16406
_waiting_for_direction_to_be_imp:
       ds.b      4
       section   heap
               align

BssEnd         equ       *
BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup

*********************************************************************************************************
* Section for Heap
*********************************************************************************************************

heap           equ       *
               align
