680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 23 Jan 2023      Time: 23:25:51          Source: C:\M68KV6.0 - 800BY480\PROGRAMS\MEMORYTEST.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  05FA 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2CB8      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  226E      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUGMEMORYTEST.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; #define StartOfExceptionVectorTable 0x08030000
                     473   ; //#define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; #define TopOfStack 0x08040000
                     476   ; //#define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; // for disassembly of program
                     495   ; char    Instruction[100] ;
                     496   ; char    TempString[100] ;
                     497   ; /************************************************************************************
                     498   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     499   ; ************************************************************************************/
                     500   ; void Wait1ms(void)
                     501   ; {
                     502   _Wait1ms:
00000932  2F02       503          move.l    D2,-(A7)
                     504   ; long int  i ;
                     505   ; for(i = 0; i < 1000; i ++)
00000934  4282       506          clr.l     D2
                     507   Wait1ms_1:
00000936  0C82 0000  508          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       509          bge.s     Wait1ms_3
0000093E  5282       510          addq.l    #1,D2
00000940  60F4       511          bra       Wait1ms_1
                     512   Wait1ms_3:
00000942  241F       513          move.l    (A7)+,D2
00000944  4E75       514          rts
                     515   ; ;
                     516   ; }
                     517   ; /************************************************************************************
                     518   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     519   ; **************************************************************************************/
                     520   ; void Wait3ms(void)
                     521   ; {
                     522   _Wait3ms:
00000946  2F02       523          move.l    D2,-(A7)
                     524   ; int i ;
                     525   ; for(i = 0; i < 3; i++)
00000948  4282       526          clr.l     D2
                     527   Wait3ms_1:
0000094A  0C82 0000  528          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       529          bge.s     Wait3ms_3
                     530   ; Wait1ms() ;
00000952  4EB8 0932  531          jsr       _Wait1ms
00000956  5282       532          addq.l    #1,D2
00000958  60F0       533          bra       Wait3ms_1
                     534   Wait3ms_3:
0000095A  241F       535          move.l    (A7)+,D2
0000095C  4E75       536          rts
                     537   ; }
                     538   ; /*********************************************************************************************
                     539   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     540   ; *********************************************************************************************/
                     541   ; void Init_LCD(void)
                     542   ; {
                     543   _Init_LCD:
                     544   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  545          move.b    #12,4194336
00000962  0040 0020 
                     546   ; Wait3ms() ;
00000966  4EB8 0946  547          jsr       _Wait3ms
                     548   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  549          move.b    #56,4194336
0000096E  0040 0020 
                     550   ; Wait3ms() ;
00000972  4EB8 0946  551          jsr       _Wait3ms
00000976  4E75       552          rts
                     553   ; }
                     554   ; /******************************************************************************
                     555   ; *subroutine to output a single character held in d1 to the LCD display
                     556   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     557   ; *current cursor position
                     558   ; *******************************************************************************/
                     559   ; void Outchar(int c)
                     560   ; {
                     561   _Outchar:
00000978  4E56 0000  562          link      A6,#0
                     563   ; LCDdata = (char)(c);
0000097C  202E 0008  564          move.l    8(A6),D0
00000980  13C0 0040  565          move.b    D0,4194338
00000984  0022      
                     566   ; Wait1ms() ;
00000986  4EB8 0932  567          jsr       _Wait1ms
0000098A  4E5E       568          unlk      A6
0000098C  4E75       569          rts
                     570   ; }
                     571   ; /**********************************************************************************
                     572   ; *subroutine to output a message at the current cursor position of the LCD display
                     573   ; ************************************************************************************/
                     574   ; void OutMess(char *theMessage)
                     575   ; {
                     576   _OutMess:
0000098E  4E56 FFFC  577          link      A6,#-4
                     578   ; char c ;
                     579   ; while((c = *theMessage++) != (char)(0))
                     580   OutMess_1:
00000992  206E 0008  581          move.l    8(A6),A0
00000996  52AE 0008  582          addq.l    #1,8(A6)
0000099A  1D50 FFFF  583          move.b    (A0),-1(A6)
0000099E  1010       584          move.b    (A0),D0
000009A0  6712       585          beq.s     OutMess_3
                     586   ; Outchar(c) ;
000009A2  122E FFFF  587          move.b    -1(A6),D1
000009A6  4881       588          ext.w     D1
000009A8  48C1       589          ext.l     D1
000009AA  2F01       590          move.l    D1,-(A7)
000009AC  4EB8 0978  591          jsr       _Outchar
000009B0  584F       592          addq.w    #4,A7
000009B2  60DE       593          bra       OutMess_1
                     594   OutMess_3:
000009B4  4E5E       595          unlk      A6
000009B6  4E75       596          rts
                     597   ; }
                     598   ; /******************************************************************************
                     599   ; *subroutine to clear the line by issuing 24 space characters
                     600   ; *******************************************************************************/
                     601   ; void Clearln(void)
                     602   ; {
                     603   _Clearln:
000009B8  2F02       604          move.l    D2,-(A7)
                     605   ; unsigned char i ;
                     606   ; for(i = 0; i < 24; i ++)
000009BA  4202       607          clr.b     D2
                     608   Clearln_1:
000009BC  0C02 0018  609          cmp.b     #24,D2
000009C0  640E       610          bhs.s     Clearln_3
                     611   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  612          pea       32
000009C6  4EB8 0978  613          jsr       _Outchar
000009CA  584F       614          addq.w    #4,A7
000009CC  5202       615          addq.b    #1,D2
000009CE  60EC       616          bra       Clearln_1
                     617   Clearln_3:
000009D0  241F       618          move.l    (A7)+,D2
000009D2  4E75       619          rts
                     620   ; }
                     621   ; /******************************************************************************
                     622   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     623   ; *******************************************************************************/
                     624   ; void Oline0(char *theMessage)
                     625   ; {
                     626   _Oline0:
000009D4  4E56 0000  627          link      A6,#0
                     628   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  629          move.b    #128,4194336
000009DC  0040 0020 
                     630   ; Wait3ms();
000009E0  4EB8 0946  631          jsr       _Wait3ms
                     632   ; Clearln() ;
000009E4  4EB8 09B8  633          jsr       _Clearln
                     634   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  635          move.b    #128,4194336
000009EC  0040 0020 
                     636   ; Wait3ms() ;
000009F0  4EB8 0946  637          jsr       _Wait3ms
                     638   ; OutMess(theMessage) ;
000009F4  2F2E 0008  639          move.l    8(A6),-(A7)
000009F8  4EB8 098E  640          jsr       _OutMess
000009FC  584F       641          addq.w    #4,A7
000009FE  4E5E       642          unlk      A6
00000A00  4E75       643          rts
                     644   ; }
                     645   ; /******************************************************************************
                     646   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     647   ; *******************************************************************************/
                     648   ; void Oline1(char *theMessage)
                     649   ; {
                     650   _Oline1:
00000A02  4E56 0000  651          link      A6,#0
                     652   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  653          move.b    #192,4194336
00000A0A  0040 0020 
                     654   ; Wait3ms();
00000A0E  4EB8 0946  655          jsr       _Wait3ms
                     656   ; Clearln() ;
00000A12  4EB8 09B8  657          jsr       _Clearln
                     658   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  659          move.b    #192,4194336
00000A1A  0040 0020 
                     660   ; Wait3ms() ;
00000A1E  4EB8 0946  661          jsr       _Wait3ms
                     662   ; OutMess(theMessage) ;
00000A22  2F2E 0008  663          move.l    8(A6),-(A7)
00000A26  4EB8 098E  664          jsr       _OutMess
00000A2A  584F       665          addq.w    #4,A7
00000A2C  4E5E       666          unlk      A6
00000A2E  4E75       667          rts
                     668   ; }
                     669   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     670   ; {
                     671   _InstallExceptionHandler:
00000A30  4E56 FFFC  672          link      A6,#-4
                     673   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0803  674          move.l    #134414336,-4(A6)
00000A38  0000 FFFC 
                     675   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  676          move.l    -4(A6),A0
00000A40  202E 000C  677          move.l    12(A6),D0
00000A44  E588       678          lsl.l     #2,D0
00000A46  21AE 0008  679          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       680          unlk      A6
00000A4E  4E75       681          rts
                     682   ; }
                     683   ; void TestLEDS(void)
                     684   ; {
                     685   _TestLEDS:
00000A50  48E7 3000  686          movem.l   D2/D3,-(A7)
                     687   ; int delay ;
                     688   ; unsigned char count = 0 ;
00000A54  4202       689          clr.b     D2
                     690   ; while(1)    {
                     691   TestLEDS_1:
                     692   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       693          move.b    D2,D0
00000A58  E908       694          lsl.b     #4,D0
00000A5A  1202       695          move.b    D2,D1
00000A5C  C23C 000F  696          and.b     #15,D1
00000A60  D001       697          add.b     D1,D0
00000A62  13C0 0040  698          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  699          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  700          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  701          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  702          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  703          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  704          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  705          move.b    D0,4194304
00000A90  0000      
                     706   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       707          clr.l     D3
                     708   TestLEDS_4:
00000A94  0C83 0003  709          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       710          bge.s     TestLEDS_6
00000A9C  5283       711          addq.l    #1,D3
00000A9E  60F4       712          bra       TestLEDS_4
                     713   TestLEDS_6:
                     714   ; ;
                     715   ; count ++;
00000AA0  5202       716          addq.b    #1,D2
00000AA2  60B2       717          bra       TestLEDS_1
                     718   ; }
                     719   ; }
                     720   ; void SwitchTest(void)
                     721   ; {
                     722   _SwitchTest:
00000AA4  48E7 3020  723          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  724          lea       _printf.L,A2
00000AAC  5972      
                     725   ; int i, switches = 0 ;
00000AAE  4283       726          clr.l     D3
                     727   ; printf("\r\n") ;
00000AB0  4879 0000  728          pea       @m68kde~3_1.L
00000AB4  6BDE      
00000AB6  4E92       729          jsr       (A2)
00000AB8  584F       730          addq.w    #4,A7
                     731   ; while(1)    {
                     732   SwitchTest_1:
                     733   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  734          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  735          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       736          lsl.l     #8,D0
00000AC8  1239 0040  737          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  738          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       739          or.l      D1,D0
00000AD6  2600       740          move.l    D0,D3
                     741   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  742          pea       @m68kde~3_2.L
00000ADC  6BE2      
00000ADE  4E92       743          jsr       (A2)
00000AE0  584F       744          addq.w    #4,A7
                     745   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  746          move.l    #128,D2
00000AE6  0080      
                     747   SwitchTest_4:
00000AE8  0C82 0000  748          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       749          ble.s     SwitchTest_6
                     750   ; if((switches & i) == 0)
00000AF0  2003       751          move.l    D3,D0
00000AF2  C082       752          and.l     D2,D0
00000AF4  660C       753          bne.s     SwitchTest_7
                     754   ; printf("0") ;
00000AF6  4879 0000  755          pea       @m68kde~3_3.L
00000AFA  6BF8      
00000AFC  4E92       756          jsr       (A2)
00000AFE  584F       757          addq.w    #4,A7
00000B00  600A       758          bra.s     SwitchTest_8
                     759   SwitchTest_7:
                     760   ; else
                     761   ; printf("1") ;
00000B02  4879 0000  762          pea       @m68kde~3_4.L
00000B06  6BFA      
00000B08  4E92       763          jsr       (A2)
00000B0A  584F       764          addq.w    #4,A7
                     765   SwitchTest_8:
00000B0C  E282       766          asr.l     #1,D2
00000B0E  60D8       767          bra       SwitchTest_4
                     768   SwitchTest_6:
00000B10  60A8       769          bra       SwitchTest_1
                     770   ; }
                     771   ; }
                     772   ; }
                     773   ; /*********************************************************************************************
                     774   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     775   ; *********************************************************************************************/
                     776   ; void Init_RS232(void)
                     777   ; {
                     778   _Init_RS232:
                     779   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  780          move.b    #21,4194368
00000B16  0040 0040 
                     781   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  782          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       783          rts
                     784   ; }
                     785   ; int kbhit(void)
                     786   ; {
                     787   _kbhit:
                     788   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  789          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  790          and.b     #1,D0
00000B2E  0C00 0001  791          cmp.b     #1,D0
00000B32  6604       792          bne.s     kbhit_1
                     793   ; return 1 ;
00000B34  7001       794          moveq     #1,D0
00000B36  6002       795          bra.s     kbhit_3
                     796   kbhit_1:
                     797   ; else
                     798   ; return 0 ;
00000B38  4280       799          clr.l     D0
                     800   kbhit_3:
00000B3A  4E75       801          rts
                     802   ; }
                     803   ; /*********************************************************************************************************
                     804   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     805   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     806   ; **  to allow the board to communicate with HyperTerminal Program
                     807   ; **
                     808   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     809   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     810   ; **  call _putch() also
                     811   ; *********************************************************************************************************/
                     812   ; int _putch( int c)
                     813   ; {
                     814   __putch:
00000B3C  4E56 0000  815          link      A6,#0
                     816   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     817   _putch_1:
00000B40  1039 0040  818          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  819          and.b     #2,D0
00000B4A  0C00 0002  820          cmp.b     #2,D0
00000B4E  6702       821          beq.s     _putch_3
00000B50  60EE       822          bra       _putch_1
                     823   _putch_3:
                     824   ; ;
                     825   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  826          move.l    8(A6),D0
00000B56  C03C 007F  827          and.b     #127,D0
00000B5A  13C0 0040  828          move.b    D0,4194370
00000B5E  0042      
                     829   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  830          move.l    8(A6),D0
00000B64  4E5E       831          unlk      A6
00000B66  4E75       832          rts
                     833   ; }
                     834   ; /*********************************************************************************************************
                     835   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     836   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     837   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     838   ; **
                     839   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     840   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     841   ; **  call _getch() also
                     842   ; *********************************************************************************************************/
                     843   ; int _getch( void )
                     844   ; {
                     845   __getch:
00000B68  2F02       846          move.l    D2,-(A7)
                     847   ; int c ;
                     848   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     849   _getch_1:
00000B6A  1039 0040  850          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  851          and.b     #1,D0
00000B74  0C00 0001  852          cmp.b     #1,D0
00000B78  6702       853          beq.s     _getch_3
00000B7A  60EE       854          bra       _getch_1
                     855   _getch_3:
                     856   ; ;
                     857   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  858          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  859          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  860          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       861          move.l    D0,D2
                     862   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     863   ; if(Echo)
00000B90  4AB9 0803  864          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       865          beq.s     _getch_4
                     866   ; _putch(c);
00000B98  2F02       867          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  868          jsr       __putch
00000B9E  584F       869          addq.w    #4,A7
                     870   _getch_4:
                     871   ; return c ;
00000BA0  2002       872          move.l    D2,D0
00000BA2  241F       873          move.l    (A7)+,D2
00000BA4  4E75       874          rts
                     875   ; }
                     876   ; // flush the input stream for any unread characters
                     877   ; void FlushKeyboard(void)
                     878   ; {
                     879   _FlushKeyboard:
00000BA6  4E56 FFFC  880          link      A6,#-4
                     881   ; char c ;
                     882   ; while(1)    {
                     883   FlushKeyboard_1:
                     884   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  885          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  886          and.b     #1,D0
00000BB4  0C00 0001  887          cmp.b     #1,D0
00000BB8  6610       888          bne.s     FlushKeyboard_4
                     889   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  890          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  891          and.b     #127,D0
00000BC4  1D40 FFFF  892          move.b    D0,-1(A6)
00000BC8  6002       893          bra.s     FlushKeyboard_5
                     894   FlushKeyboard_4:
                     895   ; else
                     896   ; return ;
00000BCA  6002       897          bra.s     FlushKeyboard_6
                     898   FlushKeyboard_5:
00000BCC  60DC       899          bra       FlushKeyboard_1
                     900   FlushKeyboard_6:
00000BCE  4E5E       901          unlk      A6
00000BD0  4E75       902          rts
                     903   ; }
                     904   ; }
                     905   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     906   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     907   ; char xtod(int c)
                     908   ; {
                     909   _xtod:
00000BD2  4E56 0000  910          link      A6,#0
00000BD6  2F02       911          move.l    D2,-(A7)
00000BD8  242E 0008  912          move.l    8(A6),D2
                     913   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  914          cmp.b     #57,D2
00000BE0  6E08       915          bgt.s     xtod_1
                     916   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       917          move.b    D2,D0
00000BE4  0400 0030  918          sub.b     #48,D0
00000BE8  6014       919          bra.s     xtod_3
                     920   xtod_1:
                     921   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  922          cmp.b     #70,D2
00000BEE  6F08       923          ble.s     xtod_4
                     924   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       925          move.b    D2,D0
00000BF2  0400 0057  926          sub.b     #87,D0
00000BF6  6006       927          bra.s     xtod_3
                     928   xtod_4:
                     929   ; else
                     930   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       931          move.b    D2,D0
00000BFA  0400 0037  932          sub.b     #55,D0
                     933   xtod_3:
00000BFE  241F       934          move.l    (A7)+,D2
00000C00  4E5E       935          unlk      A6
00000C02  4E75       936          rts
                     937   ; }
                     938   ; int Get2HexDigits(char *CheckSumPtr)
                     939   ; {
                     940   _Get2HexDigits:
00000C04  4E56 0000  941          link      A6,#0
00000C08  2F02       942          move.l    D2,-(A7)
                     943   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       944          move.l    D0,-(A7)
00000C0C  4EB8 0B68  945          jsr       __getch
00000C10  2200       946          move.l    D0,D1
00000C12  201F       947          move.l    (A7)+,D0
00000C14  2F01       948          move.l    D1,-(A7)
00000C16  4EB8 0BD2  949          jsr       _xtod
00000C1A  584F       950          addq.w    #4,A7
00000C1C  C0BC 0000  951          and.l     #255,D0
00000C20  00FF      
00000C22  E980       952          asl.l     #4,D0
00000C24  2F00       953          move.l    D0,-(A7)
00000C26  2F01       954          move.l    D1,-(A7)
00000C28  4EB8 0B68  955          jsr       __getch
00000C2C  221F       956          move.l    (A7)+,D1
00000C2E  2F00       957          move.l    D0,-(A7)
00000C30  4EB8 0BD2  958          jsr       _xtod
00000C34  584F       959          addq.w    #4,A7
00000C36  2200       960          move.l    D0,D1
00000C38  201F       961          move.l    (A7)+,D0
00000C3A  C2BC 0000  962          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       963          or.l      D1,D0
00000C42  2400       964          move.l    D0,D2
                     965   ; if(CheckSumPtr)
00000C44  4AAE 0008  966          tst.l     8(A6)
00000C48  6706       967          beq.s     Get2HexDigits_1
                     968   ; *CheckSumPtr += i ;
00000C4A  206E 0008  969          move.l    8(A6),A0
00000C4E  D510       970          add.b     D2,(A0)
                     971   Get2HexDigits_1:
                     972   ; return i ;
00000C50  2002       973          move.l    D2,D0
00000C52  241F       974          move.l    (A7)+,D2
00000C54  4E5E       975          unlk      A6
00000C56  4E75       976          rts
                     977   ; }
                     978   ; int Get4HexDigits(char *CheckSumPtr)
                     979   ; {
                     980   _Get4HexDigits:
00000C58  4E56 0000  981          link      A6,#0
                     982   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  983          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  984          jsr       _Get2HexDigits
00000C64  584F       985          addq.w    #4,A7
00000C66  E180       986          asl.l     #8,D0
00000C68  2F00       987          move.l    D0,-(A7)
00000C6A  2F2E 0008  988          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  989          jsr       _Get2HexDigits
00000C72  584F       990          addq.w    #4,A7
00000C74  2200       991          move.l    D0,D1
00000C76  201F       992          move.l    (A7)+,D0
00000C78  8081       993          or.l      D1,D0
00000C7A  4E5E       994          unlk      A6
00000C7C  4E75       995          rts
                     996   ; }
                     997   ; int Get6HexDigits(char *CheckSumPtr)
                     998   ; {
                     999   _Get6HexDigits:
00000C7E  4E56 0000 1000          link      A6,#0
                    1001   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1002          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1003          jsr       _Get4HexDigits
00000C8A  584F      1004          addq.w    #4,A7
00000C8C  E180      1005          asl.l     #8,D0
00000C8E  2F00      1006          move.l    D0,-(A7)
00000C90  2F2E 0008 1007          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1008          jsr       _Get2HexDigits
00000C98  584F      1009          addq.w    #4,A7
00000C9A  2200      1010          move.l    D0,D1
00000C9C  201F      1011          move.l    (A7)+,D0
00000C9E  8081      1012          or.l      D1,D0
00000CA0  4E5E      1013          unlk      A6
00000CA2  4E75      1014          rts
                    1015   ; }
                    1016   ; int Get8HexDigits(char *CheckSumPtr)
                    1017   ; {
                    1018   _Get8HexDigits:
00000CA4  4E56 0000 1019          link      A6,#0
                    1020   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1021          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1022          jsr       _Get4HexDigits
00000CB0  584F      1023          addq.w    #4,A7
00000CB2  E180      1024          asl.l     #8,D0
00000CB4  E180      1025          asl.l     #8,D0
00000CB6  2F00      1026          move.l    D0,-(A7)
00000CB8  2F2E 0008 1027          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1028          jsr       _Get4HexDigits
00000CC0  584F      1029          addq.w    #4,A7
00000CC2  2200      1030          move.l    D0,D1
00000CC4  201F      1031          move.l    (A7)+,D0
00000CC6  8081      1032          or.l      D1,D0
00000CC8  4E5E      1033          unlk      A6
00000CCA  4E75      1034          rts
                    1035   ; }
                    1036   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1037   _strcatInstruction:
00000CCC  4E56 0000 1038          link      A6,#0
00000CD0  2F2E 0008 1039          move.l    8(A6),-(A7)
00000CD4  4879 0803 1040          pea       _Instruction.L
00000CD8  04E2      
00000CDA  4EB9 0000 1041          jsr       _strcat
00000CDE  58FE      
00000CE0  504F      1042          addq.w    #8,A7
00000CE2  4E5E      1043          unlk      A6
00000CE4  4E75      1044          rts
                    1045   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1046   _strcpyInstruction:
00000CE6  4E56 0000 1047          link      A6,#0
00000CEA  2F2E 0008 1048          move.l    8(A6),-(A7)
00000CEE  4879 0803 1049          pea       _Instruction.L
00000CF2  04E2      
00000CF4  4EB9 0000 1050          jsr       _strcpy
00000CF8  5744      
00000CFA  504F      1051          addq.w    #8,A7
00000CFC  4E5E      1052          unlk      A6
00000CFE  4E75      1053          rts
                    1054   ; void DisassembleProgram(void )
                    1055   ; {
                    1056   _DisassembleProgram:
00000D00  4E56 FFF8 1057          link      A6,#-8
00000D04  48E7 3038 1058          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D08  45F9 0803 1059          lea       _InstructionSize.L,A2
00000D0C  017E      
00000D0E  47F9 0000 1060          lea       _printf.L,A3
00000D12  5972      
00000D14  49F9 0803 1061          lea       _Instruction.L,A4
00000D18  04E2      
                    1062   ; char c ;
                    1063   ; int i, j ;
                    1064   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1065   ; printf("\r\nEnter Start Address: ") ;
00000D1A  4879 0000 1066          pea       @m68kde~3_5.L
00000D1E  6BFC      
00000D20  4E93      1067          jsr       (A3)
00000D22  584F      1068          addq.w    #4,A7
                    1069   ; ProgramPtr = Get8HexDigits(0) ;
00000D24  42A7      1070          clr.l     -(A7)
00000D26  4EB8 0CA4 1071          jsr       _Get8HexDigits
00000D2A  584F      1072          addq.w    #4,A7
00000D2C  2400      1073          move.l    D0,D2
                    1074   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000D2E  4879 0000 1075          pea       @m68kde~3_6.L
00000D32  6C14      
00000D34  4E93      1076          jsr       (A3)
00000D36  584F      1077          addq.w    #4,A7
                    1078   ; while(1)    {
                    1079   DisassembleProgram_1:
                    1080   ; for(i = 0; i < 20; i ++)
00000D38  4283      1081          clr.l     D3
                    1082   DisassembleProgram_4:
00000D3A  0C83 0000 1083          cmp.l     #20,D3
00000D3E  0014      
00000D40  6C00 017E 1084          bge       DisassembleProgram_6
                    1085   ; {
                    1086   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000D44  24BC 0000 1087          move.l    #1,(A2)
00000D48  0001      
                    1088   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000D4A  2F02      1089          move.l    D2,-(A7)
00000D4C  4EB9 0000 1090          jsr       _DisassembleInstruction
00000D50  38A2      
00000D52  584F      1091          addq.w    #4,A7
                    1092   ; if(InstructionSize == 1)
00000D54  2012      1093          move.l    (A2),D0
00000D56  0C80 0000 1094          cmp.l     #1,D0
00000D5A  0001      
00000D5C  6620      1095          bne.s     DisassembleProgram_7
                    1096   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000D5E  2F0C      1097          move.l    A4,-(A7)
00000D60  2042      1098          move.l    D2,A0
00000D62  3210      1099          move.w    (A0),D1
00000D64  C2BC 0000 1100          and.l     #65535,D1
00000D68  FFFF      
00000D6A  2F01      1101          move.l    D1,-(A7)
00000D6C  2F02      1102          move.l    D2,-(A7)
00000D6E  4879 0000 1103          pea       @m68kde~3_7.L
00000D72  6C38      
00000D74  4E93      1104          jsr       (A3)
00000D76  DEFC 0010 1105          add.w     #16,A7
00000D7A  6000 0138 1106          bra       DisassembleProgram_15
                    1107   DisassembleProgram_7:
                    1108   ; else if(InstructionSize == 2)
00000D7E  2012      1109          move.l    (A2),D0
00000D80  0C80 0000 1110          cmp.l     #2,D0
00000D84  0002      
00000D86  662E      1111          bne.s     DisassembleProgram_9
                    1112   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000D88  2F0C      1113          move.l    A4,-(A7)
00000D8A  2042      1114          move.l    D2,A0
00000D8C  3228 0002 1115          move.w    2(A0),D1
00000D90  C2BC 0000 1116          and.l     #65535,D1
00000D94  FFFF      
00000D96  2F01      1117          move.l    D1,-(A7)
00000D98  2042      1118          move.l    D2,A0
00000D9A  3210      1119          move.w    (A0),D1
00000D9C  C2BC 0000 1120          and.l     #65535,D1
00000DA0  FFFF      
00000DA2  2F01      1121          move.l    D1,-(A7)
00000DA4  2F02      1122          move.l    D2,-(A7)
00000DA6  4879 0000 1123          pea       @m68kde~3_8.L
00000DAA  6C60      
00000DAC  4E93      1124          jsr       (A3)
00000DAE  DEFC 0014 1125          add.w     #20,A7
00000DB2  6000 0100 1126          bra       DisassembleProgram_15
                    1127   DisassembleProgram_9:
                    1128   ; else if(InstructionSize == 3)
00000DB6  2012      1129          move.l    (A2),D0
00000DB8  0C80 0000 1130          cmp.l     #3,D0
00000DBC  0003      
00000DBE  6600 003E 1131          bne       DisassembleProgram_11
                    1132   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000DC2  2F0C      1133          move.l    A4,-(A7)
00000DC4  2042      1134          move.l    D2,A0
00000DC6  3228 0004 1135          move.w    4(A0),D1
00000DCA  C2BC 0000 1136          and.l     #65535,D1
00000DCE  FFFF      
00000DD0  2F01      1137          move.l    D1,-(A7)
00000DD2  2042      1138          move.l    D2,A0
00000DD4  3228 0002 1139          move.w    2(A0),D1
00000DD8  C2BC 0000 1140          and.l     #65535,D1
00000DDC  FFFF      
00000DDE  2F01      1141          move.l    D1,-(A7)
00000DE0  2042      1142          move.l    D2,A0
00000DE2  3210      1143          move.w    (A0),D1
00000DE4  C2BC 0000 1144          and.l     #65535,D1
00000DE8  FFFF      
00000DEA  2F01      1145          move.l    D1,-(A7)
00000DEC  2F02      1146          move.l    D2,-(A7)
00000DEE  4879 0000 1147          pea       @m68kde~3_9.L
00000DF2  6C88      
00000DF4  4E93      1148          jsr       (A3)
00000DF6  DEFC 0018 1149          add.w     #24,A7
00000DFA  6000 00B8 1150          bra       DisassembleProgram_15
                    1151   DisassembleProgram_11:
                    1152   ; else if(InstructionSize == 4)
00000DFE  2012      1153          move.l    (A2),D0
00000E00  0C80 0000 1154          cmp.l     #4,D0
00000E04  0004      
00000E06  6600 004C 1155          bne       DisassembleProgram_13
                    1156   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E0A  2F0C      1157          move.l    A4,-(A7)
00000E0C  2042      1158          move.l    D2,A0
00000E0E  3228 0006 1159          move.w    6(A0),D1
00000E12  C2BC 0000 1160          and.l     #65535,D1
00000E16  FFFF      
00000E18  2F01      1161          move.l    D1,-(A7)
00000E1A  2042      1162          move.l    D2,A0
00000E1C  3228 0004 1163          move.w    4(A0),D1
00000E20  C2BC 0000 1164          and.l     #65535,D1
00000E24  FFFF      
00000E26  2F01      1165          move.l    D1,-(A7)
00000E28  2042      1166          move.l    D2,A0
00000E2A  3228 0002 1167          move.w    2(A0),D1
00000E2E  C2BC 0000 1168          and.l     #65535,D1
00000E32  FFFF      
00000E34  2F01      1169          move.l    D1,-(A7)
00000E36  2042      1170          move.l    D2,A0
00000E38  3210      1171          move.w    (A0),D1
00000E3A  C2BC 0000 1172          and.l     #65535,D1
00000E3E  FFFF      
00000E40  2F01      1173          move.l    D1,-(A7)
00000E42  2F02      1174          move.l    D2,-(A7)
00000E44  4879 0000 1175          pea       @m68kde~3_10.L
00000E48  6CB0      
00000E4A  4E93      1176          jsr       (A3)
00000E4C  DEFC 001C 1177          add.w     #28,A7
00000E50  6000 0062 1178          bra       DisassembleProgram_15
                    1179   DisassembleProgram_13:
                    1180   ; else if(InstructionSize == 5)
00000E54  2012      1181          move.l    (A2),D0
00000E56  0C80 0000 1182          cmp.l     #5,D0
00000E5A  0005      
00000E5C  6600 0056 1183          bne       DisassembleProgram_15
                    1184   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000E60  2F0C      1185          move.l    A4,-(A7)
00000E62  2042      1186          move.l    D2,A0
00000E64  3228 0008 1187          move.w    8(A0),D1
00000E68  C2BC 0000 1188          and.l     #65535,D1
00000E6C  FFFF      
00000E6E  2F01      1189          move.l    D1,-(A7)
00000E70  2042      1190          move.l    D2,A0
00000E72  3228 0006 1191          move.w    6(A0),D1
00000E76  C2BC 0000 1192          and.l     #65535,D1
00000E7A  FFFF      
00000E7C  2F01      1193          move.l    D1,-(A7)
00000E7E  2042      1194          move.l    D2,A0
00000E80  3228 0004 1195          move.w    4(A0),D1
00000E84  C2BC 0000 1196          and.l     #65535,D1
00000E88  FFFF      
00000E8A  2F01      1197          move.l    D1,-(A7)
00000E8C  2042      1198          move.l    D2,A0
00000E8E  3228 0002 1199          move.w    2(A0),D1
00000E92  C2BC 0000 1200          and.l     #65535,D1
00000E96  FFFF      
00000E98  2F01      1201          move.l    D1,-(A7)
00000E9A  2042      1202          move.l    D2,A0
00000E9C  3210      1203          move.w    (A0),D1
00000E9E  C2BC 0000 1204          and.l     #65535,D1
00000EA2  FFFF      
00000EA4  2F01      1205          move.l    D1,-(A7)
00000EA6  2F02      1206          move.l    D2,-(A7)
00000EA8  4879 0000 1207          pea       @m68kde~3_11.L
00000EAC  6CD8      
00000EAE  4E93      1208          jsr       (A3)
00000EB0  DEFC 0020 1209          add.w     #32,A7
                    1210   DisassembleProgram_15:
                    1211   ; ProgramPtr += InstructionSize ;
00000EB4  2012      1212          move.l    (A2),D0
00000EB6  E388      1213          lsl.l     #1,D0
00000EB8  D480      1214          add.l     D0,D2
00000EBA  5283      1215          addq.l    #1,D3
00000EBC  6000 FE7C 1216          bra       DisassembleProgram_4
                    1217   DisassembleProgram_6:
                    1218   ; }
                    1219   ; c = _getch() ;
00000EC0  4EB8 0B68 1220          jsr       __getch
00000EC4  1D40 FFFB 1221          move.b    D0,-5(A6)
                    1222   ; if(c == 0x1b)          // break on ESC
00000EC8  102E FFFB 1223          move.b    -5(A6),D0
00000ECC  0C00 001B 1224          cmp.b     #27,D0
00000ED0  6602      1225          bne.s     DisassembleProgram_17
                    1226   ; return ;
00000ED2  6004      1227          bra.s     DisassembleProgram_19
                    1228   DisassembleProgram_17:
00000ED4  6000 FE62 1229          bra       DisassembleProgram_1
                    1230   DisassembleProgram_19:
00000ED8  4CDF 1C0C 1231          movem.l   (A7)+,D2/D3/A2/A3/A4
00000EDC  4E5E      1232          unlk      A6
00000EDE  4E75      1233          rts
                    1234   ; }
                    1235   ; }
                    1236   ; void DumpMemory(void)   // simple dump memory fn
                    1237   ; {
                    1238   _DumpMemory:
00000EE0  48E7 3C30 1239          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000EE4  45F9 0000 1240          lea       _printf.L,A2
00000EE8  5972      
00000EEA  47F9 0000 1241          lea       _putch.L,A3
00000EEE  5832      
                    1242   ; int i, j ;
                    1243   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1244   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000EF0  4879 0000 1245          pea       @m68kde~3_12.L
00000EF4  6D00      
00000EF6  4E92      1246          jsr       (A2)
00000EF8  584F      1247          addq.w    #4,A7
                    1248   ; printf("\r\nEnter Start Address: ") ;
00000EFA  4879 0000 1249          pea       @m68kde~3_13.L
00000EFE  6D3A      
00000F00  4E92      1250          jsr       (A2)
00000F02  584F      1251          addq.w    #4,A7
                    1252   ; RamPtr = Get8HexDigits(0) ;
00000F04  42A7      1253          clr.l     -(A7)
00000F06  4EB8 0CA4 1254          jsr       _Get8HexDigits
00000F0A  584F      1255          addq.w    #4,A7
00000F0C  2600      1256          move.l    D0,D3
                    1257   ; while(1)    {
                    1258   DumpMemory_1:
                    1259   ; for(i = 0; i < 16; i ++)    {
00000F0E  4285      1260          clr.l     D5
                    1261   DumpMemory_4:
00000F10  0C85 0000 1262          cmp.l     #16,D5
00000F14  0010      
00000F16  6C00 0096 1263          bge       DumpMemory_6
                    1264   ; printf("\r\n%08x ", RamPtr) ;
00000F1A  2F03      1265          move.l    D3,-(A7)
00000F1C  4879 0000 1266          pea       @m68kde~3_14.L
00000F20  6D52      
00000F22  4E92      1267          jsr       (A2)
00000F24  504F      1268          addq.w    #8,A7
                    1269   ; for(j=0; j < 16; j ++)  {
00000F26  4282      1270          clr.l     D2
                    1271   DumpMemory_7:
00000F28  0C82 0000 1272          cmp.l     #16,D2
00000F2C  0010      
00000F2E  6C24      1273          bge.s     DumpMemory_9
                    1274   ; printf("%02X",RamPtr[j]) ;
00000F30  2043      1275          move.l    D3,A0
00000F32  1230 2800 1276          move.b    0(A0,D2.L),D1
00000F36  C2BC 0000 1277          and.l     #255,D1
00000F3A  00FF      
00000F3C  2F01      1278          move.l    D1,-(A7)
00000F3E  4879 0000 1279          pea       @m68kde~3_15.L
00000F42  6D5A      
00000F44  4E92      1280          jsr       (A2)
00000F46  504F      1281          addq.w    #8,A7
                    1282   ; putchar(' ') ;
00000F48  4878 0020 1283          pea       32
00000F4C  4E93      1284          jsr       (A3)
00000F4E  584F      1285          addq.w    #4,A7
00000F50  5282      1286          addq.l    #1,D2
00000F52  60D4      1287          bra       DumpMemory_7
                    1288   DumpMemory_9:
                    1289   ; }
                    1290   ; // now display the data as ASCII at the end
                    1291   ; printf("  ") ;
00000F54  4879 0000 1292          pea       @m68kde~3_16.L
00000F58  6D60      
00000F5A  4E92      1293          jsr       (A2)
00000F5C  584F      1294          addq.w    #4,A7
                    1295   ; for(j = 0; j < 16; j++) {
00000F5E  4282      1296          clr.l     D2
                    1297   DumpMemory_10:
00000F60  0C82 0000 1298          cmp.l     #16,D2
00000F64  0010      
00000F66  6C00 003A 1299          bge       DumpMemory_12
                    1300   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000F6A  2043      1301          move.l    D3,A0
00000F6C  1030 2800 1302          move.b    0(A0,D2.L),D0
00000F70  C03C 007F 1303          and.b     #127,D0
00000F74  1800      1304          move.b    D0,D4
                    1305   ; if((c > (char)(0x7f)) || (c < ' '))
00000F76  0C04 007F 1306          cmp.b     #127,D4
00000F7A  6206      1307          bhi.s     DumpMemory_15
00000F7C  0C04 0020 1308          cmp.b     #32,D4
00000F80  640A      1309          bhs.s     DumpMemory_13
                    1310   DumpMemory_15:
                    1311   ; putchar('.') ;
00000F82  4878 002E 1312          pea       46
00000F86  4E93      1313          jsr       (A3)
00000F88  584F      1314          addq.w    #4,A7
00000F8A  6012      1315          bra.s     DumpMemory_14
                    1316   DumpMemory_13:
                    1317   ; else
                    1318   ; putchar(RamPtr[j]) ;
00000F8C  2043      1319          move.l    D3,A0
00000F8E  1230 2800 1320          move.b    0(A0,D2.L),D1
00000F92  C2BC 0000 1321          and.l     #255,D1
00000F96  00FF      
00000F98  2F01      1322          move.l    D1,-(A7)
00000F9A  4E93      1323          jsr       (A3)
00000F9C  584F      1324          addq.w    #4,A7
                    1325   DumpMemory_14:
00000F9E  5282      1326          addq.l    #1,D2
00000FA0  60BE      1327          bra       DumpMemory_10
                    1328   DumpMemory_12:
                    1329   ; }
                    1330   ; RamPtr = RamPtr + 16 ;
00000FA2  0683 0000 1331          add.l     #16,D3
00000FA6  0010      
00000FA8  5285      1332          addq.l    #1,D5
00000FAA  6000 FF64 1333          bra       DumpMemory_4
                    1334   DumpMemory_6:
                    1335   ; }
                    1336   ; printf("\r\n") ;
00000FAE  4879 0000 1337          pea       @m68kde~3_17.L
00000FB2  6D64      
00000FB4  4E92      1338          jsr       (A2)
00000FB6  584F      1339          addq.w    #4,A7
                    1340   ; c = _getch() ;
00000FB8  4EB8 0B68 1341          jsr       __getch
00000FBC  1800      1342          move.b    D0,D4
                    1343   ; if(c == 0x1b)          // break on ESC
00000FBE  0C04 001B 1344          cmp.b     #27,D4
00000FC2  6602      1345          bne.s     DumpMemory_16
                    1346   ; break ;
00000FC4  6004      1347          bra.s     DumpMemory_3
                    1348   DumpMemory_16:
00000FC6  6000 FF46 1349          bra       DumpMemory_1
                    1350   DumpMemory_3:
00000FCA  4CDF 0C3C 1351          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000FCE  4E75      1352          rts
                    1353   ; }
                    1354   ; }
                    1355   ; void FillMemory()
                    1356   ; {
                    1357   _FillMemory:
00000FD0  48E7 3820 1358          movem.l   D2/D3/D4/A2,-(A7)
00000FD4  45F9 0000 1359          lea       _printf.L,A2
00000FD8  5972      
                    1360   ; char *StartRamPtr, *EndRamPtr ;
                    1361   ; unsigned char FillData ;
                    1362   ; printf("\r\nFill Memory Block") ;
00000FDA  4879 0000 1363          pea       @m68kde~3_18.L
00000FDE  6D68      
00000FE0  4E92      1364          jsr       (A2)
00000FE2  584F      1365          addq.w    #4,A7
                    1366   ; printf("\r\nEnter Start Address: ") ;
00000FE4  4879 0000 1367          pea       @m68kde~3_19.L
00000FE8  6D7C      
00000FEA  4E92      1368          jsr       (A2)
00000FEC  584F      1369          addq.w    #4,A7
                    1370   ; StartRamPtr = Get8HexDigits(0) ;
00000FEE  42A7      1371          clr.l     -(A7)
00000FF0  4EB8 0CA4 1372          jsr       _Get8HexDigits
00000FF4  584F      1373          addq.w    #4,A7
00000FF6  2400      1374          move.l    D0,D2
                    1375   ; printf("\r\nEnter End Address: ") ;
00000FF8  4879 0000 1376          pea       @m68kde~3_20.L
00000FFC  6D94      
00000FFE  4E92      1377          jsr       (A2)
00001000  584F      1378          addq.w    #4,A7
                    1379   ; EndRamPtr = Get8HexDigits(0) ;
00001002  42A7      1380          clr.l     -(A7)
00001004  4EB8 0CA4 1381          jsr       _Get8HexDigits
00001008  584F      1382          addq.w    #4,A7
0000100A  2800      1383          move.l    D0,D4
                    1384   ; printf("\r\nEnter Fill Data: ") ;
0000100C  4879 0000 1385          pea       @m68kde~3_21.L
00001010  6DAA      
00001012  4E92      1386          jsr       (A2)
00001014  584F      1387          addq.w    #4,A7
                    1388   ; FillData = Get2HexDigits(0) ;
00001016  42A7      1389          clr.l     -(A7)
00001018  4EB8 0C04 1390          jsr       _Get2HexDigits
0000101C  584F      1391          addq.w    #4,A7
0000101E  1600      1392          move.b    D0,D3
                    1393   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001020  C6BC 0000 1394          and.l     #255,D3
00001024  00FF      
00001026  2F03      1395          move.l    D3,-(A7)
00001028  2F04      1396          move.l    D4,-(A7)
0000102A  2F02      1397          move.l    D2,-(A7)
0000102C  4879 0000 1398          pea       @m68kde~3_22.L
00001030  6DBE      
00001032  4E92      1399          jsr       (A2)
00001034  DEFC 0010 1400          add.w     #16,A7
                    1401   ; while(StartRamPtr < EndRamPtr)
                    1402   FillMemory_1:
00001038  B484      1403          cmp.l     D4,D2
0000103A  6408      1404          bhs.s     FillMemory_3
                    1405   ; *StartRamPtr++ = FillData ;
0000103C  2042      1406          move.l    D2,A0
0000103E  5282      1407          addq.l    #1,D2
00001040  1083      1408          move.b    D3,(A0)
00001042  60F4      1409          bra       FillMemory_1
                    1410   FillMemory_3:
00001044  4CDF 041C 1411          movem.l   (A7)+,D2/D3/D4/A2
00001048  4E75      1412          rts
                    1413   ; }
                    1414   ; void Load_SRecordFile()
                    1415   ; {
                    1416   _Load_SRecordFile:
0000104A  4E56 FFDC 1417          link      A6,#-36
0000104E  48E7 3F3C 1418          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001052  45EE FFFA 1419          lea       -6(A6),A2
00001056  47F8 0C04 1420          lea       _Get2HexDigits.L,A3
0000105A  49F9 0000 1421          lea       _printf.L,A4
0000105E  5972      
                    1422   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00001060  42AE FFEE 1423          clr.l     -18(A6)
00001064  3A7C 0000 1424          move.w    #0,A5
                    1425   ; int result, ByteCount ;
                    1426   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1427   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1428   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00001068  7E00      1429          moveq     #0,D7
                    1430   ; AddressFail = 0 ;
0000106A  42AE FFEA 1431          clr.l     -22(A6)
                    1432   ; Echo = 0 ;                              // don't echo S records during download
0000106E  42B9 0803 1433          clr.l     _Echo.L
00001072  00E0      
                    1434   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00001074  4879 0000 1435          pea       @m68kde~3_23.L
00001078  6DEE      
0000107A  4E94      1436          jsr       (A4)
0000107C  584F      1437          addq.w    #4,A7
                    1438   ; while(1)    {
                    1439   Load_SRecordFile_1:
                    1440   ; CheckSum = 0 ;
0000107E  4212      1441          clr.b     (A2)
                    1442   ; do {
                    1443   Load_SRecordFile_4:
                    1444   ; c = toupper(_getch()) ;
00001080  2F00      1445          move.l    D0,-(A7)
00001082  4EB8 0B68 1446          jsr       __getch
00001086  2200      1447          move.l    D0,D1
00001088  201F      1448          move.l    (A7)+,D0
0000108A  2F01      1449          move.l    D1,-(A7)
0000108C  4EB9 0000 1450          jsr       _toupper
00001090  5914      
00001092  584F      1451          addq.w    #4,A7
00001094  1C00      1452          move.b    D0,D6
                    1453   ; if(c == 0x1b )      // if break
00001096  0C06 001B 1454          cmp.b     #27,D6
0000109A  6604      1455          bne.s     Load_SRecordFile_6
                    1456   ; return;
0000109C  6000 0132 1457          bra       Load_SRecordFile_8
                    1458   Load_SRecordFile_6:
000010A0  0C06 0053 1459          cmp.b     #83,D6
000010A4  66DA      1460          bne       Load_SRecordFile_4
                    1461   ; }while(c != (char)('S'));   // wait for S start of header
                    1462   ; HeaderType = _getch() ;
000010A6  4EB8 0B68 1463          jsr       __getch
000010AA  1600      1464          move.b    D0,D3
                    1465   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
000010AC  0C03 0030 1466          cmp.b     #48,D3
000010B0  6706      1467          beq.s     Load_SRecordFile_11
000010B2  0C03 0035 1468          cmp.b     #53,D3
000010B6  6604      1469          bne.s     Load_SRecordFile_9
                    1470   Load_SRecordFile_11:
                    1471   ; continue ;
000010B8  6000 00D2 1472          bra       Load_SRecordFile_23
                    1473   Load_SRecordFile_9:
                    1474   ; if(HeaderType >= (char)('7'))
000010BC  0C03 0037 1475          cmp.b     #55,D3
000010C0  6D04      1476          blt.s     Load_SRecordFile_12
                    1477   ; break ;                 // end load on s7,s8,s9 records
000010C2  6000 00CC 1478          bra       Load_SRecordFile_3
                    1479   Load_SRecordFile_12:
                    1480   ; // get the bytecount
                    1481   ; ByteCount = Get2HexDigits(&CheckSum) ;
000010C6  2F0A      1482          move.l    A2,-(A7)
000010C8  4E93      1483          jsr       (A3)
000010CA  584F      1484          addq.w    #4,A7
000010CC  2D40 FFF6 1485          move.l    D0,-10(A6)
                    1486   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1487   ; if(HeaderType == (char)('1')) {
000010D0  0C03 0031 1488          cmp.b     #49,D3
000010D4  660E      1489          bne.s     Load_SRecordFile_14
                    1490   ; AddressSize = 2 ;       // 2 byte address
000010D6  7A02      1491          moveq     #2,D5
                    1492   ; Address = Get4HexDigits(&CheckSum);
000010D8  2F0A      1493          move.l    A2,-(A7)
000010DA  4EB8 0C58 1494          jsr       _Get4HexDigits
000010DE  584F      1495          addq.w    #4,A7
000010E0  2800      1496          move.l    D0,D4
000010E2  6020      1497          bra.s     Load_SRecordFile_17
                    1498   Load_SRecordFile_14:
                    1499   ; }
                    1500   ; else if (HeaderType == (char)('2')) {
000010E4  0C03 0032 1501          cmp.b     #50,D3
000010E8  660E      1502          bne.s     Load_SRecordFile_16
                    1503   ; AddressSize = 3 ;       // 3 byte address
000010EA  7A03      1504          moveq     #3,D5
                    1505   ; Address = Get6HexDigits(&CheckSum) ;
000010EC  2F0A      1506          move.l    A2,-(A7)
000010EE  4EB8 0C7E 1507          jsr       _Get6HexDigits
000010F2  584F      1508          addq.w    #4,A7
000010F4  2800      1509          move.l    D0,D4
000010F6  600C      1510          bra.s     Load_SRecordFile_17
                    1511   Load_SRecordFile_16:
                    1512   ; }
                    1513   ; else    {
                    1514   ; AddressSize = 4 ;       // 4 byte address
000010F8  7A04      1515          moveq     #4,D5
                    1516   ; Address = Get8HexDigits(&CheckSum) ;
000010FA  2F0A      1517          move.l    A2,-(A7)
000010FC  4EB8 0CA4 1518          jsr       _Get8HexDigits
00001100  584F      1519          addq.w    #4,A7
00001102  2800      1520          move.l    D0,D4
                    1521   Load_SRecordFile_17:
                    1522   ; }
                    1523   ; RamPtr = (char *)(Address) ;                            // point to download area
00001104  2D44 FFFC 1524          move.l    D4,-4(A6)
                    1525   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00001108  202E FFF6 1526          move.l    -10(A6),D0
0000110C  9085      1527          sub.l     D5,D0
0000110E  5380      1528          subq.l    #1,D0
00001110  2D40 FFE2 1529          move.l    D0,-30(A6)
                    1530   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001114  4282      1531          clr.l     D2
                    1532   Load_SRecordFile_18:
00001116  B4AE FFE2 1533          cmp.l     -30(A6),D2
0000111A  6C1E      1534          bge.s     Load_SRecordFile_20
                    1535   ; DataByte = Get2HexDigits(&CheckSum) ;
0000111C  2F0A      1536          move.l    A2,-(A7)
0000111E  4E93      1537          jsr       (A3)
00001120  584F      1538          addq.w    #4,A7
00001122  2D40 FFDE 1539          move.l    D0,-34(A6)
                    1540   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00001126  202E FFDE 1541          move.l    -34(A6),D0
0000112A  206E FFFC 1542          move.l    -4(A6),A0
0000112E  52AE FFFC 1543          addq.l    #1,-4(A6)
00001132  1080      1544          move.b    D0,(A0)
                    1545   ; ByteTotal++;
00001134  524D      1546          addq.w    #1,A5
00001136  5282      1547          addq.l    #1,D2
00001138  60DC      1548          bra       Load_SRecordFile_18
                    1549   Load_SRecordFile_20:
                    1550   ; }
                    1551   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1552   ; ReadCheckSum = Get2HexDigits(0) ;
0000113A  42A7      1553          clr.l     -(A7)
0000113C  4E93      1554          jsr       (A3)
0000113E  584F      1555          addq.w    #4,A7
00001140  1D40 FFFB 1556          move.b    D0,-5(A6)
                    1557   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00001144  1012      1558          move.b    (A2),D0
00001146  4600      1559          not.b     D0
00001148  4880      1560          ext.w     D0
0000114A  C07C 00FF 1561          and.w     #255,D0
0000114E  122E FFFB 1562          move.b    -5(A6),D1
00001152  4881      1563          ext.w     D1
00001154  C27C 00FF 1564          and.w     #255,D1
00001158  B041      1565          cmp.w     D1,D0
0000115A  6708      1566          beq.s     Load_SRecordFile_21
                    1567   ; LoadFailed = 1 ;
0000115C  7E01      1568          moveq     #1,D7
                    1569   ; FailedAddress = Address ;
0000115E  2D44 FFE6 1570          move.l    D4,-26(A6)
                    1571   ; break;
00001162  602C      1572          bra.s     Load_SRecordFile_3
                    1573   Load_SRecordFile_21:
                    1574   ; }
                    1575   ; SRecordCount++ ;
00001164  52AE FFEE 1576          addq.l    #1,-18(A6)
                    1577   ; // display feedback on progress
                    1578   ; if(SRecordCount % 25 == 0)
00001168  2F2E FFEE 1579          move.l    -18(A6),-(A7)
0000116C  4878 0019 1580          pea       25
00001170  4EB9 0000 1581          jsr       LDIV
00001174  5766      
00001176  202F 0004 1582          move.l    4(A7),D0
0000117A  504F      1583          addq.w    #8,A7
0000117C  4A80      1584          tst.l     D0
0000117E  660C      1585          bne.s     Load_SRecordFile_23
                    1586   ; putchar('.') ;
00001180  4878 002E 1587          pea       46
00001184  4EB9 0000 1588          jsr       _putch
00001188  5832      
0000118A  584F      1589          addq.w    #4,A7
                    1590   Load_SRecordFile_23:
0000118C  6000 FEF0 1591          bra       Load_SRecordFile_1
                    1592   Load_SRecordFile_3:
                    1593   ; }
                    1594   ; if(LoadFailed == 1) {
00001190  0C87 0000 1595          cmp.l     #1,D7
00001194  0001      
00001196  6610      1596          bne.s     Load_SRecordFile_25
                    1597   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00001198  2F2E FFE6 1598          move.l    -26(A6),-(A7)
0000119C  4879 0000 1599          pea       @m68kde~3_24.L
000011A0  6E1E      
000011A2  4E94      1600          jsr       (A4)
000011A4  504F      1601          addq.w    #8,A7
000011A6  600C      1602          bra.s     Load_SRecordFile_26
                    1603   Load_SRecordFile_25:
                    1604   ; }
                    1605   ; else
                    1606   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
000011A8  2F0D      1607          move.l    A5,-(A7)
000011AA  4879 0000 1608          pea       @m68kde~3_25.L
000011AE  6E44      
000011B0  4E94      1609          jsr       (A4)
000011B2  504F      1610          addq.w    #8,A7
                    1611   Load_SRecordFile_26:
                    1612   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1613   ; for(i = 0; i < 400000; i ++)
000011B4  4282      1614          clr.l     D2
                    1615   Load_SRecordFile_27:
000011B6  0C82 0006 1616          cmp.l     #400000,D2
000011BA  1A80      
000011BC  6C04      1617          bge.s     Load_SRecordFile_29
000011BE  5282      1618          addq.l    #1,D2
000011C0  60F4      1619          bra       Load_SRecordFile_27
                    1620   Load_SRecordFile_29:
                    1621   ; ;
                    1622   ; FlushKeyboard() ;
000011C2  4EB8 0BA6 1623          jsr       _FlushKeyboard
                    1624   ; Echo = 1;
000011C6  23FC 0000 1625          move.l    #1,_Echo.L
000011CA  0001 0803 
000011CE  00E0      
                    1626   Load_SRecordFile_8:
000011D0  4CDF 3CFC 1627          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000011D4  4E5E      1628          unlk      A6
000011D6  4E75      1629          rts
                    1630   ; }
                    1631   ; void MemoryChange(void)
                    1632   ; {
                    1633   _MemoryChange:
000011D8  48E7 3820 1634          movem.l   D2/D3/D4/A2,-(A7)
000011DC  45F9 0000 1635          lea       _printf.L,A2
000011E0  5972      
                    1636   ; unsigned char *RamPtr,c ; // pointer to memory
                    1637   ; int Data ;
                    1638   ; printf("\r\nExamine and Change Memory") ;
000011E2  4879 0000 1639          pea       @m68kde~3_26.L
000011E6  6E66      
000011E8  4E92      1640          jsr       (A2)
000011EA  584F      1641          addq.w    #4,A7
                    1642   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
000011EC  4879 0000 1643          pea       @m68kde~3_27.L
000011F0  6E82      
000011F2  4E92      1644          jsr       (A2)
000011F4  584F      1645          addq.w    #4,A7
                    1646   ; printf("\r\nEnter Address: ") ;
000011F6  4879 0000 1647          pea       @m68kde~3_28.L
000011FA  6EC8      
000011FC  4E92      1648          jsr       (A2)
000011FE  584F      1649          addq.w    #4,A7
                    1650   ; RamPtr = Get8HexDigits(0) ;
00001200  42A7      1651          clr.l     -(A7)
00001202  4EB8 0CA4 1652          jsr       _Get8HexDigits
00001206  584F      1653          addq.w    #4,A7
00001208  2600      1654          move.l    D0,D3
                    1655   ; while(1)    {
                    1656   MemoryChange_1:
                    1657   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000120A  2043      1658          move.l    D3,A0
0000120C  1210      1659          move.b    (A0),D1
0000120E  C2BC 0000 1660          and.l     #255,D1
00001212  00FF      
00001214  2F01      1661          move.l    D1,-(A7)
00001216  2F03      1662          move.l    D3,-(A7)
00001218  4879 0000 1663          pea       @m68kde~3_29.L
0000121C  6EDA      
0000121E  4E92      1664          jsr       (A2)
00001220  DEFC 000C 1665          add.w     #12,A7
                    1666   ; c = tolower(_getch()) ;
00001224  2F00      1667          move.l    D0,-(A7)
00001226  4EB8 0B68 1668          jsr       __getch
0000122A  2200      1669          move.l    D0,D1
0000122C  201F      1670          move.l    (A7)+,D0
0000122E  2F01      1671          move.l    D1,-(A7)
00001230  4EB9 0000 1672          jsr       _tolower
00001234  589E      
00001236  584F      1673          addq.w    #4,A7
00001238  1400      1674          move.b    D0,D2
                    1675   ; if(c == (char)(0x1b))
0000123A  0C02 001B 1676          cmp.b     #27,D2
0000123E  6604      1677          bne.s     MemoryChange_4
                    1678   ; return ;                                // abort on escape
00001240  6000 0090 1679          bra       MemoryChange_6
                    1680   MemoryChange_4:
                    1681   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001244  0C02 0030 1682          cmp.b     #48,D2
00001248  6506      1683          blo.s     MemoryChange_10
0000124A  0C02 0039 1684          cmp.b     #57,D2
0000124E  6310      1685          bls.s     MemoryChange_9
                    1686   MemoryChange_10:
00001250  0C02 0061 1687          cmp.b     #97,D2
00001254  6500 006E 1688          blo       MemoryChange_7
00001258  0C02 0066 1689          cmp.b     #102,D2
0000125C  6200 0066 1690          bhi       MemoryChange_7
                    1691   MemoryChange_9:
                    1692   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001260  C4BC 0000 1693          and.l     #255,D2
00001264  00FF      
00001266  2F02      1694          move.l    D2,-(A7)
00001268  4EB8 0BD2 1695          jsr       _xtod
0000126C  584F      1696          addq.w    #4,A7
0000126E  C0BC 0000 1697          and.l     #255,D0
00001272  00FF      
00001274  E980      1698          asl.l     #4,D0
00001276  2F00      1699          move.l    D0,-(A7)
00001278  2F01      1700          move.l    D1,-(A7)
0000127A  4EB8 0B68 1701          jsr       __getch
0000127E  221F      1702          move.l    (A7)+,D1
00001280  2F00      1703          move.l    D0,-(A7)
00001282  4EB8 0BD2 1704          jsr       _xtod
00001286  584F      1705          addq.w    #4,A7
00001288  2200      1706          move.l    D0,D1
0000128A  201F      1707          move.l    (A7)+,D0
0000128C  C2BC 0000 1708          and.l     #255,D1
00001290  00FF      
00001292  8081      1709          or.l      D1,D0
00001294  2800      1710          move.l    D0,D4
                    1711   ; *RamPtr = (char)(Data) ;
00001296  2043      1712          move.l    D3,A0
00001298  1084      1713          move.b    D4,(A0)
                    1714   ; if(*RamPtr != Data) {
0000129A  2043      1715          move.l    D3,A0
0000129C  1010      1716          move.b    (A0),D0
0000129E  C0BC 0000 1717          and.l     #255,D0
000012A2  00FF      
000012A4  B084      1718          cmp.l     D4,D0
000012A6  671A      1719          beq.s     MemoryChange_11
                    1720   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000012A8  2043      1721          move.l    D3,A0
000012AA  1210      1722          move.b    (A0),D1
000012AC  C2BC 0000 1723          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1724          move.l    D1,-(A7)
000012B4  2F04      1725          move.l    D4,-(A7)
000012B6  4879 0000 1726          pea       @m68kde~3_30.L
000012BA  6EEC      
000012BC  4E92      1727          jsr       (A2)
000012BE  DEFC 000C 1728          add.w     #12,A7
                    1729   MemoryChange_11:
000012C2  6008      1730          bra.s     MemoryChange_13
                    1731   MemoryChange_7:
                    1732   ; }
                    1733   ; }
                    1734   ; else if(c == (char)('-'))
000012C4  0C02 002D 1735          cmp.b     #45,D2
000012C8  6602      1736          bne.s     MemoryChange_13
                    1737   ; RamPtr -= 2 ; ;
000012CA  5583      1738          subq.l    #2,D3
                    1739   MemoryChange_13:
                    1740   ; RamPtr ++ ;
000012CC  5283      1741          addq.l    #1,D3
000012CE  6000 FF3A 1742          bra       MemoryChange_1
                    1743   MemoryChange_6:
000012D2  4CDF 041C 1744          movem.l   (A7)+,D2/D3/D4/A2
000012D6  4E75      1745          rts
                    1746   ; }
                    1747   ; }
                    1748   ; /*******************************************************************
                    1749   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1750   ; ********************************************************************/
                    1751   ; void ProgramFlashChip(void)
                    1752   ; {
                    1753   _ProgramFlashChip:
000012D8  4E75      1754          rts
                    1755   ; //
                    1756   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1757   ; // TODO : then verify by reading it back and comparing to memory
                    1758   ; //
                    1759   ; }
                    1760   ; /*************************************************************************
                    1761   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1762   ; **************************************************************************/
                    1763   ; void LoadFromFlashChip(void)
                    1764   ; {
                    1765   _LoadFromFlashChip:
                    1766   ; printf("\r\nLoading Program From SPI Flash....") ;
000012DA  4879 0000 1767          pea       @m68kde~3_31.L
000012DE  6F20      
000012E0  4EB9 0000 1768          jsr       _printf
000012E4  5972      
000012E6  584F      1769          addq.w    #4,A7
000012E8  4E75      1770          rts
                    1771   ; //
                    1772   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1773   ; //
                    1774   ; }
                    1775   ; // get rid of excess spaces
                    1776   ; void FormatInstructionForTrace(void)
                    1777   ; {
                    1778   _FormatInstructionForTrace:
000012EA  4E56 FF9C 1779          link      A6,#-100
000012EE  48E7 3C20 1780          movem.l   D2/D3/D4/D5/A2,-(A7)
000012F2  45EE FF9C 1781          lea       -100(A6),A2
                    1782   ; unsigned short int i ;
                    1783   ; char c, temp[100], *iptr, *tempptr ;
                    1784   ; for(i=0; i < 100; i++)
000012F6  4244      1785          clr.w     D4
                    1786   FormatInstructionForTrace_1:
000012F8  0C44 0064 1787          cmp.w     #100,D4
000012FC  640E      1788          bhs.s     FormatInstructionForTrace_3
                    1789   ; temp[i] = 0 ;
000012FE  C8BC 0000 1790          and.l     #65535,D4
00001302  FFFF      
00001304  4232 4800 1791          clr.b     0(A2,D4.L)
00001308  5244      1792          addq.w    #1,D4
0000130A  60EC      1793          bra       FormatInstructionForTrace_1
                    1794   FormatInstructionForTrace_3:
                    1795   ; iptr = Instruction ;
0000130C  41F9 0803 1796          lea       _Instruction.L,A0
00001310  04E2      
00001312  2408      1797          move.l    A0,D2
                    1798   ; tempptr = temp ;
00001314  2A0A      1799          move.l    A2,D5
                    1800   ; do{
                    1801   FormatInstructionForTrace_4:
                    1802   ; c = *iptr++ ;
00001316  2042      1803          move.l    D2,A0
00001318  5282      1804          addq.l    #1,D2
0000131A  1610      1805          move.b    (A0),D3
                    1806   ; *tempptr++ = c ;  // copy chars over
0000131C  2045      1807          move.l    D5,A0
0000131E  5285      1808          addq.l    #1,D5
00001320  1083      1809          move.b    D3,(A0)
                    1810   ; if(c == ' ')  {   // if copied space
00001322  0C03 0020 1811          cmp.b     #32,D3
00001326  6622      1812          bne.s     FormatInstructionForTrace_6
                    1813   ; while(*iptr == ' ') {
                    1814   FormatInstructionForTrace_8:
00001328  2042      1815          move.l    D2,A0
0000132A  1010      1816          move.b    (A0),D0
0000132C  0C00 0020 1817          cmp.b     #32,D0
00001330  660C      1818          bne.s     FormatInstructionForTrace_10
                    1819   ; if(*iptr == 0)  // if end of string then done
00001332  2042      1820          move.l    D2,A0
00001334  1010      1821          move.b    (A0),D0
00001336  6602      1822          bne.s     FormatInstructionForTrace_11
                    1823   ; break ;
00001338  6004      1824          bra.s     FormatInstructionForTrace_10
                    1825   FormatInstructionForTrace_11:
                    1826   ; iptr++ ; // skip over remaining spaces
0000133A  5282      1827          addq.l    #1,D2
0000133C  60EA      1828          bra       FormatInstructionForTrace_8
                    1829   FormatInstructionForTrace_10:
                    1830   ; }
                    1831   ; strcat(tempptr,iptr) ;
0000133E  2F02      1832          move.l    D2,-(A7)
00001340  2F05      1833          move.l    D5,-(A7)
00001342  4EB9 0000 1834          jsr       _strcat
00001346  58FE      
00001348  504F      1835          addq.w    #8,A7
                    1836   FormatInstructionForTrace_6:
0000134A  4A03      1837          tst.b     D3
0000134C  66C8      1838          bne       FormatInstructionForTrace_4
                    1839   ; }
                    1840   ; }while(c != 0) ;
                    1841   ; strcpyInstruction(temp) ;
0000134E  2F0A      1842          move.l    A2,-(A7)
00001350  4EB8 0CE6 1843          jsr       _strcpyInstruction
00001354  584F      1844          addq.w    #4,A7
00001356  4CDF 043C 1845          movem.l   (A7)+,D2/D3/D4/D5/A2
0000135A  4E5E      1846          unlk      A6
0000135C  4E75      1847          rts
                    1848   ; }
                    1849   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1850   ; // IMPORTANT
                    1851   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1852   ; // has to be done with an interrupt (IRQ Level 6)
                    1853   ; //
                    1854   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1855   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1856   ; //
                    1857   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1858   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1859   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1860   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1861   ; // program area
                    1862   ; //
                    1863   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1864   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1865   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1866   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1867   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1868   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1869   ; void DumpRegisters()
                    1870   ; {
                    1871   _DumpRegisters:
0000135E  48E7 3F3C 1872          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001362  45F9 0000 1873          lea       _putch.L,A2
00001366  5832      
00001368  47F9 0000 1874          lea       _printf.L,A3
0000136C  5972      
0000136E  49F9 0803 1875          lea       _SR.L,A4
00001372  012C      
00001374  4BF9 0803 1876          lea       _WatchPointString.L,A5
00001378  01C2      
                    1877   ; short i, x, j, k ;
                    1878   ; unsigned char c, *BytePointer;
                    1879   ; // buld up strings for displaying watchpoints
                    1880   ; for(x = 0; x < (short)(8); x++)
0000137A  4242      1881          clr.w     D2
                    1882   DumpRegisters_1:
0000137C  0C42 0008 1883          cmp.w     #8,D2
00001380  6C00 01C6 1884          bge       DumpRegisters_3
                    1885   ; {
                    1886   ; if(WatchPointSetOrCleared[x] == 1)
00001384  48C2      1887          ext.l     D2
00001386  2002      1888          move.l    D2,D0
00001388  E588      1889          lsl.l     #2,D0
0000138A  41F9 0803 1890          lea       _WatchPointSetOrCleared.L,A0
0000138E  01A2      
00001390  2030 0800 1891          move.l    0(A0,D0.L),D0
00001394  0C80 0000 1892          cmp.l     #1,D0
00001398  0001      
0000139A  6600 0186 1893          bne       DumpRegisters_4
                    1894   ; {
                    1895   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000139E  48C2      1896          ext.l     D2
000013A0  2202      1897          move.l    D2,D1
000013A2  E589      1898          lsl.l     #2,D1
000013A4  41F9 0803 1899          lea       _WatchPointAddress.L,A0
000013A8  0182      
000013AA  2F30 1800 1900          move.l    0(A0,D1.L),-(A7)
000013AE  4879 0000 1901          pea       @m68kde~3_32.L
000013B2  6F46      
000013B4  220D      1902          move.l    A5,D1
000013B6  48C2      1903          ext.l     D2
000013B8  2F00      1904          move.l    D0,-(A7)
000013BA  2002      1905          move.l    D2,D0
000013BC  C1FC 0064 1906          muls      #100,D0
000013C0  D280      1907          add.l     D0,D1
000013C2  201F      1908          move.l    (A7)+,D0
000013C4  2F01      1909          move.l    D1,-(A7)
000013C6  4EB9 0000 1910          jsr       _sprintf
000013CA  58CA      
000013CC  DEFC 000C 1911          add.w     #12,A7
                    1912   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000013D0  48C2      1913          ext.l     D2
000013D2  2002      1914          move.l    D2,D0
000013D4  E588      1915          lsl.l     #2,D0
000013D6  41F9 0803 1916          lea       _WatchPointAddress.L,A0
000013DA  0182      
000013DC  2A30 0800 1917          move.l    0(A0,D0.L),D5
                    1918   ; for(j = 0; j < (short)(16); j+=2)
000013E0  4243      1919          clr.w     D3
                    1920   DumpRegisters_6:
000013E2  0C43 0010 1921          cmp.w     #16,D3
000013E6  6C00 0082 1922          bge       DumpRegisters_8
                    1923   ; {
                    1924   ; for(k = 0; k < (short)(2); k++)
000013EA  4246      1925          clr.w     D6
                    1926   DumpRegisters_9:
000013EC  0C46 0002 1927          cmp.w     #2,D6
000013F0  6C00 0052 1928          bge       DumpRegisters_11
                    1929   ; {
                    1930   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
000013F4  2045      1931          move.l    D5,A0
000013F6  48C3      1932          ext.l     D3
000013F8  2203      1933          move.l    D3,D1
000013FA  48C6      1934          ext.l     D6
000013FC  D286      1935          add.l     D6,D1
000013FE  1230 1800 1936          move.b    0(A0,D1.L),D1
00001402  C2BC 0000 1937          and.l     #255,D1
00001406  00FF      
00001408  2F01      1938          move.l    D1,-(A7)
0000140A  4879 0000 1939          pea       @m68kde~3_33.L
0000140E  6F4E      
00001410  4879 0803 1940          pea       _TempString.L
00001414  0546      
00001416  4EB9 0000 1941          jsr       _sprintf
0000141A  58CA      
0000141C  DEFC 000C 1942          add.w     #12,A7
                    1943   ; strcat(WatchPointString[x], TempString) ;
00001420  4879 0803 1944          pea       _TempString.L
00001424  0546      
00001426  220D      1945          move.l    A5,D1
00001428  48C2      1946          ext.l     D2
0000142A  2F00      1947          move.l    D0,-(A7)
0000142C  2002      1948          move.l    D2,D0
0000142E  C1FC 0064 1949          muls      #100,D0
00001432  D280      1950          add.l     D0,D1
00001434  201F      1951          move.l    (A7)+,D0
00001436  2F01      1952          move.l    D1,-(A7)
00001438  4EB9 0000 1953          jsr       _strcat
0000143C  58FE      
0000143E  504F      1954          addq.w    #8,A7
00001440  5246      1955          addq.w    #1,D6
00001442  60A8      1956          bra       DumpRegisters_9
                    1957   DumpRegisters_11:
                    1958   ; }
                    1959   ; strcat(WatchPointString[x]," ") ;
00001444  4879 0000 1960          pea       @m68kde~3_34.L
00001448  6F54      
0000144A  220D      1961          move.l    A5,D1
0000144C  48C2      1962          ext.l     D2
0000144E  2F00      1963          move.l    D0,-(A7)
00001450  2002      1964          move.l    D2,D0
00001452  C1FC 0064 1965          muls      #100,D0
00001456  D280      1966          add.l     D0,D1
00001458  201F      1967          move.l    (A7)+,D0
0000145A  2F01      1968          move.l    D1,-(A7)
0000145C  4EB9 0000 1969          jsr       _strcat
00001460  58FE      
00001462  504F      1970          addq.w    #8,A7
00001464  5443      1971          addq.w    #2,D3
00001466  6000 FF7A 1972          bra       DumpRegisters_6
                    1973   DumpRegisters_8:
                    1974   ; }
                    1975   ; strcat(WatchPointString[x], "  ") ;
0000146A  4879 0000 1976          pea       @m68kde~3_35.L
0000146E  6F56      
00001470  220D      1977          move.l    A5,D1
00001472  48C2      1978          ext.l     D2
00001474  2F00      1979          move.l    D0,-(A7)
00001476  2002      1980          move.l    D2,D0
00001478  C1FC 0064 1981          muls      #100,D0
0000147C  D280      1982          add.l     D0,D1
0000147E  201F      1983          move.l    (A7)+,D0
00001480  2F01      1984          move.l    D1,-(A7)
00001482  4EB9 0000 1985          jsr       _strcat
00001486  58FE      
00001488  504F      1986          addq.w    #8,A7
                    1987   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000148A  48C2      1988          ext.l     D2
0000148C  2002      1989          move.l    D2,D0
0000148E  E588      1990          lsl.l     #2,D0
00001490  41F9 0803 1991          lea       _WatchPointAddress.L,A0
00001494  0182      
00001496  2A30 0800 1992          move.l    0(A0,D0.L),D5
                    1993   ; for(j = 0; j < (short)(16); j++)
0000149A  4243      1994          clr.w     D3
                    1995   DumpRegisters_12:
0000149C  0C43 0010 1996          cmp.w     #16,D3
000014A0  6C00 007E 1997          bge       DumpRegisters_14
                    1998   ; {
                    1999   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000014A4  2045      2000          move.l    D5,A0
000014A6  48C3      2001          ext.l     D3
000014A8  1030 3800 2002          move.b    0(A0,D3.L),D0
000014AC  C03C 007F 2003          and.b     #127,D0
000014B0  1E00      2004          move.b    D0,D7
                    2005   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000014B2  0C07 007F 2006          cmp.b     #127,D7
000014B6  6206      2007          bhi.s     DumpRegisters_17
000014B8  0C07 0020 2008          cmp.b     #32,D7
000014BC  6416      2009          bhs.s     DumpRegisters_15
                    2010   DumpRegisters_17:
                    2011   ; sprintf(TempString, ".") ;
000014BE  4879 0000 2012          pea       @m68kde~3_36.L
000014C2  6F5A      
000014C4  4879 0803 2013          pea       _TempString.L
000014C8  0546      
000014CA  4EB9 0000 2014          jsr       _sprintf
000014CE  58CA      
000014D0  504F      2015          addq.w    #8,A7
000014D2  6026      2016          bra.s     DumpRegisters_16
                    2017   DumpRegisters_15:
                    2018   ; else
                    2019   ; sprintf(TempString, "%c", BytePointer[j]) ;
000014D4  2045      2020          move.l    D5,A0
000014D6  48C3      2021          ext.l     D3
000014D8  1230 3800 2022          move.b    0(A0,D3.L),D1
000014DC  C2BC 0000 2023          and.l     #255,D1
000014E0  00FF      
000014E2  2F01      2024          move.l    D1,-(A7)
000014E4  4879 0000 2025          pea       @m68kde~3_37.L
000014E8  6F5C      
000014EA  4879 0803 2026          pea       _TempString.L
000014EE  0546      
000014F0  4EB9 0000 2027          jsr       _sprintf
000014F4  58CA      
000014F6  DEFC 000C 2028          add.w     #12,A7
                    2029   DumpRegisters_16:
                    2030   ; strcat(WatchPointString[x], TempString) ;
000014FA  4879 0803 2031          pea       _TempString.L
000014FE  0546      
00001500  220D      2032          move.l    A5,D1
00001502  48C2      2033          ext.l     D2
00001504  2F00      2034          move.l    D0,-(A7)
00001506  2002      2035          move.l    D2,D0
00001508  C1FC 0064 2036          muls      #100,D0
0000150C  D280      2037          add.l     D0,D1
0000150E  201F      2038          move.l    (A7)+,D0
00001510  2F01      2039          move.l    D1,-(A7)
00001512  4EB9 0000 2040          jsr       _strcat
00001516  58FE      
00001518  504F      2041          addq.w    #8,A7
0000151A  5243      2042          addq.w    #1,D3
0000151C  6000 FF7E 2043          bra       DumpRegisters_12
                    2044   DumpRegisters_14:
00001520  6020      2045          bra.s     DumpRegisters_5
                    2046   DumpRegisters_4:
                    2047   ; }
                    2048   ; }
                    2049   ; else
                    2050   ; strcpy(WatchPointString[x], "") ;
00001522  4879 0000 2051          pea       @m68kde~3_38.L
00001526  6F60      
00001528  220D      2052          move.l    A5,D1
0000152A  48C2      2053          ext.l     D2
0000152C  2F00      2054          move.l    D0,-(A7)
0000152E  2002      2055          move.l    D2,D0
00001530  C1FC 0064 2056          muls      #100,D0
00001534  D280      2057          add.l     D0,D1
00001536  201F      2058          move.l    (A7)+,D0
00001538  2F01      2059          move.l    D1,-(A7)
0000153A  4EB9 0000 2060          jsr       _strcpy
0000153E  5744      
00001540  504F      2061          addq.w    #8,A7
                    2062   DumpRegisters_5:
00001542  5242      2063          addq.w    #1,D2
00001544  6000 FE36 2064          bra       DumpRegisters_1
                    2065   DumpRegisters_3:
                    2066   ; }
                    2067   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001548  2F39 0803 2068          move.l    _a0.L,-(A7)
0000154C  0104      
0000154E  2F39 0803 2069          move.l    _d0.L,-(A7)
00001552  00E4      
00001554  4879 0000 2070          pea       @m68kde~3_39.L
00001558  6F62      
0000155A  4E93      2071          jsr       (A3)
0000155C  DEFC 000C 2072          add.w     #12,A7
                    2073   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001560  2F39 0803 2074          move.l    _a1.L,-(A7)
00001564  0108      
00001566  2F39 0803 2075          move.l    _d1.L,-(A7)
0000156A  00E8      
0000156C  4879 0000 2076          pea       @m68kde~3_40.L
00001570  6F7E      
00001572  4E93      2077          jsr       (A3)
00001574  DEFC 000C 2078          add.w     #12,A7
                    2079   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001578  2F39 0803 2080          move.l    _a2.L,-(A7)
0000157C  010C      
0000157E  2F39 0803 2081          move.l    _d2.L,-(A7)
00001582  00EC      
00001584  4879 0000 2082          pea       @m68kde~3_41.L
00001588  6F98      
0000158A  4E93      2083          jsr       (A3)
0000158C  DEFC 000C 2084          add.w     #12,A7
                    2085   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001590  2F39 0803 2086          move.l    _a3.L,-(A7)
00001594  0110      
00001596  2F39 0803 2087          move.l    _d3.L,-(A7)
0000159A  00F0      
0000159C  4879 0000 2088          pea       @m68kde~3_42.L
000015A0  6FB2      
000015A2  4E93      2089          jsr       (A3)
000015A4  DEFC 000C 2090          add.w     #12,A7
                    2091   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000015A8  2F39 0803 2092          move.l    _a4.L,-(A7)
000015AC  0114      
000015AE  2F39 0803 2093          move.l    _d4.L,-(A7)
000015B2  00F4      
000015B4  4879 0000 2094          pea       @m68kde~3_43.L
000015B8  6FCC      
000015BA  4E93      2095          jsr       (A3)
000015BC  DEFC 000C 2096          add.w     #12,A7
                    2097   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000015C0  2F39 0803 2098          move.l    _a5.L,-(A7)
000015C4  0118      
000015C6  2F39 0803 2099          move.l    _d5.L,-(A7)
000015CA  00F8      
000015CC  4879 0000 2100          pea       @m68kde~3_44.L
000015D0  6FE6      
000015D2  4E93      2101          jsr       (A3)
000015D4  DEFC 000C 2102          add.w     #12,A7
                    2103   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000015D8  2F39 0803 2104          move.l    _a6.L,-(A7)
000015DC  011C      
000015DE  2F39 0803 2105          move.l    _d6.L,-(A7)
000015E2  00FC      
000015E4  4879 0000 2106          pea       @m68kde~3_45.L
000015E8  7000      
000015EA  4E93      2107          jsr       (A3)
000015EC  DEFC 000C 2108          add.w     #12,A7
                    2109   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
000015F0  3214      2110          move.w    (A4),D1
000015F2  C27C 2000 2111          and.w     #8192,D1
000015F6  0C41 2000 2112          cmp.w     #8192,D1
000015FA  6608      2113          bne.s     DumpRegisters_18
000015FC  2239 0803 2114          move.l    _SSP.L,D1
00001600  0124      
00001602  6006      2115          bra.s     DumpRegisters_19
                    2116   DumpRegisters_18:
00001604  2239 0803 2117          move.l    _USP.L,D1
00001608  0128      
                    2118   DumpRegisters_19:
0000160A  2F01      2119          move.l    D1,-(A7)
0000160C  2F39 0803 2120          move.l    _d7.L,-(A7)
00001610  0100      
00001612  4879 0000 2121          pea       @m68kde~3_46.L
00001616  701A      
00001618  4E93      2122          jsr       (A3)
0000161A  DEFC 000C 2123          add.w     #12,A7
                    2124   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000161E  2F39 0803 2125          move.l    _USP.L,-(A7)
00001622  0128      
00001624  4879 0000 2126          pea       @m68kde~3_47.L
00001628  7034      
0000162A  4E93      2127          jsr       (A3)
0000162C  504F      2128          addq.w    #8,A7
                    2129   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
0000162E  2F39 0803 2130          move.l    _SSP.L,-(A7)
00001632  0124      
00001634  4879 0000 2131          pea       @m68kde~3_48.L
00001638  7052      
0000163A  4E93      2132          jsr       (A3)
0000163C  504F      2133          addq.w    #8,A7
                    2134   ; printf("\r\n SR = $%04X   ",SR) ;
0000163E  3214      2135          move.w    (A4),D1
00001640  C2BC 0000 2136          and.l     #65535,D1
00001644  FFFF      
00001646  2F01      2137          move.l    D1,-(A7)
00001648  4879 0000 2138          pea       @m68kde~3_49.L
0000164C  7074      
0000164E  4E93      2139          jsr       (A3)
00001650  504F      2140          addq.w    #8,A7
                    2141   ; // display the status word in characters etc.
                    2142   ; printf("   [") ;
00001652  4879 0000 2143          pea       @m68kde~3_50.L
00001656  7086      
00001658  4E93      2144          jsr       (A3)
0000165A  584F      2145          addq.w    #4,A7
                    2146   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
0000165C  3014      2147          move.w    (A4),D0
0000165E  C07C 8000 2148          and.w     #32768,D0
00001662  0C40 8000 2149          cmp.w     #32768,D0
00001666  660A      2150          bne.s     DumpRegisters_20
00001668  4878 0054 2151          pea       84
0000166C  4E92      2152          jsr       (A2)
0000166E  584F      2153          addq.w    #4,A7
00001670  6008      2154          bra.s     DumpRegisters_21
                    2155   DumpRegisters_20:
00001672  4878 002D 2156          pea       45
00001676  4E92      2157          jsr       (A2)
00001678  584F      2158          addq.w    #4,A7
                    2159   DumpRegisters_21:
                    2160   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000167A  3014      2161          move.w    (A4),D0
0000167C  C07C 2000 2162          and.w     #8192,D0
00001680  0C40 2000 2163          cmp.w     #8192,D0
00001684  660A      2164          bne.s     DumpRegisters_22
00001686  4878 0053 2165          pea       83
0000168A  4E92      2166          jsr       (A2)
0000168C  584F      2167          addq.w    #4,A7
0000168E  6008      2168          bra.s     DumpRegisters_23
                    2169   DumpRegisters_22:
00001690  4878 0055 2170          pea       85
00001694  4E92      2171          jsr       (A2)
00001696  584F      2172          addq.w    #4,A7
                    2173   DumpRegisters_23:
                    2174   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001698  3014      2175          move.w    (A4),D0
0000169A  C07C 0400 2176          and.w     #1024,D0
0000169E  0C40 0400 2177          cmp.w     #1024,D0
000016A2  660A      2178          bne.s     DumpRegisters_24
000016A4  4878 0031 2179          pea       49
000016A8  4E92      2180          jsr       (A2)
000016AA  584F      2181          addq.w    #4,A7
000016AC  6008      2182          bra.s     DumpRegisters_25
                    2183   DumpRegisters_24:
000016AE  4878 0030 2184          pea       48
000016B2  4E92      2185          jsr       (A2)
000016B4  584F      2186          addq.w    #4,A7
                    2187   DumpRegisters_25:
                    2188   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000016B6  3014      2189          move.w    (A4),D0
000016B8  C07C 0200 2190          and.w     #512,D0
000016BC  0C40 0200 2191          cmp.w     #512,D0
000016C0  660A      2192          bne.s     DumpRegisters_26
000016C2  4878 0031 2193          pea       49
000016C6  4E92      2194          jsr       (A2)
000016C8  584F      2195          addq.w    #4,A7
000016CA  6008      2196          bra.s     DumpRegisters_27
                    2197   DumpRegisters_26:
000016CC  4878 0030 2198          pea       48
000016D0  4E92      2199          jsr       (A2)
000016D2  584F      2200          addq.w    #4,A7
                    2201   DumpRegisters_27:
                    2202   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000016D4  3014      2203          move.w    (A4),D0
000016D6  C07C 0100 2204          and.w     #256,D0
000016DA  0C40 0100 2205          cmp.w     #256,D0
000016DE  660A      2206          bne.s     DumpRegisters_28
000016E0  4878 0031 2207          pea       49
000016E4  4E92      2208          jsr       (A2)
000016E6  584F      2209          addq.w    #4,A7
000016E8  6008      2210          bra.s     DumpRegisters_29
                    2211   DumpRegisters_28:
000016EA  4878 0030 2212          pea       48
000016EE  4E92      2213          jsr       (A2)
000016F0  584F      2214          addq.w    #4,A7
                    2215   DumpRegisters_29:
                    2216   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
000016F2  3014      2217          move.w    (A4),D0
000016F4  C07C 0010 2218          and.w     #16,D0
000016F8  0C40 0010 2219          cmp.w     #16,D0
000016FC  660A      2220          bne.s     DumpRegisters_30
000016FE  4878 0058 2221          pea       88
00001702  4E92      2222          jsr       (A2)
00001704  584F      2223          addq.w    #4,A7
00001706  6008      2224          bra.s     DumpRegisters_31
                    2225   DumpRegisters_30:
00001708  4878 002D 2226          pea       45
0000170C  4E92      2227          jsr       (A2)
0000170E  584F      2228          addq.w    #4,A7
                    2229   DumpRegisters_31:
                    2230   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001710  3014      2231          move.w    (A4),D0
00001712  C07C 0008 2232          and.w     #8,D0
00001716  0C40 0008 2233          cmp.w     #8,D0
0000171A  660A      2234          bne.s     DumpRegisters_32
0000171C  4878 004E 2235          pea       78
00001720  4E92      2236          jsr       (A2)
00001722  584F      2237          addq.w    #4,A7
00001724  6008      2238          bra.s     DumpRegisters_33
                    2239   DumpRegisters_32:
00001726  4878 002D 2240          pea       45
0000172A  4E92      2241          jsr       (A2)
0000172C  584F      2242          addq.w    #4,A7
                    2243   DumpRegisters_33:
                    2244   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
0000172E  3014      2245          move.w    (A4),D0
00001730  C07C 0004 2246          and.w     #4,D0
00001734  0C40 0004 2247          cmp.w     #4,D0
00001738  660A      2248          bne.s     DumpRegisters_34
0000173A  4878 005A 2249          pea       90
0000173E  4E92      2250          jsr       (A2)
00001740  584F      2251          addq.w    #4,A7
00001742  6008      2252          bra.s     DumpRegisters_35
                    2253   DumpRegisters_34:
00001744  4878 002D 2254          pea       45
00001748  4E92      2255          jsr       (A2)
0000174A  584F      2256          addq.w    #4,A7
                    2257   DumpRegisters_35:
                    2258   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
0000174C  3014      2259          move.w    (A4),D0
0000174E  C07C 0002 2260          and.w     #2,D0
00001752  0C40 0002 2261          cmp.w     #2,D0
00001756  660A      2262          bne.s     DumpRegisters_36
00001758  4878 0056 2263          pea       86
0000175C  4E92      2264          jsr       (A2)
0000175E  584F      2265          addq.w    #4,A7
00001760  6008      2266          bra.s     DumpRegisters_37
                    2267   DumpRegisters_36:
00001762  4878 002D 2268          pea       45
00001766  4E92      2269          jsr       (A2)
00001768  584F      2270          addq.w    #4,A7
                    2271   DumpRegisters_37:
                    2272   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000176A  3014      2273          move.w    (A4),D0
0000176C  C07C 0001 2274          and.w     #1,D0
00001770  0C40 0001 2275          cmp.w     #1,D0
00001774  660A      2276          bne.s     DumpRegisters_38
00001776  4878 0043 2277          pea       67
0000177A  4E92      2278          jsr       (A2)
0000177C  584F      2279          addq.w    #4,A7
0000177E  6008      2280          bra.s     DumpRegisters_39
                    2281   DumpRegisters_38:
00001780  4878 002D 2282          pea       45
00001784  4E92      2283          jsr       (A2)
00001786  584F      2284          addq.w    #4,A7
                    2285   DumpRegisters_39:
                    2286   ; putchar(']') ;
00001788  4878 005D 2287          pea       93
0000178C  4E92      2288          jsr       (A2)
0000178E  584F      2289          addq.w    #4,A7
                    2290   ; printf("\r\n PC = $%08X  ", PC) ;
00001790  2F39 0803 2291          move.l    _PC.L,-(A7)
00001794  0120      
00001796  4879 0000 2292          pea       @m68kde~3_51.L
0000179A  708C      
0000179C  4E93      2293          jsr       (A3)
0000179E  504F      2294          addq.w    #8,A7
                    2295   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
000017A0  2039 0803 2296          move.l    _PC.L,D0
000017A4  0120      
000017A6  2040      2297          move.l    D0,A0
000017A8  3010      2298          move.w    (A0),D0
000017AA  0C40 4E4E 2299          cmp.w     #20046,D0
000017AE  6724      2300          beq.s     DumpRegisters_40
                    2301   ; DisassembleInstruction(PC) ;
000017B0  2F39 0803 2302          move.l    _PC.L,-(A7)
000017B4  0120      
000017B6  4EB9 0000 2303          jsr       _DisassembleInstruction
000017BA  38A2      
000017BC  584F      2304          addq.w    #4,A7
                    2305   ; FormatInstructionForTrace() ;
000017BE  4EB8 12EA 2306          jsr       _FormatInstructionForTrace
                    2307   ; printf("%s", Instruction) ;
000017C2  4879 0803 2308          pea       _Instruction.L
000017C6  04E2      
000017C8  4879 0000 2309          pea       @m68kde~3_52.L
000017CC  709C      
000017CE  4E93      2310          jsr       (A3)
000017D0  504F      2311          addq.w    #8,A7
000017D2  600A      2312          bra.s     DumpRegisters_41
                    2313   DumpRegisters_40:
                    2314   ; }
                    2315   ; else
                    2316   ; printf("[BREAKPOINT]") ;
000017D4  4879 0000 2317          pea       @m68kde~3_53.L
000017D8  70A0      
000017DA  4E93      2318          jsr       (A3)
000017DC  584F      2319          addq.w    #4,A7
                    2320   DumpRegisters_41:
                    2321   ; printf("\r\n") ;
000017DE  4879 0000 2322          pea       @m68kde~3_54.L
000017E2  70AE      
000017E4  4E93      2323          jsr       (A3)
000017E6  584F      2324          addq.w    #4,A7
                    2325   ; for(i=0; i < 8; i++)    {
000017E8  4244      2326          clr.w     D4
                    2327   DumpRegisters_42:
000017EA  0C44 0008 2328          cmp.w     #8,D4
000017EE  6C00 0040 2329          bge       DumpRegisters_44
                    2330   ; if(WatchPointSetOrCleared[i] == 1)
000017F2  48C4      2331          ext.l     D4
000017F4  2004      2332          move.l    D4,D0
000017F6  E588      2333          lsl.l     #2,D0
000017F8  41F9 0803 2334          lea       _WatchPointSetOrCleared.L,A0
000017FC  01A2      
000017FE  2030 0800 2335          move.l    0(A0,D0.L),D0
00001802  0C80 0000 2336          cmp.l     #1,D0
00001806  0001      
00001808  6622      2337          bne.s     DumpRegisters_45
                    2338   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000180A  220D      2339          move.l    A5,D1
0000180C  48C4      2340          ext.l     D4
0000180E  2F00      2341          move.l    D0,-(A7)
00001810  2004      2342          move.l    D4,D0
00001812  C1FC 0064 2343          muls      #100,D0
00001816  D280      2344          add.l     D0,D1
00001818  201F      2345          move.l    (A7)+,D0
0000181A  2F01      2346          move.l    D1,-(A7)
0000181C  48C4      2347          ext.l     D4
0000181E  2F04      2348          move.l    D4,-(A7)
00001820  4879 0000 2349          pea       @m68kde~3_55.L
00001824  70B2      
00001826  4E93      2350          jsr       (A3)
00001828  DEFC 000C 2351          add.w     #12,A7
                    2352   DumpRegisters_45:
0000182C  5244      2353          addq.w    #1,D4
0000182E  60BA      2354          bra       DumpRegisters_42
                    2355   DumpRegisters_44:
00001830  4CDF 3CFC 2356          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001834  4E75      2357          rts
                    2358   ; }
                    2359   ; }
                    2360   ; // Trace Exception Handler
                    2361   ; void DumpRegistersandPause(void)
                    2362   ; {
                    2363   _DumpRegistersandPause:
00001836  2F0A      2364          move.l    A2,-(A7)
00001838  45F9 0000 2365          lea       _printf.L,A2
0000183C  5972      
                    2366   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000183E  4879 0000 2367          pea       @m68kde~3_56.L
00001842  70BE      
00001844  4E92      2368          jsr       (A2)
00001846  584F      2369          addq.w    #4,A7
                    2370   ; printf("\r\nBreak Points :[Disabled]") ;
00001848  4879 0000 2371          pea       @m68kde~3_57.L
0000184C  70DE      
0000184E  4E92      2372          jsr       (A2)
00001850  584F      2373          addq.w    #4,A7
                    2374   ; DumpRegisters() ;
00001852  4EB8 135E 2375          jsr       _DumpRegisters
                    2376   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001856  4879 0000 2377          pea       @m68kde~3_58.L
0000185A  70FA      
0000185C  4E92      2378          jsr       (A2)
0000185E  584F      2379          addq.w    #4,A7
                    2380   ; printf("\r\nPress <ESC> to Resume Program") ;
00001860  4879 0000 2381          pea       @m68kde~3_59.L
00001864  7126      
00001866  4E92      2382          jsr       (A2)
00001868  584F      2383          addq.w    #4,A7
                    2384   ; menu() ;
0000186A  4EB9 0000 2385          jsr       _menu
0000186E  24A0      
00001870  245F      2386          move.l    (A7)+,A2
00001872  4E75      2387          rts
                    2388   ; }
                    2389   ; void ChangeRegisters(void)
                    2390   ; {
                    2391   _ChangeRegisters:
00001874  4E56 FFFC 2392          link      A6,#-4
00001878  48E7 303C 2393          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000187C  45F9 0000 2394          lea       _printf.L,A2
00001880  5972      
00001882  47EE FFFC 2395          lea       -4(A6),A3
00001886  49F8 0CA4 2396          lea       _Get8HexDigits.L,A4
0000188A  4BF8 0B68 2397          lea       __getch.L,A5
                    2398   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2399   ; int reg_val ;
                    2400   ; char c, reg[3] ;
                    2401   ; reg[0] = tolower(_getch()) ;
0000188E  2F00      2402          move.l    D0,-(A7)
00001890  4E95      2403          jsr       (A5)
00001892  2200      2404          move.l    D0,D1
00001894  201F      2405          move.l    (A7)+,D0
00001896  2F01      2406          move.l    D1,-(A7)
00001898  4EB9 0000 2407          jsr       _tolower
0000189C  589E      
0000189E  584F      2408          addq.w    #4,A7
000018A0  1680      2409          move.b    D0,(A3)
                    2410   ; reg[1] = c = tolower(_getch()) ;
000018A2  2F00      2411          move.l    D0,-(A7)
000018A4  4E95      2412          jsr       (A5)
000018A6  2200      2413          move.l    D0,D1
000018A8  201F      2414          move.l    (A7)+,D0
000018AA  2F01      2415          move.l    D1,-(A7)
000018AC  4EB9 0000 2416          jsr       _tolower
000018B0  589E      
000018B2  584F      2417          addq.w    #4,A7
000018B4  1400      2418          move.b    D0,D2
000018B6  1740 0001 2419          move.b    D0,1(A3)
                    2420   ; if(reg[0] == (char)('d'))  {    // change data register
000018BA  1013      2421          move.b    (A3),D0
000018BC  0C00 0064 2422          cmp.b     #100,D0
000018C0  6600 00AE 2423          bne       ChangeRegisters_1
                    2424   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000018C4  102B 0001 2425          move.b    1(A3),D0
000018C8  0C00 0037 2426          cmp.b     #55,D0
000018CC  6E0A      2427          bgt.s     ChangeRegisters_5
000018CE  102B 0001 2428          move.b    1(A3),D0
000018D2  0C00 0030 2429          cmp.b     #48,D0
000018D6  6C0E      2430          bge.s     ChangeRegisters_3
                    2431   ChangeRegisters_5:
                    2432   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000018D8  4879 0000 2433          pea       @m68kde~3_60.L
000018DC  7146      
000018DE  4E92      2434          jsr       (A2)
000018E0  584F      2435          addq.w    #4,A7
                    2436   ; return ;
000018E2  6000 0244 2437          bra       ChangeRegisters_6
                    2438   ChangeRegisters_3:
                    2439   ; }
                    2440   ; else {
                    2441   ; printf("\r\nD%c = ", c) ;
000018E6  4882      2442          ext.w     D2
000018E8  48C2      2443          ext.l     D2
000018EA  2F02      2444          move.l    D2,-(A7)
000018EC  4879 0000 2445          pea       @m68kde~3_61.L
000018F0  7172      
000018F2  4E92      2446          jsr       (A2)
000018F4  504F      2447          addq.w    #8,A7
                    2448   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000018F6  42A7      2449          clr.l     -(A7)
000018F8  4E94      2450          jsr       (A4)
000018FA  584F      2451          addq.w    #4,A7
000018FC  2600      2452          move.l    D0,D3
                    2453   ; }
                    2454   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2455   ; if(c == (char)('0'))
000018FE  0C02 0030 2456          cmp.b     #48,D2
00001902  660A      2457          bne.s     ChangeRegisters_7
                    2458   ; d0 = reg_val ;
00001904  23C3 0803 2459          move.l    D3,_d0.L
00001908  00E4      
0000190A  6000 0060 2460          bra       ChangeRegisters_20
                    2461   ChangeRegisters_7:
                    2462   ; else if(c == (char)('1'))
0000190E  0C02 0031 2463          cmp.b     #49,D2
00001912  660A      2464          bne.s     ChangeRegisters_9
                    2465   ; d1 = reg_val ;
00001914  23C3 0803 2466          move.l    D3,_d1.L
00001918  00E8      
0000191A  6000 0050 2467          bra       ChangeRegisters_20
                    2468   ChangeRegisters_9:
                    2469   ; else if(c == (char)('2'))
0000191E  0C02 0032 2470          cmp.b     #50,D2
00001922  660A      2471          bne.s     ChangeRegisters_11
                    2472   ; d2 = reg_val ;
00001924  23C3 0803 2473          move.l    D3,_d2.L
00001928  00EC      
0000192A  6000 0040 2474          bra       ChangeRegisters_20
                    2475   ChangeRegisters_11:
                    2476   ; else if(c == (char)('3'))
0000192E  0C02 0033 2477          cmp.b     #51,D2
00001932  6608      2478          bne.s     ChangeRegisters_13
                    2479   ; d3 = reg_val ;
00001934  23C3 0803 2480          move.l    D3,_d3.L
00001938  00F0      
0000193A  6030      2481          bra.s     ChangeRegisters_20
                    2482   ChangeRegisters_13:
                    2483   ; else if(c == (char)('4'))
0000193C  0C02 0034 2484          cmp.b     #52,D2
00001940  6608      2485          bne.s     ChangeRegisters_15
                    2486   ; d4 = reg_val ;
00001942  23C3 0803 2487          move.l    D3,_d4.L
00001946  00F4      
00001948  6022      2488          bra.s     ChangeRegisters_20
                    2489   ChangeRegisters_15:
                    2490   ; else if(c == (char)('5'))
0000194A  0C02 0035 2491          cmp.b     #53,D2
0000194E  6608      2492          bne.s     ChangeRegisters_17
                    2493   ; d5 = reg_val ;
00001950  23C3 0803 2494          move.l    D3,_d5.L
00001954  00F8      
00001956  6014      2495          bra.s     ChangeRegisters_20
                    2496   ChangeRegisters_17:
                    2497   ; else if(c == (char)('6'))
00001958  0C02 0036 2498          cmp.b     #54,D2
0000195C  6608      2499          bne.s     ChangeRegisters_19
                    2500   ; d6 = reg_val ;
0000195E  23C3 0803 2501          move.l    D3,_d6.L
00001962  00FC      
00001964  6006      2502          bra.s     ChangeRegisters_20
                    2503   ChangeRegisters_19:
                    2504   ; else
                    2505   ; d7 = reg_val ;
00001966  23C3 0803 2506          move.l    D3,_d7.L
0000196A  0100      
                    2507   ChangeRegisters_20:
0000196C  6000 01B6 2508          bra       ChangeRegisters_51
                    2509   ChangeRegisters_1:
                    2510   ; }
                    2511   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001970  1013      2512          move.b    (A3),D0
00001972  0C00 0061 2513          cmp.b     #97,D0
00001976  6600 00A6 2514          bne       ChangeRegisters_21
                    2515   ; if((c > (char)('7')) || (c < (char)('0'))) {
0000197A  0C02 0037 2516          cmp.b     #55,D2
0000197E  6E06      2517          bgt.s     ChangeRegisters_25
00001980  0C02 0030 2518          cmp.b     #48,D2
00001984  6C0E      2519          bge.s     ChangeRegisters_23
                    2520   ChangeRegisters_25:
                    2521   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001986  4879 0000 2522          pea       @m68kde~3_62.L
0000198A  717C      
0000198C  4E92      2523          jsr       (A2)
0000198E  584F      2524          addq.w    #4,A7
                    2525   ; return ;
00001990  6000 0196 2526          bra       ChangeRegisters_6
                    2527   ChangeRegisters_23:
                    2528   ; }
                    2529   ; else {
                    2530   ; printf("\r\nA%c = ", c) ;
00001994  4882      2531          ext.w     D2
00001996  48C2      2532          ext.l     D2
00001998  2F02      2533          move.l    D2,-(A7)
0000199A  4879 0000 2534          pea       @m68kde~3_63.L
0000199E  71AA      
000019A0  4E92      2535          jsr       (A2)
000019A2  504F      2536          addq.w    #8,A7
                    2537   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019A4  42A7      2538          clr.l     -(A7)
000019A6  4E94      2539          jsr       (A4)
000019A8  584F      2540          addq.w    #4,A7
000019AA  2600      2541          move.l    D0,D3
                    2542   ; }
                    2543   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2544   ; if(c == (char)('0'))
000019AC  0C02 0030 2545          cmp.b     #48,D2
000019B0  660A      2546          bne.s     ChangeRegisters_26
                    2547   ; a0 = reg_val ;
000019B2  23C3 0803 2548          move.l    D3,_a0.L
000019B6  0104      
000019B8  6000 0060 2549          bra       ChangeRegisters_39
                    2550   ChangeRegisters_26:
                    2551   ; else if(c == (char)('1'))
000019BC  0C02 0031 2552          cmp.b     #49,D2
000019C0  660A      2553          bne.s     ChangeRegisters_28
                    2554   ; a1 = reg_val ;
000019C2  23C3 0803 2555          move.l    D3,_a1.L
000019C6  0108      
000019C8  6000 0050 2556          bra       ChangeRegisters_39
                    2557   ChangeRegisters_28:
                    2558   ; else if(c == (char)('2'))
000019CC  0C02 0032 2559          cmp.b     #50,D2
000019D0  660A      2560          bne.s     ChangeRegisters_30
                    2561   ; a2 = reg_val ;
000019D2  23C3 0803 2562          move.l    D3,_a2.L
000019D6  010C      
000019D8  6000 0040 2563          bra       ChangeRegisters_39
                    2564   ChangeRegisters_30:
                    2565   ; else if(c == (char)('3'))
000019DC  0C02 0033 2566          cmp.b     #51,D2
000019E0  6608      2567          bne.s     ChangeRegisters_32
                    2568   ; a3 = reg_val ;
000019E2  23C3 0803 2569          move.l    D3,_a3.L
000019E6  0110      
000019E8  6030      2570          bra.s     ChangeRegisters_39
                    2571   ChangeRegisters_32:
                    2572   ; else if(c == (char)('4'))
000019EA  0C02 0034 2573          cmp.b     #52,D2
000019EE  6608      2574          bne.s     ChangeRegisters_34
                    2575   ; a4 = reg_val ;
000019F0  23C3 0803 2576          move.l    D3,_a4.L
000019F4  0114      
000019F6  6022      2577          bra.s     ChangeRegisters_39
                    2578   ChangeRegisters_34:
                    2579   ; else if(c == (char)('5'))
000019F8  0C02 0035 2580          cmp.b     #53,D2
000019FC  6608      2581          bne.s     ChangeRegisters_36
                    2582   ; a5 = reg_val ;
000019FE  23C3 0803 2583          move.l    D3,_a5.L
00001A02  0118      
00001A04  6014      2584          bra.s     ChangeRegisters_39
                    2585   ChangeRegisters_36:
                    2586   ; else if(c == (char)('6'))
00001A06  0C02 0036 2587          cmp.b     #54,D2
00001A0A  6608      2588          bne.s     ChangeRegisters_38
                    2589   ; a6 = reg_val ;
00001A0C  23C3 0803 2590          move.l    D3,_a6.L
00001A10  011C      
00001A12  6006      2591          bra.s     ChangeRegisters_39
                    2592   ChangeRegisters_38:
                    2593   ; else
                    2594   ; USP = reg_val ;
00001A14  23C3 0803 2595          move.l    D3,_USP.L
00001A18  0128      
                    2596   ChangeRegisters_39:
00001A1A  6000 0108 2597          bra       ChangeRegisters_51
                    2598   ChangeRegisters_21:
                    2599   ; }
                    2600   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001A1E  1013      2601          move.b    (A3),D0
00001A20  0C00 0075 2602          cmp.b     #117,D0
00001A24  6600 004E 2603          bne       ChangeRegisters_40
00001A28  0C02 0073 2604          cmp.b     #115,D2
00001A2C  6600 0046 2605          bne       ChangeRegisters_40
                    2606   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001A30  2F00      2607          move.l    D0,-(A7)
00001A32  4E95      2608          jsr       (A5)
00001A34  2200      2609          move.l    D0,D1
00001A36  201F      2610          move.l    (A7)+,D0
00001A38  2F01      2611          move.l    D1,-(A7)
00001A3A  4EB9 0000 2612          jsr       _tolower
00001A3E  589E      
00001A40  584F      2613          addq.w    #4,A7
00001A42  0C80 0000 2614          cmp.l     #112,D0
00001A46  0070      
00001A48  6618      2615          bne.s     ChangeRegisters_42
                    2616   ; printf("\r\nUser SP = ") ;
00001A4A  4879 0000 2617          pea       @m68kde~3_64.L
00001A4E  71B4      
00001A50  4E92      2618          jsr       (A2)
00001A52  584F      2619          addq.w    #4,A7
                    2620   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A54  42A7      2621          clr.l     -(A7)
00001A56  4E94      2622          jsr       (A4)
00001A58  584F      2623          addq.w    #4,A7
00001A5A  23C0 0803 2624          move.l    D0,_USP.L
00001A5E  0128      
00001A60  600E      2625          bra.s     ChangeRegisters_43
                    2626   ChangeRegisters_42:
                    2627   ; }
                    2628   ; else {
                    2629   ; printf("\r\nIllegal Register....") ;
00001A62  4879 0000 2630          pea       @m68kde~3_65.L
00001A66  71C2      
00001A68  4E92      2631          jsr       (A2)
00001A6A  584F      2632          addq.w    #4,A7
                    2633   ; return ;
00001A6C  6000 00BA 2634          bra       ChangeRegisters_6
                    2635   ChangeRegisters_43:
00001A70  6000 00B2 2636          bra       ChangeRegisters_51
                    2637   ChangeRegisters_40:
                    2638   ; }
                    2639   ; }
                    2640   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001A74  1013      2641          move.b    (A3),D0
00001A76  0C00 0073 2642          cmp.b     #115,D0
00001A7A  6600 004E 2643          bne       ChangeRegisters_44
00001A7E  0C02 0073 2644          cmp.b     #115,D2
00001A82  6600 0046 2645          bne       ChangeRegisters_44
                    2646   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001A86  2F00      2647          move.l    D0,-(A7)
00001A88  4E95      2648          jsr       (A5)
00001A8A  2200      2649          move.l    D0,D1
00001A8C  201F      2650          move.l    (A7)+,D0
00001A8E  2F01      2651          move.l    D1,-(A7)
00001A90  4EB9 0000 2652          jsr       _tolower
00001A94  589E      
00001A96  584F      2653          addq.w    #4,A7
00001A98  0C80 0000 2654          cmp.l     #112,D0
00001A9C  0070      
00001A9E  6618      2655          bne.s     ChangeRegisters_46
                    2656   ; printf("\r\nSystem SP = ") ;
00001AA0  4879 0000 2657          pea       @m68kde~3_66.L
00001AA4  71DA      
00001AA6  4E92      2658          jsr       (A2)
00001AA8  584F      2659          addq.w    #4,A7
                    2660   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AAA  42A7      2661          clr.l     -(A7)
00001AAC  4E94      2662          jsr       (A4)
00001AAE  584F      2663          addq.w    #4,A7
00001AB0  23C0 0803 2664          move.l    D0,_SSP.L
00001AB4  0124      
00001AB6  600E      2665          bra.s     ChangeRegisters_47
                    2666   ChangeRegisters_46:
                    2667   ; }
                    2668   ; else {
                    2669   ; printf("\r\nIllegal Register....") ;
00001AB8  4879 0000 2670          pea       @m68kde~3_67.L
00001ABC  71EA      
00001ABE  4E92      2671          jsr       (A2)
00001AC0  584F      2672          addq.w    #4,A7
                    2673   ; return ;
00001AC2  6000 0064 2674          bra       ChangeRegisters_6
                    2675   ChangeRegisters_47:
00001AC6  6000 005C 2676          bra       ChangeRegisters_51
                    2677   ChangeRegisters_44:
                    2678   ; }
                    2679   ; }
                    2680   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001ACA  1013      2681          move.b    (A3),D0
00001ACC  0C00 0070 2682          cmp.b     #112,D0
00001AD0  6620      2683          bne.s     ChangeRegisters_48
00001AD2  0C02 0063 2684          cmp.b     #99,D2
00001AD6  661A      2685          bne.s     ChangeRegisters_48
                    2686   ; printf("\r\nPC = ") ;
00001AD8  4879 0000 2687          pea       @m68kde~3_68.L
00001ADC  7202      
00001ADE  4E92      2688          jsr       (A2)
00001AE0  584F      2689          addq.w    #4,A7
                    2690   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AE2  42A7      2691          clr.l     -(A7)
00001AE4  4E94      2692          jsr       (A4)
00001AE6  584F      2693          addq.w    #4,A7
00001AE8  23C0 0803 2694          move.l    D0,_PC.L
00001AEC  0120      
00001AEE  6000 0034 2695          bra       ChangeRegisters_51
                    2696   ChangeRegisters_48:
                    2697   ; }
                    2698   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001AF2  1013      2699          move.b    (A3),D0
00001AF4  0C00 0073 2700          cmp.b     #115,D0
00001AF8  6620      2701          bne.s     ChangeRegisters_50
00001AFA  0C02 0072 2702          cmp.b     #114,D2
00001AFE  661A      2703          bne.s     ChangeRegisters_50
                    2704   ; printf("\r\nSR = ") ;
00001B00  4879 0000 2705          pea       @m68kde~3_69.L
00001B04  720A      
00001B06  4E92      2706          jsr       (A2)
00001B08  584F      2707          addq.w    #4,A7
                    2708   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001B0A  42A7      2709          clr.l     -(A7)
00001B0C  4EB8 0C58 2710          jsr       _Get4HexDigits
00001B10  584F      2711          addq.w    #4,A7
00001B12  33C0 0803 2712          move.w    D0,_SR.L
00001B16  012C      
00001B18  600A      2713          bra.s     ChangeRegisters_51
                    2714   ChangeRegisters_50:
                    2715   ; }
                    2716   ; else
                    2717   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001B1A  4879 0000 2718          pea       @m68kde~3_70.L
00001B1E  7212      
00001B20  4E92      2719          jsr       (A2)
00001B22  584F      2720          addq.w    #4,A7
                    2721   ChangeRegisters_51:
                    2722   ; DumpRegisters() ;
00001B24  4EB8 135E 2723          jsr       _DumpRegisters
                    2724   ChangeRegisters_6:
00001B28  4CDF 3C0C 2725          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001B2C  4E5E      2726          unlk      A6
00001B2E  4E75      2727          rts
                    2728   ; }
                    2729   ; void BreakPointDisplay(void)
                    2730   ; {
                    2731   _BreakPointDisplay:
00001B30  48E7 3030 2732          movem.l   D2/D3/A2/A3,-(A7)
00001B34  45F9 0000 2733          lea       _printf.L,A2
00001B38  5972      
00001B3A  47F9 0803 2734          lea       _BreakPointAddress.L,A3
00001B3E  012E      
                    2735   ; int i, BreakPointsSet = 0 ;
00001B40  4283      2736          clr.l     D3
                    2737   ; // any break points  set
                    2738   ; for(i = 0; i < 8; i++)  {
00001B42  4282      2739          clr.l     D2
                    2740   BreakPointDisplay_1:
00001B44  0C82 0000 2741          cmp.l     #8,D2
00001B48  0008      
00001B4A  6C1C      2742          bge.s     BreakPointDisplay_3
                    2743   ; if(BreakPointSetOrCleared[i] == 1)
00001B4C  2002      2744          move.l    D2,D0
00001B4E  E588      2745          lsl.l     #2,D0
00001B50  41F9 0803 2746          lea       _BreakPointSetOrCleared.L,A0
00001B54  015E      
00001B56  2030 0800 2747          move.l    0(A0,D0.L),D0
00001B5A  0C80 0000 2748          cmp.l     #1,D0
00001B5E  0001      
00001B60  6602      2749          bne.s     BreakPointDisplay_4
                    2750   ; BreakPointsSet = 1;
00001B62  7601      2751          moveq     #1,D3
                    2752   BreakPointDisplay_4:
00001B64  5282      2753          addq.l    #1,D2
00001B66  60DC      2754          bra       BreakPointDisplay_1
                    2755   BreakPointDisplay_3:
                    2756   ; }
                    2757   ; if(BreakPointsSet == 1) {
00001B68  0C83 0000 2758          cmp.l     #1,D3
00001B6C  0001      
00001B6E  6616      2759          bne.s     BreakPointDisplay_6
                    2760   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001B70  4879 0000 2761          pea       @m68kde~3_71.L
00001B74  724E      
00001B76  4E92      2762          jsr       (A2)
00001B78  584F      2763          addq.w    #4,A7
                    2764   ; printf("\r\n---     ---------    -----------") ;
00001B7A  4879 0000 2765          pea       @m68kde~3_72.L
00001B7E  7274      
00001B80  4E92      2766          jsr       (A2)
00001B82  584F      2767          addq.w    #4,A7
00001B84  600A      2768          bra.s     BreakPointDisplay_7
                    2769   BreakPointDisplay_6:
                    2770   ; }
                    2771   ; else
                    2772   ; printf("\r\nNo BreakPoints Set") ;
00001B86  4879 0000 2773          pea       @m68kde~3_73.L
00001B8A  7298      
00001B8C  4E92      2774          jsr       (A2)
00001B8E  584F      2775          addq.w    #4,A7
                    2776   BreakPointDisplay_7:
                    2777   ; for(i = 0; i < 8; i++)  {
00001B90  4282      2778          clr.l     D2
                    2779   BreakPointDisplay_8:
00001B92  0C82 0000 2780          cmp.l     #8,D2
00001B96  0008      
00001B98  6C00 0080 2781          bge       BreakPointDisplay_10
                    2782   ; // put opcode back to disassemble it, then put break point back
                    2783   ; if(BreakPointSetOrCleared[i] == 1)  {
00001B9C  2002      2784          move.l    D2,D0
00001B9E  E588      2785          lsl.l     #2,D0
00001BA0  41F9 0803 2786          lea       _BreakPointSetOrCleared.L,A0
00001BA4  015E      
00001BA6  2030 0800 2787          move.l    0(A0,D0.L),D0
00001BAA  0C80 0000 2788          cmp.l     #1,D0
00001BAE  0001      
00001BB0  6600 0062 2789          bne       BreakPointDisplay_11
                    2790   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001BB4  2002      2791          move.l    D2,D0
00001BB6  E388      2792          lsl.l     #1,D0
00001BB8  41F9 0803 2793          lea       _BreakPointInstruction.L,A0
00001BBC  014E      
00001BBE  2202      2794          move.l    D2,D1
00001BC0  E589      2795          lsl.l     #2,D1
00001BC2  2233 1800 2796          move.l    0(A3,D1.L),D1
00001BC6  2241      2797          move.l    D1,A1
00001BC8  32B0 0800 2798          move.w    0(A0,D0.L),(A1)
                    2799   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001BCC  2202      2800          move.l    D2,D1
00001BCE  E589      2801          lsl.l     #2,D1
00001BD0  2F33 1800 2802          move.l    0(A3,D1.L),-(A7)
00001BD4  4EB9 0000 2803          jsr       _DisassembleInstruction
00001BD8  38A2      
00001BDA  584F      2804          addq.w    #4,A7
                    2805   ; FormatInstructionForTrace() ;
00001BDC  4EB8 12EA 2806          jsr       _FormatInstructionForTrace
                    2807   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001BE0  2002      2808          move.l    D2,D0
00001BE2  E588      2809          lsl.l     #2,D0
00001BE4  2033 0800 2810          move.l    0(A3,D0.L),D0
00001BE8  2040      2811          move.l    D0,A0
00001BEA  30BC 4E4E 2812          move.w    #20046,(A0)
                    2813   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001BEE  2202      2814          move.l    D2,D1
00001BF0  E589      2815          lsl.l     #2,D1
00001BF2  2F33 1800 2816          move.l    0(A3,D1.L),-(A7)
00001BF6  2F02      2817          move.l    D2,-(A7)
00001BF8  4879 0000 2818          pea       @m68kde~3_74.L
00001BFC  72AE      
00001BFE  4E92      2819          jsr       (A2)
00001C00  DEFC 000C 2820          add.w     #12,A7
                    2821   ; printf("    %s", Instruction);
00001C04  4879 0803 2822          pea       _Instruction.L
00001C08  04E2      
00001C0A  4879 0000 2823          pea       @m68kde~3_75.L
00001C0E  72BE      
00001C10  4E92      2824          jsr       (A2)
00001C12  504F      2825          addq.w    #8,A7
                    2826   BreakPointDisplay_11:
00001C14  5282      2827          addq.l    #1,D2
00001C16  6000 FF7A 2828          bra       BreakPointDisplay_8
                    2829   BreakPointDisplay_10:
                    2830   ; }
                    2831   ; }
                    2832   ; printf("\r\n") ;
00001C1A  4879 0000 2833          pea       @m68kde~3_76.L
00001C1E  72C6      
00001C20  4E92      2834          jsr       (A2)
00001C22  584F      2835          addq.w    #4,A7
00001C24  4CDF 0C0C 2836          movem.l   (A7)+,D2/D3/A2/A3
00001C28  4E75      2837          rts
                    2838   ; }
                    2839   ; void WatchPointDisplay(void)
                    2840   ; {
                    2841   _WatchPointDisplay:
00001C2A  48E7 3020 2842          movem.l   D2/D3/A2,-(A7)
00001C2E  45F9 0000 2843          lea       _printf.L,A2
00001C32  5972      
                    2844   ; int i ;
                    2845   ; int WatchPointsSet = 0 ;
00001C34  4283      2846          clr.l     D3
                    2847   ; // any watchpoints set
                    2848   ; for(i = 0; i < 8; i++)  {
00001C36  4282      2849          clr.l     D2
                    2850   WatchPointDisplay_1:
00001C38  0C82 0000 2851          cmp.l     #8,D2
00001C3C  0008      
00001C3E  6C1C      2852          bge.s     WatchPointDisplay_3
                    2853   ; if(WatchPointSetOrCleared[i] == 1)
00001C40  2002      2854          move.l    D2,D0
00001C42  E588      2855          lsl.l     #2,D0
00001C44  41F9 0803 2856          lea       _WatchPointSetOrCleared.L,A0
00001C48  01A2      
00001C4A  2030 0800 2857          move.l    0(A0,D0.L),D0
00001C4E  0C80 0000 2858          cmp.l     #1,D0
00001C52  0001      
00001C54  6602      2859          bne.s     WatchPointDisplay_4
                    2860   ; WatchPointsSet = 1;
00001C56  7601      2861          moveq     #1,D3
                    2862   WatchPointDisplay_4:
00001C58  5282      2863          addq.l    #1,D2
00001C5A  60DC      2864          bra       WatchPointDisplay_1
                    2865   WatchPointDisplay_3:
                    2866   ; }
                    2867   ; if(WatchPointsSet == 1) {
00001C5C  0C83 0000 2868          cmp.l     #1,D3
00001C60  0001      
00001C62  6616      2869          bne.s     WatchPointDisplay_6
                    2870   ; printf("\r\nNum     Address") ;
00001C64  4879 0000 2871          pea       @m68kde~3_77.L
00001C68  72CA      
00001C6A  4E92      2872          jsr       (A2)
00001C6C  584F      2873          addq.w    #4,A7
                    2874   ; printf("\r\n---     ---------") ;
00001C6E  4879 0000 2875          pea       @m68kde~3_78.L
00001C72  72DC      
00001C74  4E92      2876          jsr       (A2)
00001C76  584F      2877          addq.w    #4,A7
00001C78  600A      2878          bra.s     WatchPointDisplay_7
                    2879   WatchPointDisplay_6:
                    2880   ; }
                    2881   ; else
                    2882   ; printf("\r\nNo WatchPoints Set") ;
00001C7A  4879 0000 2883          pea       @m68kde~3_79.L
00001C7E  72F0      
00001C80  4E92      2884          jsr       (A2)
00001C82  584F      2885          addq.w    #4,A7
                    2886   WatchPointDisplay_7:
                    2887   ; for(i = 0; i < 8; i++)  {
00001C84  4282      2888          clr.l     D2
                    2889   WatchPointDisplay_8:
00001C86  0C82 0000 2890          cmp.l     #8,D2
00001C8A  0008      
00001C8C  6C00 0038 2891          bge       WatchPointDisplay_10
                    2892   ; if(WatchPointSetOrCleared[i] == 1)
00001C90  2002      2893          move.l    D2,D0
00001C92  E588      2894          lsl.l     #2,D0
00001C94  41F9 0803 2895          lea       _WatchPointSetOrCleared.L,A0
00001C98  01A2      
00001C9A  2030 0800 2896          move.l    0(A0,D0.L),D0
00001C9E  0C80 0000 2897          cmp.l     #1,D0
00001CA2  0001      
00001CA4  661C      2898          bne.s     WatchPointDisplay_11
                    2899   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001CA6  2202      2900          move.l    D2,D1
00001CA8  E589      2901          lsl.l     #2,D1
00001CAA  41F9 0803 2902          lea       _WatchPointAddress.L,A0
00001CAE  0182      
00001CB0  2F30 1800 2903          move.l    0(A0,D1.L),-(A7)
00001CB4  2F02      2904          move.l    D2,-(A7)
00001CB6  4879 0000 2905          pea       @m68kde~3_80.L
00001CBA  7306      
00001CBC  4E92      2906          jsr       (A2)
00001CBE  DEFC 000C 2907          add.w     #12,A7
                    2908   WatchPointDisplay_11:
00001CC2  5282      2909          addq.l    #1,D2
00001CC4  60C0      2910          bra       WatchPointDisplay_8
                    2911   WatchPointDisplay_10:
                    2912   ; }
                    2913   ; printf("\r\n") ;
00001CC6  4879 0000 2914          pea       @m68kde~3_81.L
00001CCA  7316      
00001CCC  4E92      2915          jsr       (A2)
00001CCE  584F      2916          addq.w    #4,A7
00001CD0  4CDF 040C 2917          movem.l   (A7)+,D2/D3/A2
00001CD4  4E75      2918          rts
                    2919   ; }
                    2920   ; void BreakPointClear(void)
                    2921   ; {
                    2922   _BreakPointClear:
00001CD6  4E56 FFFC 2923          link      A6,#-4
00001CDA  48E7 2020 2924          movem.l   D2/A2,-(A7)
00001CDE  45F9 0000 2925          lea       _printf.L,A2
00001CE2  5972      
                    2926   ; unsigned int i ;
                    2927   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2928   ; BreakPointDisplay() ;
00001CE4  4EB8 1B30 2929          jsr       _BreakPointDisplay
                    2930   ; printf("\r\nEnter Break Point Number: ") ;
00001CE8  4879 0000 2931          pea       @m68kde~3_82.L
00001CEC  731A      
00001CEE  4E92      2932          jsr       (A2)
00001CF0  584F      2933          addq.w    #4,A7
                    2934   ; i = xtod(_getch()) ;           // get break pointer number
00001CF2  2F00      2935          move.l    D0,-(A7)
00001CF4  4EB8 0B68 2936          jsr       __getch
00001CF8  2200      2937          move.l    D0,D1
00001CFA  201F      2938          move.l    (A7)+,D0
00001CFC  2F01      2939          move.l    D1,-(A7)
00001CFE  4EB8 0BD2 2940          jsr       _xtod
00001D02  584F      2941          addq.w    #4,A7
00001D04  C0BC 0000 2942          and.l     #255,D0
00001D08  00FF      
00001D0A  2400      2943          move.l    D0,D2
                    2944   ; if((i < 0) || (i > 7))   {
00001D0C  0C82 0000 2945          cmp.l     #0,D2
00001D10  0000      
00001D12  6508      2946          blo.s     BreakPointClear_3
00001D14  0C82 0000 2947          cmp.l     #7,D2
00001D18  0007      
00001D1A  630E      2948          bls.s     BreakPointClear_1
                    2949   BreakPointClear_3:
                    2950   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D1C  4879 0000 2951          pea       @m68kde~3_83.L
00001D20  7338      
00001D22  4E92      2952          jsr       (A2)
00001D24  584F      2953          addq.w    #4,A7
                    2954   ; return ;
00001D26  6000 0080 2955          bra       BreakPointClear_4
                    2956   BreakPointClear_1:
                    2957   ; }
                    2958   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001D2A  2002      2959          move.l    D2,D0
00001D2C  E588      2960          lsl.l     #2,D0
00001D2E  41F9 0803 2961          lea       _BreakPointSetOrCleared.L,A0
00001D32  015E      
00001D34  2030 0800 2962          move.l    0(A0,D0.L),D0
00001D38  0C80 0000 2963          cmp.l     #1,D0
00001D3C  0001      
00001D3E  6600 005A 2964          bne       BreakPointClear_5
                    2965   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001D42  2002      2966          move.l    D2,D0
00001D44  E588      2967          lsl.l     #2,D0
00001D46  41F9 0803 2968          lea       _BreakPointAddress.L,A0
00001D4A  012E      
00001D4C  2D70 0800 2969          move.l    0(A0,D0.L),-4(A6)
00001D50  FFFC      
                    2970   ; BreakPointAddress[i] = 0 ;
00001D52  2002      2971          move.l    D2,D0
00001D54  E588      2972          lsl.l     #2,D0
00001D56  41F9 0803 2973          lea       _BreakPointAddress.L,A0
00001D5A  012E      
00001D5C  42B0 0800 2974          clr.l     0(A0,D0.L)
                    2975   ; BreakPointSetOrCleared[i] = 0 ;
00001D60  2002      2976          move.l    D2,D0
00001D62  E588      2977          lsl.l     #2,D0
00001D64  41F9 0803 2978          lea       _BreakPointSetOrCleared.L,A0
00001D68  015E      
00001D6A  42B0 0800 2979          clr.l     0(A0,D0.L)
                    2980   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D6E  2002      2981          move.l    D2,D0
00001D70  E388      2982          lsl.l     #1,D0
00001D72  41F9 0803 2983          lea       _BreakPointInstruction.L,A0
00001D76  014E      
00001D78  226E FFFC 2984          move.l    -4(A6),A1
00001D7C  32B0 0800 2985          move.w    0(A0,D0.L),(A1)
                    2986   ; BreakPointInstruction[i] = 0 ;
00001D80  2002      2987          move.l    D2,D0
00001D82  E388      2988          lsl.l     #1,D0
00001D84  41F9 0803 2989          lea       _BreakPointInstruction.L,A0
00001D88  014E      
00001D8A  4270 0800 2990          clr.w     0(A0,D0.L)
                    2991   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001D8E  4879 0000 2992          pea       @m68kde~3_84.L
00001D92  7354      
00001D94  4E92      2993          jsr       (A2)
00001D96  584F      2994          addq.w    #4,A7
00001D98  600A      2995          bra.s     BreakPointClear_6
                    2996   BreakPointClear_5:
                    2997   ; }
                    2998   ; else
                    2999   ; printf("\r\nBreak Point wasn't Set.....") ;
00001D9A  4879 0000 3000          pea       @m68kde~3_85.L
00001D9E  7372      
00001DA0  4E92      3001          jsr       (A2)
00001DA2  584F      3002          addq.w    #4,A7
                    3003   BreakPointClear_6:
                    3004   ; BreakPointDisplay() ;
00001DA4  4EB8 1B30 3005          jsr       _BreakPointDisplay
                    3006   ; return ;
                    3007   BreakPointClear_4:
00001DA8  4CDF 0404 3008          movem.l   (A7)+,D2/A2
00001DAC  4E5E      3009          unlk      A6
00001DAE  4E75      3010          rts
                    3011   ; }
                    3012   ; void WatchPointClear(void)
                    3013   ; {
                    3014   _WatchPointClear:
00001DB0  48E7 2020 3015          movem.l   D2/A2,-(A7)
00001DB4  45F9 0000 3016          lea       _printf.L,A2
00001DB8  5972      
                    3017   ; unsigned int i ;
                    3018   ; WatchPointDisplay() ;
00001DBA  4EB8 1C2A 3019          jsr       _WatchPointDisplay
                    3020   ; printf("\r\nEnter Watch Point Number: ") ;
00001DBE  4879 0000 3021          pea       @m68kde~3_86.L
00001DC2  7390      
00001DC4  4E92      3022          jsr       (A2)
00001DC6  584F      3023          addq.w    #4,A7
                    3024   ; i = xtod(_getch()) ;           // get watch pointer number
00001DC8  2F00      3025          move.l    D0,-(A7)
00001DCA  4EB8 0B68 3026          jsr       __getch
00001DCE  2200      3027          move.l    D0,D1
00001DD0  201F      3028          move.l    (A7)+,D0
00001DD2  2F01      3029          move.l    D1,-(A7)
00001DD4  4EB8 0BD2 3030          jsr       _xtod
00001DD8  584F      3031          addq.w    #4,A7
00001DDA  C0BC 0000 3032          and.l     #255,D0
00001DDE  00FF      
00001DE0  2400      3033          move.l    D0,D2
                    3034   ; if((i < 0) || (i > 7))   {
00001DE2  0C82 0000 3035          cmp.l     #0,D2
00001DE6  0000      
00001DE8  6508      3036          blo.s     WatchPointClear_3
00001DEA  0C82 0000 3037          cmp.l     #7,D2
00001DEE  0007      
00001DF0  630E      3038          bls.s     WatchPointClear_1
                    3039   WatchPointClear_3:
                    3040   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001DF2  4879 0000 3041          pea       @m68kde~3_87.L
00001DF6  73AE      
00001DF8  4E92      3042          jsr       (A2)
00001DFA  584F      3043          addq.w    #4,A7
                    3044   ; return ;
00001DFC  6000 004E 3045          bra       WatchPointClear_4
                    3046   WatchPointClear_1:
                    3047   ; }
                    3048   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001E00  2002      3049          move.l    D2,D0
00001E02  E588      3050          lsl.l     #2,D0
00001E04  41F9 0803 3051          lea       _WatchPointSetOrCleared.L,A0
00001E08  01A2      
00001E0A  2030 0800 3052          move.l    0(A0,D0.L),D0
00001E0E  0C80 0000 3053          cmp.l     #1,D0
00001E12  0001      
00001E14  6628      3054          bne.s     WatchPointClear_5
                    3055   ; WatchPointAddress[i] = 0 ;
00001E16  2002      3056          move.l    D2,D0
00001E18  E588      3057          lsl.l     #2,D0
00001E1A  41F9 0803 3058          lea       _WatchPointAddress.L,A0
00001E1E  0182      
00001E20  42B0 0800 3059          clr.l     0(A0,D0.L)
                    3060   ; WatchPointSetOrCleared[i] = 0 ;
00001E24  2002      3061          move.l    D2,D0
00001E26  E588      3062          lsl.l     #2,D0
00001E28  41F9 0803 3063          lea       _WatchPointSetOrCleared.L,A0
00001E2C  01A2      
00001E2E  42B0 0800 3064          clr.l     0(A0,D0.L)
                    3065   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001E32  4879 0000 3066          pea       @m68kde~3_88.L
00001E36  73CA      
00001E38  4E92      3067          jsr       (A2)
00001E3A  584F      3068          addq.w    #4,A7
00001E3C  600A      3069          bra.s     WatchPointClear_6
                    3070   WatchPointClear_5:
                    3071   ; }
                    3072   ; else
                    3073   ; printf("\r\nWatch Point Was not Set.....") ;
00001E3E  4879 0000 3074          pea       @m68kde~3_89.L
00001E42  73E8      
00001E44  4E92      3075          jsr       (A2)
00001E46  584F      3076          addq.w    #4,A7
                    3077   WatchPointClear_6:
                    3078   ; WatchPointDisplay() ;
00001E48  4EB8 1C2A 3079          jsr       _WatchPointDisplay
                    3080   ; return ;
                    3081   WatchPointClear_4:
00001E4C  4CDF 0404 3082          movem.l   (A7)+,D2/A2
00001E50  4E75      3083          rts
                    3084   ; }
                    3085   ; void DisableBreakPoints(void)
                    3086   ; {
                    3087   _DisableBreakPoints:
00001E52  4E56 FFFC 3088          link      A6,#-4
00001E56  2F02      3089          move.l    D2,-(A7)
                    3090   ; int i ;
                    3091   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3092   ; for(i = 0; i < 8; i++)  {
00001E58  4282      3093          clr.l     D2
                    3094   DisableBreakPoints_1:
00001E5A  0C82 0000 3095          cmp.l     #8,D2
00001E5E  0008      
00001E60  6C00 003E 3096          bge       DisableBreakPoints_3
                    3097   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001E64  2002      3098          move.l    D2,D0
00001E66  E588      3099          lsl.l     #2,D0
00001E68  41F9 0803 3100          lea       _BreakPointSetOrCleared.L,A0
00001E6C  015E      
00001E6E  2030 0800 3101          move.l    0(A0,D0.L),D0
00001E72  0C80 0000 3102          cmp.l     #1,D0
00001E76  0001      
00001E78  6622      3103          bne.s     DisableBreakPoints_4
                    3104   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E7A  2002      3105          move.l    D2,D0
00001E7C  E588      3106          lsl.l     #2,D0
00001E7E  41F9 0803 3107          lea       _BreakPointAddress.L,A0
00001E82  012E      
00001E84  2D70 0800 3108          move.l    0(A0,D0.L),-4(A6)
00001E88  FFFC      
                    3109   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001E8A  2002      3110          move.l    D2,D0
00001E8C  E388      3111          lsl.l     #1,D0
00001E8E  41F9 0803 3112          lea       _BreakPointInstruction.L,A0
00001E92  014E      
00001E94  226E FFFC 3113          move.l    -4(A6),A1
00001E98  32B0 0800 3114          move.w    0(A0,D0.L),(A1)
                    3115   DisableBreakPoints_4:
00001E9C  5282      3116          addq.l    #1,D2
00001E9E  60BA      3117          bra       DisableBreakPoints_1
                    3118   DisableBreakPoints_3:
00001EA0  241F      3119          move.l    (A7)+,D2
00001EA2  4E5E      3120          unlk      A6
00001EA4  4E75      3121          rts
                    3122   ; }
                    3123   ; }
                    3124   ; }
                    3125   ; void EnableBreakPoints(void)
                    3126   ; {
                    3127   _EnableBreakPoints:
00001EA6  4E56 FFFC 3128          link      A6,#-4
00001EAA  2F02      3129          move.l    D2,-(A7)
                    3130   ; int i ;
                    3131   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3132   ; for(i = 0; i < 8; i++)  {
00001EAC  4282      3133          clr.l     D2
                    3134   EnableBreakPoints_1:
00001EAE  0C82 0000 3135          cmp.l     #8,D2
00001EB2  0008      
00001EB4  6C32      3136          bge.s     EnableBreakPoints_3
                    3137   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001EB6  2002      3138          move.l    D2,D0
00001EB8  E588      3139          lsl.l     #2,D0
00001EBA  41F9 0803 3140          lea       _BreakPointSetOrCleared.L,A0
00001EBE  015E      
00001EC0  2030 0800 3141          move.l    0(A0,D0.L),D0
00001EC4  0C80 0000 3142          cmp.l     #1,D0
00001EC8  0001      
00001ECA  6618      3143          bne.s     EnableBreakPoints_4
                    3144   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001ECC  2002      3145          move.l    D2,D0
00001ECE  E588      3146          lsl.l     #2,D0
00001ED0  41F9 0803 3147          lea       _BreakPointAddress.L,A0
00001ED4  012E      
00001ED6  2D70 0800 3148          move.l    0(A0,D0.L),-4(A6)
00001EDA  FFFC      
                    3149   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001EDC  206E FFFC 3150          move.l    -4(A6),A0
00001EE0  30BC 4E4E 3151          move.w    #20046,(A0)
                    3152   EnableBreakPoints_4:
00001EE4  5282      3153          addq.l    #1,D2
00001EE6  60C6      3154          bra       EnableBreakPoints_1
                    3155   EnableBreakPoints_3:
00001EE8  241F      3156          move.l    (A7)+,D2
00001EEA  4E5E      3157          unlk      A6
00001EEC  4E75      3158          rts
                    3159   ; }
                    3160   ; }
                    3161   ; }
                    3162   ; void KillAllBreakPoints(void)
                    3163   ; {
                    3164   _KillAllBreakPoints:
00001EEE  4E56 FFFC 3165          link      A6,#-4
00001EF2  2F02      3166          move.l    D2,-(A7)
                    3167   ; int i ;
                    3168   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3169   ; for(i = 0; i < 8; i++)  {
00001EF4  4282      3170          clr.l     D2
                    3171   KillAllBreakPoints_1:
00001EF6  0C82 0000 3172          cmp.l     #8,D2
00001EFA  0008      
00001EFC  6C00 0052 3173          bge       KillAllBreakPoints_3
                    3174   ; // clear BP
                    3175   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001F00  2002      3176          move.l    D2,D0
00001F02  E588      3177          lsl.l     #2,D0
00001F04  41F9 0803 3178          lea       _BreakPointAddress.L,A0
00001F08  012E      
00001F0A  2D70 0800 3179          move.l    0(A0,D0.L),-4(A6)
00001F0E  FFFC      
                    3180   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001F10  2002      3181          move.l    D2,D0
00001F12  E388      3182          lsl.l     #1,D0
00001F14  41F9 0803 3183          lea       _BreakPointInstruction.L,A0
00001F18  014E      
00001F1A  226E FFFC 3184          move.l    -4(A6),A1
00001F1E  32B0 0800 3185          move.w    0(A0,D0.L),(A1)
                    3186   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F22  2002      3187          move.l    D2,D0
00001F24  E588      3188          lsl.l     #2,D0
00001F26  41F9 0803 3189          lea       _BreakPointAddress.L,A0
00001F2A  012E      
00001F2C  42B0 0800 3190          clr.l     0(A0,D0.L)
                    3191   ; BreakPointInstruction[i] = 0 ;
00001F30  2002      3192          move.l    D2,D0
00001F32  E388      3193          lsl.l     #1,D0
00001F34  41F9 0803 3194          lea       _BreakPointInstruction.L,A0
00001F38  014E      
00001F3A  4270 0800 3195          clr.w     0(A0,D0.L)
                    3196   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F3E  2002      3197          move.l    D2,D0
00001F40  E588      3198          lsl.l     #2,D0
00001F42  41F9 0803 3199          lea       _BreakPointSetOrCleared.L,A0
00001F46  015E      
00001F48  42B0 0800 3200          clr.l     0(A0,D0.L)
00001F4C  5282      3201          addq.l    #1,D2
00001F4E  60A6      3202          bra       KillAllBreakPoints_1
                    3203   KillAllBreakPoints_3:
00001F50  241F      3204          move.l    (A7)+,D2
00001F52  4E5E      3205          unlk      A6
00001F54  4E75      3206          rts
                    3207   ; }
                    3208   ; //BreakPointDisplay() ;       // display the break points
                    3209   ; }
                    3210   ; void KillAllWatchPoints(void)
                    3211   ; {
                    3212   _KillAllWatchPoints:
00001F56  2F02      3213          move.l    D2,-(A7)
                    3214   ; int i ;
                    3215   ; for(i = 0; i < 8; i++)  {
00001F58  4282      3216          clr.l     D2
                    3217   KillAllWatchPoints_1:
00001F5A  0C82 0000 3218          cmp.l     #8,D2
00001F5E  0008      
00001F60  6C20      3219          bge.s     KillAllWatchPoints_3
                    3220   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F62  2002      3221          move.l    D2,D0
00001F64  E588      3222          lsl.l     #2,D0
00001F66  41F9 0803 3223          lea       _WatchPointAddress.L,A0
00001F6A  0182      
00001F6C  42B0 0800 3224          clr.l     0(A0,D0.L)
                    3225   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F70  2002      3226          move.l    D2,D0
00001F72  E588      3227          lsl.l     #2,D0
00001F74  41F9 0803 3228          lea       _WatchPointSetOrCleared.L,A0
00001F78  01A2      
00001F7A  42B0 0800 3229          clr.l     0(A0,D0.L)
00001F7E  5282      3230          addq.l    #1,D2
00001F80  60D8      3231          bra       KillAllWatchPoints_1
                    3232   KillAllWatchPoints_3:
00001F82  241F      3233          move.l    (A7)+,D2
00001F84  4E75      3234          rts
                    3235   ; }
                    3236   ; //WatchPointDisplay() ;       // display the break points
                    3237   ; }
                    3238   ; void SetBreakPoint(void)
                    3239   ; {
                    3240   _SetBreakPoint:
00001F86  4E56 FFFC 3241          link      A6,#-4
00001F8A  48E7 3830 3242          movem.l   D2/D3/D4/A2/A3,-(A7)
00001F8E  45F9 0000 3243          lea       _printf.L,A2
00001F92  5972      
00001F94  47F9 0803 3244          lea       _BreakPointSetOrCleared.L,A3
00001F98  015E      
                    3245   ; int i ;
                    3246   ; int BPNumber;
                    3247   ; int BPAddress;
                    3248   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3249   ; // see if any free break points
                    3250   ; for(i = 0; i < 8; i ++) {
00001F9A  4282      3251          clr.l     D2
                    3252   SetBreakPoint_1:
00001F9C  0C82 0000 3253          cmp.l     #8,D2
00001FA0  0008      
00001FA2  6C10      3254          bge.s     SetBreakPoint_3
                    3255   ; if( BreakPointSetOrCleared[i] == 0)
00001FA4  2002      3256          move.l    D2,D0
00001FA6  E588      3257          lsl.l     #2,D0
00001FA8  2033 0800 3258          move.l    0(A3,D0.L),D0
00001FAC  6602      3259          bne.s     SetBreakPoint_4
                    3260   ; break ;         // if spare BP found allow user to set it
00001FAE  6004      3261          bra.s     SetBreakPoint_3
                    3262   SetBreakPoint_4:
00001FB0  5282      3263          addq.l    #1,D2
00001FB2  60E8      3264          bra       SetBreakPoint_1
                    3265   SetBreakPoint_3:
                    3266   ; }
                    3267   ; if(i == 8) {
00001FB4  0C82 0000 3268          cmp.l     #8,D2
00001FB8  0008      
00001FBA  660E      3269          bne.s     SetBreakPoint_6
                    3270   ; printf("\r\nNo FREE Break Points.....") ;
00001FBC  4879 0000 3271          pea       @m68kde~3_90.L
00001FC0  7408      
00001FC2  4E92      3272          jsr       (A2)
00001FC4  584F      3273          addq.w    #4,A7
                    3274   ; return ;
00001FC6  6000 00EC 3275          bra       SetBreakPoint_15
                    3276   SetBreakPoint_6:
                    3277   ; }
                    3278   ; printf("\r\nBreak Point Address: ") ;
00001FCA  4879 0000 3279          pea       @m68kde~3_91.L
00001FCE  7424      
00001FD0  4E92      3280          jsr       (A2)
00001FD2  584F      3281          addq.w    #4,A7
                    3282   ; BPAddress = Get8HexDigits(0) ;
00001FD4  42A7      3283          clr.l     -(A7)
00001FD6  4EB8 0CA4 3284          jsr       _Get8HexDigits
00001FDA  584F      3285          addq.w    #4,A7
00001FDC  2600      3286          move.l    D0,D3
                    3287   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001FDE  2803      3288          move.l    D3,D4
                    3289   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001FE0  2003      3290          move.l    D3,D0
00001FE2  C0BC 0000 3291          and.l     #1,D0
00001FE6  0001      
00001FE8  0C80 0000 3292          cmp.l     #1,D0
00001FEC  0001      
00001FEE  660E      3293          bne.s     SetBreakPoint_9
                    3294   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001FF0  4879 0000 3295          pea       @m68kde~3_92.L
00001FF4  743C      
00001FF6  4E92      3296          jsr       (A2)
00001FF8  584F      3297          addq.w    #4,A7
                    3298   ; return ;
00001FFA  6000 00B8 3299          bra       SetBreakPoint_15
                    3300   SetBreakPoint_9:
                    3301   ; }
                    3302   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001FFE  0C83 0000 3303          cmp.l     #32768,D3
00002002  8000      
00002004  640E      3304          bhs.s     SetBreakPoint_11
                    3305   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002006  4879 0000 3306          pea       @m68kde~3_93.L
0000200A  7472      
0000200C  4E92      3307          jsr       (A2)
0000200E  584F      3308          addq.w    #4,A7
                    3309   ; return ;
00002010  6000 00A2 3310          bra       SetBreakPoint_15
                    3311   SetBreakPoint_11:
                    3312   ; }
                    3313   ; // search for first free bp or existing same BP
                    3314   ; for(i = 0; i < 8; i++)  {
00002014  4282      3315          clr.l     D2
                    3316   SetBreakPoint_13:
00002016  0C82 0000 3317          cmp.l     #8,D2
0000201A  0008      
0000201C  6C00 0096 3318          bge       SetBreakPoint_15
                    3319   ; if(BreakPointAddress[i] == BPAddress)   {
00002020  2002      3320          move.l    D2,D0
00002022  E588      3321          lsl.l     #2,D0
00002024  41F9 0803 3322          lea       _BreakPointAddress.L,A0
00002028  012E      
0000202A  B6B0 0800 3323          cmp.l     0(A0,D0.L),D3
0000202E  6610      3324          bne.s     SetBreakPoint_16
                    3325   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002030  2F03      3326          move.l    D3,-(A7)
00002032  4879 0000 3327          pea       @m68kde~3_94.L
00002036  74BA      
00002038  4E92      3328          jsr       (A2)
0000203A  504F      3329          addq.w    #8,A7
                    3330   ; return ;
0000203C  6000 0076 3331          bra       SetBreakPoint_15
                    3332   SetBreakPoint_16:
                    3333   ; }
                    3334   ; if(BreakPointSetOrCleared[i] == 0) {
00002040  2002      3335          move.l    D2,D0
00002042  E588      3336          lsl.l     #2,D0
00002044  2033 0800 3337          move.l    0(A3,D0.L),D0
00002048  6600 0064 3338          bne       SetBreakPoint_18
                    3339   ; // set BP here
                    3340   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
0000204C  2002      3341          move.l    D2,D0
0000204E  E588      3342          lsl.l     #2,D0
00002050  27BC 0000 3343          move.l    #1,0(A3,D0.L)
00002054  0001 0800 
                    3344   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002058  2044      3345          move.l    D4,A0
0000205A  2002      3346          move.l    D2,D0
0000205C  E388      3347          lsl.l     #1,D0
0000205E  43F9 0803 3348          lea       _BreakPointInstruction.L,A1
00002062  014E      
00002064  3390 0800 3349          move.w    (A0),0(A1,D0.L)
                    3350   ; DisassembleInstruction(ProgramBreakPointAddress) ;
00002068  2F04      3351          move.l    D4,-(A7)
0000206A  4EB9 0000 3352          jsr       _DisassembleInstruction
0000206E  38A2      
00002070  584F      3353          addq.w    #4,A7
                    3354   ; FormatInstructionForTrace() ;
00002072  4EB8 12EA 3355          jsr       _FormatInstructionForTrace
                    3356   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
00002076  4879 0803 3357          pea       _Instruction.L
0000207A  04E2      
0000207C  2F04      3358          move.l    D4,-(A7)
0000207E  4879 0000 3359          pea       @m68kde~3_95.L
00002082  74F2      
00002084  4E92      3360          jsr       (A2)
00002086  DEFC 000C 3361          add.w     #12,A7
                    3362   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000208A  2044      3363          move.l    D4,A0
0000208C  30BC 4E4E 3364          move.w    #20046,(A0)
                    3365   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002090  2002      3366          move.l    D2,D0
00002092  E588      3367          lsl.l     #2,D0
00002094  41F9 0803 3368          lea       _BreakPointAddress.L,A0
00002098  012E      
0000209A  2183 0800 3369          move.l    D3,0(A0,D0.L)
                    3370   ; printf("\r\n") ;
0000209E  4879 0000 3371          pea       @m68kde~3_96.L
000020A2  752A      
000020A4  4E92      3372          jsr       (A2)
000020A6  584F      3373          addq.w    #4,A7
                    3374   ; BreakPointDisplay() ;       // display the break points
000020A8  4EB8 1B30 3375          jsr       _BreakPointDisplay
                    3376   ; return ;
000020AC  6006      3377          bra.s     SetBreakPoint_15
                    3378   SetBreakPoint_18:
000020AE  5282      3379          addq.l    #1,D2
000020B0  6000 FF64 3380          bra       SetBreakPoint_13
                    3381   SetBreakPoint_15:
000020B4  4CDF 0C1C 3382          movem.l   (A7)+,D2/D3/D4/A2/A3
000020B8  4E5E      3383          unlk      A6
000020BA  4E75      3384          rts
                    3385   ; }
                    3386   ; }
                    3387   ; }
                    3388   ; void SetWatchPoint(void)
                    3389   ; {
                    3390   _SetWatchPoint:
000020BC  4E56 FFF8 3391          link      A6,#-8
000020C0  48E7 3030 3392          movem.l   D2/D3/A2/A3,-(A7)
000020C4  45F9 0000 3393          lea       _printf.L,A2
000020C8  5972      
000020CA  47F9 0803 3394          lea       _WatchPointSetOrCleared.L,A3
000020CE  01A2      
                    3395   ; int i ;
                    3396   ; int WPNumber;
                    3397   ; int WPAddress;
                    3398   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3399   ; // see if any free break points
                    3400   ; for(i = 0; i < 8; i ++) {
000020D0  4282      3401          clr.l     D2
                    3402   SetWatchPoint_1:
000020D2  0C82 0000 3403          cmp.l     #8,D2
000020D6  0008      
000020D8  6C10      3404          bge.s     SetWatchPoint_3
                    3405   ; if( WatchPointSetOrCleared[i] == 0)
000020DA  2002      3406          move.l    D2,D0
000020DC  E588      3407          lsl.l     #2,D0
000020DE  2033 0800 3408          move.l    0(A3,D0.L),D0
000020E2  6602      3409          bne.s     SetWatchPoint_4
                    3410   ; break ;         // if spare WP found allow user to set it
000020E4  6004      3411          bra.s     SetWatchPoint_3
                    3412   SetWatchPoint_4:
000020E6  5282      3413          addq.l    #1,D2
000020E8  60E8      3414          bra       SetWatchPoint_1
                    3415   SetWatchPoint_3:
                    3416   ; }
                    3417   ; if(i == 8) {
000020EA  0C82 0000 3418          cmp.l     #8,D2
000020EE  0008      
000020F0  660E      3419          bne.s     SetWatchPoint_6
                    3420   ; printf("\r\nNo FREE Watch Points.....") ;
000020F2  4879 0000 3421          pea       @m68kde~3_97.L
000020F6  752E      
000020F8  4E92      3422          jsr       (A2)
000020FA  584F      3423          addq.w    #4,A7
                    3424   ; return ;
000020FC  6000 008C 3425          bra       SetWatchPoint_11
                    3426   SetWatchPoint_6:
                    3427   ; }
                    3428   ; printf("\r\nWatch Point Address: ") ;
00002100  4879 0000 3429          pea       @m68kde~3_98.L
00002104  754A      
00002106  4E92      3430          jsr       (A2)
00002108  584F      3431          addq.w    #4,A7
                    3432   ; WPAddress = Get8HexDigits(0) ;
0000210A  42A7      3433          clr.l     -(A7)
0000210C  4EB8 0CA4 3434          jsr       _Get8HexDigits
00002110  584F      3435          addq.w    #4,A7
00002112  2600      3436          move.l    D0,D3
                    3437   ; // search for first free wp or existing same wp
                    3438   ; for(i = 0; i < 8; i++)  {
00002114  4282      3439          clr.l     D2
                    3440   SetWatchPoint_9:
00002116  0C82 0000 3441          cmp.l     #8,D2
0000211A  0008      
0000211C  6C00 006C 3442          bge       SetWatchPoint_11
                    3443   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002120  2002      3444          move.l    D2,D0
00002122  E588      3445          lsl.l     #2,D0
00002124  41F9 0803 3446          lea       _WatchPointAddress.L,A0
00002128  0182      
0000212A  B6B0 0800 3447          cmp.l     0(A0,D0.L),D3
0000212E  6614      3448          bne.s     SetWatchPoint_12
00002130  4A83      3449          tst.l     D3
00002132  6710      3450          beq.s     SetWatchPoint_12
                    3451   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002134  2F03      3452          move.l    D3,-(A7)
00002136  4879 0000 3453          pea       @m68kde~3_99.L
0000213A  7562      
0000213C  4E92      3454          jsr       (A2)
0000213E  504F      3455          addq.w    #8,A7
                    3456   ; return ;
00002140  6000 0048 3457          bra       SetWatchPoint_11
                    3458   SetWatchPoint_12:
                    3459   ; }
                    3460   ; if(WatchPointSetOrCleared[i] == 0) {
00002144  2002      3461          move.l    D2,D0
00002146  E588      3462          lsl.l     #2,D0
00002148  2033 0800 3463          move.l    0(A3,D0.L),D0
0000214C  6600 0038 3464          bne       SetWatchPoint_14
                    3465   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002150  2002      3466          move.l    D2,D0
00002152  E588      3467          lsl.l     #2,D0
00002154  27BC 0000 3468          move.l    #1,0(A3,D0.L)
00002158  0001 0800 
                    3469   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000215C  2F03      3470          move.l    D3,-(A7)
0000215E  4879 0000 3471          pea       @m68kde~3_100.L
00002162  7598      
00002164  4E92      3472          jsr       (A2)
00002166  504F      3473          addq.w    #8,A7
                    3474   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002168  2002      3475          move.l    D2,D0
0000216A  E588      3476          lsl.l     #2,D0
0000216C  41F9 0803 3477          lea       _WatchPointAddress.L,A0
00002170  0182      
00002172  2183 0800 3478          move.l    D3,0(A0,D0.L)
                    3479   ; printf("\r\n") ;
00002176  4879 0000 3480          pea       @m68kde~3_101.L
0000217A  75BE      
0000217C  4E92      3481          jsr       (A2)
0000217E  584F      3482          addq.w    #4,A7
                    3483   ; WatchPointDisplay() ;       // display the break points
00002180  4EB8 1C2A 3484          jsr       _WatchPointDisplay
                    3485   ; return ;
00002184  6004      3486          bra.s     SetWatchPoint_11
                    3487   SetWatchPoint_14:
00002186  5282      3488          addq.l    #1,D2
00002188  608C      3489          bra       SetWatchPoint_9
                    3490   SetWatchPoint_11:
0000218A  4CDF 0C0C 3491          movem.l   (A7)+,D2/D3/A2/A3
0000218E  4E5E      3492          unlk      A6
00002190  4E75      3493          rts
                    3494   ; }
                    3495   ; }
                    3496   ; }
                    3497   ; void HandleBreakPoint(void)
                    3498   ; {
                    3499   _HandleBreakPoint:
00002192  4E56 FFFC 3500          link      A6,#-4
00002196  48E7 0038 3501          movem.l   A2/A3/A4,-(A7)
0000219A  45F9 0803 3502          lea       _i.L,A2
0000219E  00C4      
000021A0  47F9 0000 3503          lea       _printf.L,A3
000021A4  5972      
000021A6  49F9 0803 3504          lea       _PC.L,A4
000021AA  0120      
                    3505   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3506   ; // now we have to put the break point back to run the instruction
                    3507   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3508   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000021AC  5594      3509          subq.l    #2,(A4)
                    3510   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000021AE  4879 0000 3511          pea       @m68kde~3_102.L
000021B2  75C2      
000021B4  4E93      3512          jsr       (A3)
000021B6  584F      3513          addq.w    #4,A7
                    3514   ; printf("\r\nSingle Step : [ON]") ;
000021B8  4879 0000 3515          pea       @m68kde~3_103.L
000021BC  75D6      
000021BE  4E93      3516          jsr       (A3)
000021C0  584F      3517          addq.w    #4,A7
                    3518   ; printf("\r\nBreakPoints : [Enabled]") ;
000021C2  4879 0000 3519          pea       @m68kde~3_104.L
000021C6  75EC      
000021C8  4E93      3520          jsr       (A3)
000021CA  584F      3521          addq.w    #4,A7
                    3522   ; // now clear the break point (put original instruction back)
                    3523   ; ProgramBreakPointAddress = PC ;
000021CC  2D54 FFFC 3524          move.l    (A4),-4(A6)
                    3525   ; for(i = 0; i < 8; i ++) {
000021D0  4292      3526          clr.l     (A2)
                    3527   HandleBreakPoint_1:
000021D2  2012      3528          move.l    (A2),D0
000021D4  0C80 0000 3529          cmp.l     #8,D0
000021D8  0008      
000021DA  6400 0056 3530          bhs       HandleBreakPoint_3
                    3531   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000021DE  2012      3532          move.l    (A2),D0
000021E0  E588      3533          lsl.l     #2,D0
000021E2  41F9 0803 3534          lea       _BreakPointAddress.L,A0
000021E6  012E      
000021E8  2230 0800 3535          move.l    0(A0,D0.L),D1
000021EC  B294      3536          cmp.l     (A4),D1
000021EE  6600 003E 3537          bne       HandleBreakPoint_4
                    3538   ; BreakPointAddress[i] = 0 ;
000021F2  2012      3539          move.l    (A2),D0
000021F4  E588      3540          lsl.l     #2,D0
000021F6  41F9 0803 3541          lea       _BreakPointAddress.L,A0
000021FA  012E      
000021FC  42B0 0800 3542          clr.l     0(A0,D0.L)
                    3543   ; BreakPointSetOrCleared[i] = 0 ;
00002200  2012      3544          move.l    (A2),D0
00002202  E588      3545          lsl.l     #2,D0
00002204  41F9 0803 3546          lea       _BreakPointSetOrCleared.L,A0
00002208  015E      
0000220A  42B0 0800 3547          clr.l     0(A0,D0.L)
                    3548   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000220E  2012      3549          move.l    (A2),D0
00002210  E388      3550          lsl.l     #1,D0
00002212  41F9 0803 3551          lea       _BreakPointInstruction.L,A0
00002216  014E      
00002218  226E FFFC 3552          move.l    -4(A6),A1
0000221C  32B0 0800 3553          move.w    0(A0,D0.L),(A1)
                    3554   ; BreakPointInstruction[i] = 0 ;
00002220  2012      3555          move.l    (A2),D0
00002222  E388      3556          lsl.l     #1,D0
00002224  41F9 0803 3557          lea       _BreakPointInstruction.L,A0
00002228  014E      
0000222A  4270 0800 3558          clr.w     0(A0,D0.L)
                    3559   HandleBreakPoint_4:
0000222E  5292      3560          addq.l    #1,(A2)
00002230  60A0      3561          bra       HandleBreakPoint_1
                    3562   HandleBreakPoint_3:
                    3563   ; }
                    3564   ; }
                    3565   ; DumpRegisters() ;
00002232  4EB8 135E 3566          jsr       _DumpRegisters
                    3567   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002236  4879 0000 3568          pea       @m68kde~3_105.L
0000223A  7606      
0000223C  4E93      3569          jsr       (A3)
0000223E  584F      3570          addq.w    #4,A7
                    3571   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002240  4879 0000 3572          pea       @m68kde~3_106.L
00002244  7632      
00002246  4E93      3573          jsr       (A3)
00002248  584F      3574          addq.w    #4,A7
                    3575   ; menu() ;
0000224A  4EB9 0000 3576          jsr       _menu
0000224E  24A0      
00002250  4CDF 1C00 3577          movem.l   (A7)+,A2/A3/A4
00002254  4E5E      3578          unlk      A6
00002256  4E75      3579          rts
                    3580   ; }
                    3581   ; void UnknownCommand()
                    3582   ; {
                    3583   _UnknownCommand:
                    3584   ; printf("\r\nUnknown Command.....\r\n") ;
00002258  4879 0000 3585          pea       @m68kde~3_107.L
0000225C  765A      
0000225E  4EB9 0000 3586          jsr       _printf
00002262  5972      
00002264  584F      3587          addq.w    #4,A7
                    3588   ; Help() ;
00002266  4EB9 0000 3589          jsr       _Help
0000226A  23BC      
0000226C  4E75      3590          rts
                    3591   ; }
                    3592   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3593   ; void CallDebugMonitor(void)
                    3594   ; {
                    3595   _CallDebugMonitor:
                    3596   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000226E  4879 0000 3597          pea       @m68kde~3_108.L
00002272  7674      
00002274  4EB9 0000 3598          jsr       _printf
00002278  5972      
0000227A  584F      3599          addq.w    #4,A7
                    3600   ; menu();
0000227C  4EB9 0000 3601          jsr       _menu
00002280  24A0      
00002282  4E75      3602          rts
                    3603   ; }
                    3604   ; void Breakpoint(void)
                    3605   ; {
                    3606   _Breakpoint:
00002284  2F02      3607          move.l    D2,-(A7)
                    3608   ; char c;
                    3609   ; c = toupper(_getch());
00002286  2F00      3610          move.l    D0,-(A7)
00002288  4EB8 0B68 3611          jsr       __getch
0000228C  2200      3612          move.l    D0,D1
0000228E  201F      3613          move.l    (A7)+,D0
00002290  2F01      3614          move.l    D1,-(A7)
00002292  4EB9 0000 3615          jsr       _toupper
00002296  5914      
00002298  584F      3616          addq.w    #4,A7
0000229A  1400      3617          move.b    D0,D2
                    3618   ; if( c == (char)('D'))                                      // BreakPoint Display
0000229C  0C02 0044 3619          cmp.b     #68,D2
000022A0  6608      3620          bne.s     Breakpoint_1
                    3621   ; BreakPointDisplay() ;
000022A2  4EB8 1B30 3622          jsr       _BreakPointDisplay
000022A6  6000 0054 3623          bra       Breakpoint_10
                    3624   Breakpoint_1:
                    3625   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000022AA  0C02 004B 3626          cmp.b     #75,D2
000022AE  6630      3627          bne.s     Breakpoint_3
                    3628   ; printf("\r\nKill All Break Points...(y/n)?") ;
000022B0  4879 0000 3629          pea       @m68kde~3_109.L
000022B4  7694      
000022B6  4EB9 0000 3630          jsr       _printf
000022BA  5972      
000022BC  584F      3631          addq.w    #4,A7
                    3632   ; c = toupper(_getch());
000022BE  2F00      3633          move.l    D0,-(A7)
000022C0  4EB8 0B68 3634          jsr       __getch
000022C4  2200      3635          move.l    D0,D1
000022C6  201F      3636          move.l    (A7)+,D0
000022C8  2F01      3637          move.l    D1,-(A7)
000022CA  4EB9 0000 3638          jsr       _toupper
000022CE  5914      
000022D0  584F      3639          addq.w    #4,A7
000022D2  1400      3640          move.b    D0,D2
                    3641   ; if(c == (char)('Y'))
000022D4  0C02 0059 3642          cmp.b     #89,D2
000022D8  6604      3643          bne.s     Breakpoint_5
                    3644   ; KillAllBreakPoints() ;
000022DA  4EB8 1EEE 3645          jsr       _KillAllBreakPoints
                    3646   Breakpoint_5:
000022DE  601C      3647          bra.s     Breakpoint_10
                    3648   Breakpoint_3:
                    3649   ; }
                    3650   ; else if(c == (char)('S')) {
000022E0  0C02 0053 3651          cmp.b     #83,D2
000022E4  6606      3652          bne.s     Breakpoint_7
                    3653   ; SetBreakPoint() ;
000022E6  4EB8 1F86 3654          jsr       _SetBreakPoint
000022EA  6010      3655          bra.s     Breakpoint_10
                    3656   Breakpoint_7:
                    3657   ; }
                    3658   ; else if(c == (char)('C')) {
000022EC  0C02 0043 3659          cmp.b     #67,D2
000022F0  6606      3660          bne.s     Breakpoint_9
                    3661   ; BreakPointClear() ;
000022F2  4EB8 1CD6 3662          jsr       _BreakPointClear
000022F6  6004      3663          bra.s     Breakpoint_10
                    3664   Breakpoint_9:
                    3665   ; }
                    3666   ; else
                    3667   ; UnknownCommand() ;
000022F8  4EB8 2258 3668          jsr       _UnknownCommand
                    3669   Breakpoint_10:
000022FC  241F      3670          move.l    (A7)+,D2
000022FE  4E75      3671          rts
                    3672   ; }
                    3673   ; void Watchpoint(void)
                    3674   ; {
                    3675   _Watchpoint:
00002300  2F02      3676          move.l    D2,-(A7)
                    3677   ; char c;
                    3678   ; c = toupper(_getch());
00002302  2F00      3679          move.l    D0,-(A7)
00002304  4EB8 0B68 3680          jsr       __getch
00002308  2200      3681          move.l    D0,D1
0000230A  201F      3682          move.l    (A7)+,D0
0000230C  2F01      3683          move.l    D1,-(A7)
0000230E  4EB9 0000 3684          jsr       _toupper
00002312  5914      
00002314  584F      3685          addq.w    #4,A7
00002316  1400      3686          move.b    D0,D2
                    3687   ; if( c == (char)('D'))                                      // WatchPoint Display
00002318  0C02 0044 3688          cmp.b     #68,D2
0000231C  6608      3689          bne.s     Watchpoint_1
                    3690   ; WatchPointDisplay() ;
0000231E  4EB8 1C2A 3691          jsr       _WatchPointDisplay
00002322  6000 0054 3692          bra       Watchpoint_10
                    3693   Watchpoint_1:
                    3694   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002326  0C02 004B 3695          cmp.b     #75,D2
0000232A  6630      3696          bne.s     Watchpoint_3
                    3697   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000232C  4879 0000 3698          pea       @m68kde~3_110.L
00002330  76B6      
00002332  4EB9 0000 3699          jsr       _printf
00002336  5972      
00002338  584F      3700          addq.w    #4,A7
                    3701   ; c = toupper(_getch());
0000233A  2F00      3702          move.l    D0,-(A7)
0000233C  4EB8 0B68 3703          jsr       __getch
00002340  2200      3704          move.l    D0,D1
00002342  201F      3705          move.l    (A7)+,D0
00002344  2F01      3706          move.l    D1,-(A7)
00002346  4EB9 0000 3707          jsr       _toupper
0000234A  5914      
0000234C  584F      3708          addq.w    #4,A7
0000234E  1400      3709          move.b    D0,D2
                    3710   ; if(c == (char)('Y'))
00002350  0C02 0059 3711          cmp.b     #89,D2
00002354  6604      3712          bne.s     Watchpoint_5
                    3713   ; KillAllWatchPoints() ;
00002356  4EB8 1F56 3714          jsr       _KillAllWatchPoints
                    3715   Watchpoint_5:
0000235A  601C      3716          bra.s     Watchpoint_10
                    3717   Watchpoint_3:
                    3718   ; }
                    3719   ; else if(c == (char)('S')) {
0000235C  0C02 0053 3720          cmp.b     #83,D2
00002360  6606      3721          bne.s     Watchpoint_7
                    3722   ; SetWatchPoint() ;
00002362  4EB8 20BC 3723          jsr       _SetWatchPoint
00002366  6010      3724          bra.s     Watchpoint_10
                    3725   Watchpoint_7:
                    3726   ; }
                    3727   ; else if(c == (char)('C')) {
00002368  0C02 0043 3728          cmp.b     #67,D2
0000236C  6606      3729          bne.s     Watchpoint_9
                    3730   ; WatchPointClear() ;
0000236E  4EB8 1DB0 3731          jsr       _WatchPointClear
00002372  6004      3732          bra.s     Watchpoint_10
                    3733   Watchpoint_9:
                    3734   ; }
                    3735   ; else
                    3736   ; UnknownCommand() ;
00002374  4EB8 2258 3737          jsr       _UnknownCommand
                    3738   Watchpoint_10:
00002378  241F      3739          move.l    (A7)+,D2
0000237A  4E75      3740          rts
                    3741   ; }
                    3742   ; void DMenu(void)
                    3743   ; {
                    3744   _DMenu:
0000237C  2F02      3745          move.l    D2,-(A7)
                    3746   ; char c;
                    3747   ; c = toupper(_getch());
0000237E  2F00      3748          move.l    D0,-(A7)
00002380  4EB8 0B68 3749          jsr       __getch
00002384  2200      3750          move.l    D0,D1
00002386  201F      3751          move.l    (A7)+,D0
00002388  2F01      3752          move.l    D1,-(A7)
0000238A  4EB9 0000 3753          jsr       _toupper
0000238E  5914      
00002390  584F      3754          addq.w    #4,A7
00002392  1400      3755          move.b    D0,D2
                    3756   ; if( c == (char)('U'))                                     // Dump Memory
00002394  0C02 0055 3757          cmp.b     #85,D2
00002398  6606      3758          bne.s     DMenu_1
                    3759   ; DumpMemory() ;
0000239A  4EB8 0EE0 3760          jsr       _DumpMemory
0000239E  6018      3761          bra.s     DMenu_4
                    3762   DMenu_1:
                    3763   ; else if(c == (char)('I'))   {
000023A0  0C02 0049 3764          cmp.b     #73,D2
000023A4  660E      3765          bne.s     DMenu_3
                    3766   ; DisableBreakPoints() ;
000023A6  4EB8 1E52 3767          jsr       _DisableBreakPoints
                    3768   ; DisassembleProgram() ;
000023AA  4EB8 0D00 3769          jsr       _DisassembleProgram
                    3770   ; EnableBreakPoints() ;
000023AE  4EB8 1EA6 3771          jsr       _EnableBreakPoints
000023B2  6004      3772          bra.s     DMenu_4
                    3773   DMenu_3:
                    3774   ; }
                    3775   ; else
                    3776   ; UnknownCommand() ;
000023B4  4EB8 2258 3777          jsr       _UnknownCommand
                    3778   DMenu_4:
000023B8  241F      3779          move.l    (A7)+,D2
000023BA  4E75      3780          rts
                    3781   ; }
                    3782   ; void Help(void)
                    3783   ; {
                    3784   _Help:
000023BC  48E7 2020 3785          movem.l   D2/A2,-(A7)
000023C0  45F9 0000 3786          lea       _printf.L,A2
000023C4  5972      
                    3787   ; char *banner = "\r\n----------------------------------------------------------------" ;
000023C6  41F9 0000 3788          lea       @m68kde~3_111.L,A0
000023CA  76D8      
000023CC  2408      3789          move.l    A0,D2
                    3790   ; printf(banner) ;
000023CE  2F02      3791          move.l    D2,-(A7)
000023D0  4E92      3792          jsr       (A2)
000023D2  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\n  Debugger Command Summary") ;
000023D4  4879 0000 3795          pea       @m68kde~3_112.L
000023D8  771C      
000023DA  4E92      3796          jsr       (A2)
000023DC  584F      3797          addq.w    #4,A7
                    3798   ; printf(banner) ;
000023DE  2F02      3799          move.l    D2,-(A7)
000023E0  4E92      3800          jsr       (A2)
000023E2  584F      3801          addq.w    #4,A7
                    3802   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000023E4  4879 0000 3803          pea       @m68kde~3_113.L
000023E8  773A      
000023EA  4E92      3804          jsr       (A2)
000023EC  584F      3805          addq.w    #4,A7
                    3806   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000023EE  4879 0000 3807          pea       @m68kde~3_114.L
000023F2  777E      
000023F4  4E92      3808          jsr       (A2)
000023F6  584F      3809          addq.w    #4,A7
                    3810   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000023F8  4879 0000 3811          pea       @m68kde~3_115.L
000023FC  77B6      
000023FE  4E92      3812          jsr       (A2)
00002400  584F      3813          addq.w    #4,A7
                    3814   ; printf("\r\n  DI           - Disassemble Program");
00002402  4879 0000 3815          pea       @m68kde~3_116.L
00002406  77F0      
00002408  4E92      3816          jsr       (A2)
0000240A  584F      3817          addq.w    #4,A7
                    3818   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
0000240C  4879 0000 3819          pea       @m68kde~3_117.L
00002410  7818      
00002412  4E92      3820          jsr       (A2)
00002414  584F      3821          addq.w    #4,A7
                    3822   ; printf("\r\n  E            - Enter String into Memory") ;
00002416  4879 0000 3823          pea       @m68kde~3_118.L
0000241A  784A      
0000241C  4E92      3824          jsr       (A2)
0000241E  584F      3825          addq.w    #4,A7
                    3826   ; printf("\r\n  F            - Fill Memory with Data") ;
00002420  4879 0000 3827          pea       @m68kde~3_119.L
00002424  7876      
00002426  4E92      3828          jsr       (A2)
00002428  584F      3829          addq.w    #4,A7
                    3830   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
0000242A  2F39 0803 3831          move.l    _PC.L,-(A7)
0000242E  0120      
00002430  4879 0000 3832          pea       @m68kde~3_120.L
00002434  78A0      
00002436  4E92      3833          jsr       (A2)
00002438  504F      3834          addq.w    #8,A7
                    3835   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
0000243A  4879 0000 3836          pea       @m68kde~3_121.L
0000243E  78DA      
00002440  4E92      3837          jsr       (A2)
00002442  584F      3838          addq.w    #4,A7
                    3839   ; printf("\r\n  M            - Memory Examine and Change");
00002444  4879 0000 3840          pea       @m68kde~3_122.L
00002448  7912      
0000244A  4E92      3841          jsr       (A2)
0000244C  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000244E  4879 0000 3844          pea       @m68kde~3_123.L
00002452  7940      
00002454  4E92      3845          jsr       (A2)
00002456  584F      3846          addq.w    #4,A7
                    3847   ; printf("\r\n  R            - Display 68000 Registers") ;
00002458  4879 0000 3848          pea       @m68kde~3_124.L
0000245C  797A      
0000245E  4E92      3849          jsr       (A2)
00002460  584F      3850          addq.w    #4,A7
                    3851   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002462  4879 0000 3852          pea       @m68kde~3_125.L
00002466  79A6      
00002468  4E92      3853          jsr       (A2)
0000246A  584F      3854          addq.w    #4,A7
                    3855   ; printf("\r\n  TM           - Test Memory") ;
0000246C  4879 0000 3856          pea       @m68kde~3_126.L
00002470  79D8      
00002472  4E92      3857          jsr       (A2)
00002474  584F      3858          addq.w    #4,A7
                    3859   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002476  4879 0000 3860          pea       @m68kde~3_127.L
0000247A  79F8      
0000247C  4E92      3861          jsr       (A2)
0000247E  584F      3862          addq.w    #4,A7
                    3863   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002480  4879 0000 3864          pea       @m68kde~3_128.L
00002484  7A20      
00002486  4E92      3865          jsr       (A2)
00002488  584F      3866          addq.w    #4,A7
                    3867   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000248A  4879 0000 3868          pea       @m68kde~3_129.L
0000248E  7A56      
00002490  4E92      3869          jsr       (A2)
00002492  584F      3870          addq.w    #4,A7
                    3871   ; printf(banner) ;
00002494  2F02      3872          move.l    D2,-(A7)
00002496  4E92      3873          jsr       (A2)
00002498  584F      3874          addq.w    #4,A7
0000249A  4CDF 0404 3875          movem.l   (A7)+,D2/A2
0000249E  4E75      3876          rts
                    3877   ; }
                    3878   ; void menu(void)
                    3879   ; {
                    3880   _menu:
000024A0  48E7 303C 3881          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000024A4  45F9 0000 3882          lea       _printf.L,A2
000024A8  5972      
000024AA  47F9 0803 3883          lea       _Trace.L,A3
000024AE  00D8      
000024B0  49F9 0803 3884          lea       _x.L,A4
000024B4  00C8      
000024B6  4BF9 0803 3885          lea       _SR.L,A5
000024BA  012C      
                    3886   ; char c,c1 ;
                    3887   ; while(1)    {
                    3888   menu_1:
                    3889   ; FlushKeyboard() ;               // dump unread characters from keyboard
000024BC  4EB8 0BA6 3890          jsr       _FlushKeyboard
                    3891   ; printf("\r\n#") ;
000024C0  4879 0000 3892          pea       @m68kde~3_130.L
000024C4  7A8E      
000024C6  4E92      3893          jsr       (A2)
000024C8  584F      3894          addq.w    #4,A7
                    3895   ; c = toupper(_getch());
000024CA  2F00      3896          move.l    D0,-(A7)
000024CC  4EB8 0B68 3897          jsr       __getch
000024D0  2200      3898          move.l    D0,D1
000024D2  201F      3899          move.l    (A7)+,D0
000024D4  2F01      3900          move.l    D1,-(A7)
000024D6  4EB9 0000 3901          jsr       _toupper
000024DA  5914      
000024DC  584F      3902          addq.w    #4,A7
000024DE  1400      3903          move.b    D0,D2
                    3904   ; if( c == (char)('L'))                  // load s record file
000024E0  0C02 004C 3905          cmp.b     #76,D2
000024E4  6608      3906          bne.s     menu_4
                    3907   ; Load_SRecordFile() ;
000024E6  4EB8 104A 3908          jsr       _Load_SRecordFile
000024EA  6000 021E 3909          bra       menu_46
                    3910   menu_4:
                    3911   ; else if( c == (char)('D'))             // dump memory
000024EE  0C02 0044 3912          cmp.b     #68,D2
000024F2  6608      3913          bne.s     menu_6
                    3914   ; DMenu() ;
000024F4  4EB8 237C 3915          jsr       _DMenu
000024F8  6000 0210 3916          bra       menu_46
                    3917   menu_6:
                    3918   ; else if( c == (char)('E'))             // Enter String into memory
000024FC  0C02 0045 3919          cmp.b     #69,D2
00002500  660A      3920          bne.s     menu_8
                    3921   ; EnterString() ;
00002502  4EB9 0000 3922          jsr       _EnterString
00002506  2852      
00002508  6000 0200 3923          bra       menu_46
                    3924   menu_8:
                    3925   ; else if( c == (char)('F'))             // fill memory
0000250C  0C02 0046 3926          cmp.b     #70,D2
00002510  6608      3927          bne.s     menu_10
                    3928   ; FillMemory() ;
00002512  4EB8 0FD0 3929          jsr       _FillMemory
00002516  6000 01F2 3930          bra       menu_46
                    3931   menu_10:
                    3932   ; else if( c == (char)('G'))  {           // go user program
0000251A  0C02 0047 3933          cmp.b     #71,D2
0000251E  6626      3934          bne.s     menu_12
                    3935   ; printf("\r\nProgram Running.....") ;
00002520  4879 0000 3936          pea       @m68kde~3_131.L
00002524  7A92      
00002526  4E92      3937          jsr       (A2)
00002528  584F      3938          addq.w    #4,A7
                    3939   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000252A  4879 0000 3940          pea       @m68kde~3_132.L
0000252E  7AAA      
00002530  4E92      3941          jsr       (A2)
00002532  584F      3942          addq.w    #4,A7
                    3943   ; GoFlag = 1 ;
00002534  23FC 0000 3944          move.l    #1,_GoFlag.L
00002538  0001 0803 
0000253C  00DC      
                    3945   ; go() ;
0000253E  4EB8 08B8 3946          jsr       _go
00002542  6000 01C6 3947          bra       menu_46
                    3948   menu_12:
                    3949   ; }
                    3950   ; else if( c == (char)('M'))           // memory examine and modify
00002546  0C02 004D 3951          cmp.b     #77,D2
0000254A  6608      3952          bne.s     menu_14
                    3953   ; MemoryChange() ;
0000254C  4EB8 11D8 3954          jsr       _MemoryChange
00002550  6000 01B8 3955          bra       menu_46
                    3956   menu_14:
                    3957   ; else if( c == (char)('P'))            // Program Flash Chip
00002554  0C02 0050 3958          cmp.b     #80,D2
00002558  6608      3959          bne.s     menu_16
                    3960   ; ProgramFlashChip() ;
0000255A  4EB8 12D8 3961          jsr       _ProgramFlashChip
0000255E  6000 01AA 3962          bra       menu_46
                    3963   menu_16:
                    3964   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002562  0C02 0043 3965          cmp.b     #67,D2
00002566  6608      3966          bne.s     menu_18
                    3967   ; LoadFromFlashChip();
00002568  4EB8 12DA 3968          jsr       _LoadFromFlashChip
0000256C  6000 019C 3969          bra       menu_46
                    3970   menu_18:
                    3971   ; else if( c == (char)('R'))             // dump registers
00002570  0C02 0052 3972          cmp.b     #82,D2
00002574  6608      3973          bne.s     menu_20
                    3974   ; DumpRegisters() ;
00002576  4EB8 135E 3975          jsr       _DumpRegisters
0000257A  6000 018E 3976          bra       menu_46
                    3977   menu_20:
                    3978   ; else if( c == (char)('.'))           // change registers
0000257E  0C02 002E 3979          cmp.b     #46,D2
00002582  6608      3980          bne.s     menu_22
                    3981   ; ChangeRegisters() ;
00002584  4EB8 1874 3982          jsr       _ChangeRegisters
00002588  6000 0180 3983          bra       menu_46
                    3984   menu_22:
                    3985   ; else if( c == (char)('B'))              // breakpoint command
0000258C  0C02 0042 3986          cmp.b     #66,D2
00002590  6608      3987          bne.s     menu_24
                    3988   ; Breakpoint() ;
00002592  4EB8 2284 3989          jsr       _Breakpoint
00002596  6000 0172 3990          bra       menu_46
                    3991   menu_24:
                    3992   ; else if( c == (char)('T'))  {          // Test command
0000259A  0C02 0054 3993          cmp.b     #84,D2
0000259E  6600 0046 3994          bne       menu_26
                    3995   ; c1 = toupper(_getch()) ;
000025A2  2F00      3996          move.l    D0,-(A7)
000025A4  4EB8 0B68 3997          jsr       __getch
000025A8  2200      3998          move.l    D0,D1
000025AA  201F      3999          move.l    (A7)+,D0
000025AC  2F01      4000          move.l    D1,-(A7)
000025AE  4EB9 0000 4001          jsr       _toupper
000025B2  5914      
000025B4  584F      4002          addq.w    #4,A7
000025B6  1600      4003          move.b    D0,D3
                    4004   ; if(c1 == (char)('M'))                    // memory test
000025B8  0C03 004D 4005          cmp.b     #77,D3
000025BC  6608      4006          bne.s     menu_28
                    4007   ; MemoryTest() ;
000025BE  4EB9 0000 4008          jsr       _MemoryTest
000025C2  28A2      
000025C4  601C      4009          bra.s     menu_33
                    4010   menu_28:
                    4011   ; else if( c1 == (char)('S'))              // Switch Test command
000025C6  0C03 0053 4012          cmp.b     #83,D3
000025CA  6606      4013          bne.s     menu_30
                    4014   ; SwitchTest() ;
000025CC  4EB8 0AA4 4015          jsr       _SwitchTest
000025D0  6010      4016          bra.s     menu_33
                    4017   menu_30:
                    4018   ; else if( c1 == (char)('D'))              // display Test command
000025D2  0C03 0044 4019          cmp.b     #68,D3
000025D6  6606      4020          bne.s     menu_32
                    4021   ; TestLEDS() ;
000025D8  4EB8 0A50 4022          jsr       _TestLEDS
000025DC  6004      4023          bra.s     menu_33
                    4024   menu_32:
                    4025   ; else
                    4026   ; UnknownCommand() ;
000025DE  4EB8 2258 4027          jsr       _UnknownCommand
                    4028   menu_33:
000025E2  6000 0126 4029          bra       menu_46
                    4030   menu_26:
                    4031   ; }
                    4032   ; else if( c == (char)(' ')) {             // Next instruction command
000025E6  0C02 0020 4033          cmp.b     #32,D2
000025EA  6636      4034          bne.s     menu_34
                    4035   ; DisableBreakPoints() ;
000025EC  4EB8 1E52 4036          jsr       _DisableBreakPoints
                    4037   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000025F0  2013      4038          move.l    (A3),D0
000025F2  0C80 0000 4039          cmp.l     #1,D0
000025F6  0001      
000025F8  661A      4040          bne.s     menu_36
000025FA  2039 0803 4041          move.l    _GoFlag.L,D0
000025FE  00DC      
00002600  0C80 0000 4042          cmp.l     #1,D0
00002604  0001      
00002606  660C      4043          bne.s     menu_36
                    4044   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002608  13FC 0001 4045          move.b    #1,4194314
0000260C  0040 000A 
                    4046   ; return ;
00002610  6000 00FC 4047          bra       menu_38
                    4048   menu_36:
                    4049   ; }
                    4050   ; else
                    4051   ; printf("\r\nError: Press 'G' first to start program") ;
00002614  4879 0000 4052          pea       @m68kde~3_133.L
00002618  7AD8      
0000261A  4E92      4053          jsr       (A2)
0000261C  584F      4054          addq.w    #4,A7
0000261E  6000 00EA 4055          bra       menu_46
                    4056   menu_34:
                    4057   ; }
                    4058   ; else if( c == (char)('S')) {             // single step
00002622  0C02 0053 4059          cmp.b     #83,D2
00002626  6600 008C 4060          bne       menu_39
                    4061   ; if(Trace == 0) {
0000262A  2013      4062          move.l    (A3),D0
0000262C  6600 0050 4063          bne       menu_41
                    4064   ; DisableBreakPoints() ;
00002630  4EB8 1E52 4065          jsr       _DisableBreakPoints
                    4066   ; printf("\r\nSingle Step  :[ON]") ;
00002634  4879 0000 4067          pea       @m68kde~3_134.L
00002638  7B02      
0000263A  4E92      4068          jsr       (A2)
0000263C  584F      4069          addq.w    #4,A7
                    4070   ; printf("\r\nBreak Points :[Disabled]") ;
0000263E  4879 0000 4071          pea       @m68kde~3_135.L
00002642  7B18      
00002644  4E92      4072          jsr       (A2)
00002646  584F      4073          addq.w    #4,A7
                    4074   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002648  0055 8000 4075          or.w      #32768,(A5)
                    4076   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000264C  2F39 0803 4077          move.l    _PC.L,-(A7)
00002650  0120      
00002652  4879 0000 4078          pea       @m68kde~3_136.L
00002656  7B34      
00002658  4E92      4079          jsr       (A2)
0000265A  504F      4080          addq.w    #8,A7
                    4081   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000265C  4879 0000 4082          pea       @m68kde~3_137.L
00002660  7B68      
00002662  4E92      4083          jsr       (A2)
00002664  584F      4084          addq.w    #4,A7
                    4085   ; DumpRegisters() ;
00002666  4EB8 135E 4086          jsr       _DumpRegisters
                    4087   ; Trace = 1;
0000266A  26BC 0000 4088          move.l    #1,(A3)
0000266E  0001      
                    4089   ; TraceException = 1;
00002670  13FC 0001 4090          move.b    #1,4194314
00002674  0040 000A 
                    4091   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002678  28B8 0074 4092          move.l    116,(A4)
0000267C  6032      4093          bra.s     menu_42
                    4094   menu_41:
                    4095   ; }
                    4096   ; else {
                    4097   ; Trace = 0 ;
0000267E  4293      4098          clr.l     (A3)
                    4099   ; TraceException = 0 ;
00002680  4239 0040 4100          clr.b     4194314
00002684  000A      
                    4101   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002686  28B8 0074 4102          move.l    116,(A4)
                    4103   ; EnableBreakPoints() ;
0000268A  4EB8 1EA6 4104          jsr       _EnableBreakPoints
                    4105   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000268E  0255 7FFF 4106          and.w     #32767,(A5)
                    4107   ; printf("\r\nSingle Step : [OFF]") ;
00002692  4879 0000 4108          pea       @m68kde~3_138.L
00002696  7B8C      
00002698  4E92      4109          jsr       (A2)
0000269A  584F      4110          addq.w    #4,A7
                    4111   ; printf("\r\nBreak Points :[Enabled]") ;
0000269C  4879 0000 4112          pea       @m68kde~3_139.L
000026A0  7BA2      
000026A2  4E92      4113          jsr       (A2)
000026A4  584F      4114          addq.w    #4,A7
                    4115   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000026A6  4879 0000 4116          pea       @m68kde~3_140.L
000026AA  7BBC      
000026AC  4E92      4117          jsr       (A2)
000026AE  584F      4118          addq.w    #4,A7
                    4119   menu_42:
000026B0  6000 0058 4120          bra       menu_46
                    4121   menu_39:
                    4122   ; }
                    4123   ; }
                    4124   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000026B4  0C02 001B 4125          cmp.b     #27,D2
000026B8  6600 0040 4126          bne       menu_43
                    4127   ; Trace = 0;
000026BC  4293      4128          clr.l     (A3)
                    4129   ; TraceException = 0;
000026BE  4239 0040 4130          clr.b     4194314
000026C2  000A      
                    4131   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000026C4  28B8 0074 4132          move.l    116,(A4)
                    4133   ; EnableBreakPoints() ;
000026C8  4EB8 1EA6 4134          jsr       _EnableBreakPoints
                    4135   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000026CC  0255 7FFF 4136          and.w     #32767,(A5)
                    4137   ; printf("\r\nSingle Step  :[OFF]") ;
000026D0  4879 0000 4138          pea       @m68kde~3_141.L
000026D4  7BE6      
000026D6  4E92      4139          jsr       (A2)
000026D8  584F      4140          addq.w    #4,A7
                    4141   ; printf("\r\nBreak Points :[Enabled]");
000026DA  4879 0000 4142          pea       @m68kde~3_142.L
000026DE  7BFC      
000026E0  4E92      4143          jsr       (A2)
000026E2  584F      4144          addq.w    #4,A7
                    4145   ; printf("\r\nProgram Running.....") ;
000026E4  4879 0000 4146          pea       @m68kde~3_143.L
000026E8  7C16      
000026EA  4E92      4147          jsr       (A2)
000026EC  584F      4148          addq.w    #4,A7
                    4149   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000026EE  4879 0000 4150          pea       @m68kde~3_144.L
000026F2  7C2E      
000026F4  4E92      4151          jsr       (A2)
000026F6  584F      4152          addq.w    #4,A7
                    4153   ; return ;
000026F8  6014      4154          bra.s     menu_38
                    4155   menu_43:
                    4156   ; }
                    4157   ; else if( c == (char)('W'))              // Watchpoint command
000026FA  0C02 0057 4158          cmp.b     #87,D2
000026FE  6606      4159          bne.s     menu_45
                    4160   ; Watchpoint() ;
00002700  4EB8 2300 4161          jsr       _Watchpoint
00002704  6004      4162          bra.s     menu_46
                    4163   menu_45:
                    4164   ; else
                    4165   ; UnknownCommand() ;
00002706  4EB8 2258 4166          jsr       _UnknownCommand
                    4167   menu_46:
0000270A  6000 FDB0 4168          bra       menu_1
                    4169   menu_38:
0000270E  4CDF 3C0C 4170          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002712  4E75      4171          rts
                    4172   ; }
                    4173   ; }
                    4174   ; void PrintErrorMessageandAbort(char *string) {
                    4175   _PrintErrorMessageandAbort:
00002714  4E56 0000 4176          link      A6,#0
                    4177   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002718  4879 0000 4178          pea       @m68kde~3_145.L
0000271C  7C5C      
0000271E  4EB9 0000 4179          jsr       _printf
00002722  5972      
00002724  584F      4180          addq.w    #4,A7
                    4181   ; printf("%s\r\n", string) ;
00002726  2F2E 0008 4182          move.l    8(A6),-(A7)
0000272A  4879 0000 4183          pea       @m68kde~3_146.L
0000272E  7C78      
00002730  4EB9 0000 4184          jsr       _printf
00002734  5972      
00002736  504F      4185          addq.w    #8,A7
                    4186   ; menu() ;
00002738  4EB8 24A0 4187          jsr       _menu
0000273C  4E5E      4188          unlk      A6
0000273E  4E75      4189          rts
                    4190   ; }
                    4191   ; void IRQMessage(int level) {
                    4192   _IRQMessage:
00002740  4E56 0000 4193          link      A6,#0
                    4194   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002744  4879 0000 4195          pea       @m68kde~3_147.L
00002748  7C7E      
0000274A  4EB9 0000 4196          jsr       _printf
0000274E  5972      
00002750  584F      4197          addq.w    #4,A7
                    4198   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002752  2F2E 0008 4199          move.l    8(A6),-(A7)
00002756  4879 0000 4200          pea       @m68kde~3_148.L
0000275A  7C96      
0000275C  4EB9 0000 4201          jsr       _printf
00002760  5972      
00002762  504F      4202          addq.w    #8,A7
                    4203   ; menu() ;
00002764  4EB8 24A0 4204          jsr       _menu
00002768  4E5E      4205          unlk      A6
0000276A  4E75      4206          rts
                    4207   ; }
                    4208   ; void UnhandledIRQ1(void) {
                    4209   _UnhandledIRQ1:
                    4210   ; IRQMessage(1);
0000276C  4878 0001 4211          pea       1
00002770  4EB8 2740 4212          jsr       _IRQMessage
00002774  584F      4213          addq.w    #4,A7
00002776  4E75      4214          rts
                    4215   ; }
                    4216   ; void UnhandledIRQ2(void) {
                    4217   _UnhandledIRQ2:
                    4218   ; IRQMessage(2);
00002778  4878 0002 4219          pea       2
0000277C  4EB8 2740 4220          jsr       _IRQMessage
00002780  584F      4221          addq.w    #4,A7
00002782  4E75      4222          rts
                    4223   ; }
                    4224   ; void UnhandledIRQ3(void){
                    4225   _UnhandledIRQ3:
                    4226   ; IRQMessage(3);
00002784  4878 0003 4227          pea       3
00002788  4EB8 2740 4228          jsr       _IRQMessage
0000278C  584F      4229          addq.w    #4,A7
0000278E  4E75      4230          rts
                    4231   ; }
                    4232   ; void UnhandledIRQ4(void) {
                    4233   _UnhandledIRQ4:
                    4234   ; IRQMessage(4);
00002790  4878 0004 4235          pea       4
00002794  4EB8 2740 4236          jsr       _IRQMessage
00002798  584F      4237          addq.w    #4,A7
0000279A  4E75      4238          rts
                    4239   ; }
                    4240   ; void UnhandledIRQ5(void) {
                    4241   _UnhandledIRQ5:
                    4242   ; IRQMessage(5);
0000279C  4878 0005 4243          pea       5
000027A0  4EB8 2740 4244          jsr       _IRQMessage
000027A4  584F      4245          addq.w    #4,A7
000027A6  4E75      4246          rts
                    4247   ; }
                    4248   ; void UnhandledIRQ6(void) {
                    4249   _UnhandledIRQ6:
                    4250   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000027A8  4879 0000 4251          pea       @m68kde~3_149.L
000027AC  7CBA      
000027AE  4EB8 2714 4252          jsr       _PrintErrorMessageandAbort
000027B2  584F      4253          addq.w    #4,A7
                    4254   ; menu() ;
000027B4  4EB8 24A0 4255          jsr       _menu
000027B8  4E75      4256          rts
                    4257   ; }
                    4258   ; void UnhandledIRQ7(void) {
                    4259   _UnhandledIRQ7:
                    4260   ; IRQMessage(7);
000027BA  4878 0007 4261          pea       7
000027BE  4EB8 2740 4262          jsr       _IRQMessage
000027C2  584F      4263          addq.w    #4,A7
000027C4  4E75      4264          rts
                    4265   ; }
                    4266   ; void UnhandledTrap(void) {
                    4267   _UnhandledTrap:
                    4268   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000027C6  4879 0000 4269          pea       @m68kde~3_150.L
000027CA  7CFA      
000027CC  4EB8 2714 4270          jsr       _PrintErrorMessageandAbort
000027D0  584F      4271          addq.w    #4,A7
000027D2  4E75      4272          rts
                    4273   ; }
                    4274   ; void BusError() {
                    4275   _BusError:
                    4276   ; PrintErrorMessageandAbort("BUS Error!") ;
000027D4  4879 0000 4277          pea       @m68kde~3_151.L
000027D8  7D10      
000027DA  4EB8 2714 4278          jsr       _PrintErrorMessageandAbort
000027DE  584F      4279          addq.w    #4,A7
000027E0  4E75      4280          rts
                    4281   ; }
                    4282   ; void AddressError() {
                    4283   _AddressError:
                    4284   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000027E2  4879 0000 4285          pea       @m68kde~3_152.L
000027E6  7D1C      
000027E8  4EB8 2714 4286          jsr       _PrintErrorMessageandAbort
000027EC  584F      4287          addq.w    #4,A7
000027EE  4E75      4288          rts
                    4289   ; }
                    4290   ; void IllegalInstruction() {
                    4291   _IllegalInstruction:
                    4292   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000027F0  4879 0000 4293          pea       @m68kde~3_153.L
000027F4  7D2C      
000027F6  4EB8 2714 4294          jsr       _PrintErrorMessageandAbort
000027FA  584F      4295          addq.w    #4,A7
000027FC  4E75      4296          rts
                    4297   ; }
                    4298   ; void Dividebyzero() {
                    4299   _Dividebyzero:
                    4300   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000027FE  4879 0000 4301          pea       @m68kde~3_154.L
00002802  7D40      
00002804  4EB8 2714 4302          jsr       _PrintErrorMessageandAbort
00002808  584F      4303          addq.w    #4,A7
0000280A  4E75      4304          rts
                    4305   ; }
                    4306   ; void Check() {
                    4307   _Check:
                    4308   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
0000280C  4879 0000 4309          pea       @m68kde~3_155.L
00002810  7D50      
00002812  4EB8 2714 4310          jsr       _PrintErrorMessageandAbort
00002816  584F      4311          addq.w    #4,A7
00002818  4E75      4312          rts
                    4313   ; }
                    4314   ; void Trapv() {
                    4315   _Trapv:
                    4316   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
0000281A  4879 0000 4317          pea       @m68kde~3_156.L
0000281E  7D62      
00002820  4EB8 2714 4318          jsr       _PrintErrorMessageandAbort
00002824  584F      4319          addq.w    #4,A7
00002826  4E75      4320          rts
                    4321   ; }
                    4322   ; void PrivError() {
                    4323   _PrivError:
                    4324   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002828  4879 0000 4325          pea       @m68kde~3_157.L
0000282C  7D74      
0000282E  4EB8 2714 4326          jsr       _PrintErrorMessageandAbort
00002832  584F      4327          addq.w    #4,A7
00002834  4E75      4328          rts
                    4329   ; }
                    4330   ; void UnitIRQ() {
                    4331   _UnitIRQ:
                    4332   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002836  4879 0000 4333          pea       @m68kde~3_158.L
0000283A  7D88      
0000283C  4EB8 2714 4334          jsr       _PrintErrorMessageandAbort
00002840  584F      4335          addq.w    #4,A7
00002842  4E75      4336          rts
                    4337   ; }
                    4338   ; void Spurious() {
                    4339   _Spurious:
                    4340   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002844  4879 0000 4341          pea       @m68kde~3_159.L
00002848  7D9A      
0000284A  4EB8 2714 4342          jsr       _PrintErrorMessageandAbort
0000284E  584F      4343          addq.w    #4,A7
00002850  4E75      4344          rts
                    4345   ; }
                    4346   ; void EnterString(void)
                    4347   ; {
                    4348   _EnterString:
00002852  4E56 FFFC 4349          link      A6,#-4
00002856  2F02      4350          move.l    D2,-(A7)
                    4351   ; unsigned char *Start;
                    4352   ; unsigned char c;
                    4353   ; printf("\r\nStart Address in Memory: ") ;
00002858  4879 0000 4354          pea       @m68kde~3_160.L
0000285C  7DA8      
0000285E  4EB9 0000 4355          jsr       _printf
00002862  5972      
00002864  584F      4356          addq.w    #4,A7
                    4357   ; Start = Get8HexDigits(0) ;
00002866  42A7      4358          clr.l     -(A7)
00002868  4EB8 0CA4 4359          jsr       _Get8HexDigits
0000286C  584F      4360          addq.w    #4,A7
0000286E  2400      4361          move.l    D0,D2
                    4362   ; printf("\r\nEnter String (ESC to end) :") ;
00002870  4879 0000 4363          pea       @m68kde~3_161.L
00002874  7DC4      
00002876  4EB9 0000 4364          jsr       _printf
0000287A  5972      
0000287C  584F      4365          addq.w    #4,A7
                    4366   ; while((c = getchar()) != 0x1b)
                    4367   EnterString_1:
0000287E  4EB9 0000 4368          jsr       _getch
00002882  5862      
00002884  1D40 FFFF 4369          move.b    D0,-1(A6)
00002888  0C00 001B 4370          cmp.b     #27,D0
0000288C  670A      4371          beq.s     EnterString_3
                    4372   ; *Start++ = c ;
0000288E  2042      4373          move.l    D2,A0
00002890  5282      4374          addq.l    #1,D2
00002892  10AE FFFF 4375          move.b    -1(A6),(A0)
00002896  60E6      4376          bra       EnterString_1
                    4377   EnterString_3:
                    4378   ; *Start = 0x00;  // terminate with a null
00002898  2042      4379          move.l    D2,A0
0000289A  4210      4380          clr.b     (A0)
0000289C  241F      4381          move.l    (A7)+,D2
0000289E  4E5E      4382          unlk      A6
000028A0  4E75      4383          rts
                    4384   ; }
                    4385   ; void MemoryTest(void)
                    4386   ; {
                    4387   _MemoryTest:
000028A2  4E56 FFC0 4388          link      A6,#-64
000028A6  48E7 3F3C 4389          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000028AA  45F9 0000 4390          lea       _printf.L,A2
000028AE  5972      
000028B0  47EE FFE2 4391          lea       -30(A6),A3
000028B4  49F8 0CA4 4392          lea       _Get8HexDigits.L,A4
000028B8  4BF9 0000 4393          lea       _scanf.L,A5
000028BC  5940      
                    4394   ; unsigned int *RamPtr, counter1=1;
000028BE  2D7C 0000 4395          move.l    #1,-60(A6)
000028C2  0001 FFC4 
                    4396   ; register unsigned int i;
                    4397   ; unsigned int data_type_num, test_data_num;
                    4398   ; char c;
                    4399   ; char* StartPtrByte = 0, * EndPtrByte = 0, * TempPtrByte = 0;
000028C6  4284      4400          clr.l     D4
000028C8  7E00      4401          moveq     #0,D7
000028CA  42AE FFD6 4402          clr.l     -42(A6)
                    4403   ; short int* StartPtrWord = 0, * EndPtrWord = 0, * TempPtrWord = 0;
000028CE  4283      4404          clr.l     D3
000028D0  4286      4405          clr.l     D6
000028D2  42AE FFDA 4406          clr.l     -38(A6)
                    4407   ; int* StartPtrLongWord = 0, * EndPtrLongWord = 0, * TempPtrLongWord = 0;
000028D6  4282      4408          clr.l     D2
000028D8  4285      4409          clr.l     D5
000028DA  42AE FFDE 4410          clr.l     -34(A6)
                    4411   ; unsigned char test_data_byte[] = { 0xAA, 0xBB, 0xCC, 0xDD };
000028DE  204B      4412          move.l    A3,A0
000028E0  43F9 0000 4413          lea       MemoryTest_test_data_byte.L,A1
000028E4  8B94      
000028E6  20D9      4414          move.l    (A1)+,(A0)+
                    4415   ; unsigned short int test_data_word[] = { 0xAAAA, 0xBBBB, 0xCCCC, 0xDDDD };
000028E8  41EE FFE6 4416          lea       -26(A6),A0
000028EC  43F9 0000 4417          lea       MemoryTest_test_data_word.L,A1
000028F0  8B98      
000028F2  20D9      4418          move.l    (A1)+,(A0)+
000028F4  20D9      4419          move.l    (A1)+,(A0)+
                    4420   ; unsigned int test_data_long_word[] = { 0xAAAAAAAA, 0xBBBBBBBB, 0xCCCCCCCC, 0xDDDDDDDD };
000028F6  41EE FFEE 4421          lea       -18(A6),A0
000028FA  43F9 0000 4422          lea       MemoryTest_test_data_long_word.L,A1
000028FE  8BA0      
00002900  7003      4423          moveq     #3,D0
00002902  20D9      4424          move.l    (A1)+,(A0)+
00002904  51C8 FFFC 4425          dbra      D0,*-2
                    4426   ; unsigned char progress_display_increment = 5;
00002908  1D7C 0005 4427          move.b    #5,-1(A6)
0000290C  FFFF      
                    4428   ; printf("\r\nEnter the value below for the size of the test you would like to use?\n1 = bytes (8 bits)\n2 = words (16 bits)\n3 = long words (32 bits)\n");
0000290E  4879 0000 4429          pea       @m68kde~3_162.L
00002912  7DE2      
00002914  4E92      4430          jsr       (A2)
00002916  584F      4431          addq.w    #4,A7
                    4432   ; scanf("%d", &data_type_num);
00002918  486E FFCC 4433          pea       -52(A6)
0000291C  4879 0000 4434          pea       @m68kde~3_163.L
00002920  7E6C      
00002922  4E95      4435          jsr       (A5)
00002924  504F      4436          addq.w    #8,A7
                    4437   ; switch (data_type_num) {
00002926  202E FFCC 4438          move.l    -52(A6),D0
0000292A  0C80 0000 4439          cmp.l     #2,D0
0000292E  0002      
00002930  6700 00E8 4440          beq       MemoryTest_4
00002934  620C      4441          bhi.s     MemoryTest_7
00002936  0C80 0000 4442          cmp.l     #1,D0
0000293A  0001      
0000293C  6712      4443          beq.s     MemoryTest_3
0000293E  6000 0366 4444          bra       MemoryTest_1
                    4445   MemoryTest_7:
00002942  0C80 0000 4446          cmp.l     #3,D0
00002946  0003      
00002948  6700 0216 4447          beq       MemoryTest_5
0000294C  6000 0358 4448          bra       MemoryTest_1
                    4449   MemoryTest_3:
                    4450   ; case 1:
                    4451   ; printf("\nYou have selcted to use bytes size data to test your memory\n");
00002950  4879 0000 4452          pea       @m68kde~3_164.L
00002954  7E70      
00002956  4E92      4453          jsr       (A2)
00002958  584F      4454          addq.w    #4,A7
                    4455   ; printf("Out of the below example test data, please select one by entering the value associated to each example:\n");
0000295A  4879 0000 4456          pea       @m68kde~3_165.L
0000295E  7EAE      
00002960  4E92      4457          jsr       (A2)
00002962  584F      4458          addq.w    #4,A7
                    4459   ; printf("1 = \"AA\"\n2 = \"BB\"\n3 = \"CC\"\n4 = \"DD\"\n");
00002964  4879 0000 4460          pea       @m68kde~3_166.L
00002968  7F18      
0000296A  4E92      4461          jsr       (A2)
0000296C  584F      4462          addq.w    #4,A7
                    4463   ; scanf("%d", &test_data_num);
0000296E  486E FFD0 4464          pea       -48(A6)
00002972  4879 0000 4465          pea       @m68kde~3_167.L
00002976  7F3E      
00002978  4E95      4466          jsr       (A5)
0000297A  504F      4467          addq.w    #8,A7
                    4468   ; printf("Please enter the start address you would like to use for the test data into memory\n");
0000297C  4879 0000 4469          pea       @m68kde~3_168.L
00002980  7F42      
00002982  4E92      4470          jsr       (A2)
00002984  584F      4471          addq.w    #4,A7
                    4472   ; StartPtrByte = Get8HexDigits(0);
00002986  42A7      4473          clr.l     -(A7)
00002988  4E94      4474          jsr       (A4)
0000298A  584F      4475          addq.w    #4,A7
0000298C  2800      4476          move.l    D0,D4
                    4477   ; printf("Please enter the end address you would like to use for the test data in memory\n");
0000298E  4879 0000 4478          pea       @m68kde~3_169.L
00002992  7F96      
00002994  4E92      4479          jsr       (A2)
00002996  584F      4480          addq.w    #4,A7
                    4481   ; EndPtrByte = Get8HexDigits(0);
00002998  42A7      4482          clr.l     -(A7)
0000299A  4E94      4483          jsr       (A4)
0000299C  584F      4484          addq.w    #4,A7
0000299E  2E00      4485          move.l    D0,D7
                    4486   ; TempPtrByte = StartPtrByte;
000029A0  2D44 FFD6 4487          move.l    D4,-42(A6)
                    4488   ; while (StartPtrByte < EndPtrByte) {
                    4489   MemoryTest_8:
000029A4  B887      4490          cmp.l     D7,D4
000029A6  6400 006E 4491          bhs       MemoryTest_10
                    4492   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartPtrByte, EndPtrByte, test_data_byte[test_data_num - 1]);
000029AA  222E FFD0 4493          move.l    -48(A6),D1
000029AE  5381      4494          subq.l    #1,D1
000029B0  1233 1800 4495          move.b    0(A3,D1.L),D1
000029B4  C2BC 0000 4496          and.l     #255,D1
000029B8  00FF      
000029BA  2F01      4497          move.l    D1,-(A7)
000029BC  2F07      4498          move.l    D7,-(A7)
000029BE  2F04      4499          move.l    D4,-(A7)
000029C0  4879 0000 4500          pea       @m68kde~3_170.L
000029C4  7FE6      
000029C6  4E92      4501          jsr       (A2)
000029C8  DEFC 0010 4502          add.w     #16,A7
                    4503   ; *StartPtrByte++ = test_data_byte[test_data_num - 1];
000029CC  202E FFD0 4504          move.l    -48(A6),D0
000029D0  5380      4505          subq.l    #1,D0
000029D2  2044      4506          move.l    D4,A0
000029D4  5284      4507          addq.l    #1,D4
000029D6  10B3 0800 4508          move.b    0(A3,D0.L),(A0)
                    4509   ; if (StartPtrByte - TempPtrByte == progress_display_increment) {
000029DA  2004      4510          move.l    D4,D0
000029DC  90AE FFD6 4511          sub.l     -42(A6),D0
000029E0  122E FFFF 4512          move.b    -1(A6),D1
000029E4  C2BC 0000 4513          and.l     #255,D1
000029E8  00FF      
000029EA  B081      4514          cmp.l     D1,D0
000029EC  6626      4515          bne.s     MemoryTest_11
                    4516   ; printf("\r\nFILLING Addresses [$%08X - $%08X] with $%02X", StartPtrByte, EndPtrByte, test_data_byte[test_data_num - 1]);
000029EE  222E FFD0 4517          move.l    -48(A6),D1
000029F2  5381      4518          subq.l    #1,D1
000029F4  1233 1800 4519          move.b    0(A3,D1.L),D1
000029F8  C2BC 0000 4520          and.l     #255,D1
000029FC  00FF      
000029FE  2F01      4521          move.l    D1,-(A7)
00002A00  2F07      4522          move.l    D7,-(A7)
00002A02  2F04      4523          move.l    D4,-(A7)
00002A04  4879 0000 4524          pea       @m68kde~3_171.L
00002A08  8016      
00002A0A  4E92      4525          jsr       (A2)
00002A0C  DEFC 0010 4526          add.w     #16,A7
                    4527   ; TempPtrByte = StartPtrByte;
00002A10  2D44 FFD6 4528          move.l    D4,-42(A6)
                    4529   MemoryTest_11:
00002A14  608E      4530          bra       MemoryTest_8
                    4531   MemoryTest_10:
                    4532   ; }
                    4533   ; }
                    4534   ; break;
00002A16  6000 0298 4535          bra       MemoryTest_2
                    4536   MemoryTest_4:
                    4537   ; case 2:
                    4538   ; printf("\nYou have selcted to use word size data to test your memory\n");
00002A1A  4879 0000 4539          pea       @m68kde~3_172.L
00002A1E  8046      
00002A20  4E92      4540          jsr       (A2)
00002A22  584F      4541          addq.w    #4,A7
                    4542   ; printf("Out of the below example test data, please select one by entering the value associated to each example:\n");
00002A24  4879 0000 4543          pea       @m68kde~3_173.L
00002A28  8084      
00002A2A  4E92      4544          jsr       (A2)
00002A2C  584F      4545          addq.w    #4,A7
                    4546   ; printf("1 = \"AAAA\"\n2 = \"BBBB\"\n3 = \"CCCC\"\n4 = \"DDDD\"\n");
00002A2E  4879 0000 4547          pea       @m68kde~3_174.L
00002A32  80EE      
00002A34  4E92      4548          jsr       (A2)
00002A36  584F      4549          addq.w    #4,A7
                    4550   ; scanf("%d", &test_data_num);
00002A38  486E FFD0 4551          pea       -48(A6)
00002A3C  4879 0000 4552          pea       @m68kde~3_175.L
00002A40  811C      
00002A42  4E95      4553          jsr       (A5)
00002A44  504F      4554          addq.w    #8,A7
                    4555   ; while (StartPtrWord % 2 != 0) {
                    4556   MemoryTest_13:
00002A46  2F03      4557          move.l    D3,-(A7)
00002A48  4878 0002 4558          pea       2
00002A4C  4EB9 0000 4559          jsr       ULDIV
00002A50  5754      
00002A52  202F 0004 4560          move.l    4(A7),D0
00002A56  504F      4561          addq.w    #8,A7
00002A58  4A80      4562          tst.l     D0
00002A5A  6700 0036 4563          beq       MemoryTest_15
                    4564   ; printf("Please enter the start address you would like to use for the test data into memory (Ensure to enter an even number)\n");
00002A5E  4879 0000 4565          pea       @m68kde~3_176.L
00002A62  8120      
00002A64  4E92      4566          jsr       (A2)
00002A66  584F      4567          addq.w    #4,A7
                    4568   ; StartPtrWord = Get8HexDigits(0);
00002A68  42A7      4569          clr.l     -(A7)
00002A6A  4E94      4570          jsr       (A4)
00002A6C  584F      4571          addq.w    #4,A7
00002A6E  2600      4572          move.l    D0,D3
                    4573   ; if (StartPtrWord % 2 != 0) {
00002A70  2F03      4574          move.l    D3,-(A7)
00002A72  4878 0002 4575          pea       2
00002A76  4EB9 0000 4576          jsr       ULDIV
00002A7A  5754      
00002A7C  202F 0004 4577          move.l    4(A7),D0
00002A80  504F      4578          addq.w    #8,A7
00002A82  4A80      4579          tst.l     D0
00002A84  670A      4580          beq.s     MemoryTest_16
                    4581   ; printf("ERROR: The address you have entered is not even. Please try again");
00002A86  4879 0000 4582          pea       @m68kde~3_177.L
00002A8A  8196      
00002A8C  4E92      4583          jsr       (A2)
00002A8E  584F      4584          addq.w    #4,A7
                    4585   MemoryTest_16:
00002A90  60B4      4586          bra       MemoryTest_13
                    4587   MemoryTest_15:
                    4588   ; }
                    4589   ; }
                    4590   ; while (EndPtrWord % 2 != 0) {
                    4591   MemoryTest_18:
00002A92  2F06      4592          move.l    D6,-(A7)
00002A94  4878 0002 4593          pea       2
00002A98  4EB9 0000 4594          jsr       ULDIV
00002A9C  5754      
00002A9E  202F 0004 4595          move.l    4(A7),D0
00002AA2  504F      4596          addq.w    #8,A7
00002AA4  4A80      4597          tst.l     D0
00002AA6  6700 0036 4598          beq       MemoryTest_20
                    4599   ; printf("Please enter the end address you would like to use for the test data in memory (Ensure to enter an even number)\n");
00002AAA  4879 0000 4600          pea       @m68kde~3_178.L
00002AAE  81D8      
00002AB0  4E92      4601          jsr       (A2)
00002AB2  584F      4602          addq.w    #4,A7
                    4603   ; EndPtrWord = Get8HexDigits(0);
00002AB4  42A7      4604          clr.l     -(A7)
00002AB6  4E94      4605          jsr       (A4)
00002AB8  584F      4606          addq.w    #4,A7
00002ABA  2C00      4607          move.l    D0,D6
                    4608   ; if (EndPtrWord % 2 != 0) {
00002ABC  2F06      4609          move.l    D6,-(A7)
00002ABE  4878 0002 4610          pea       2
00002AC2  4EB9 0000 4611          jsr       ULDIV
00002AC6  5754      
00002AC8  202F 0004 4612          move.l    4(A7),D0
00002ACC  504F      4613          addq.w    #8,A7
00002ACE  4A80      4614          tst.l     D0
00002AD0  670A      4615          beq.s     MemoryTest_21
                    4616   ; printf("ERROR: The address you have entered is not even. Please try again");
00002AD2  4879 0000 4617          pea       @m68kde~3_179.L
00002AD6  824A      
00002AD8  4E92      4618          jsr       (A2)
00002ADA  584F      4619          addq.w    #4,A7
                    4620   MemoryTest_21:
00002ADC  60B4      4621          bra       MemoryTest_18
                    4622   MemoryTest_20:
                    4623   ; }
                    4624   ; }
                    4625   ; TempPtrWord = StartPtrWord;
00002ADE  2D43 FFDA 4626          move.l    D3,-38(A6)
                    4627   ; while (StartPtrWord < EndPtrWord) {
                    4628   MemoryTest_23:
00002AE2  B686      4629          cmp.l     D6,D3
00002AE4  6400 0076 4630          bhs       MemoryTest_25
                    4631   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%04X", StartPtrWord, EndPtrWord, test_data_byte[test_data_num - 1]);
00002AE8  222E FFD0 4632          move.l    -48(A6),D1
00002AEC  5381      4633          subq.l    #1,D1
00002AEE  1233 1800 4634          move.b    0(A3,D1.L),D1
00002AF2  C2BC 0000 4635          and.l     #255,D1
00002AF6  00FF      
00002AF8  2F01      4636          move.l    D1,-(A7)
00002AFA  2F06      4637          move.l    D6,-(A7)
00002AFC  2F03      4638          move.l    D3,-(A7)
00002AFE  4879 0000 4639          pea       @m68kde~3_180.L
00002B02  828C      
00002B04  4E92      4640          jsr       (A2)
00002B06  DEFC 0010 4641          add.w     #16,A7
                    4642   ; *StartPtrWord++ = test_data_byte[test_data_num - 1];
00002B0A  202E FFD0 4643          move.l    -48(A6),D0
00002B0E  5380      4644          subq.l    #1,D0
00002B10  1033 0800 4645          move.b    0(A3,D0.L),D0
00002B14  C07C 00FF 4646          and.w     #255,D0
00002B18  2043      4647          move.l    D3,A0
00002B1A  5483      4648          addq.l    #2,D3
00002B1C  3080      4649          move.w    D0,(A0)
                    4650   ; if (StartPtrWord - TempPtrWord == progress_display_increment) {
00002B1E  2003      4651          move.l    D3,D0
00002B20  90AE FFDA 4652          sub.l     -38(A6),D0
00002B24  E288      4653          lsr.l     #1,D0
00002B26  122E FFFF 4654          move.b    -1(A6),D1
00002B2A  C2BC 0000 4655          and.l     #255,D1
00002B2E  00FF      
00002B30  B081      4656          cmp.l     D1,D0
00002B32  6626      4657          bne.s     MemoryTest_26
                    4658   ; printf("\r\nFILLING Addresses [$%08X - $%08X] with $%02X", StartPtrWord, EndPtrWord, test_data_byte[test_data_num - 1]);
00002B34  222E FFD0 4659          move.l    -48(A6),D1
00002B38  5381      4660          subq.l    #1,D1
00002B3A  1233 1800 4661          move.b    0(A3,D1.L),D1
00002B3E  C2BC 0000 4662          and.l     #255,D1
00002B42  00FF      
00002B44  2F01      4663          move.l    D1,-(A7)
00002B46  2F06      4664          move.l    D6,-(A7)
00002B48  2F03      4665          move.l    D3,-(A7)
00002B4A  4879 0000 4666          pea       @m68kde~3_181.L
00002B4E  82BC      
00002B50  4E92      4667          jsr       (A2)
00002B52  DEFC 0010 4668          add.w     #16,A7
                    4669   ; TempPtrWord = StartPtrWord;
00002B56  2D43 FFDA 4670          move.l    D3,-38(A6)
                    4671   MemoryTest_26:
00002B5A  6086      4672          bra       MemoryTest_23
                    4673   MemoryTest_25:
                    4674   ; }
                    4675   ; }
                    4676   ; break;
00002B5C  6000 0152 4677          bra       MemoryTest_2
                    4678   MemoryTest_5:
                    4679   ; case 3:
                    4680   ; printf("\nYou have selcted to use bytes size data to test your memory\n");
00002B60  4879 0000 4681          pea       @m68kde~3_182.L
00002B64  82EC      
00002B66  4E92      4682          jsr       (A2)
00002B68  584F      4683          addq.w    #4,A7
                    4684   ; printf("Out of the below example test data, please select one by entering the value associated to each example:\n");
00002B6A  4879 0000 4685          pea       @m68kde~3_183.L
00002B6E  832A      
00002B70  4E92      4686          jsr       (A2)
00002B72  584F      4687          addq.w    #4,A7
                    4688   ; printf("1 = \"AAAAAAAA\"\n2 = \"BBBBBBBB\"\n3 = \"CCCCCCCC\"\n4 = \"DDDDDDDD\"\n");
00002B74  4879 0000 4689          pea       @m68kde~3_184.L
00002B78  8394      
00002B7A  4E92      4690          jsr       (A2)
00002B7C  584F      4691          addq.w    #4,A7
                    4692   ; scanf("%d", &test_data_num);
00002B7E  486E FFD0 4693          pea       -48(A6)
00002B82  4879 0000 4694          pea       @m68kde~3_185.L
00002B86  83D2      
00002B88  4E95      4695          jsr       (A5)
00002B8A  504F      4696          addq.w    #8,A7
                    4697   ; while (StartPtrLongWord % 2 != 0) {
                    4698   MemoryTest_28:
00002B8C  2F02      4699          move.l    D2,-(A7)
00002B8E  4878 0002 4700          pea       2
00002B92  4EB9 0000 4701          jsr       ULDIV
00002B96  5754      
00002B98  202F 0004 4702          move.l    4(A7),D0
00002B9C  504F      4703          addq.w    #8,A7
00002B9E  4A80      4704          tst.l     D0
00002BA0  6700 0036 4705          beq       MemoryTest_30
                    4706   ; printf("Please enter the start address you would like to use for the test data into memory (Ensure to enter an even number)\n");
00002BA4  4879 0000 4707          pea       @m68kde~3_186.L
00002BA8  83D6      
00002BAA  4E92      4708          jsr       (A2)
00002BAC  584F      4709          addq.w    #4,A7
                    4710   ; StartPtrLongWord = Get8HexDigits(0);
00002BAE  42A7      4711          clr.l     -(A7)
00002BB0  4E94      4712          jsr       (A4)
00002BB2  584F      4713          addq.w    #4,A7
00002BB4  2400      4714          move.l    D0,D2
                    4715   ; if (StartPtrLongWord % 2 != 0) {
00002BB6  2F02      4716          move.l    D2,-(A7)
00002BB8  4878 0002 4717          pea       2
00002BBC  4EB9 0000 4718          jsr       ULDIV
00002BC0  5754      
00002BC2  202F 0004 4719          move.l    4(A7),D0
00002BC6  504F      4720          addq.w    #8,A7
00002BC8  4A80      4721          tst.l     D0
00002BCA  670A      4722          beq.s     MemoryTest_31
                    4723   ; printf("ERROR: The address you have entered is not even. Please try again");
00002BCC  4879 0000 4724          pea       @m68kde~3_187.L
00002BD0  844C      
00002BD2  4E92      4725          jsr       (A2)
00002BD4  584F      4726          addq.w    #4,A7
                    4727   MemoryTest_31:
00002BD6  60B4      4728          bra       MemoryTest_28
                    4729   MemoryTest_30:
                    4730   ; }
                    4731   ; }
                    4732   ; while (EndPtrLongWord % 2 != 0) {
                    4733   MemoryTest_33:
00002BD8  2F05      4734          move.l    D5,-(A7)
00002BDA  4878 0002 4735          pea       2
00002BDE  4EB9 0000 4736          jsr       ULDIV
00002BE2  5754      
00002BE4  202F 0004 4737          move.l    4(A7),D0
00002BE8  504F      4738          addq.w    #8,A7
00002BEA  4A80      4739          tst.l     D0
00002BEC  6700 0036 4740          beq       MemoryTest_35
                    4741   ; printf("Please enter the end address you would like to use for the test data in memory (Ensure to enter an even number)\n");
00002BF0  4879 0000 4742          pea       @m68kde~3_188.L
00002BF4  848E      
00002BF6  4E92      4743          jsr       (A2)
00002BF8  584F      4744          addq.w    #4,A7
                    4745   ; EndPtrLongWord = Get8HexDigits(0);
00002BFA  42A7      4746          clr.l     -(A7)
00002BFC  4E94      4747          jsr       (A4)
00002BFE  584F      4748          addq.w    #4,A7
00002C00  2A00      4749          move.l    D0,D5
                    4750   ; if (EndPtrLongWord % 2 != 0) {
00002C02  2F05      4751          move.l    D5,-(A7)
00002C04  4878 0002 4752          pea       2
00002C08  4EB9 0000 4753          jsr       ULDIV
00002C0C  5754      
00002C0E  202F 0004 4754          move.l    4(A7),D0
00002C12  504F      4755          addq.w    #8,A7
00002C14  4A80      4756          tst.l     D0
00002C16  670A      4757          beq.s     MemoryTest_36
                    4758   ; printf("ERROR: The address you have entered is not even. Please try again");
00002C18  4879 0000 4759          pea       @m68kde~3_189.L
00002C1C  8500      
00002C1E  4E92      4760          jsr       (A2)
00002C20  584F      4761          addq.w    #4,A7
                    4762   MemoryTest_36:
00002C22  60B4      4763          bra       MemoryTest_33
                    4764   MemoryTest_35:
                    4765   ; }
                    4766   ; }
                    4767   ; TempPtrLongWord = StartPtrLongWord;
00002C24  2D42 FFDE 4768          move.l    D2,-34(A6)
                    4769   ; while (StartPtrLongWord < EndPtrLongWord) {
                    4770   MemoryTest_38:
00002C28  B485      4771          cmp.l     D5,D2
00002C2A  6400 0078 4772          bhs       MemoryTest_40
                    4773   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%08X", StartPtrLongWord, EndPtrLongWord, test_data_byte[test_data_num - 1]);
00002C2E  222E FFD0 4774          move.l    -48(A6),D1
00002C32  5381      4775          subq.l    #1,D1
00002C34  1233 1800 4776          move.b    0(A3,D1.L),D1
00002C38  C2BC 0000 4777          and.l     #255,D1
00002C3C  00FF      
00002C3E  2F01      4778          move.l    D1,-(A7)
00002C40  2F05      4779          move.l    D5,-(A7)
00002C42  2F02      4780          move.l    D2,-(A7)
00002C44  4879 0000 4781          pea       @m68kde~3_190.L
00002C48  8542      
00002C4A  4E92      4782          jsr       (A2)
00002C4C  DEFC 0010 4783          add.w     #16,A7
                    4784   ; *StartPtrLongWord++ = test_data_byte[test_data_num - 1];
00002C50  202E FFD0 4785          move.l    -48(A6),D0
00002C54  5380      4786          subq.l    #1,D0
00002C56  1033 0800 4787          move.b    0(A3,D0.L),D0
00002C5A  C0BC 0000 4788          and.l     #255,D0
00002C5E  00FF      
00002C60  2042      4789          move.l    D2,A0
00002C62  5882      4790          addq.l    #4,D2
00002C64  2080      4791          move.l    D0,(A0)
                    4792   ; if (StartPtrLongWord - TempPtrLongWord == progress_display_increment) {
00002C66  2002      4793          move.l    D2,D0
00002C68  90AE FFDE 4794          sub.l     -34(A6),D0
00002C6C  E488      4795          lsr.l     #2,D0
00002C6E  122E FFFF 4796          move.b    -1(A6),D1
00002C72  C2BC 0000 4797          and.l     #255,D1
00002C76  00FF      
00002C78  B081      4798          cmp.l     D1,D0
00002C7A  6626      4799          bne.s     MemoryTest_41
                    4800   ; printf("\r\nFILLING Addresses [$%08X - $%08X] with $%02X", StartPtrLongWord, EndPtrLongWord, test_data_byte[test_data_num - 1]);
00002C7C  222E FFD0 4801          move.l    -48(A6),D1
00002C80  5381      4802          subq.l    #1,D1
00002C82  1233 1800 4803          move.b    0(A3,D1.L),D1
00002C86  C2BC 0000 4804          and.l     #255,D1
00002C8A  00FF      
00002C8C  2F01      4805          move.l    D1,-(A7)
00002C8E  2F05      4806          move.l    D5,-(A7)
00002C90  2F02      4807          move.l    D2,-(A7)
00002C92  4879 0000 4808          pea       @m68kde~3_191.L
00002C96  8572      
00002C98  4E92      4809          jsr       (A2)
00002C9A  DEFC 0010 4810          add.w     #16,A7
                    4811   ; TempPtrLongWord = StartPtrLongWord;
00002C9E  2D42 FFDE 4812          move.l    D2,-34(A6)
                    4813   MemoryTest_41:
00002CA2  6084      4814          bra       MemoryTest_38
                    4815   MemoryTest_40:
                    4816   ; }
                    4817   ; }
                    4818   ; break;
00002CA4  600A      4819          bra.s     MemoryTest_2
                    4820   MemoryTest_1:
                    4821   ; default:
                    4822   ; printf("\nYou failed to select a data type to use! Click reset button to reset");
00002CA6  4879 0000 4823          pea       @m68kde~3_192.L
00002CAA  85A2      
00002CAC  4E92      4824          jsr       (A2)
00002CAE  584F      4825          addq.w    #4,A7
                    4826   MemoryTest_2:
00002CB0  4CDF 3CFC 4827          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002CB4  4E5E      4828          unlk      A6
00002CB6  4E75      4829          rts
                    4830   ; }
                    4831   ; }
                    4832   ; void main(void)
                    4833   ; {
                    4834   _main:
00002CB8  4E56 FFF4 4835          link      A6,#-12
00002CBC  48E7 3030 4836          movem.l   D2/D3/A2/A3,-(A7)
00002CC0  45F8 0A30 4837          lea       _InstallExceptionHandler.L,A2
00002CC4  47F9 0000 4838          lea       _printf.L,A3
00002CC8  5972      
                    4839   ; char c ;
                    4840   ; int i, j ;
                    4841   ; char *BugMessage = "DE1-68k Bug V1.77";
00002CCA  41F9 0000 4842          lea       @m68kde~3_193.L,A0
00002CCE  85E8      
00002CD0  2608      4843          move.l    A0,D3
                    4844   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002CD2  41F9 0000 4845          lea       @m68kde~3_194.L,A0
00002CD6  85FA      
00002CD8  2D48 FFFC 4846          move.l    A0,-4(A6)
                    4847   ; KillAllBreakPoints() ;
00002CDC  4EB8 1EEE 4848          jsr       _KillAllBreakPoints
                    4849   ; i = x = y = z = PortA_Count = 0;
00002CE0  42B9 0803 4850          clr.l     _PortA_Count.L
00002CE4  00D4      
00002CE6  42B9 0803 4851          clr.l     _z.L
00002CEA  00D0      
00002CEC  42B9 0803 4852          clr.l     _y.L
00002CF0  00CC      
00002CF2  42B9 0803 4853          clr.l     _x.L
00002CF6  00C8      
00002CF8  4282      4854          clr.l     D2
                    4855   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002CFA  42B9 0803 4856          clr.l     _GoFlag.L
00002CFE  00DC      
00002D00  42B9 0803 4857          clr.l     _Trace.L
00002D04  00D8      
                    4858   ; Echo = 1 ;
00002D06  23FC 0000 4859          move.l    #1,_Echo.L
00002D0A  0001 0803 
00002D0E  00E0      
                    4860   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002D10  42B9 0803 4861          clr.l     _d7.L
00002D14  0100      
00002D16  42B9 0803 4862          clr.l     _d6.L
00002D1A  00FC      
00002D1C  42B9 0803 4863          clr.l     _d5.L
00002D20  00F8      
00002D22  42B9 0803 4864          clr.l     _d4.L
00002D26  00F4      
00002D28  42B9 0803 4865          clr.l     _d3.L
00002D2C  00F0      
00002D2E  42B9 0803 4866          clr.l     _d2.L
00002D32  00EC      
00002D34  42B9 0803 4867          clr.l     _d1.L
00002D38  00E8      
00002D3A  42B9 0803 4868          clr.l     _d0.L
00002D3E  00E4      
                    4869   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002D40  42B9 0803 4870          clr.l     _a6.L
00002D44  011C      
00002D46  42B9 0803 4871          clr.l     _a5.L
00002D4A  0118      
00002D4C  42B9 0803 4872          clr.l     _a4.L
00002D50  0114      
00002D52  42B9 0803 4873          clr.l     _a3.L
00002D56  0110      
00002D58  42B9 0803 4874          clr.l     _a2.L
00002D5C  010C      
00002D5E  42B9 0803 4875          clr.l     _a1.L
00002D62  0108      
00002D64  42B9 0803 4876          clr.l     _a0.L
00002D68  0104      
                    4877   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002D6A  23FC 0800 4878          move.l    #134217728,_PC.L
00002D6E  0000 0803 
00002D72  0120      
00002D74  23FC 0804 4879          move.l    #134479872,_SSP.L
00002D78  0000 0803 
00002D7C  0124      
00002D7E  23FC 0804 4880          move.l    #134479872,_USP.L
00002D82  0000 0803 
00002D86  0128      
                    4881   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002D88  33FC 2000 4882          move.w    #8192,_SR.L
00002D8C  0803 012C 
                    4883   ; // Initialise Breakpoint variables
                    4884   ; for(i = 0; i < 8; i++)  {
00002D90  4282      4885          clr.l     D2
                    4886   main_1:
00002D92  0C82 0000 4887          cmp.l     #8,D2
00002D96  0008      
00002D98  6C00 004C 4888          bge       main_3
                    4889   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002D9C  2002      4890          move.l    D2,D0
00002D9E  E588      4891          lsl.l     #2,D0
00002DA0  41F9 0803 4892          lea       _BreakPointAddress.L,A0
00002DA4  012E      
00002DA6  42B0 0800 4893          clr.l     0(A0,D0.L)
                    4894   ; WatchPointAddress[i] = 0 ;
00002DAA  2002      4895          move.l    D2,D0
00002DAC  E588      4896          lsl.l     #2,D0
00002DAE  41F9 0803 4897          lea       _WatchPointAddress.L,A0
00002DB2  0182      
00002DB4  42B0 0800 4898          clr.l     0(A0,D0.L)
                    4899   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002DB8  2002      4900          move.l    D2,D0
00002DBA  E388      4901          lsl.l     #1,D0
00002DBC  41F9 0803 4902          lea       _BreakPointInstruction.L,A0
00002DC0  014E      
00002DC2  4270 0800 4903          clr.w     0(A0,D0.L)
                    4904   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002DC6  2002      4905          move.l    D2,D0
00002DC8  E588      4906          lsl.l     #2,D0
00002DCA  41F9 0803 4907          lea       _BreakPointSetOrCleared.L,A0
00002DCE  015E      
00002DD0  42B0 0800 4908          clr.l     0(A0,D0.L)
                    4909   ; WatchPointSetOrCleared[i] = 0;
00002DD4  2002      4910          move.l    D2,D0
00002DD6  E588      4911          lsl.l     #2,D0
00002DD8  41F9 0803 4912          lea       _WatchPointSetOrCleared.L,A0
00002DDC  01A2      
00002DDE  42B0 0800 4913          clr.l     0(A0,D0.L)
00002DE2  5282      4914          addq.l    #1,D2
00002DE4  60AC      4915          bra       main_1
                    4916   main_3:
                    4917   ; }
                    4918   ; Init_RS232() ;     // initialise the RS232 port
00002DE6  4EB8 0B12 4919          jsr       _Init_RS232
                    4920   ; Init_LCD() ;
00002DEA  4EB8 095E 4921          jsr       _Init_LCD
                    4922   ; for( i = 32; i < 48; i++)
00002DEE  7420      4923          moveq     #32,D2
                    4924   main_4:
00002DF0  0C82 0000 4925          cmp.l     #48,D2
00002DF4  0030      
00002DF6  6C0E      4926          bge.s     main_6
                    4927   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002DF8  2F02      4928          move.l    D2,-(A7)
00002DFA  4878 27C6 4929          pea       _UnhandledTrap.L
00002DFE  4E92      4930          jsr       (A2)
00002E00  504F      4931          addq.w    #8,A7
00002E02  5282      4932          addq.l    #1,D2
00002E04  60EA      4933          bra       main_4
                    4934   main_6:
                    4935   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002E06  4878 002F 4936          pea       47
00002E0A  4878 24A0 4937          pea       _menu.L
00002E0E  4E92      4938          jsr       (A2)
00002E10  504F      4939          addq.w    #8,A7
                    4940   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002E12  4878 0019 4941          pea       25
00002E16  4878 276C 4942          pea       _UnhandledIRQ1.L
00002E1A  4E92      4943          jsr       (A2)
00002E1C  504F      4944          addq.w    #8,A7
                    4945   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002E1E  4878 001A 4946          pea       26
00002E22  4878 2778 4947          pea       _UnhandledIRQ2.L
00002E26  4E92      4948          jsr       (A2)
00002E28  504F      4949          addq.w    #8,A7
                    4950   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002E2A  4878 001B 4951          pea       27
00002E2E  4878 2784 4952          pea       _UnhandledIRQ3.L
00002E32  4E92      4953          jsr       (A2)
00002E34  504F      4954          addq.w    #8,A7
                    4955   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002E36  4878 001C 4956          pea       28
00002E3A  4878 2790 4957          pea       _UnhandledIRQ4.L
00002E3E  4E92      4958          jsr       (A2)
00002E40  504F      4959          addq.w    #8,A7
                    4960   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002E42  4878 001D 4961          pea       29
00002E46  4878 279C 4962          pea       _UnhandledIRQ5.L
00002E4A  4E92      4963          jsr       (A2)
00002E4C  504F      4964          addq.w    #8,A7
                    4965   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002E4E  4878 001E 4966          pea       30
00002E52  4878 27A8 4967          pea       _UnhandledIRQ6.L
00002E56  4E92      4968          jsr       (A2)
00002E58  504F      4969          addq.w    #8,A7
                    4970   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002E5A  4878 001F 4971          pea       31
00002E5E  4878 27BA 4972          pea       _UnhandledIRQ7.L
00002E62  4E92      4973          jsr       (A2)
00002E64  504F      4974          addq.w    #8,A7
                    4975   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002E66  4878 002E 4976          pea       46
00002E6A  4878 2192 4977          pea       _HandleBreakPoint.L
00002E6E  4E92      4978          jsr       (A2)
00002E70  504F      4979          addq.w    #8,A7
                    4980   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002E72  4878 001D 4981          pea       29
00002E76  4878 1836 4982          pea       _DumpRegistersandPause.L
00002E7A  4E92      4983          jsr       (A2)
00002E7C  504F      4984          addq.w    #8,A7
                    4985   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002E7E  4878 0002 4986          pea       2
00002E82  4878 27D4 4987          pea       _BusError.L
00002E86  4E92      4988          jsr       (A2)
00002E88  504F      4989          addq.w    #8,A7
                    4990   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002E8A  4878 0003 4991          pea       3
00002E8E  4878 27E2 4992          pea       _AddressError.L
00002E92  4E92      4993          jsr       (A2)
00002E94  504F      4994          addq.w    #8,A7
                    4995   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002E96  4878 0004 4996          pea       4
00002E9A  4878 27F0 4997          pea       _IllegalInstruction.L
00002E9E  4E92      4998          jsr       (A2)
00002EA0  504F      4999          addq.w    #8,A7
                    5000   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002EA2  4878 0005 5001          pea       5
00002EA6  4878 27FE 5002          pea       _Dividebyzero.L
00002EAA  4E92      5003          jsr       (A2)
00002EAC  504F      5004          addq.w    #8,A7
                    5005   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002EAE  4878 0006 5006          pea       6
00002EB2  4878 280C 5007          pea       _Check.L
00002EB6  4E92      5008          jsr       (A2)
00002EB8  504F      5009          addq.w    #8,A7
                    5010   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002EBA  4878 0007 5011          pea       7
00002EBE  4878 281A 5012          pea       _Trapv.L
00002EC2  4E92      5013          jsr       (A2)
00002EC4  504F      5014          addq.w    #8,A7
                    5015   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002EC6  4878 0008 5016          pea       8
00002ECA  4878 2828 5017          pea       _PrivError.L
00002ECE  4E92      5018          jsr       (A2)
00002ED0  504F      5019          addq.w    #8,A7
                    5020   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002ED2  4878 000F 5021          pea       15
00002ED6  4878 2836 5022          pea       _UnitIRQ.L
00002EDA  4E92      5023          jsr       (A2)
00002EDC  504F      5024          addq.w    #8,A7
                    5025   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002EDE  4878 0018 5026          pea       24
00002EE2  4878 280C 5027          pea       _Check.L
00002EE6  4E92      5028          jsr       (A2)
00002EE8  504F      5029          addq.w    #8,A7
                    5030   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002EEA  4EB8 0BA6 5031          jsr       _FlushKeyboard
                    5032   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002EEE  4239 0040 5033          clr.b     4194314
00002EF2  000A      
                    5034   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5035   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5036   main_7:
00002EF4  1039 0040 5037          move.b    4194306,D0
00002EF8  0002      
00002EFA  C03C 0002 5038          and.b     #2,D0
00002EFE  0C00 0002 5039          cmp.b     #2,D0
00002F02  662A      5040          bne.s     main_9
                    5041   ; LoadFromFlashChip();
00002F04  4EB8 12DA 5042          jsr       _LoadFromFlashChip
                    5043   ; printf("\r\nRunning.....") ;
00002F08  4879 0000 5044          pea       @m68kde~3_195.L
00002F0C  8618      
00002F0E  4E93      5045          jsr       (A3)
00002F10  584F      5046          addq.w    #4,A7
                    5047   ; Oline1("Running.....") ;
00002F12  4879 0000 5048          pea       @m68kde~3_196.L
00002F16  8628      
00002F18  4EB8 0A02 5049          jsr       _Oline1
00002F1C  584F      5050          addq.w    #4,A7
                    5051   ; GoFlag = 1;
00002F1E  23FC 0000 5052          move.l    #1,_GoFlag.L
00002F22  0001 0803 
00002F26  00DC      
                    5053   ; go() ;
00002F28  4EB8 08B8 5054          jsr       _go
00002F2C  60C6      5055          bra       main_7
                    5056   main_9:
                    5057   ; }
                    5058   ; // otherwise start the debug monitor
                    5059   ; Oline0(BugMessage) ;
00002F2E  2F03      5060          move.l    D3,-(A7)
00002F30  4EB8 09D4 5061          jsr       _Oline0
00002F34  584F      5062          addq.w    #4,A7
                    5063   ; Oline1("By: PJ Davies") ;
00002F36  4879 0000 5064          pea       @m68kde~3_197.L
00002F3A  8636      
00002F3C  4EB8 0A02 5065          jsr       _Oline1
00002F40  584F      5066          addq.w    #4,A7
                    5067   ; printf("\r\n%s", BugMessage) ;
00002F42  2F03      5068          move.l    D3,-(A7)
00002F44  4879 0000 5069          pea       @m68kde~3_198.L
00002F48  8644      
00002F4A  4E93      5070          jsr       (A3)
00002F4C  504F      5071          addq.w    #8,A7
                    5072   ; printf("\r\n%s", CopyrightMessage) ;
00002F4E  2F2E FFFC 5073          move.l    -4(A6),-(A7)
00002F52  4879 0000 5074          pea       @m68kde~3_199.L
00002F56  864A      
00002F58  4E93      5075          jsr       (A3)
00002F5A  504F      5076          addq.w    #8,A7
                    5077   ; menu();
00002F5C  4EB8 24A0 5078          jsr       _menu
00002F60  4CDF 0C0C 5079          movem.l   (A7)+,D2/D3/A2/A3
00002F64  4E5E      5080          unlk      A6
00002F66  4E75      5081          rts
                    5082   ; }
                    5083   ; void FormatInstruction(void)    // for disassembly
                    5084   ; {
                    5085   _FormatInstruction:
00002F68  4E56 FEC0 5086          link      A6,#-320
00002F6C  48E7 3C20 5087          movem.l   D2/D3/D4/D5/A2,-(A7)
00002F70  45EE FEC0 5088          lea       -320(A6),A2
                    5089   ; short i, ilen = 0 ;
00002F74  4245      5090          clr.w     D5
                    5091   ; char *iptr = Instruction ;
00002F76  41F9 0803 5092          lea       _Instruction.L,A0
00002F7A  04E2      
00002F7C  2608      5093          move.l    A0,D3
                    5094   ; char *Formatted[80], *fptr ;
                    5095   ; fptr = Formatted ;
00002F7E  280A      5096          move.l    A2,D4
                    5097   ; for(i = 0; i < (short)(80); i ++)
00002F80  4242      5098          clr.w     D2
                    5099   FormatInstruction_1:
00002F82  0C42 0050 5100          cmp.w     #80,D2
00002F86  6C0E      5101          bge.s     FormatInstruction_3
                    5102   ; Formatted[i] = (char)(0);          // set formatted string to null
00002F88  48C2      5103          ext.l     D2
00002F8A  2002      5104          move.l    D2,D0
00002F8C  E588      5105          lsl.l     #2,D0
00002F8E  42B2 0800 5106          clr.l     0(A2,D0.L)
00002F92  5242      5107          addq.w    #1,D2
00002F94  60EC      5108          bra       FormatInstruction_1
                    5109   FormatInstruction_3:
                    5110   ; while((*iptr != ' '))   {   // while ot a space char
                    5111   FormatInstruction_4:
00002F96  2043      5112          move.l    D3,A0
00002F98  1010      5113          move.b    (A0),D0
00002F9A  0C00 0020 5114          cmp.b     #32,D0
00002F9E  6718      5115          beq.s     FormatInstruction_6
                    5116   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
00002FA0  2043      5117          move.l    D3,A0
00002FA2  5283      5118          addq.l    #1,D3
00002FA4  2244      5119          move.l    D4,A1
00002FA6  5284      5120          addq.l    #1,D4
00002FA8  1290      5121          move.b    (A0),(A1)
                    5122   ; ilen ++ ;               // count length of string as we go
00002FAA  5245      5123          addq.w    #1,D5
                    5124   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
00002FAC  2043      5125          move.l    D3,A0
00002FAE  1010      5126          move.b    (A0),D0
00002FB0  6604      5127          bne.s     FormatInstruction_7
                    5128   ; return ;
00002FB2  6000 003E 5129          bra       FormatInstruction_9
                    5130   FormatInstruction_7:
00002FB6  60DE      5131          bra       FormatInstruction_4
                    5132   FormatInstruction_6:
                    5133   ; }
                    5134   ; // must still be more text to process otherwise we would have returned above if got to the end
                    5135   ; for(i = 0; i < ((short)(8) - ilen); i++)
00002FB8  4242      5136          clr.w     D2
                    5137   FormatInstruction_10:
00002FBA  7008      5138          moveq     #8,D0
00002FBC  4880      5139          ext.w     D0
00002FBE  9045      5140          sub.w     D5,D0
00002FC0  B440      5141          cmp.w     D0,D2
00002FC2  6C0C      5142          bge.s     FormatInstruction_12
                    5143   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
00002FC4  2044      5144          move.l    D4,A0
00002FC6  5284      5145          addq.l    #1,D4
00002FC8  10BC 0020 5146          move.b    #32,(A0)
00002FCC  5242      5147          addq.w    #1,D2
00002FCE  60EA      5148          bra       FormatInstruction_10
                    5149   FormatInstruction_12:
                    5150   ; // now skip over any spaces in original unformatted string before copying the rest
                    5151   ; while((*iptr == ' '))
                    5152   FormatInstruction_13:
00002FD0  2043      5153          move.l    D3,A0
00002FD2  1010      5154          move.b    (A0),D0
00002FD4  0C00 0020 5155          cmp.b     #32,D0
00002FD8  6604      5156          bne.s     FormatInstruction_15
                    5157   ; iptr++ ;
00002FDA  5283      5158          addq.l    #1,D3
00002FDC  60F2      5159          bra       FormatInstruction_13
                    5160   FormatInstruction_15:
                    5161   ; strcat(fptr,iptr) ;
00002FDE  2F03      5162          move.l    D3,-(A7)
00002FE0  2F04      5163          move.l    D4,-(A7)
00002FE2  4EB9 0000 5164          jsr       _strcat
00002FE6  58FE      
00002FE8  504F      5165          addq.w    #8,A7
                    5166   ; strcpyInstruction(Formatted) ;
00002FEA  2F0A      5167          move.l    A2,-(A7)
00002FEC  4EB8 0CE6 5168          jsr       _strcpyInstruction
00002FF0  584F      5169          addq.w    #4,A7
                    5170   FormatInstruction_9:
00002FF2  4CDF 043C 5171          movem.l   (A7)+,D2/D3/D4/D5/A2
00002FF6  4E5E      5172          unlk      A6
00002FF8  4E75      5173          rts
                    5174   ; }
                    5175   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    5176   ; {
                    5177   _Decode2BitOperandSize:
00002FFA  4E56 0000 5178          link      A6,#0
00002FFE  48E7 3020 5179          movem.l   D2/D3/A2,-(A7)
00003002  362E 000A 5180          move.w    10(A6),D3
00003006  C6BC 0000 5181          and.l     #65535,D3
0000300A  FFFF      
0000300C  45F8 0CCC 5182          lea       _strcatInstruction.L,A2
                    5183   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    5184   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
00003010  3003      5185          move.w    D3,D0
00003012  C07C 00C0 5186          and.w     #192,D0
00003016  EC48      5187          lsr.w     #6,D0
00003018  3600      5188          move.w    D0,D3
                    5189   ; if(OpCode == (unsigned short int)(0))   {
0000301A  4A43      5190          tst.w     D3
0000301C  660E      5191          bne.s     Decode2BitOperandSize_1
                    5192   ; strcatInstruction(".B ") ;
0000301E  4879 0000 5193          pea       @m68kde~3_200.L
00003022  8650      
00003024  4E92      5194          jsr       (A2)
00003026  584F      5195          addq.w    #4,A7
                    5196   ; DataSize = 1 ;
00003028  7401      5197          moveq     #1,D2
0000302A  6020      5198          bra.s     Decode2BitOperandSize_4
                    5199   Decode2BitOperandSize_1:
                    5200   ; }
                    5201   ; else if(OpCode == (unsigned short int)(1)) {
0000302C  0C43 0001 5202          cmp.w     #1,D3
00003030  660E      5203          bne.s     Decode2BitOperandSize_3
                    5204   ; strcatInstruction(".W ") ;
00003032  4879 0000 5205          pea       @m68kde~3_201.L
00003036  8654      
00003038  4E92      5206          jsr       (A2)
0000303A  584F      5207          addq.w    #4,A7
                    5208   ; DataSize = 1 ;
0000303C  7401      5209          moveq     #1,D2
0000303E  600C      5210          bra.s     Decode2BitOperandSize_4
                    5211   Decode2BitOperandSize_3:
                    5212   ; }
                    5213   ; else {
                    5214   ; strcatInstruction(".L ") ;
00003040  4879 0000 5215          pea       @m68kde~3_202.L
00003044  8658      
00003046  4E92      5216          jsr       (A2)
00003048  584F      5217          addq.w    #4,A7
                    5218   ; DataSize = 2 ;
0000304A  7402      5219          moveq     #2,D2
                    5220   Decode2BitOperandSize_4:
                    5221   ; }
                    5222   ; return DataSize;
0000304C  3002      5223          move.w    D2,D0
0000304E  4CDF 040C 5224          movem.l   (A7)+,D2/D3/A2
00003052  4E5E      5225          unlk      A6
00003054  4E75      5226          rts
                    5227   ; }
                    5228   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    5229   ; {
                    5230   _Decode3BitDataRegister:
00003056  4E56 FFFC 5231          link      A6,#-4
0000305A  2F0A      5232          move.l    A2,-(A7)
0000305C  45EE FFFC 5233          lea       -4(A6),A2
                    5234   ; unsigned char RegNumber[3] ;
                    5235   ; RegNumber[0] = 'D' ;
00003060  14BC 0044 5236          move.b    #68,(A2)
                    5237   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00003064  7030      5238          moveq     #48,D0
00003066  322E 000A 5239          move.w    10(A6),D1
0000306A  C27C 0E00 5240          and.w     #3584,D1
0000306E  E049      5241          lsr.w     #8,D1
00003070  E249      5242          lsr.w     #1,D1
00003072  D001      5243          add.b     D1,D0
00003074  1540 0001 5244          move.b    D0,1(A2)
                    5245   ; RegNumber[2] = 0 ;
00003078  422A 0002 5246          clr.b     2(A2)
                    5247   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
0000307C  2F0A      5248          move.l    A2,-(A7)
0000307E  4EB8 0CCC 5249          jsr       _strcatInstruction
00003082  584F      5250          addq.w    #4,A7
00003084  245F      5251          move.l    (A7)+,A2
00003086  4E5E      5252          unlk      A6
00003088  4E75      5253          rts
                    5254   ; }
                    5255   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    5256   ; {
                    5257   _Decode3BitAddressRegister:
0000308A  4E56 FFFC 5258          link      A6,#-4
0000308E  2F0A      5259          move.l    A2,-(A7)
00003090  45EE FFFC 5260          lea       -4(A6),A2
                    5261   ; unsigned char RegNumber[3];
                    5262   ; RegNumber[0] = 'A' ;
00003094  14BC 0041 5263          move.b    #65,(A2)
                    5264   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00003098  7030      5265          moveq     #48,D0
0000309A  322E 000A 5266          move.w    10(A6),D1
0000309E  D001      5267          add.b     D1,D0
000030A0  1540 0001 5268          move.b    D0,1(A2)
                    5269   ; RegNumber[2] = 0 ;
000030A4  422A 0002 5270          clr.b     2(A2)
                    5271   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
000030A8  2F0A      5272          move.l    A2,-(A7)
000030AA  4EB8 0CCC 5273          jsr       _strcatInstruction
000030AE  584F      5274          addq.w    #4,A7
000030B0  245F      5275          move.l    (A7)+,A2
000030B2  4E5E      5276          unlk      A6
000030B4  4E75      5277          rts
                    5278   ; }
                    5279   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5280   ; // Special function is used to print 8,16, 32 bit operands after move #
                    5281   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5282   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    5283   ; {
                    5284   _DecodeBWLDataAfterOpCodeForMove:
000030B6  4E56 0000 5285          link      A6,#0
000030BA  48E7 3030 5286          movem.l   D2/D3/A2/A3,-(A7)
000030BE  242E 0008 5287          move.l    8(A6),D2
000030C2  45F9 0803 5288          lea       _TempString.L,A2
000030C6  0546      
000030C8  47F9 0000 5289          lea       _sprintf.L,A3
000030CC  58CA      
                    5290   ; unsigned char OperandSize ;
                    5291   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
000030CE  2042      5292          move.l    D2,A0
000030D0  3010      5293          move.w    (A0),D0
000030D2  E048      5294          lsr.w     #8,D0
000030D4  E848      5295          lsr.w     #4,D0
000030D6  C07C 0003 5296          and.w     #3,D0
000030DA  1600      5297          move.b    D0,D3
                    5298   ; InstructionSize += 1;
000030DC  52B9 0803 5299          addq.l    #1,_InstructionSize.L
000030E0  017E      
                    5300   ; if(OperandSize == (char)(1))                // #byte value
000030E2  0C03 0001 5301          cmp.b     #1,D3
000030E6  6620      5302          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    5303   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
000030E8  2042      5304          move.l    D2,A0
000030EA  3228 0002 5305          move.w    2(A0),D1
000030EE  C2BC 0000 5306          and.l     #65535,D1
000030F2  FFFF      
000030F4  2F01      5307          move.l    D1,-(A7)
000030F6  4879 0000 5308          pea       @m68kde~3_203.L
000030FA  865C      
000030FC  2F0A      5309          move.l    A2,-(A7)
000030FE  4E93      5310          jsr       (A3)
00003100  DEFC 000C 5311          add.w     #12,A7
00003104  6000 0068 5312          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5313   DecodeBWLDataAfterOpCodeForMove_1:
                    5314   ; else if(OperandSize == (char)(3))          // #word value
00003108  0C03 0003 5315          cmp.b     #3,D3
0000310C  6620      5316          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    5317   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
0000310E  2042      5318          move.l    D2,A0
00003110  3228 0002 5319          move.w    2(A0),D1
00003114  C2BC 0000 5320          and.l     #65535,D1
00003118  FFFF      
0000311A  2F01      5321          move.l    D1,-(A7)
0000311C  4879 0000 5322          pea       @m68kde~3_204.L
00003120  8662      
00003122  2F0A      5323          move.l    A2,-(A7)
00003124  4E93      5324          jsr       (A3)
00003126  DEFC 000C 5325          add.w     #12,A7
0000312A  6000 0042 5326          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5327   DecodeBWLDataAfterOpCodeForMove_3:
                    5328   ; else if(OperandSize == (char)(2)) {                                       // long value
0000312E  0C03 0002 5329          cmp.b     #2,D3
00003132  6600 003A 5330          bne       DecodeBWLDataAfterOpCodeForMove_5
                    5331   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
00003136  2042      5332          move.l    D2,A0
00003138  3228 0002 5333          move.w    2(A0),D1
0000313C  C2BC 0000 5334          and.l     #65535,D1
00003140  FFFF      
00003142  E189      5335          lsl.l     #8,D1
00003144  E189      5336          lsl.l     #8,D1
00003146  2042      5337          move.l    D2,A0
00003148  2F00      5338          move.l    D0,-(A7)
0000314A  3028 0004 5339          move.w    4(A0),D0
0000314E  C0BC 0000 5340          and.l     #65535,D0
00003152  FFFF      
00003154  8280      5341          or.l      D0,D1
00003156  201F      5342          move.l    (A7)+,D0
00003158  2F01      5343          move.l    D1,-(A7)
0000315A  4879 0000 5344          pea       @m68kde~3_205.L
0000315E  8668      
00003160  2F0A      5345          move.l    A2,-(A7)
00003162  4E93      5346          jsr       (A3)
00003164  DEFC 000C 5347          add.w     #12,A7
                    5348   ; InstructionSize += 1;
00003168  52B9 0803 5349          addq.l    #1,_InstructionSize.L
0000316C  017E      
                    5350   DecodeBWLDataAfterOpCodeForMove_5:
                    5351   ; }
                    5352   ; strcatInstruction(TempString) ;
0000316E  2F0A      5353          move.l    A2,-(A7)
00003170  4EB8 0CCC 5354          jsr       _strcatInstruction
00003174  584F      5355          addq.w    #4,A7
00003176  4CDF 0C0C 5356          movem.l   (A7)+,D2/D3/A2/A3
0000317A  4E5E      5357          unlk      A6
0000317C  4E75      5358          rts
                    5359   ; }
                    5360   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5361   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    5362   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5363   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    5364   ; {
                    5365   _DecodeBWLDataAfterOpCode:
0000317E  4E56 0000 5366          link      A6,#0
00003182  48E7 3038 5367          movem.l   D2/D3/A2/A3/A4,-(A7)
00003186  262E 0008 5368          move.l    8(A6),D3
0000318A  45F9 0803 5369          lea       _TempString.L,A2
0000318E  0546      
00003190  47F9 0000 5370          lea       _sprintf.L,A3
00003194  58CA      
00003196  49F9 0803 5371          lea       _InstructionSize.L,A4
0000319A  017E      
                    5372   ; unsigned char OperandSize ;
                    5373   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
0000319C  2043      5374          move.l    D3,A0
0000319E  3010      5375          move.w    (A0),D0
000031A0  C07C 01C0 5376          and.w     #448,D0
000031A4  EC48      5377          lsr.w     #6,D0
000031A6  1400      5378          move.b    D0,D2
                    5379   ; InstructionSize += 1;
000031A8  5294      5380          addq.l    #1,(A4)
                    5381   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
000031AA  4A02      5382          tst.b     D2
000031AC  6706      5383          beq.s     DecodeBWLDataAfterOpCode_3
000031AE  0C02 0004 5384          cmp.b     #4,D2
000031B2  6620      5385          bne.s     DecodeBWLDataAfterOpCode_1
                    5386   DecodeBWLDataAfterOpCode_3:
                    5387   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
000031B4  2043      5388          move.l    D3,A0
000031B6  3228 0002 5389          move.w    2(A0),D1
000031BA  C2BC 0000 5390          and.l     #65535,D1
000031BE  FFFF      
000031C0  2F01      5391          move.l    D1,-(A7)
000031C2  4879 0000 5392          pea       @m68kde~3_206.L
000031C6  866E      
000031C8  2F0A      5393          move.l    A2,-(A7)
000031CA  4E93      5394          jsr       (A3)
000031CC  DEFC 000C 5395          add.w     #12,A7
000031D0  6000 007C 5396          bra       DecodeBWLDataAfterOpCode_7
                    5397   DecodeBWLDataAfterOpCode_1:
                    5398   ; // #word value 7 is used by divs.w instruction (not divu)
                    5399   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    5400   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    5401   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
000031D4  0C02 0001 5402          cmp.b     #1,D2
000031D8  670C      5403          beq.s     DecodeBWLDataAfterOpCode_6
000031DA  0C02 0005 5404          cmp.b     #5,D2
000031DE  6706      5405          beq.s     DecodeBWLDataAfterOpCode_6
000031E0  0C02 0003 5406          cmp.b     #3,D2
000031E4  6620      5407          bne.s     DecodeBWLDataAfterOpCode_4
                    5408   DecodeBWLDataAfterOpCode_6:
                    5409   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
000031E6  2043      5410          move.l    D3,A0
000031E8  3228 0002 5411          move.w    2(A0),D1
000031EC  C2BC 0000 5412          and.l     #65535,D1
000031F0  FFFF      
000031F2  2F01      5413          move.l    D1,-(A7)
000031F4  4879 0000 5414          pea       @m68kde~3_207.L
000031F8  8674      
000031FA  2F0A      5415          move.l    A2,-(A7)
000031FC  4E93      5416          jsr       (A3)
000031FE  DEFC 000C 5417          add.w     #12,A7
00003202  6000 004A 5418          bra       DecodeBWLDataAfterOpCode_7
                    5419   DecodeBWLDataAfterOpCode_4:
                    5420   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
00003206  0C02 0002 5421          cmp.b     #2,D2
0000320A  670E      5422          beq.s     DecodeBWLDataAfterOpCode_9
0000320C  0C02 0006 5423          cmp.b     #6,D2
00003210  6708      5424          beq.s     DecodeBWLDataAfterOpCode_9
00003212  0C02 0007 5425          cmp.b     #7,D2
00003216  6600 0036 5426          bne       DecodeBWLDataAfterOpCode_7
                    5427   DecodeBWLDataAfterOpCode_9:
                    5428   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
0000321A  2043      5429          move.l    D3,A0
0000321C  3228 0002 5430          move.w    2(A0),D1
00003220  C2BC 0000 5431          and.l     #65535,D1
00003224  FFFF      
00003226  E189      5432          lsl.l     #8,D1
00003228  E189      5433          lsl.l     #8,D1
0000322A  2043      5434          move.l    D3,A0
0000322C  2F00      5435          move.l    D0,-(A7)
0000322E  3028 0004 5436          move.w    4(A0),D0
00003232  C0BC 0000 5437          and.l     #65535,D0
00003236  FFFF      
00003238  8280      5438          or.l      D0,D1
0000323A  201F      5439          move.l    (A7)+,D0
0000323C  2F01      5440          move.l    D1,-(A7)
0000323E  4879 0000 5441          pea       @m68kde~3_208.L
00003242  867A      
00003244  2F0A      5442          move.l    A2,-(A7)
00003246  4E93      5443          jsr       (A3)
00003248  DEFC 000C 5444          add.w     #12,A7
                    5445   ; InstructionSize += 1;
0000324C  5294      5446          addq.l    #1,(A4)
                    5447   DecodeBWLDataAfterOpCode_7:
                    5448   ; }
                    5449   ; // special case for divs - bugger!!!
                    5450   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
0000324E  2043      5451          move.l    D3,A0
00003250  3010      5452          move.w    (A0),D0
00003252  C07C F1C0 5453          and.w     #61888,D0
00003256  0C40 81C0 5454          cmp.w     #33216,D0
0000325A  6622      5455          bne.s     DecodeBWLDataAfterOpCode_10
                    5456   ; {
                    5457   ; InstructionSize = 2 ;
0000325C  28BC 0000 5458          move.l    #2,(A4)
00003260  0002      
                    5459   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003262  2043      5460          move.l    D3,A0
00003264  3228 0002 5461          move.w    2(A0),D1
00003268  C2BC 0000 5462          and.l     #65535,D1
0000326C  FFFF      
0000326E  2F01      5463          move.l    D1,-(A7)
00003270  4879 0000 5464          pea       @m68kde~3_209.L
00003274  8680      
00003276  2F0A      5465          move.l    A2,-(A7)
00003278  4E93      5466          jsr       (A3)
0000327A  DEFC 000C 5467          add.w     #12,A7
                    5468   DecodeBWLDataAfterOpCode_10:
                    5469   ; }
                    5470   ; strcatInstruction(TempString) ;
0000327E  2F0A      5471          move.l    A2,-(A7)
00003280  4EB8 0CCC 5472          jsr       _strcatInstruction
00003284  584F      5473          addq.w    #4,A7
00003286  4CDF 1C0C 5474          movem.l   (A7)+,D2/D3/A2/A3/A4
0000328A  4E5E      5475          unlk      A6
0000328C  4E75      5476          rts
                    5477   ; }
                    5478   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5479   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5480   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5481   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5482   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5483   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5484   ; {
                    5485   _Decode6BitEA:
0000328E  4E56 FFF4 5486          link      A6,#-12
00003292  48E7 3F3C 5487          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003296  45F8 0CCC 5488          lea       _strcatInstruction.L,A2
0000329A  47F9 0803 5489          lea       _TempString.L,A3
0000329E  0546      
000032A0  282E 0008 5490          move.l    8(A6),D4
000032A4  49F9 0000 5491          lea       _sprintf.L,A4
000032A8  58CA      
000032AA  4BF9 0803 5492          lea       _InstructionSize.L,A5
000032AE  017E      
000032B0  3C2E 0012 5493          move.w    18(A6),D6
000032B4  CCBC 0000 5494          and.l     #65535,D6
000032B8  FFFF      
                    5495   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5496   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5497   ; unsigned char RegNumber[3];
                    5498   ; signed char offset ;
                    5499   ; unsigned short int Xn, XnSize ;
                    5500   ; if(EAChoice == 0)   {   // if EA in bits 5-0
000032BA  202E 000C 5501          move.l    12(A6),D0
000032BE  6620      5502          bne.s     Decode6BitEA_1
                    5503   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
000032C0  2044      5504          move.l    D4,A0
000032C2  3010      5505          move.w    (A0),D0
000032C4  E648      5506          lsr.w     #3,D0
000032C6  C07C 00FF 5507          and.w     #255,D0
000032CA  C07C 0007 5508          and.w     #7,D0
000032CE  1A00      5509          move.b    D0,D5
                    5510   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
000032D0  2044      5511          move.l    D4,A0
000032D2  3010      5512          move.w    (A0),D0
000032D4  C07C 00FF 5513          and.w     #255,D0
000032D8  C07C 0007 5514          and.w     #7,D0
000032DC  1600      5515          move.b    D0,D3
000032DE  6022      5516          bra.s     Decode6BitEA_2
                    5517   Decode6BitEA_1:
                    5518   ; }
                    5519   ; else    {               // else EA in bits 11-6
                    5520   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
000032E0  2044      5521          move.l    D4,A0
000032E2  3010      5522          move.w    (A0),D0
000032E4  EC48      5523          lsr.w     #6,D0
000032E6  C07C 00FF 5524          and.w     #255,D0
000032EA  C07C 0007 5525          and.w     #7,D0
000032EE  1A00      5526          move.b    D0,D5
                    5527   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
000032F0  2044      5528          move.l    D4,A0
000032F2  3010      5529          move.w    (A0),D0
000032F4  E048      5530          lsr.w     #8,D0
000032F6  E248      5531          lsr.w     #1,D0
000032F8  C07C 00FF 5532          and.w     #255,D0
000032FC  C07C 0007 5533          and.w     #7,D0
00003300  1600      5534          move.b    D0,D3
                    5535   Decode6BitEA_2:
                    5536   ; }
                    5537   ; if(EAChoice == 0)    {
00003302  202E 000C 5538          move.l    12(A6),D0
00003306  6600 0034 5539          bne       Decode6BitEA_3
                    5540   ; ExWord1 = OpCode[1+DataSize] ;
0000330A  2044      5541          move.l    D4,A0
0000330C  7001      5542          moveq     #1,D0
0000330E  4880      5543          ext.w     D0
00003310  48C0      5544          ext.l     D0
00003312  CCBC 0000 5545          and.l     #65535,D6
00003316  FFFF      
00003318  D086      5546          add.l     D6,D0
0000331A  E388      5547          lsl.l     #1,D0
0000331C  3430 0800 5548          move.w    0(A0,D0.L),D2
                    5549   ; ExWord2 = OpCode[2+DataSize] ;
00003320  2044      5550          move.l    D4,A0
00003322  7002      5551          moveq     #2,D0
00003324  4880      5552          ext.w     D0
00003326  48C0      5553          ext.l     D0
00003328  CCBC 0000 5554          and.l     #65535,D6
0000332C  FFFF      
0000332E  D086      5555          add.l     D6,D0
00003330  E388      5556          lsl.l     #1,D0
00003332  3D70 0800 5557          move.w    0(A0,D0.L),-8(A6)
00003336  FFF8      
00003338  6000 007E 5558          bra       Decode6BitEA_7
                    5559   Decode6BitEA_3:
                    5560   ; }
                    5561   ; else if(EAChoice == 1)   {
0000333C  202E 000C 5562          move.l    12(A6),D0
00003340  0C80 0000 5563          cmp.l     #1,D0
00003344  0001      
00003346  6600 0034 5564          bne       Decode6BitEA_5
                    5565   ; ExWord1 = OpCode[3+DataSize] ;
0000334A  2044      5566          move.l    D4,A0
0000334C  7003      5567          moveq     #3,D0
0000334E  4880      5568          ext.w     D0
00003350  48C0      5569          ext.l     D0
00003352  CCBC 0000 5570          and.l     #65535,D6
00003356  FFFF      
00003358  D086      5571          add.l     D6,D0
0000335A  E388      5572          lsl.l     #1,D0
0000335C  3430 0800 5573          move.w    0(A0,D0.L),D2
                    5574   ; ExWord2 = OpCode[4+DataSize] ;
00003360  2044      5575          move.l    D4,A0
00003362  7004      5576          moveq     #4,D0
00003364  4880      5577          ext.w     D0
00003366  48C0      5578          ext.l     D0
00003368  CCBC 0000 5579          and.l     #65535,D6
0000336C  FFFF      
0000336E  D086      5580          add.l     D6,D0
00003370  E388      5581          lsl.l     #1,D0
00003372  3D70 0800 5582          move.w    0(A0,D0.L),-8(A6)
00003376  FFF8      
00003378  6000 003E 5583          bra       Decode6BitEA_7
                    5584   Decode6BitEA_5:
                    5585   ; }
                    5586   ; else if(EAChoice == 2)   {  // for move instruction
0000337C  202E 000C 5587          move.l    12(A6),D0
00003380  0C80 0000 5588          cmp.l     #2,D0
00003384  0002      
00003386  6600 0030 5589          bne       Decode6BitEA_7
                    5590   ; ExWord1 = OpCode[1+DataSize] ;
0000338A  2044      5591          move.l    D4,A0
0000338C  7001      5592          moveq     #1,D0
0000338E  4880      5593          ext.w     D0
00003390  48C0      5594          ext.l     D0
00003392  CCBC 0000 5595          and.l     #65535,D6
00003396  FFFF      
00003398  D086      5596          add.l     D6,D0
0000339A  E388      5597          lsl.l     #1,D0
0000339C  3430 0800 5598          move.w    0(A0,D0.L),D2
                    5599   ; ExWord2 = OpCode[2+DataSize] ;
000033A0  2044      5600          move.l    D4,A0
000033A2  7002      5601          moveq     #2,D0
000033A4  4880      5602          ext.w     D0
000033A6  48C0      5603          ext.l     D0
000033A8  CCBC 0000 5604          and.l     #65535,D6
000033AC  FFFF      
000033AE  D086      5605          add.l     D6,D0
000033B0  E388      5606          lsl.l     #1,D0
000033B2  3D70 0800 5607          move.w    0(A0,D0.L),-8(A6)
000033B6  FFF8      
                    5608   Decode6BitEA_7:
                    5609   ; }
                    5610   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
000033B8  4A05      5611          tst.b     D5
000033BA  661E      5612          bne.s     Decode6BitEA_9
                    5613   ; RegNumber[0] = 'D' ;
000033BC  1D7C 0044 5614          move.b    #68,-6+0(A6)
000033C0  FFFA      
                    5615   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
000033C2  7030      5616          moveq     #48,D0
000033C4  D003      5617          add.b     D3,D0
000033C6  1D40 FFFB 5618          move.b    D0,-6+1(A6)
                    5619   ; RegNumber[2] = 0 ;
000033CA  422E FFFC 5620          clr.b     -6+2(A6)
                    5621   ; strcatInstruction(RegNumber) ;
000033CE  486E FFFA 5622          pea       -6(A6)
000033D2  4E92      5623          jsr       (A2)
000033D4  584F      5624          addq.w    #4,A7
000033D6  6000 02D6 5625          bra       Decode6BitEA_44
                    5626   Decode6BitEA_9:
                    5627   ; }
                    5628   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
000033DA  0C05 0001 5629          cmp.b     #1,D5
000033DE  6616      5630          bne.s     Decode6BitEA_11
                    5631   ; Decode3BitAddressRegister(OperandRegister) ;
000033E0  C67C 00FF 5632          and.w     #255,D3
000033E4  C6BC 0000 5633          and.l     #65535,D3
000033E8  FFFF      
000033EA  2F03      5634          move.l    D3,-(A7)
000033EC  4EB8 308A 5635          jsr       _Decode3BitAddressRegister
000033F0  584F      5636          addq.w    #4,A7
000033F2  6000 02BA 5637          bra       Decode6BitEA_44
                    5638   Decode6BitEA_11:
                    5639   ; }
                    5640   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
000033F6  0C05 0002 5641          cmp.b     #2,D5
000033FA  662A      5642          bne.s     Decode6BitEA_13
                    5643   ; strcatInstruction("(") ;
000033FC  4879 0000 5644          pea       @m68kde~3_210.L
00003400  8686      
00003402  4E92      5645          jsr       (A2)
00003404  584F      5646          addq.w    #4,A7
                    5647   ; Decode3BitAddressRegister(OperandRegister) ;
00003406  C67C 00FF 5648          and.w     #255,D3
0000340A  C6BC 0000 5649          and.l     #65535,D3
0000340E  FFFF      
00003410  2F03      5650          move.l    D3,-(A7)
00003412  4EB8 308A 5651          jsr       _Decode3BitAddressRegister
00003416  584F      5652          addq.w    #4,A7
                    5653   ; strcatInstruction(")") ;
00003418  4879 0000 5654          pea       @m68kde~3_211.L
0000341C  8688      
0000341E  4E92      5655          jsr       (A2)
00003420  584F      5656          addq.w    #4,A7
00003422  6000 028A 5657          bra       Decode6BitEA_44
                    5658   Decode6BitEA_13:
                    5659   ; }
                    5660   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
00003426  0C05 0003 5661          cmp.b     #3,D5
0000342A  662A      5662          bne.s     Decode6BitEA_15
                    5663   ; strcatInstruction("(") ;
0000342C  4879 0000 5664          pea       @m68kde~3_212.L
00003430  868A      
00003432  4E92      5665          jsr       (A2)
00003434  584F      5666          addq.w    #4,A7
                    5667   ; Decode3BitAddressRegister(OperandRegister) ;
00003436  C67C 00FF 5668          and.w     #255,D3
0000343A  C6BC 0000 5669          and.l     #65535,D3
0000343E  FFFF      
00003440  2F03      5670          move.l    D3,-(A7)
00003442  4EB8 308A 5671          jsr       _Decode3BitAddressRegister
00003446  584F      5672          addq.w    #4,A7
                    5673   ; strcatInstruction(")+") ;
00003448  4879 0000 5674          pea       @m68kde~3_213.L
0000344C  868C      
0000344E  4E92      5675          jsr       (A2)
00003450  584F      5676          addq.w    #4,A7
00003452  6000 025A 5677          bra       Decode6BitEA_44
                    5678   Decode6BitEA_15:
                    5679   ; }
                    5680   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
00003456  0C05 0004 5681          cmp.b     #4,D5
0000345A  662A      5682          bne.s     Decode6BitEA_17
                    5683   ; strcatInstruction("-(") ;
0000345C  4879 0000 5684          pea       @m68kde~3_214.L
00003460  8690      
00003462  4E92      5685          jsr       (A2)
00003464  584F      5686          addq.w    #4,A7
                    5687   ; Decode3BitAddressRegister(OperandRegister) ;
00003466  C67C 00FF 5688          and.w     #255,D3
0000346A  C6BC 0000 5689          and.l     #65535,D3
0000346E  FFFF      
00003470  2F03      5690          move.l    D3,-(A7)
00003472  4EB8 308A 5691          jsr       _Decode3BitAddressRegister
00003476  584F      5692          addq.w    #4,A7
                    5693   ; strcatInstruction(")") ;
00003478  4879 0000 5694          pea       @m68kde~3_215.L
0000347C  8694      
0000347E  4E92      5695          jsr       (A2)
00003480  584F      5696          addq.w    #4,A7
00003482  6000 022A 5697          bra       Decode6BitEA_44
                    5698   Decode6BitEA_17:
                    5699   ; }
                    5700   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
00003486  0C05 0005 5701          cmp.b     #5,D5
0000348A  6626      5702          bne.s     Decode6BitEA_19
                    5703   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
0000348C  C6BC 0000 5704          and.l     #255,D3
00003490  00FF      
00003492  2F03      5705          move.l    D3,-(A7)
00003494  48C2      5706          ext.l     D2
00003496  2F02      5707          move.l    D2,-(A7)
00003498  4879 0000 5708          pea       @m68kde~3_216.L
0000349C  8696      
0000349E  2F0B      5709          move.l    A3,-(A7)
000034A0  4E94      5710          jsr       (A4)
000034A2  DEFC 0010 5711          add.w     #16,A7
                    5712   ; strcatInstruction(TempString) ;
000034A6  2F0B      5713          move.l    A3,-(A7)
000034A8  4E92      5714          jsr       (A2)
000034AA  584F      5715          addq.w    #4,A7
                    5716   ; InstructionSize += 1;
000034AC  5295      5717          addq.l    #1,(A5)
000034AE  6000 01FE 5718          bra       Decode6BitEA_44
                    5719   Decode6BitEA_19:
                    5720   ; }
                    5721   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
000034B2  0C05 0006 5722          cmp.b     #6,D5
000034B6  6600 00AA 5723          bne       Decode6BitEA_21
                    5724   ; offset = ExWord1 & (short int)(0x00FF);
000034BA  3002      5725          move.w    D2,D0
000034BC  C07C 00FF 5726          and.w     #255,D0
000034C0  1D40 FFFD 5727          move.b    D0,-3(A6)
                    5728   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
000034C4  C6BC 0000 5729          and.l     #255,D3
000034C8  00FF      
000034CA  2F03      5730          move.l    D3,-(A7)
000034CC  122E FFFD 5731          move.b    -3(A6),D1
000034D0  4881      5732          ext.w     D1
000034D2  48C1      5733          ext.l     D1
000034D4  2F01      5734          move.l    D1,-(A7)
000034D6  4879 0000 5735          pea       @m68kde~3_217.L
000034DA  869E      
000034DC  2F0B      5736          move.l    A3,-(A7)
000034DE  4E94      5737          jsr       (A4)
000034E0  DEFC 0010 5738          add.w     #16,A7
                    5739   ; strcatInstruction(TempString) ;
000034E4  2F0B      5740          move.l    A3,-(A7)
000034E6  4E92      5741          jsr       (A2)
000034E8  584F      5742          addq.w    #4,A7
                    5743   ; InstructionSize += 1;
000034EA  5295      5744          addq.l    #1,(A5)
                    5745   ; // decode the Xn bit
                    5746   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
000034EC  3002      5747          move.w    D2,D0
000034EE  C07C 8000 5748          and.w     #32768,D0
000034F2  660C      5749          bne.s     Decode6BitEA_23
                    5750   ; strcatInstruction("D") ;
000034F4  4879 0000 5751          pea       @m68kde~3_218.L
000034F8  86A6      
000034FA  4E92      5752          jsr       (A2)
000034FC  584F      5753          addq.w    #4,A7
000034FE  600A      5754          bra.s     Decode6BitEA_24
                    5755   Decode6BitEA_23:
                    5756   ; else
                    5757   ; strcatInstruction("A") ;
00003500  4879 0000 5758          pea       @m68kde~3_219.L
00003504  86A8      
00003506  4E92      5759          jsr       (A2)
00003508  584F      5760          addq.w    #4,A7
                    5761   Decode6BitEA_24:
                    5762   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
0000350A  3002      5763          move.w    D2,D0
0000350C  C07C 7000 5764          and.w     #28672,D0
00003510  E048      5765          lsr.w     #8,D0
00003512  E848      5766          lsr.w     #4,D0
00003514  3D40 FFFE 5767          move.w    D0,-2(A6)
                    5768   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
00003518  322E FFFE 5769          move.w    -2(A6),D1
0000351C  C2BC 0000 5770          and.l     #65535,D1
00003520  FFFF      
00003522  2F01      5771          move.l    D1,-(A7)
00003524  4879 0000 5772          pea       @m68kde~3_220.L
00003528  86AA      
0000352A  2F0B      5773          move.l    A3,-(A7)
0000352C  4E94      5774          jsr       (A4)
0000352E  DEFC 000C 5775          add.w     #12,A7
                    5776   ; strcatInstruction(TempString) ;
00003532  2F0B      5777          move.l    A3,-(A7)
00003534  4E92      5778          jsr       (A2)
00003536  584F      5779          addq.w    #4,A7
                    5780   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
00003538  3002      5781          move.w    D2,D0
0000353A  C07C 0800 5782          and.w     #2048,D0
0000353E  E048      5783          lsr.w     #8,D0
00003540  E648      5784          lsr.w     #3,D0
00003542  3E00      5785          move.w    D0,D7
                    5786   ; if(XnSize == 0)
00003544  4A47      5787          tst.w     D7
00003546  660C      5788          bne.s     Decode6BitEA_25
                    5789   ; strcatInstruction(".W)") ;
00003548  4879 0000 5790          pea       @m68kde~3_221.L
0000354C  86AE      
0000354E  4E92      5791          jsr       (A2)
00003550  584F      5792          addq.w    #4,A7
00003552  600A      5793          bra.s     Decode6BitEA_26
                    5794   Decode6BitEA_25:
                    5795   ; else
                    5796   ; strcatInstruction(".L)") ;
00003554  4879 0000 5797          pea       @m68kde~3_222.L
00003558  86B2      
0000355A  4E92      5798          jsr       (A2)
0000355C  584F      5799          addq.w    #4,A7
                    5800   Decode6BitEA_26:
0000355E  6000 014E 5801          bra       Decode6BitEA_44
                    5802   Decode6BitEA_21:
                    5803   ; }
                    5804   ; else if(OperandMode == (unsigned char)(7)) {
00003562  0C05 0007 5805          cmp.b     #7,D5
00003566  6600 0146 5806          bne       Decode6BitEA_44
                    5807   ; if(OperandRegister == 0) {                               // EA = (xxx).W
0000356A  4A03      5808          tst.b     D3
0000356C  661E      5809          bne.s     Decode6BitEA_29
                    5810   ; sprintf(TempString, "$%X", ExWord1) ;
0000356E  48C2      5811          ext.l     D2
00003570  2F02      5812          move.l    D2,-(A7)
00003572  4879 0000 5813          pea       @m68kde~3_223.L
00003576  86B6      
00003578  2F0B      5814          move.l    A3,-(A7)
0000357A  4E94      5815          jsr       (A4)
0000357C  DEFC 000C 5816          add.w     #12,A7
                    5817   ; strcatInstruction(TempString) ;
00003580  2F0B      5818          move.l    A3,-(A7)
00003582  4E92      5819          jsr       (A2)
00003584  584F      5820          addq.w    #4,A7
                    5821   ; InstructionSize += 1;
00003586  5295      5822          addq.l    #1,(A5)
00003588  6000 0124 5823          bra       Decode6BitEA_44
                    5824   Decode6BitEA_29:
                    5825   ; }
                    5826   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
0000358C  0C03 0001 5827          cmp.b     #1,D3
00003590  6600 0032 5828          bne       Decode6BitEA_31
                    5829   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
00003594  3202      5830          move.w    D2,D1
00003596  48C1      5831          ext.l     D1
00003598  E189      5832          lsl.l     #8,D1
0000359A  E189      5833          lsl.l     #8,D1
0000359C  2F00      5834          move.l    D0,-(A7)
0000359E  302E FFF8 5835          move.w    -8(A6),D0
000035A2  48C0      5836          ext.l     D0
000035A4  8280      5837          or.l      D0,D1
000035A6  201F      5838          move.l    (A7)+,D0
000035A8  2F01      5839          move.l    D1,-(A7)
000035AA  4879 0000 5840          pea       @m68kde~3_224.L
000035AE  86BA      
000035B0  2F0B      5841          move.l    A3,-(A7)
000035B2  4E94      5842          jsr       (A4)
000035B4  DEFC 000C 5843          add.w     #12,A7
                    5844   ; strcatInstruction(TempString) ;
000035B8  2F0B      5845          move.l    A3,-(A7)
000035BA  4E92      5846          jsr       (A2)
000035BC  584F      5847          addq.w    #4,A7
                    5848   ; InstructionSize += 2;
000035BE  5495      5849          addq.l    #2,(A5)
000035C0  6000 00EC 5850          bra       Decode6BitEA_44
                    5851   Decode6BitEA_31:
                    5852   ; }
                    5853   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
000035C4  0C03 0004 5854          cmp.b     #4,D3
000035C8  661C      5855          bne.s     Decode6BitEA_33
                    5856   ; if(IsItMoveInstruction == 0)        //not move instruction
000035CA  302E 0016 5857          move.w    22(A6),D0
000035CE  660A      5858          bne.s     Decode6BitEA_35
                    5859   ; DecodeBWLDataAfterOpCode(OpCode);
000035D0  2F04      5860          move.l    D4,-(A7)
000035D2  4EB8 317E 5861          jsr       _DecodeBWLDataAfterOpCode
000035D6  584F      5862          addq.w    #4,A7
000035D8  6008      5863          bra.s     Decode6BitEA_36
                    5864   Decode6BitEA_35:
                    5865   ; else
                    5866   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
000035DA  2F04      5867          move.l    D4,-(A7)
000035DC  4EB8 30B6 5868          jsr       _DecodeBWLDataAfterOpCodeForMove
000035E0  584F      5869          addq.w    #4,A7
                    5870   Decode6BitEA_36:
000035E2  6000 00CA 5871          bra       Decode6BitEA_44
                    5872   Decode6BitEA_33:
                    5873   ; }
                    5874   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
000035E6  0C03 0002 5875          cmp.b     #2,D3
000035EA  661E      5876          bne.s     Decode6BitEA_37
                    5877   ; sprintf(TempString, "%d(PC)", ExWord1) ;
000035EC  48C2      5878          ext.l     D2
000035EE  2F02      5879          move.l    D2,-(A7)
000035F0  4879 0000 5880          pea       @m68kde~3_225.L
000035F4  86BE      
000035F6  2F0B      5881          move.l    A3,-(A7)
000035F8  4E94      5882          jsr       (A4)
000035FA  DEFC 000C 5883          add.w     #12,A7
                    5884   ; strcatInstruction(TempString) ;
000035FE  2F0B      5885          move.l    A3,-(A7)
00003600  4E92      5886          jsr       (A2)
00003602  584F      5887          addq.w    #4,A7
                    5888   ; InstructionSize += 1;
00003604  5295      5889          addq.l    #1,(A5)
00003606  6000 00A6 5890          bra       Decode6BitEA_44
                    5891   Decode6BitEA_37:
                    5892   ; }
                    5893   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
0000360A  0C03 0003 5894          cmp.b     #3,D3
0000360E  6600 009E 5895          bne       Decode6BitEA_44
                    5896   ; offset = ExWord1 & (short int)(0x00FF);
00003612  3002      5897          move.w    D2,D0
00003614  C07C 00FF 5898          and.w     #255,D0
00003618  1D40 FFFD 5899          move.b    D0,-3(A6)
                    5900   ; sprintf(TempString, "%d(PC,", offset ) ;
0000361C  122E FFFD 5901          move.b    -3(A6),D1
00003620  4881      5902          ext.w     D1
00003622  48C1      5903          ext.l     D1
00003624  2F01      5904          move.l    D1,-(A7)
00003626  4879 0000 5905          pea       @m68kde~3_226.L
0000362A  86C6      
0000362C  2F0B      5906          move.l    A3,-(A7)
0000362E  4E94      5907          jsr       (A4)
00003630  DEFC 000C 5908          add.w     #12,A7
                    5909   ; strcatInstruction(TempString) ;
00003634  2F0B      5910          move.l    A3,-(A7)
00003636  4E92      5911          jsr       (A2)
00003638  584F      5912          addq.w    #4,A7
                    5913   ; InstructionSize += 1;
0000363A  5295      5914          addq.l    #1,(A5)
                    5915   ; // decode the Xn bit
                    5916   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
0000363C  3002      5917          move.w    D2,D0
0000363E  C07C 8000 5918          and.w     #32768,D0
00003642  660C      5919          bne.s     Decode6BitEA_41
                    5920   ; strcatInstruction("D") ;
00003644  4879 0000 5921          pea       @m68kde~3_227.L
00003648  86CE      
0000364A  4E92      5922          jsr       (A2)
0000364C  584F      5923          addq.w    #4,A7
0000364E  600A      5924          bra.s     Decode6BitEA_42
                    5925   Decode6BitEA_41:
                    5926   ; else
                    5927   ; strcatInstruction("A") ;
00003650  4879 0000 5928          pea       @m68kde~3_228.L
00003654  86D0      
00003656  4E92      5929          jsr       (A2)
00003658  584F      5930          addq.w    #4,A7
                    5931   Decode6BitEA_42:
                    5932   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
0000365A  3002      5933          move.w    D2,D0
0000365C  C07C 7000 5934          and.w     #28672,D0
00003660  E048      5935          lsr.w     #8,D0
00003662  E848      5936          lsr.w     #4,D0
00003664  3D40 FFFE 5937          move.w    D0,-2(A6)
                    5938   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
00003668  322E FFFE 5939          move.w    -2(A6),D1
0000366C  C2BC 0000 5940          and.l     #65535,D1
00003670  FFFF      
00003672  2F01      5941          move.l    D1,-(A7)
00003674  4879 0000 5942          pea       @m68kde~3_229.L
00003678  86D2      
0000367A  2F0B      5943          move.l    A3,-(A7)
0000367C  4E94      5944          jsr       (A4)
0000367E  DEFC 000C 5945          add.w     #12,A7
                    5946   ; strcatInstruction(TempString) ;
00003682  2F0B      5947          move.l    A3,-(A7)
00003684  4E92      5948          jsr       (A2)
00003686  584F      5949          addq.w    #4,A7
                    5950   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
00003688  3002      5951          move.w    D2,D0
0000368A  C07C 0800 5952          and.w     #2048,D0
0000368E  E048      5953          lsr.w     #8,D0
00003690  E648      5954          lsr.w     #3,D0
00003692  3E00      5955          move.w    D0,D7
                    5956   ; if(XnSize == 0)
00003694  4A47      5957          tst.w     D7
00003696  660C      5958          bne.s     Decode6BitEA_43
                    5959   ; strcatInstruction(".W)") ;
00003698  4879 0000 5960          pea       @m68kde~3_230.L
0000369C  86D6      
0000369E  4E92      5961          jsr       (A2)
000036A0  584F      5962          addq.w    #4,A7
000036A2  600A      5963          bra.s     Decode6BitEA_44
                    5964   Decode6BitEA_43:
                    5965   ; else
                    5966   ; strcatInstruction(".L)") ;
000036A4  4879 0000 5967          pea       @m68kde~3_231.L
000036A8  86DA      
000036AA  4E92      5968          jsr       (A2)
000036AC  584F      5969          addq.w    #4,A7
                    5970   Decode6BitEA_44:
000036AE  4CDF 3CFC 5971          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000036B2  4E5E      5972          unlk      A6
000036B4  4E75      5973          rts
                    5974   ; }
                    5975   ; }
                    5976   ; }
                    5977   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    5978   ; {
                    5979   _Decode3BitOperandMode:
000036B6  4E56 FFFC 5980          link      A6,#-4
000036BA  2F02      5981          move.l    D2,-(A7)
000036BC  242E 0008 5982          move.l    8(A6),D2
                    5983   ; unsigned short int OperandMode;
                    5984   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
000036C0  2042      5985          move.l    D2,A0
000036C2  3010      5986          move.w    (A0),D0
000036C4  C07C 0100 5987          and.w     #256,D0
000036C8  E048      5988          lsr.w     #8,D0
000036CA  3D40 FFFE 5989          move.w    D0,-2(A6)
                    5990   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000036CE  2042      5991          move.l    D2,A0
000036D0  3210      5992          move.w    (A0),D1
000036D2  C2BC 0000 5993          and.l     #65535,D1
000036D6  FFFF      
000036D8  2F01      5994          move.l    D1,-(A7)
000036DA  4EB8 2FFA 5995          jsr       _Decode2BitOperandSize
000036DE  584F      5996          addq.w    #4,A7
                    5997   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
000036E0  302E FFFE 5998          move.w    -2(A6),D0
000036E4  6600 0032 5999          bne       Decode3BitOperandMode_1
                    6000   ; Decode6BitEA(OpCode,0,0,0) ;
000036E8  42A7      6001          clr.l     -(A7)
000036EA  42A7      6002          clr.l     -(A7)
000036EC  42A7      6003          clr.l     -(A7)
000036EE  2F02      6004          move.l    D2,-(A7)
000036F0  4EB8 328E 6005          jsr       _Decode6BitEA
000036F4  DEFC 0010 6006          add.w     #16,A7
                    6007   ; strcatInstruction(",") ;
000036F8  4879 0000 6008          pea       @m68kde~3_232.L
000036FC  86DE      
000036FE  4EB8 0CCC 6009          jsr       _strcatInstruction
00003702  584F      6010          addq.w    #4,A7
                    6011   ; Decode3BitDataRegister(*OpCode) ;
00003704  2042      6012          move.l    D2,A0
00003706  3210      6013          move.w    (A0),D1
00003708  C2BC 0000 6014          and.l     #65535,D1
0000370C  FFFF      
0000370E  2F01      6015          move.l    D1,-(A7)
00003710  4EB8 3056 6016          jsr       _Decode3BitDataRegister
00003714  584F      6017          addq.w    #4,A7
00003716  602E      6018          bra.s     Decode3BitOperandMode_2
                    6019   Decode3BitOperandMode_1:
                    6020   ; }
                    6021   ; else {                                                         // Destination is in EA
                    6022   ; Decode3BitDataRegister(*OpCode) ;
00003718  2042      6023          move.l    D2,A0
0000371A  3210      6024          move.w    (A0),D1
0000371C  C2BC 0000 6025          and.l     #65535,D1
00003720  FFFF      
00003722  2F01      6026          move.l    D1,-(A7)
00003724  4EB8 3056 6027          jsr       _Decode3BitDataRegister
00003728  584F      6028          addq.w    #4,A7
                    6029   ; strcatInstruction(",") ;
0000372A  4879 0000 6030          pea       @m68kde~3_233.L
0000372E  86E0      
00003730  4EB8 0CCC 6031          jsr       _strcatInstruction
00003734  584F      6032          addq.w    #4,A7
                    6033   ; Decode6BitEA(OpCode,0,0,0) ;
00003736  42A7      6034          clr.l     -(A7)
00003738  42A7      6035          clr.l     -(A7)
0000373A  42A7      6036          clr.l     -(A7)
0000373C  2F02      6037          move.l    D2,-(A7)
0000373E  4EB8 328E 6038          jsr       _Decode6BitEA
00003742  DEFC 0010 6039          add.w     #16,A7
                    6040   Decode3BitOperandMode_2:
00003746  241F      6041          move.l    (A7)+,D2
00003748  4E5E      6042          unlk      A6
0000374A  4E75      6043          rts
                    6044   ; }
                    6045   ; }
                    6046   ; void DecodeBranchCondition(unsigned short int Condition)
                    6047   ; {
                    6048   _DecodeBranchCondition:
0000374C  4E56 0000 6049          link      A6,#0
00003750  48E7 2020 6050          movem.l   D2/A2,-(A7)
00003754  45F8 0CCC 6051          lea       _strcatInstruction.L,A2
00003758  342E 000A 6052          move.w    10(A6),D2
0000375C  C4BC 0000 6053          and.l     #65535,D2
00003760  FFFF      
                    6054   ; if(Condition == (unsigned short int)(0x04))
00003762  0C42 0004 6055          cmp.w     #4,D2
00003766  660E      6056          bne.s     DecodeBranchCondition_1
                    6057   ; strcatInstruction("CC") ;
00003768  4879 0000 6058          pea       @m68kde~3_234.L
0000376C  86E2      
0000376E  4E92      6059          jsr       (A2)
00003770  584F      6060          addq.w    #4,A7
00003772  6000 011C 6061          bra       DecodeBranchCondition_30
                    6062   DecodeBranchCondition_1:
                    6063   ; else if(Condition == (unsigned short int)(0x05))
00003776  0C42 0005 6064          cmp.w     #5,D2
0000377A  660E      6065          bne.s     DecodeBranchCondition_3
                    6066   ; strcatInstruction("CS") ;
0000377C  4879 0000 6067          pea       @m68kde~3_235.L
00003780  86E6      
00003782  4E92      6068          jsr       (A2)
00003784  584F      6069          addq.w    #4,A7
00003786  6000 0108 6070          bra       DecodeBranchCondition_30
                    6071   DecodeBranchCondition_3:
                    6072   ; else if(Condition == (unsigned short int)(0x07))
0000378A  0C42 0007 6073          cmp.w     #7,D2
0000378E  660E      6074          bne.s     DecodeBranchCondition_5
                    6075   ; strcatInstruction("EQ") ;
00003790  4879 0000 6076          pea       @m68kde~3_236.L
00003794  86EA      
00003796  4E92      6077          jsr       (A2)
00003798  584F      6078          addq.w    #4,A7
0000379A  6000 00F4 6079          bra       DecodeBranchCondition_30
                    6080   DecodeBranchCondition_5:
                    6081   ; else if(Condition == (unsigned short int)(0x0C))
0000379E  0C42 000C 6082          cmp.w     #12,D2
000037A2  660E      6083          bne.s     DecodeBranchCondition_7
                    6084   ; strcatInstruction("GE") ;
000037A4  4879 0000 6085          pea       @m68kde~3_237.L
000037A8  86EE      
000037AA  4E92      6086          jsr       (A2)
000037AC  584F      6087          addq.w    #4,A7
000037AE  6000 00E0 6088          bra       DecodeBranchCondition_30
                    6089   DecodeBranchCondition_7:
                    6090   ; else if(Condition == (unsigned short int)(0x0E))
000037B2  0C42 000E 6091          cmp.w     #14,D2
000037B6  660E      6092          bne.s     DecodeBranchCondition_9
                    6093   ; strcatInstruction("GT") ;
000037B8  4879 0000 6094          pea       @m68kde~3_238.L
000037BC  86F2      
000037BE  4E92      6095          jsr       (A2)
000037C0  584F      6096          addq.w    #4,A7
000037C2  6000 00CC 6097          bra       DecodeBranchCondition_30
                    6098   DecodeBranchCondition_9:
                    6099   ; else if(Condition == (unsigned short int)(0x02))
000037C6  0C42 0002 6100          cmp.w     #2,D2
000037CA  660E      6101          bne.s     DecodeBranchCondition_11
                    6102   ; strcatInstruction("HI") ;
000037CC  4879 0000 6103          pea       @m68kde~3_239.L
000037D0  86F6      
000037D2  4E92      6104          jsr       (A2)
000037D4  584F      6105          addq.w    #4,A7
000037D6  6000 00B8 6106          bra       DecodeBranchCondition_30
                    6107   DecodeBranchCondition_11:
                    6108   ; else if(Condition == (unsigned short int)(0x0F))
000037DA  0C42 000F 6109          cmp.w     #15,D2
000037DE  660E      6110          bne.s     DecodeBranchCondition_13
                    6111   ; strcatInstruction("LE") ;
000037E0  4879 0000 6112          pea       @m68kde~3_240.L
000037E4  86FA      
000037E6  4E92      6113          jsr       (A2)
000037E8  584F      6114          addq.w    #4,A7
000037EA  6000 00A4 6115          bra       DecodeBranchCondition_30
                    6116   DecodeBranchCondition_13:
                    6117   ; else if(Condition == (unsigned short int)(0x03))
000037EE  0C42 0003 6118          cmp.w     #3,D2
000037F2  660E      6119          bne.s     DecodeBranchCondition_15
                    6120   ; strcatInstruction("LS") ;
000037F4  4879 0000 6121          pea       @m68kde~3_241.L
000037F8  86FE      
000037FA  4E92      6122          jsr       (A2)
000037FC  584F      6123          addq.w    #4,A7
000037FE  6000 0090 6124          bra       DecodeBranchCondition_30
                    6125   DecodeBranchCondition_15:
                    6126   ; else if(Condition == (unsigned short int)(0x0D))
00003802  0C42 000D 6127          cmp.w     #13,D2
00003806  660E      6128          bne.s     DecodeBranchCondition_17
                    6129   ; strcatInstruction("LT") ;
00003808  4879 0000 6130          pea       @m68kde~3_242.L
0000380C  8702      
0000380E  4E92      6131          jsr       (A2)
00003810  584F      6132          addq.w    #4,A7
00003812  6000 007C 6133          bra       DecodeBranchCondition_30
                    6134   DecodeBranchCondition_17:
                    6135   ; else if(Condition == (unsigned short int)(0x0B))
00003816  0C42 000B 6136          cmp.w     #11,D2
0000381A  660E      6137          bne.s     DecodeBranchCondition_19
                    6138   ; strcatInstruction("MI") ;
0000381C  4879 0000 6139          pea       @m68kde~3_243.L
00003820  8706      
00003822  4E92      6140          jsr       (A2)
00003824  584F      6141          addq.w    #4,A7
00003826  6000 0068 6142          bra       DecodeBranchCondition_30
                    6143   DecodeBranchCondition_19:
                    6144   ; else if(Condition == (unsigned short int)(0x06))
0000382A  0C42 0006 6145          cmp.w     #6,D2
0000382E  660E      6146          bne.s     DecodeBranchCondition_21
                    6147   ; strcatInstruction("NE") ;
00003830  4879 0000 6148          pea       @m68kde~3_244.L
00003834  870A      
00003836  4E92      6149          jsr       (A2)
00003838  584F      6150          addq.w    #4,A7
0000383A  6000 0054 6151          bra       DecodeBranchCondition_30
                    6152   DecodeBranchCondition_21:
                    6153   ; else if(Condition == (unsigned short int)(0x0A))
0000383E  0C42 000A 6154          cmp.w     #10,D2
00003842  660E      6155          bne.s     DecodeBranchCondition_23
                    6156   ; strcatInstruction("PL") ;
00003844  4879 0000 6157          pea       @m68kde~3_245.L
00003848  870E      
0000384A  4E92      6158          jsr       (A2)
0000384C  584F      6159          addq.w    #4,A7
0000384E  6000 0040 6160          bra       DecodeBranchCondition_30
                    6161   DecodeBranchCondition_23:
                    6162   ; else if(Condition == (unsigned short int)(0x09))
00003852  0C42 0009 6163          cmp.w     #9,D2
00003856  660C      6164          bne.s     DecodeBranchCondition_25
                    6165   ; strcatInstruction("VS") ;
00003858  4879 0000 6166          pea       @m68kde~3_246.L
0000385C  8712      
0000385E  4E92      6167          jsr       (A2)
00003860  584F      6168          addq.w    #4,A7
00003862  602C      6169          bra.s     DecodeBranchCondition_30
                    6170   DecodeBranchCondition_25:
                    6171   ; else if(Condition == (unsigned short int)(0x08))
00003864  0C42 0008 6172          cmp.w     #8,D2
00003868  660C      6173          bne.s     DecodeBranchCondition_27
                    6174   ; strcatInstruction("VC") ;
0000386A  4879 0000 6175          pea       @m68kde~3_247.L
0000386E  8716      
00003870  4E92      6176          jsr       (A2)
00003872  584F      6177          addq.w    #4,A7
00003874  601A      6178          bra.s     DecodeBranchCondition_30
                    6179   DecodeBranchCondition_27:
                    6180   ; else if(Condition == (unsigned short int)(0))
00003876  4A42      6181          tst.w     D2
00003878  660C      6182          bne.s     DecodeBranchCondition_29
                    6183   ; strcatInstruction("RA") ;
0000387A  4879 0000 6184          pea       @m68kde~3_248.L
0000387E  871A      
00003880  4E92      6185          jsr       (A2)
00003882  584F      6186          addq.w    #4,A7
00003884  600A      6187          bra.s     DecodeBranchCondition_30
                    6188   DecodeBranchCondition_29:
                    6189   ; else
                    6190   ; strcatInstruction("SR");
00003886  4879 0000 6191          pea       @m68kde~3_249.L
0000388A  871E      
0000388C  4E92      6192          jsr       (A2)
0000388E  584F      6193          addq.w    #4,A7
                    6194   DecodeBranchCondition_30:
                    6195   ; strcatInstruction(" ") ;
00003890  4879 0000 6196          pea       @m68kde~3_250.L
00003894  8722      
00003896  4E92      6197          jsr       (A2)
00003898  584F      6198          addq.w    #4,A7
0000389A  4CDF 0404 6199          movem.l   (A7)+,D2/A2
0000389E  4E5E      6200          unlk      A6
000038A0  4E75      6201          rts
                    6202   ; }
                    6203   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    6204   ; {
                    6205   _DisassembleInstruction:
000038A2  4E56 FFD8 6206          link      A6,#-40
000038A6  48E7 3F3C 6207          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000038AA  242E 0008 6208          move.l    8(A6),D2
000038AE  45F9 0803 6209          lea       _InstructionSize.L,A2
000038B2  017E      
000038B4  47F8 0CE6 6210          lea       _strcpyInstruction.L,A3
000038B8  49F9 0803 6211          lea       _TempString.L,A4
000038BC  0546      
000038BE  4BF9 0000 6212          lea       _sprintf.L,A5
000038C2  58CA      
                    6213   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
000038C4  2042      6214          move.l    D2,A0
000038C6  3010      6215          move.w    (A0),D0
000038C8  E040      6216          asr.w     #8,D0
000038CA  E840      6217          asr.w     #4,D0
000038CC  3D40 FFDA 6218          move.w    D0,-38(A6)
                    6219   ; unsigned short int LS12Bits = (*OpCode & (unsigned short int)(0x0FFF));
000038D0  2042      6220          move.l    D2,A0
000038D2  3010      6221          move.w    (A0),D0
000038D4  C07C 0FFF 6222          and.w     #4095,D0
000038D8  3D40 FFDC 6223          move.w    D0,-36(A6)
                    6224   ; unsigned short int SourceBits, DestBits, Size ;
                    6225   ; unsigned char *Mode, Condition;
                    6226   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    6227   ; unsigned short int DataRegister, AddressRegister;
                    6228   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    6229   ; signed short int Displacement16Bit;
                    6230   ; short int Mask, DoneSlash;
                    6231   ; int i;
                    6232   ; strcpyInstruction("Unknown") ;
000038DC  4879 0000 6233          pea       @m68kde~3_251.L
000038E0  8724      
000038E2  4E93      6234          jsr       (A3)
000038E4  584F      6235          addq.w    #4,A7
                    6236   ; /////////////////////////////////////////////////////////////////////////////////
                    6237   ; // if instruction is ABCD
                    6238   ; /////////////////////////////////////////////////////////////////////////////////
                    6239   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
000038E6  2042      6240          move.l    D2,A0
000038E8  3010      6241          move.w    (A0),D0
000038EA  C07C F1F0 6242          and.w     #61936,D0
000038EE  0C40 C100 6243          cmp.w     #49408,D0
000038F2  6600 008C 6244          bne       DisassembleInstruction_4
                    6245   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
000038F6  2042      6246          move.l    D2,A0
000038F8  3010      6247          move.w    (A0),D0
000038FA  E040      6248          asr.w     #8,D0
000038FC  E240      6249          asr.w     #1,D0
000038FE  C07C 0007 6250          and.w     #7,D0
00003902  3D40 FFE0 6251          move.w    D0,-32(A6)
                    6252   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
00003906  2042      6253          move.l    D2,A0
00003908  3010      6254          move.w    (A0),D0
0000390A  C07C 0007 6255          and.w     #7,D0
0000390E  3D40 FFDE 6256          move.w    D0,-34(A6)
                    6257   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
00003912  2042      6258          move.l    D2,A0
00003914  3010      6259          move.w    (A0),D0
00003916  E640      6260          asr.w     #3,D0
00003918  48C0      6261          ext.l     D0
0000391A  C0BC 0000 6262          and.l     #1,D0
0000391E  0001      
00003920  2D40 FFE4 6263          move.l    D0,-28(A6)
                    6264   ; if(Mode == 0)
00003924  202E FFE4 6265          move.l    -28(A6),D0
00003928  662C      6266          bne.s     DisassembleInstruction_3
                    6267   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
0000392A  322E FFE0 6268          move.w    -32(A6),D1
0000392E  C2BC 0000 6269          and.l     #65535,D1
00003932  FFFF      
00003934  2F01      6270          move.l    D1,-(A7)
00003936  322E FFDE 6271          move.w    -34(A6),D1
0000393A  C2BC 0000 6272          and.l     #65535,D1
0000393E  FFFF      
00003940  2F01      6273          move.l    D1,-(A7)
00003942  4879 0000 6274          pea       @m68kde~3_252.L
00003946  872C      
00003948  4879 0803 6275          pea       _Instruction.L
0000394C  04E2      
0000394E  4E95      6276          jsr       (A5)
00003950  DEFC 0010 6277          add.w     #16,A7
00003954  602A      6278          bra.s     DisassembleInstruction_4
                    6279   DisassembleInstruction_3:
                    6280   ; else
                    6281   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00003956  322E FFE0 6282          move.w    -32(A6),D1
0000395A  C2BC 0000 6283          and.l     #65535,D1
0000395E  FFFF      
00003960  2F01      6284          move.l    D1,-(A7)
00003962  322E FFDE 6285          move.w    -34(A6),D1
00003966  C2BC 0000 6286          and.l     #65535,D1
0000396A  FFFF      
0000396C  2F01      6287          move.l    D1,-(A7)
0000396E  4879 0000 6288          pea       @m68kde~3_253.L
00003972  873A      
00003974  4879 0803 6289          pea       _Instruction.L
00003978  04E2      
0000397A  4E95      6290          jsr       (A5)
0000397C  DEFC 0010 6291          add.w     #16,A7
                    6292   DisassembleInstruction_4:
                    6293   ; }
                    6294   ; /////////////////////////////////////////////////////////////////////////////////
                    6295   ; // if instruction is ADD or ADDA
                    6296   ; /////////////////////////////////////////////////////////////////////////////////
                    6297   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
00003980  2042      6298          move.l    D2,A0
00003982  3010      6299          move.w    (A0),D0
00003984  C07C F000 6300          and.w     #61440,D0
00003988  0C40 D000 6301          cmp.w     #53248,D0
0000398C  6600 008C 6302          bne       DisassembleInstruction_8
                    6303   ; InstructionSize = 1;
00003990  24BC 0000 6304          move.l    #1,(A2)
00003994  0001      
                    6305   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00003996  2042      6306          move.l    D2,A0
00003998  3010      6307          move.w    (A0),D0
0000399A  EC40      6308          asr.w     #6,D0
0000399C  C07C 0007 6309          and.w     #7,D0
000039A0  3600      6310          move.w    D0,D3
                    6311   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
000039A2  0C43 0003 6312          cmp.w     #3,D3
000039A6  6708      6313          beq.s     DisassembleInstruction_9
000039A8  0C43 0007 6314          cmp.w     #7,D3
000039AC  6600 005A 6315          bne       DisassembleInstruction_7
                    6316   DisassembleInstruction_9:
                    6317   ; {
                    6318   ; if(OpMode == (unsigned short int)(0x0003))
000039B0  0C43 0003 6319          cmp.w     #3,D3
000039B4  660C      6320          bne.s     DisassembleInstruction_10
                    6321   ; strcpyInstruction("ADDA.W ") ;
000039B6  4879 0000 6322          pea       @m68kde~3_254.L
000039BA  874E      
000039BC  4E93      6323          jsr       (A3)
000039BE  584F      6324          addq.w    #4,A7
000039C0  600A      6325          bra.s     DisassembleInstruction_11
                    6326   DisassembleInstruction_10:
                    6327   ; else
                    6328   ; strcpyInstruction("ADDA.L ") ;
000039C2  4879 0000 6329          pea       @m68kde~3_255.L
000039C6  8756      
000039C8  4E93      6330          jsr       (A3)
000039CA  584F      6331          addq.w    #4,A7
                    6332   DisassembleInstruction_11:
                    6333   ; Decode6BitEA(OpCode,0,0,0)  ;
000039CC  42A7      6334          clr.l     -(A7)
000039CE  42A7      6335          clr.l     -(A7)
000039D0  42A7      6336          clr.l     -(A7)
000039D2  2F02      6337          move.l    D2,-(A7)
000039D4  4EB8 328E 6338          jsr       _Decode6BitEA
000039D8  DEFC 0010 6339          add.w     #16,A7
                    6340   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000039DC  2042      6341          move.l    D2,A0
000039DE  3210      6342          move.w    (A0),D1
000039E0  E041      6343          asr.w     #8,D1
000039E2  E241      6344          asr.w     #1,D1
000039E4  C27C 0007 6345          and.w     #7,D1
000039E8  C2BC 0000 6346          and.l     #65535,D1
000039EC  FFFF      
000039EE  2F01      6347          move.l    D1,-(A7)
000039F0  4879 0000 6348          pea       @m68kde~3_256.L
000039F4  875E      
000039F6  2F0C      6349          move.l    A4,-(A7)
000039F8  4E95      6350          jsr       (A5)
000039FA  DEFC 000C 6351          add.w     #12,A7
                    6352   ; strcatInstruction(TempString) ;
000039FE  2F0C      6353          move.l    A4,-(A7)
00003A00  4EB8 0CCC 6354          jsr       _strcatInstruction
00003A04  584F      6355          addq.w    #4,A7
00003A06  6012      6356          bra.s     DisassembleInstruction_8
                    6357   DisassembleInstruction_7:
                    6358   ; }
                    6359   ; else {
                    6360   ; strcpyInstruction("ADD") ;
00003A08  4879 0000 6361          pea       @m68kde~3_257.L
00003A0C  8764      
00003A0E  4E93      6362          jsr       (A3)
00003A10  584F      6363          addq.w    #4,A7
                    6364   ; Decode3BitOperandMode(OpCode) ;
00003A12  2F02      6365          move.l    D2,-(A7)
00003A14  4EB8 36B6 6366          jsr       _Decode3BitOperandMode
00003A18  584F      6367          addq.w    #4,A7
                    6368   DisassembleInstruction_8:
                    6369   ; }
                    6370   ; }
                    6371   ; /////////////////////////////////////////////////////////////////////////////////
                    6372   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    6373   ; /////////////////////////////////////////////////////////////////////////////////
                    6374   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
00003A1A  2042      6375          move.l    D2,A0
00003A1C  3010      6376          move.w    (A0),D0
00003A1E  C07C FF00 6377          and.w     #65280,D0
00003A22  0C40 0600 6378          cmp.w     #1536,D0
00003A26  6604      6379          bne.s     DisassembleInstruction_14
00003A28  7001      6380          moveq     #1,D0
00003A2A  6002      6381          bra.s     DisassembleInstruction_15
                    6382   DisassembleInstruction_14:
00003A2C  4280      6383          clr.l     D0
                    6384   DisassembleInstruction_15:
00003A2E  2042      6385          move.l    D2,A0
00003A30  3210      6386          move.w    (A0),D1
00003A32  C27C FF00 6387          and.w     #65280,D1
00003A36  0C41 0200 6388          cmp.w     #512,D1
00003A3A  6604      6389          bne.s     DisassembleInstruction_16
00003A3C  7201      6390          moveq     #1,D1
00003A3E  6002      6391          bra.s     DisassembleInstruction_17
                    6392   DisassembleInstruction_16:
00003A40  4281      6393          clr.l     D1
                    6394   DisassembleInstruction_17:
00003A42  8041      6395          or.w      D1,D0
00003A44  2042      6396          move.l    D2,A0
00003A46  3210      6397          move.w    (A0),D1
00003A48  C27C FF00 6398          and.w     #65280,D1
00003A4C  0C41 0C00 6399          cmp.w     #3072,D1
00003A50  6604      6400          bne.s     DisassembleInstruction_18
00003A52  7201      6401          moveq     #1,D1
00003A54  6002      6402          bra.s     DisassembleInstruction_19
                    6403   DisassembleInstruction_18:
00003A56  4281      6404          clr.l     D1
                    6405   DisassembleInstruction_19:
00003A58  8041      6406          or.w      D1,D0
00003A5A  2042      6407          move.l    D2,A0
00003A5C  3210      6408          move.w    (A0),D1
00003A5E  C27C FF00 6409          and.w     #65280,D1
00003A62  0C41 0A00 6410          cmp.w     #2560,D1
00003A66  6604      6411          bne.s     DisassembleInstruction_20
00003A68  7201      6412          moveq     #1,D1
00003A6A  6002      6413          bra.s     DisassembleInstruction_21
                    6414   DisassembleInstruction_20:
00003A6C  4281      6415          clr.l     D1
                    6416   DisassembleInstruction_21:
00003A6E  8041      6417          or.w      D1,D0
00003A70  2042      6418          move.l    D2,A0
00003A72  3210      6419          move.w    (A0),D1
00003A74  C27C FF00 6420          and.w     #65280,D1
00003A78  6604      6421          bne.s     DisassembleInstruction_22
00003A7A  7201      6422          moveq     #1,D1
00003A7C  6002      6423          bra.s     DisassembleInstruction_23
                    6424   DisassembleInstruction_22:
00003A7E  4281      6425          clr.l     D1
                    6426   DisassembleInstruction_23:
00003A80  8041      6427          or.w      D1,D0
00003A82  2042      6428          move.l    D2,A0
00003A84  3210      6429          move.w    (A0),D1
00003A86  C27C FF00 6430          and.w     #65280,D1
00003A8A  0C41 0400 6431          cmp.w     #1024,D1
00003A8E  6604      6432          bne.s     DisassembleInstruction_24
00003A90  7201      6433          moveq     #1,D1
00003A92  6002      6434          bra.s     DisassembleInstruction_25
                    6435   DisassembleInstruction_24:
00003A94  4281      6436          clr.l     D1
                    6437   DisassembleInstruction_25:
00003A96  8041      6438          or.w      D1,D0
00003A98  6700 00E4 6439          beq       DisassembleInstruction_12
                    6440   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6441   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6442   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6443   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6444   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6445   ; {
                    6446   ; InstructionSize = 1;
00003A9C  24BC 0000 6447          move.l    #1,(A2)
00003AA0  0001      
                    6448   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
00003AA2  2042      6449          move.l    D2,A0
00003AA4  3010      6450          move.w    (A0),D0
00003AA6  C07C FF00 6451          and.w     #65280,D0
00003AAA  0C40 0600 6452          cmp.w     #1536,D0
00003AAE  660E      6453          bne.s     DisassembleInstruction_26
                    6454   ; strcpyInstruction("ADDI") ;
00003AB0  4879 0000 6455          pea       @m68kde~3_258.L
00003AB4  8768      
00003AB6  4E93      6456          jsr       (A3)
00003AB8  584F      6457          addq.w    #4,A7
00003ABA  6000 0084 6458          bra       DisassembleInstruction_36
                    6459   DisassembleInstruction_26:
                    6460   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
00003ABE  2042      6461          move.l    D2,A0
00003AC0  3010      6462          move.w    (A0),D0
00003AC2  C07C FF00 6463          and.w     #65280,D0
00003AC6  0C40 0200 6464          cmp.w     #512,D0
00003ACA  660E      6465          bne.s     DisassembleInstruction_28
                    6466   ; strcpyInstruction("ANDI") ;
00003ACC  4879 0000 6467          pea       @m68kde~3_259.L
00003AD0  876E      
00003AD2  4E93      6468          jsr       (A3)
00003AD4  584F      6469          addq.w    #4,A7
00003AD6  6000 0068 6470          bra       DisassembleInstruction_36
                    6471   DisassembleInstruction_28:
                    6472   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
00003ADA  2042      6473          move.l    D2,A0
00003ADC  3010      6474          move.w    (A0),D0
00003ADE  C07C FF00 6475          and.w     #65280,D0
00003AE2  0C40 0C00 6476          cmp.w     #3072,D0
00003AE6  660E      6477          bne.s     DisassembleInstruction_30
                    6478   ; strcpyInstruction("CMPI") ;
00003AE8  4879 0000 6479          pea       @m68kde~3_260.L
00003AEC  8774      
00003AEE  4E93      6480          jsr       (A3)
00003AF0  584F      6481          addq.w    #4,A7
00003AF2  6000 004C 6482          bra       DisassembleInstruction_36
                    6483   DisassembleInstruction_30:
                    6484   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
00003AF6  2042      6485          move.l    D2,A0
00003AF8  3010      6486          move.w    (A0),D0
00003AFA  C07C FF00 6487          and.w     #65280,D0
00003AFE  0C40 0A00 6488          cmp.w     #2560,D0
00003B02  660E      6489          bne.s     DisassembleInstruction_32
                    6490   ; strcpyInstruction("EORI") ;
00003B04  4879 0000 6491          pea       @m68kde~3_261.L
00003B08  877A      
00003B0A  4E93      6492          jsr       (A3)
00003B0C  584F      6493          addq.w    #4,A7
00003B0E  6000 0030 6494          bra       DisassembleInstruction_36
                    6495   DisassembleInstruction_32:
                    6496   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
00003B12  2042      6497          move.l    D2,A0
00003B14  3010      6498          move.w    (A0),D0
00003B16  C07C FF00 6499          and.w     #65280,D0
00003B1A  660C      6500          bne.s     DisassembleInstruction_34
                    6501   ; strcpyInstruction("ORI") ;
00003B1C  4879 0000 6502          pea       @m68kde~3_262.L
00003B20  8780      
00003B22  4E93      6503          jsr       (A3)
00003B24  584F      6504          addq.w    #4,A7
00003B26  6018      6505          bra.s     DisassembleInstruction_36
                    6506   DisassembleInstruction_34:
                    6507   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
00003B28  2042      6508          move.l    D2,A0
00003B2A  3010      6509          move.w    (A0),D0
00003B2C  C07C FF00 6510          and.w     #65280,D0
00003B30  0C40 0400 6511          cmp.w     #1024,D0
00003B34  660A      6512          bne.s     DisassembleInstruction_36
                    6513   ; strcpyInstruction("SUBI") ;
00003B36  4879 0000 6514          pea       @m68kde~3_263.L
00003B3A  8784      
00003B3C  4E93      6515          jsr       (A3)
00003B3E  584F      6516          addq.w    #4,A7
                    6517   DisassembleInstruction_36:
                    6518   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003B40  2042      6519          move.l    D2,A0
00003B42  3210      6520          move.w    (A0),D1
00003B44  C2BC 0000 6521          and.l     #65535,D1
00003B48  FFFF      
00003B4A  2F01      6522          move.l    D1,-(A7)
00003B4C  4EB8 2FFA 6523          jsr       _Decode2BitOperandSize
00003B50  584F      6524          addq.w    #4,A7
00003B52  3E00      6525          move.w    D0,D7
                    6526   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
00003B54  2F02      6527          move.l    D2,-(A7)
00003B56  4EB8 317E 6528          jsr       _DecodeBWLDataAfterOpCode
00003B5A  584F      6529          addq.w    #4,A7
                    6530   ; strcatInstruction(",") ;
00003B5C  4879 0000 6531          pea       @m68kde~3_264.L
00003B60  878A      
00003B62  4EB8 0CCC 6532          jsr       _strcatInstruction
00003B66  584F      6533          addq.w    #4,A7
                    6534   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
00003B68  42A7      6535          clr.l     -(A7)
00003B6A  CEBC 0000 6536          and.l     #65535,D7
00003B6E  FFFF      
00003B70  2F07      6537          move.l    D7,-(A7)
00003B72  42A7      6538          clr.l     -(A7)
00003B74  2F02      6539          move.l    D2,-(A7)
00003B76  4EB8 328E 6540          jsr       _Decode6BitEA
00003B7A  DEFC 0010 6541          add.w     #16,A7
                    6542   DisassembleInstruction_12:
                    6543   ; }
                    6544   ; /////////////////////////////////////////////////////////////////////////////////
                    6545   ; // if instruction is ADDI #data,SR
                    6546   ; /////////////////////////////////////////////////////////////////////////////////
                    6547   ; if(*OpCode  == (unsigned short int)(0x027c))   {
00003B7E  2042      6548          move.l    D2,A0
00003B80  3010      6549          move.w    (A0),D0
00003B82  0C40 027C 6550          cmp.w     #636,D0
00003B86  6622      6551          bne.s     DisassembleInstruction_38
                    6552   ; InstructionSize = 2;
00003B88  24BC 0000 6553          move.l    #2,(A2)
00003B8C  0002      
                    6554   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
00003B8E  2042      6555          move.l    D2,A0
00003B90  3228 0002 6556          move.w    2(A0),D1
00003B94  48C1      6557          ext.l     D1
00003B96  2F01      6558          move.l    D1,-(A7)
00003B98  4879 0000 6559          pea       @m68kde~3_265.L
00003B9C  878C      
00003B9E  4879 0803 6560          pea       _Instruction.L
00003BA2  04E2      
00003BA4  4E95      6561          jsr       (A5)
00003BA6  DEFC 000C 6562          add.w     #12,A7
                    6563   DisassembleInstruction_38:
                    6564   ; }
                    6565   ; /////////////////////////////////////////////////////////////////////////////////
                    6566   ; // if instruction is ADDQ
                    6567   ; /////////////////////////////////////////////////////////////////////////////////
                    6568   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
00003BAA  2042      6569          move.l    D2,A0
00003BAC  3010      6570          move.w    (A0),D0
00003BAE  C07C F100 6571          and.w     #61696,D0
00003BB2  0C40 5000 6572          cmp.w     #20480,D0
00003BB6  6600 005E 6573          bne       DisassembleInstruction_40
                    6574   ; InstructionSize = 1;
00003BBA  24BC 0000 6575          move.l    #1,(A2)
00003BBE  0001      
                    6576   ; strcpyInstruction("ADDQ") ;
00003BC0  4879 0000 6577          pea       @m68kde~3_266.L
00003BC4  879A      
00003BC6  4E93      6578          jsr       (A3)
00003BC8  584F      6579          addq.w    #4,A7
                    6580   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003BCA  2042      6581          move.l    D2,A0
00003BCC  3210      6582          move.w    (A0),D1
00003BCE  C2BC 0000 6583          and.l     #65535,D1
00003BD2  FFFF      
00003BD4  2F01      6584          move.l    D1,-(A7)
00003BD6  4EB8 2FFA 6585          jsr       _Decode2BitOperandSize
00003BDA  584F      6586          addq.w    #4,A7
                    6587   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00003BDC  2042      6588          move.l    D2,A0
00003BDE  3210      6589          move.w    (A0),D1
00003BE0  E041      6590          asr.w     #8,D1
00003BE2  E241      6591          asr.w     #1,D1
00003BE4  C27C 0007 6592          and.w     #7,D1
00003BE8  C2BC 0000 6593          and.l     #65535,D1
00003BEC  FFFF      
00003BEE  2F01      6594          move.l    D1,-(A7)
00003BF0  4879 0000 6595          pea       @m68kde~3_267.L
00003BF4  87A0      
00003BF6  2F0C      6596          move.l    A4,-(A7)
00003BF8  4E95      6597          jsr       (A5)
00003BFA  DEFC 000C 6598          add.w     #12,A7
                    6599   ; strcatInstruction(TempString) ;
00003BFE  2F0C      6600          move.l    A4,-(A7)
00003C00  4EB8 0CCC 6601          jsr       _strcatInstruction
00003C04  584F      6602          addq.w    #4,A7
                    6603   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00003C06  42A7      6604          clr.l     -(A7)
00003C08  42A7      6605          clr.l     -(A7)
00003C0A  42A7      6606          clr.l     -(A7)
00003C0C  2F02      6607          move.l    D2,-(A7)
00003C0E  4EB8 328E 6608          jsr       _Decode6BitEA
00003C12  DEFC 0010 6609          add.w     #16,A7
                    6610   DisassembleInstruction_40:
                    6611   ; }
                    6612   ; /////////////////////////////////////////////////////////////////////////////////
                    6613   ; // if instruction is ADDX
                    6614   ; /////////////////////////////////////////////////////////////////////////////////
                    6615   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
00003C16  2042      6616          move.l    D2,A0
00003C18  3010      6617          move.w    (A0),D0
00003C1A  C07C F130 6618          and.w     #61744,D0
00003C1E  0C40 D100 6619          cmp.w     #53504,D0
00003C22  6600 00A4 6620          bne       DisassembleInstruction_44
                    6621   ; InstructionSize = 1;
00003C26  24BC 0000 6622          move.l    #1,(A2)
00003C2A  0001      
                    6623   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00003C2C  2042      6624          move.l    D2,A0
00003C2E  3010      6625          move.w    (A0),D0
00003C30  EC40      6626          asr.w     #6,D0
00003C32  C07C 0003 6627          and.w     #3,D0
00003C36  3600      6628          move.w    D0,D3
                    6629   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
00003C38  0C43 0003 6630          cmp.w     #3,D3
00003C3C  6700 008A 6631          beq       DisassembleInstruction_44
                    6632   ; {
                    6633   ; strcpyInstruction("ADDX") ;
00003C40  4879 0000 6634          pea       @m68kde~3_268.L
00003C44  87A6      
00003C46  4E93      6635          jsr       (A3)
00003C48  584F      6636          addq.w    #4,A7
                    6637   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003C4A  2042      6638          move.l    D2,A0
00003C4C  3210      6639          move.w    (A0),D1
00003C4E  C2BC 0000 6640          and.l     #65535,D1
00003C52  FFFF      
00003C54  2F01      6641          move.l    D1,-(A7)
00003C56  4EB8 2FFA 6642          jsr       _Decode2BitOperandSize
00003C5A  584F      6643          addq.w    #4,A7
                    6644   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00003C5C  2042      6645          move.l    D2,A0
00003C5E  3010      6646          move.w    (A0),D0
00003C60  C07C 0008 6647          and.w     #8,D0
00003C64  6600 0030 6648          bne       DisassembleInstruction_46
                    6649   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003C68  2042      6650          move.l    D2,A0
00003C6A  3210      6651          move.w    (A0),D1
00003C6C  E041      6652          asr.w     #8,D1
00003C6E  E241      6653          asr.w     #1,D1
00003C70  C27C 0007 6654          and.w     #7,D1
00003C74  48C1      6655          ext.l     D1
00003C76  2F01      6656          move.l    D1,-(A7)
00003C78  2042      6657          move.l    D2,A0
00003C7A  3210      6658          move.w    (A0),D1
00003C7C  C27C 0007 6659          and.w     #7,D1
00003C80  48C1      6660          ext.l     D1
00003C82  2F01      6661          move.l    D1,-(A7)
00003C84  4879 0000 6662          pea       @m68kde~3_269.L
00003C88  87AC      
00003C8A  2F0C      6663          move.l    A4,-(A7)
00003C8C  4E95      6664          jsr       (A5)
00003C8E  DEFC 0010 6665          add.w     #16,A7
00003C92  6000 002C 6666          bra       DisassembleInstruction_47
                    6667   DisassembleInstruction_46:
                    6668   ; else        // -(ax),-(ay) mode used
                    6669   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003C96  2042      6670          move.l    D2,A0
00003C98  3210      6671          move.w    (A0),D1
00003C9A  E041      6672          asr.w     #8,D1
00003C9C  E241      6673          asr.w     #1,D1
00003C9E  C27C 0007 6674          and.w     #7,D1
00003CA2  48C1      6675          ext.l     D1
00003CA4  2F01      6676          move.l    D1,-(A7)
00003CA6  2042      6677          move.l    D2,A0
00003CA8  3210      6678          move.w    (A0),D1
00003CAA  C27C 0007 6679          and.w     #7,D1
00003CAE  48C1      6680          ext.l     D1
00003CB0  2F01      6681          move.l    D1,-(A7)
00003CB2  4879 0000 6682          pea       @m68kde~3_270.L
00003CB6  87B4      
00003CB8  2F0C      6683          move.l    A4,-(A7)
00003CBA  4E95      6684          jsr       (A5)
00003CBC  DEFC 0010 6685          add.w     #16,A7
                    6686   DisassembleInstruction_47:
                    6687   ; strcatInstruction(TempString) ;
00003CC0  2F0C      6688          move.l    A4,-(A7)
00003CC2  4EB8 0CCC 6689          jsr       _strcatInstruction
00003CC6  584F      6690          addq.w    #4,A7
                    6691   DisassembleInstruction_44:
                    6692   ; }
                    6693   ; }
                    6694   ; /////////////////////////////////////////////////////////////////////////////////
                    6695   ; // if instruction is AND
                    6696   ; /////////////////////////////////////////////////////////////////////////////////
                    6697   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
00003CC8  2042      6698          move.l    D2,A0
00003CCA  3010      6699          move.w    (A0),D0
00003CCC  C07C F000 6700          and.w     #61440,D0
00003CD0  0C40 C000 6701          cmp.w     #49152,D0
00003CD4  662A      6702          bne.s     DisassembleInstruction_50
                    6703   ; InstructionSize = 1;
00003CD6  24BC 0000 6704          move.l    #1,(A2)
00003CDA  0001      
                    6705   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6706   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
00003CDC  2042      6707          move.l    D2,A0
00003CDE  3010      6708          move.w    (A0),D0
00003CE0  E840      6709          asr.w     #4,D0
00003CE2  C07C 001F 6710          and.w     #31,D0
00003CE6  3600      6711          move.w    D0,D3
                    6712   ; if(OpMode != (unsigned short int)(0x0010))   {
00003CE8  0C43 0010 6713          cmp.w     #16,D3
00003CEC  6712      6714          beq.s     DisassembleInstruction_50
                    6715   ; strcpyInstruction("AND") ;
00003CEE  4879 0000 6716          pea       @m68kde~3_271.L
00003CF2  87C2      
00003CF4  4E93      6717          jsr       (A3)
00003CF6  584F      6718          addq.w    #4,A7
                    6719   ; Decode3BitOperandMode(OpCode) ;
00003CF8  2F02      6720          move.l    D2,-(A7)
00003CFA  4EB8 36B6 6721          jsr       _Decode3BitOperandMode
00003CFE  584F      6722          addq.w    #4,A7
                    6723   DisassembleInstruction_50:
                    6724   ; }
                    6725   ; }
                    6726   ; /////////////////////////////////////////////////////////////////////////////////
                    6727   ; // if instruction is ANDI to CCR
                    6728   ; /////////////////////////////////////////////////////////////////////////////////
                    6729   ; if(*OpCode == (unsigned short int)(0x023C))   {
00003D00  2042      6730          move.l    D2,A0
00003D02  3010      6731          move.w    (A0),D0
00003D04  0C40 023C 6732          cmp.w     #572,D0
00003D08  662A      6733          bne.s     DisassembleInstruction_52
                    6734   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00003D0A  2042      6735          move.l    D2,A0
00003D0C  3228 0002 6736          move.w    2(A0),D1
00003D10  C27C 00FF 6737          and.w     #255,D1
00003D14  C2BC 0000 6738          and.l     #65535,D1
00003D18  FFFF      
00003D1A  2F01      6739          move.l    D1,-(A7)
00003D1C  4879 0000 6740          pea       @m68kde~3_272.L
00003D20  87C6      
00003D22  4879 0803 6741          pea       _Instruction.L
00003D26  04E2      
00003D28  4E95      6742          jsr       (A5)
00003D2A  DEFC 000C 6743          add.w     #12,A7
                    6744   ; InstructionSize = 2;
00003D2E  24BC 0000 6745          move.l    #2,(A2)
00003D32  0002      
                    6746   DisassembleInstruction_52:
                    6747   ; }
                    6748   ; /////////////////////////////////////////////////////////////////////////////////
                    6749   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    6750   ; /////////////////////////////////////////////////////////////////////////////////
                    6751   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
00003D34  2042      6752          move.l    D2,A0
00003D36  3010      6753          move.w    (A0),D0
00003D38  C07C F018 6754          and.w     #61464,D0
00003D3C  0C40 E000 6755          cmp.w     #57344,D0
00003D40  6604      6756          bne.s     DisassembleInstruction_56
00003D42  7001      6757          moveq     #1,D0
00003D44  6002      6758          bra.s     DisassembleInstruction_57
                    6759   DisassembleInstruction_56:
00003D46  4280      6760          clr.l     D0
                    6761   DisassembleInstruction_57:
00003D48  2042      6762          move.l    D2,A0
00003D4A  3210      6763          move.w    (A0),D1
00003D4C  C27C FEC0 6764          and.w     #65216,D1
00003D50  0C41 E0C0 6765          cmp.w     #57536,D1
00003D54  6604      6766          bne.s     DisassembleInstruction_58
00003D56  7201      6767          moveq     #1,D1
00003D58  6002      6768          bra.s     DisassembleInstruction_59
                    6769   DisassembleInstruction_58:
00003D5A  4281      6770          clr.l     D1
                    6771   DisassembleInstruction_59:
00003D5C  8041      6772          or.w      D1,D0
00003D5E  2042      6773          move.l    D2,A0
00003D60  3210      6774          move.w    (A0),D1
00003D62  C27C F018 6775          and.w     #61464,D1
00003D66  0C41 E008 6776          cmp.w     #57352,D1
00003D6A  6604      6777          bne.s     DisassembleInstruction_60
00003D6C  7201      6778          moveq     #1,D1
00003D6E  6002      6779          bra.s     DisassembleInstruction_61
                    6780   DisassembleInstruction_60:
00003D70  4281      6781          clr.l     D1
                    6782   DisassembleInstruction_61:
00003D72  8041      6783          or.w      D1,D0
00003D74  2042      6784          move.l    D2,A0
00003D76  3210      6785          move.w    (A0),D1
00003D78  C27C FEC0 6786          and.w     #65216,D1
00003D7C  0C41 E2C0 6787          cmp.w     #58048,D1
00003D80  6604      6788          bne.s     DisassembleInstruction_62
00003D82  7201      6789          moveq     #1,D1
00003D84  6002      6790          bra.s     DisassembleInstruction_63
                    6791   DisassembleInstruction_62:
00003D86  4281      6792          clr.l     D1
                    6793   DisassembleInstruction_63:
00003D88  8041      6794          or.w      D1,D0
00003D8A  2042      6795          move.l    D2,A0
00003D8C  3210      6796          move.w    (A0),D1
00003D8E  C27C F018 6797          and.w     #61464,D1
00003D92  0C41 E018 6798          cmp.w     #57368,D1
00003D96  6604      6799          bne.s     DisassembleInstruction_64
00003D98  7201      6800          moveq     #1,D1
00003D9A  6002      6801          bra.s     DisassembleInstruction_65
                    6802   DisassembleInstruction_64:
00003D9C  4281      6803          clr.l     D1
                    6804   DisassembleInstruction_65:
00003D9E  8041      6805          or.w      D1,D0
00003DA0  2042      6806          move.l    D2,A0
00003DA2  3210      6807          move.w    (A0),D1
00003DA4  C27C FEC0 6808          and.w     #65216,D1
00003DA8  0C41 E6C0 6809          cmp.w     #59072,D1
00003DAC  6604      6810          bne.s     DisassembleInstruction_66
00003DAE  7201      6811          moveq     #1,D1
00003DB0  6002      6812          bra.s     DisassembleInstruction_67
                    6813   DisassembleInstruction_66:
00003DB2  4281      6814          clr.l     D1
                    6815   DisassembleInstruction_67:
00003DB4  8041      6816          or.w      D1,D0
00003DB6  2042      6817          move.l    D2,A0
00003DB8  3210      6818          move.w    (A0),D1
00003DBA  C27C F018 6819          and.w     #61464,D1
00003DBE  0C41 E010 6820          cmp.w     #57360,D1
00003DC2  6604      6821          bne.s     DisassembleInstruction_68
00003DC4  7201      6822          moveq     #1,D1
00003DC6  6002      6823          bra.s     DisassembleInstruction_69
                    6824   DisassembleInstruction_68:
00003DC8  4281      6825          clr.l     D1
                    6826   DisassembleInstruction_69:
00003DCA  8041      6827          or.w      D1,D0
00003DCC  2042      6828          move.l    D2,A0
00003DCE  3210      6829          move.w    (A0),D1
00003DD0  C27C FEC0 6830          and.w     #65216,D1
00003DD4  0C41 E4C0 6831          cmp.w     #58560,D1
00003DD8  6604      6832          bne.s     DisassembleInstruction_70
00003DDA  7201      6833          moveq     #1,D1
00003DDC  6002      6834          bra.s     DisassembleInstruction_71
                    6835   DisassembleInstruction_70:
00003DDE  4281      6836          clr.l     D1
                    6837   DisassembleInstruction_71:
00003DE0  8041      6838          or.w      D1,D0
00003DE2  6700 0252 6839          beq       DisassembleInstruction_73
                    6840   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    6841   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    6842   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    6843   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    6844   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    6845   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    6846   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    6847   ; {
                    6848   ; InstructionSize = 1;
00003DE6  24BC 0000 6849          move.l    #1,(A2)
00003DEA  0001      
                    6850   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    6851   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
00003DEC  2042      6852          move.l    D2,A0
00003DEE  3010      6853          move.w    (A0),D0
00003DF0  C07C 00C0 6854          and.w     #192,D0
00003DF4  0C40 00C0 6855          cmp.w     #192,D0
00003DF8  6600 00EA 6856          bne       DisassembleInstruction_72
                    6857   ; {
                    6858   ; // test direction by testing bit 8
                    6859   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
00003DFC  2042      6860          move.l    D2,A0
00003DFE  3010      6861          move.w    (A0),D0
00003E00  C07C FEC0 6862          and.w     #65216,D0
00003E04  0C40 E0C0 6863          cmp.w     #57536,D0
00003E08  6624      6864          bne.s     DisassembleInstruction_77
                    6865   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003E0A  2042      6866          move.l    D2,A0
00003E0C  3010      6867          move.w    (A0),D0
00003E0E  C07C 0100 6868          and.w     #256,D0
00003E12  0C40 0100 6869          cmp.w     #256,D0
00003E16  660C      6870          bne.s     DisassembleInstruction_76
                    6871   ; strcpyInstruction("ASL") ;
00003E18  4879 0000 6872          pea       @m68kde~3_273.L
00003E1C  87D6      
00003E1E  4E93      6873          jsr       (A3)
00003E20  584F      6874          addq.w    #4,A7
00003E22  600A      6875          bra.s     DisassembleInstruction_77
                    6876   DisassembleInstruction_76:
                    6877   ; else
                    6878   ; strcpyInstruction("ASR") ;
00003E24  4879 0000 6879          pea       @m68kde~3_274.L
00003E28  87DA      
00003E2A  4E93      6880          jsr       (A3)
00003E2C  584F      6881          addq.w    #4,A7
                    6882   DisassembleInstruction_77:
                    6883   ; // test direction by testing bit 8
                    6884   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
00003E2E  2042      6885          move.l    D2,A0
00003E30  3010      6886          move.w    (A0),D0
00003E32  C07C FEC0 6887          and.w     #65216,D0
00003E36  0C40 E2C0 6888          cmp.w     #58048,D0
00003E3A  6624      6889          bne.s     DisassembleInstruction_81
                    6890   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003E3C  2042      6891          move.l    D2,A0
00003E3E  3010      6892          move.w    (A0),D0
00003E40  C07C 0100 6893          and.w     #256,D0
00003E44  0C40 0100 6894          cmp.w     #256,D0
00003E48  660C      6895          bne.s     DisassembleInstruction_80
                    6896   ; strcpyInstruction("LSL") ;
00003E4A  4879 0000 6897          pea       @m68kde~3_275.L
00003E4E  87DE      
00003E50  4E93      6898          jsr       (A3)
00003E52  584F      6899          addq.w    #4,A7
00003E54  600A      6900          bra.s     DisassembleInstruction_81
                    6901   DisassembleInstruction_80:
                    6902   ; else
                    6903   ; strcpyInstruction("LSR") ;
00003E56  4879 0000 6904          pea       @m68kde~3_276.L
00003E5A  87E2      
00003E5C  4E93      6905          jsr       (A3)
00003E5E  584F      6906          addq.w    #4,A7
                    6907   DisassembleInstruction_81:
                    6908   ; // test direction by testing bit 8
                    6909   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
00003E60  2042      6910          move.l    D2,A0
00003E62  3010      6911          move.w    (A0),D0
00003E64  C07C FEC0 6912          and.w     #65216,D0
00003E68  0C40 E6C0 6913          cmp.w     #59072,D0
00003E6C  6624      6914          bne.s     DisassembleInstruction_85
                    6915   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003E6E  2042      6916          move.l    D2,A0
00003E70  3010      6917          move.w    (A0),D0
00003E72  C07C 0100 6918          and.w     #256,D0
00003E76  0C40 0100 6919          cmp.w     #256,D0
00003E7A  660C      6920          bne.s     DisassembleInstruction_84
                    6921   ; strcpyInstruction("ROL") ;
00003E7C  4879 0000 6922          pea       @m68kde~3_277.L
00003E80  87E6      
00003E82  4E93      6923          jsr       (A3)
00003E84  584F      6924          addq.w    #4,A7
00003E86  600A      6925          bra.s     DisassembleInstruction_85
                    6926   DisassembleInstruction_84:
                    6927   ; else
                    6928   ; strcpyInstruction("ROR") ;
00003E88  4879 0000 6929          pea       @m68kde~3_278.L
00003E8C  87EA      
00003E8E  4E93      6930          jsr       (A3)
00003E90  584F      6931          addq.w    #4,A7
                    6932   DisassembleInstruction_85:
                    6933   ; // test direction by testing bit 8
                    6934   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
00003E92  2042      6935          move.l    D2,A0
00003E94  3010      6936          move.w    (A0),D0
00003E96  C07C FEC0 6937          and.w     #65216,D0
00003E9A  0C40 E4C0 6938          cmp.w     #58560,D0
00003E9E  6624      6939          bne.s     DisassembleInstruction_89
                    6940   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003EA0  2042      6941          move.l    D2,A0
00003EA2  3010      6942          move.w    (A0),D0
00003EA4  C07C 0100 6943          and.w     #256,D0
00003EA8  0C40 0100 6944          cmp.w     #256,D0
00003EAC  660C      6945          bne.s     DisassembleInstruction_88
                    6946   ; strcpyInstruction("ROXL") ;
00003EAE  4879 0000 6947          pea       @m68kde~3_279.L
00003EB2  87EE      
00003EB4  4E93      6948          jsr       (A3)
00003EB6  584F      6949          addq.w    #4,A7
00003EB8  600A      6950          bra.s     DisassembleInstruction_89
                    6951   DisassembleInstruction_88:
                    6952   ; else
                    6953   ; strcpyInstruction("ROXR") ;
00003EBA  4879 0000 6954          pea       @m68kde~3_280.L
00003EBE  87F4      
00003EC0  4E93      6955          jsr       (A3)
00003EC2  584F      6956          addq.w    #4,A7
                    6957   DisassembleInstruction_89:
                    6958   ; strcatInstruction("  ") ;
00003EC4  4879 0000 6959          pea       @m68kde~3_281.L
00003EC8  87FA      
00003ECA  4EB8 0CCC 6960          jsr       _strcatInstruction
00003ECE  584F      6961          addq.w    #4,A7
                    6962   ; Decode6BitEA(OpCode,0, 0,0) ;
00003ED0  42A7      6963          clr.l     -(A7)
00003ED2  42A7      6964          clr.l     -(A7)
00003ED4  42A7      6965          clr.l     -(A7)
00003ED6  2F02      6966          move.l    D2,-(A7)
00003ED8  4EB8 328E 6967          jsr       _Decode6BitEA
00003EDC  DEFC 0010 6968          add.w     #16,A7
00003EE0  6000 0154 6969          bra       DisassembleInstruction_73
                    6970   DisassembleInstruction_72:
                    6971   ; }
                    6972   ; // first version of above instructions, bit 5 is 0
                    6973   ; else
                    6974   ; {
                    6975   ; // test instruction and direction by testing bits 4,3
                    6976   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00003EE4  2042      6977          move.l    D2,A0
00003EE6  3010      6978          move.w    (A0),D0
00003EE8  C07C 0018 6979          and.w     #24,D0
00003EEC  6624      6980          bne.s     DisassembleInstruction_93
                    6981   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003EEE  2042      6982          move.l    D2,A0
00003EF0  3010      6983          move.w    (A0),D0
00003EF2  C07C 0100 6984          and.w     #256,D0
00003EF6  0C40 0100 6985          cmp.w     #256,D0
00003EFA  660C      6986          bne.s     DisassembleInstruction_92
                    6987   ; strcpyInstruction("ASL") ;
00003EFC  4879 0000 6988          pea       @m68kde~3_282.L
00003F00  87FE      
00003F02  4E93      6989          jsr       (A3)
00003F04  584F      6990          addq.w    #4,A7
00003F06  600A      6991          bra.s     DisassembleInstruction_93
                    6992   DisassembleInstruction_92:
                    6993   ; else
                    6994   ; strcpyInstruction("ASR") ;
00003F08  4879 0000 6995          pea       @m68kde~3_283.L
00003F0C  8802      
00003F0E  4E93      6996          jsr       (A3)
00003F10  584F      6997          addq.w    #4,A7
                    6998   DisassembleInstruction_93:
                    6999   ; // test instruction and direction by testing bits 4,3
                    7000   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
00003F12  2042      7001          move.l    D2,A0
00003F14  3010      7002          move.w    (A0),D0
00003F16  C07C 0018 7003          and.w     #24,D0
00003F1A  0C40 0008 7004          cmp.w     #8,D0
00003F1E  6624      7005          bne.s     DisassembleInstruction_97
                    7006   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003F20  2042      7007          move.l    D2,A0
00003F22  3010      7008          move.w    (A0),D0
00003F24  C07C 0100 7009          and.w     #256,D0
00003F28  0C40 0100 7010          cmp.w     #256,D0
00003F2C  660C      7011          bne.s     DisassembleInstruction_96
                    7012   ; strcpyInstruction("LSL") ;
00003F2E  4879 0000 7013          pea       @m68kde~3_284.L
00003F32  8806      
00003F34  4E93      7014          jsr       (A3)
00003F36  584F      7015          addq.w    #4,A7
00003F38  600A      7016          bra.s     DisassembleInstruction_97
                    7017   DisassembleInstruction_96:
                    7018   ; else
                    7019   ; strcpyInstruction("LSR") ;
00003F3A  4879 0000 7020          pea       @m68kde~3_285.L
00003F3E  880A      
00003F40  4E93      7021          jsr       (A3)
00003F42  584F      7022          addq.w    #4,A7
                    7023   DisassembleInstruction_97:
                    7024   ; // test instruction and direction by testing bits 4,3
                    7025   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
00003F44  2042      7026          move.l    D2,A0
00003F46  3010      7027          move.w    (A0),D0
00003F48  C07C 0018 7028          and.w     #24,D0
00003F4C  0C40 0018 7029          cmp.w     #24,D0
00003F50  6624      7030          bne.s     DisassembleInstruction_101
                    7031   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003F52  2042      7032          move.l    D2,A0
00003F54  3010      7033          move.w    (A0),D0
00003F56  C07C 0100 7034          and.w     #256,D0
00003F5A  0C40 0100 7035          cmp.w     #256,D0
00003F5E  660C      7036          bne.s     DisassembleInstruction_100
                    7037   ; strcpyInstruction("ROL") ;
00003F60  4879 0000 7038          pea       @m68kde~3_286.L
00003F64  880E      
00003F66  4E93      7039          jsr       (A3)
00003F68  584F      7040          addq.w    #4,A7
00003F6A  600A      7041          bra.s     DisassembleInstruction_101
                    7042   DisassembleInstruction_100:
                    7043   ; else
                    7044   ; strcpyInstruction("ROR") ;
00003F6C  4879 0000 7045          pea       @m68kde~3_287.L
00003F70  8812      
00003F72  4E93      7046          jsr       (A3)
00003F74  584F      7047          addq.w    #4,A7
                    7048   DisassembleInstruction_101:
                    7049   ; // test instruction and direction by testing bits 4,3
                    7050   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
00003F76  2042      7051          move.l    D2,A0
00003F78  3010      7052          move.w    (A0),D0
00003F7A  C07C 0018 7053          and.w     #24,D0
00003F7E  0C40 0010 7054          cmp.w     #16,D0
00003F82  6624      7055          bne.s     DisassembleInstruction_105
                    7056   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003F84  2042      7057          move.l    D2,A0
00003F86  3010      7058          move.w    (A0),D0
00003F88  C07C 0100 7059          and.w     #256,D0
00003F8C  0C40 0100 7060          cmp.w     #256,D0
00003F90  660C      7061          bne.s     DisassembleInstruction_104
                    7062   ; strcpyInstruction("ROXL") ;
00003F92  4879 0000 7063          pea       @m68kde~3_288.L
00003F96  8816      
00003F98  4E93      7064          jsr       (A3)
00003F9A  584F      7065          addq.w    #4,A7
00003F9C  600A      7066          bra.s     DisassembleInstruction_105
                    7067   DisassembleInstruction_104:
                    7068   ; else
                    7069   ; strcpyInstruction("ROXR") ;
00003F9E  4879 0000 7070          pea       @m68kde~3_289.L
00003FA2  881C      
00003FA4  4E93      7071          jsr       (A3)
00003FA6  584F      7072          addq.w    #4,A7
                    7073   DisassembleInstruction_105:
                    7074   ; Decode2BitOperandSize(*OpCode) ;
00003FA8  2042      7075          move.l    D2,A0
00003FAA  3210      7076          move.w    (A0),D1
00003FAC  C2BC 0000 7077          and.l     #65535,D1
00003FB0  FFFF      
00003FB2  2F01      7078          move.l    D1,-(A7)
00003FB4  4EB8 2FFA 7079          jsr       _Decode2BitOperandSize
00003FB8  584F      7080          addq.w    #4,A7
                    7081   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
00003FBA  2042      7082          move.l    D2,A0
00003FBC  3010      7083          move.w    (A0),D0
00003FBE  C07C 0020 7084          and.w     #32,D0
00003FC2  6600 0038 7085          bne       DisassembleInstruction_106
                    7086   ; sprintf(TempString,"#$%X,D%X",
00003FC6  2042      7087          move.l    D2,A0
00003FC8  3210      7088          move.w    (A0),D1
00003FCA  C27C 0007 7089          and.w     #7,D1
00003FCE  C2BC 0000 7090          and.l     #65535,D1
00003FD2  FFFF      
00003FD4  2F01      7091          move.l    D1,-(A7)
00003FD6  2042      7092          move.l    D2,A0
00003FD8  3210      7093          move.w    (A0),D1
00003FDA  E041      7094          asr.w     #8,D1
00003FDC  E241      7095          asr.w     #1,D1
00003FDE  C27C 0007 7096          and.w     #7,D1
00003FE2  C2BC 0000 7097          and.l     #65535,D1
00003FE6  FFFF      
00003FE8  2F01      7098          move.l    D1,-(A7)
00003FEA  4879 0000 7099          pea       @m68kde~3_290.L
00003FEE  8822      
00003FF0  2F0C      7100          move.l    A4,-(A7)
00003FF2  4E95      7101          jsr       (A5)
00003FF4  DEFC 0010 7102          add.w     #16,A7
00003FF8  6000 0034 7103          bra       DisassembleInstruction_107
                    7104   DisassembleInstruction_106:
                    7105   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7106   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7107   ; }
                    7108   ; else {                                                                      // if shift is for example ASR D1,D2
                    7109   ; sprintf(TempString,"D%X,D%X",
00003FFC  2042      7110          move.l    D2,A0
00003FFE  3210      7111          move.w    (A0),D1
00004000  C27C 0007 7112          and.w     #7,D1
00004004  C2BC 0000 7113          and.l     #65535,D1
00004008  FFFF      
0000400A  2F01      7114          move.l    D1,-(A7)
0000400C  2042      7115          move.l    D2,A0
0000400E  3210      7116          move.w    (A0),D1
00004010  E041      7117          asr.w     #8,D1
00004012  E241      7118          asr.w     #1,D1
00004014  C27C 0007 7119          and.w     #7,D1
00004018  C2BC 0000 7120          and.l     #65535,D1
0000401C  FFFF      
0000401E  2F01      7121          move.l    D1,-(A7)
00004020  4879 0000 7122          pea       @m68kde~3_291.L
00004024  882C      
00004026  2F0C      7123          move.l    A4,-(A7)
00004028  4E95      7124          jsr       (A5)
0000402A  DEFC 0010 7125          add.w     #16,A7
                    7126   DisassembleInstruction_107:
                    7127   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7128   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7129   ; }
                    7130   ; strcatInstruction(TempString) ;
0000402E  2F0C      7131          move.l    A4,-(A7)
00004030  4EB8 0CCC 7132          jsr       _strcatInstruction
00004034  584F      7133          addq.w    #4,A7
                    7134   DisassembleInstruction_73:
                    7135   ; }
                    7136   ; }
                    7137   ; /////////////////////////////////////////////////////////////////////////////////
                    7138   ; // if instruction is BCC and BSR and BRA
                    7139   ; /////////////////////////////////////////////////////////////////////////////////
                    7140   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
00004036  2042      7141          move.l    D2,A0
00004038  3010      7142          move.w    (A0),D0
0000403A  C07C F000 7143          and.w     #61440,D0
0000403E  0C40 6000 7144          cmp.w     #24576,D0
00004042  6600 00A0 7145          bne       DisassembleInstruction_108
                    7146   ; {
                    7147   ; InstructionSize = 1;
00004046  24BC 0000 7148          move.l    #1,(A2)
0000404A  0001      
                    7149   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
0000404C  2042      7150          move.l    D2,A0
0000404E  3010      7151          move.w    (A0),D0
00004050  E040      7152          asr.w     #8,D0
00004052  C07C 000F 7153          and.w     #15,D0
00004056  1D40 FFE9 7154          move.b    D0,-23(A6)
                    7155   ; strcpyInstruction("B") ;
0000405A  4879 0000 7156          pea       @m68kde~3_292.L
0000405E  8834      
00004060  4E93      7157          jsr       (A3)
00004062  584F      7158          addq.w    #4,A7
                    7159   ; DecodeBranchCondition(Condition) ;
00004064  122E FFE9 7160          move.b    -23(A6),D1
00004068  C27C 00FF 7161          and.w     #255,D1
0000406C  C2BC 0000 7162          and.l     #65535,D1
00004070  FFFF      
00004072  2F01      7163          move.l    D1,-(A7)
00004074  4EB8 374C 7164          jsr       _DecodeBranchCondition
00004078  584F      7165          addq.w    #4,A7
                    7166   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
0000407A  2042      7167          move.l    D2,A0
0000407C  3010      7168          move.w    (A0),D0
0000407E  C07C 00FF 7169          and.w     #255,D0
00004082  1D40 FFFB 7170          move.b    D0,-5(A6)
                    7171   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
00004086  102E FFFB 7172          move.b    -5(A6),D0
0000408A  4880      7173          ext.w     D0
0000408C  4A40      7174          tst.w     D0
0000408E  662A      7175          bne.s     DisassembleInstruction_110
                    7176   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00004090  2202      7177          move.l    D2,D1
00004092  2042      7178          move.l    D2,A0
00004094  2F00      7179          move.l    D0,-(A7)
00004096  3028 0002 7180          move.w    2(A0),D0
0000409A  48C0      7181          ext.l     D0
0000409C  D280      7182          add.l     D0,D1
0000409E  201F      7183          move.l    (A7)+,D0
000040A0  5481      7184          addq.l    #2,D1
000040A2  2F01      7185          move.l    D1,-(A7)
000040A4  4879 0000 7186          pea       @m68kde~3_293.L
000040A8  8836      
000040AA  2F0C      7187          move.l    A4,-(A7)
000040AC  4E95      7188          jsr       (A5)
000040AE  DEFC 000C 7189          add.w     #12,A7
                    7190   ; InstructionSize = 2 ;
000040B2  24BC 0000 7191          move.l    #2,(A2)
000040B6  0002      
000040B8  6022      7192          bra.s     DisassembleInstruction_111
                    7193   DisassembleInstruction_110:
                    7194   ; }
                    7195   ; else
                    7196   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
000040BA  2202      7197          move.l    D2,D1
000040BC  2F00      7198          move.l    D0,-(A7)
000040BE  102E FFFB 7199          move.b    -5(A6),D0
000040C2  4880      7200          ext.w     D0
000040C4  48C0      7201          ext.l     D0
000040C6  D280      7202          add.l     D0,D1
000040C8  201F      7203          move.l    (A7)+,D0
000040CA  5481      7204          addq.l    #2,D1
000040CC  2F01      7205          move.l    D1,-(A7)
000040CE  4879 0000 7206          pea       @m68kde~3_294.L
000040D2  883A      
000040D4  2F0C      7207          move.l    A4,-(A7)
000040D6  4E95      7208          jsr       (A5)
000040D8  DEFC 000C 7209          add.w     #12,A7
                    7210   DisassembleInstruction_111:
                    7211   ; strcatInstruction(TempString) ;
000040DC  2F0C      7212          move.l    A4,-(A7)
000040DE  4EB8 0CCC 7213          jsr       _strcatInstruction
000040E2  584F      7214          addq.w    #4,A7
                    7215   DisassembleInstruction_108:
                    7216   ; }
                    7217   ; /////////////////////////////////////////////////////////////////////////////////
                    7218   ; // if instruction is BCHG dn,<EA>
                    7219   ; /////////////////////////////////////////////////////////////////////////////////
                    7220   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
000040E4  2042      7221          move.l    D2,A0
000040E6  3010      7222          move.w    (A0),D0
000040E8  C07C F1C0 7223          and.w     #61888,D0
000040EC  0C40 0140 7224          cmp.w     #320,D0
000040F0  6600 004C 7225          bne       DisassembleInstruction_112
                    7226   ; InstructionSize = 1;
000040F4  24BC 0000 7227          move.l    #1,(A2)
000040F8  0001      
                    7228   ; strcpyInstruction("BCHG ") ;
000040FA  4879 0000 7229          pea       @m68kde~3_295.L
000040FE  883E      
00004100  4E93      7230          jsr       (A3)
00004102  584F      7231          addq.w    #4,A7
                    7232   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004104  2042      7233          move.l    D2,A0
00004106  3210      7234          move.w    (A0),D1
00004108  E041      7235          asr.w     #8,D1
0000410A  E241      7236          asr.w     #1,D1
0000410C  C27C 0007 7237          and.w     #7,D1
00004110  C2BC 0000 7238          and.l     #65535,D1
00004114  FFFF      
00004116  2F01      7239          move.l    D1,-(A7)
00004118  4879 0000 7240          pea       @m68kde~3_296.L
0000411C  8844      
0000411E  2F0C      7241          move.l    A4,-(A7)
00004120  4E95      7242          jsr       (A5)
00004122  DEFC 000C 7243          add.w     #12,A7
                    7244   ; strcatInstruction(TempString) ;
00004126  2F0C      7245          move.l    A4,-(A7)
00004128  4EB8 0CCC 7246          jsr       _strcatInstruction
0000412C  584F      7247          addq.w    #4,A7
                    7248   ; Decode6BitEA(OpCode,0,0,0) ;
0000412E  42A7      7249          clr.l     -(A7)
00004130  42A7      7250          clr.l     -(A7)
00004132  42A7      7251          clr.l     -(A7)
00004134  2F02      7252          move.l    D2,-(A7)
00004136  4EB8 328E 7253          jsr       _Decode6BitEA
0000413A  DEFC 0010 7254          add.w     #16,A7
                    7255   DisassembleInstruction_112:
                    7256   ; }
                    7257   ; /////////////////////////////////////////////////////////////////////////////////
                    7258   ; // if instruction is BCHG #data,<EA>
                    7259   ; /////////////////////////////////////////////////////////////////////////////////
                    7260   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
0000413E  2042      7261          move.l    D2,A0
00004140  3010      7262          move.w    (A0),D0
00004142  C07C FFC0 7263          and.w     #65472,D0
00004146  0C40 0840 7264          cmp.w     #2112,D0
0000414A  6600 0044 7265          bne       DisassembleInstruction_114
                    7266   ; strcpyInstruction("BCHG ") ;
0000414E  4879 0000 7267          pea       @m68kde~3_297.L
00004152  884A      
00004154  4E93      7268          jsr       (A3)
00004156  584F      7269          addq.w    #4,A7
                    7270   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004158  2042      7271          move.l    D2,A0
0000415A  3228 0002 7272          move.w    2(A0),D1
0000415E  48C1      7273          ext.l     D1
00004160  2F01      7274          move.l    D1,-(A7)
00004162  4879 0000 7275          pea       @m68kde~3_298.L
00004166  8850      
00004168  2F0C      7276          move.l    A4,-(A7)
0000416A  4E95      7277          jsr       (A5)
0000416C  DEFC 000C 7278          add.w     #12,A7
                    7279   ; InstructionSize = 2 ;
00004170  24BC 0000 7280          move.l    #2,(A2)
00004174  0002      
                    7281   ; strcatInstruction(TempString) ;
00004176  2F0C      7282          move.l    A4,-(A7)
00004178  4EB8 0CCC 7283          jsr       _strcatInstruction
0000417C  584F      7284          addq.w    #4,A7
                    7285   ; Decode6BitEA(OpCode,0,1,0) ;
0000417E  42A7      7286          clr.l     -(A7)
00004180  4878 0001 7287          pea       1
00004184  42A7      7288          clr.l     -(A7)
00004186  2F02      7289          move.l    D2,-(A7)
00004188  4EB8 328E 7290          jsr       _Decode6BitEA
0000418C  DEFC 0010 7291          add.w     #16,A7
                    7292   DisassembleInstruction_114:
                    7293   ; }
                    7294   ; /////////////////////////////////////////////////////////////////////////////////
                    7295   ; // if instruction is BCLR  dn,<EA>
                    7296   ; /////////////////////////////////////////////////////////////////////////////////
                    7297   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
00004190  2042      7298          move.l    D2,A0
00004192  3010      7299          move.w    (A0),D0
00004194  C07C F1C0 7300          and.w     #61888,D0
00004198  0C40 0180 7301          cmp.w     #384,D0
0000419C  6600 004C 7302          bne       DisassembleInstruction_116
                    7303   ; InstructionSize = 1;
000041A0  24BC 0000 7304          move.l    #1,(A2)
000041A4  0001      
                    7305   ; strcpyInstruction("BCLR ") ;
000041A6  4879 0000 7306          pea       @m68kde~3_299.L
000041AA  8856      
000041AC  4E93      7307          jsr       (A3)
000041AE  584F      7308          addq.w    #4,A7
                    7309   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000041B0  2042      7310          move.l    D2,A0
000041B2  3210      7311          move.w    (A0),D1
000041B4  E041      7312          asr.w     #8,D1
000041B6  E241      7313          asr.w     #1,D1
000041B8  C27C 0007 7314          and.w     #7,D1
000041BC  C2BC 0000 7315          and.l     #65535,D1
000041C0  FFFF      
000041C2  2F01      7316          move.l    D1,-(A7)
000041C4  4879 0000 7317          pea       @m68kde~3_300.L
000041C8  885C      
000041CA  2F0C      7318          move.l    A4,-(A7)
000041CC  4E95      7319          jsr       (A5)
000041CE  DEFC 000C 7320          add.w     #12,A7
                    7321   ; strcatInstruction(TempString) ;
000041D2  2F0C      7322          move.l    A4,-(A7)
000041D4  4EB8 0CCC 7323          jsr       _strcatInstruction
000041D8  584F      7324          addq.w    #4,A7
                    7325   ; Decode6BitEA(OpCode,0,0,0) ;
000041DA  42A7      7326          clr.l     -(A7)
000041DC  42A7      7327          clr.l     -(A7)
000041DE  42A7      7328          clr.l     -(A7)
000041E0  2F02      7329          move.l    D2,-(A7)
000041E2  4EB8 328E 7330          jsr       _Decode6BitEA
000041E6  DEFC 0010 7331          add.w     #16,A7
                    7332   DisassembleInstruction_116:
                    7333   ; }
                    7334   ; /////////////////////////////////////////////////////////////////////////////////
                    7335   ; // if instruction is BCLR #data,<EA>
                    7336   ; /////////////////////////////////////////////////////////////////////////////////
                    7337   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
000041EA  2042      7338          move.l    D2,A0
000041EC  3010      7339          move.w    (A0),D0
000041EE  C07C FFC0 7340          and.w     #65472,D0
000041F2  0C40 0880 7341          cmp.w     #2176,D0
000041F6  6600 0044 7342          bne       DisassembleInstruction_118
                    7343   ; strcpyInstruction("BCLR ") ;
000041FA  4879 0000 7344          pea       @m68kde~3_301.L
000041FE  8862      
00004200  4E93      7345          jsr       (A3)
00004202  584F      7346          addq.w    #4,A7
                    7347   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004204  2042      7348          move.l    D2,A0
00004206  3228 0002 7349          move.w    2(A0),D1
0000420A  48C1      7350          ext.l     D1
0000420C  2F01      7351          move.l    D1,-(A7)
0000420E  4879 0000 7352          pea       @m68kde~3_302.L
00004212  8868      
00004214  2F0C      7353          move.l    A4,-(A7)
00004216  4E95      7354          jsr       (A5)
00004218  DEFC 000C 7355          add.w     #12,A7
                    7356   ; InstructionSize = 2 ;
0000421C  24BC 0000 7357          move.l    #2,(A2)
00004220  0002      
                    7358   ; strcatInstruction(TempString) ;
00004222  2F0C      7359          move.l    A4,-(A7)
00004224  4EB8 0CCC 7360          jsr       _strcatInstruction
00004228  584F      7361          addq.w    #4,A7
                    7362   ; Decode6BitEA(OpCode,0,1,0) ;
0000422A  42A7      7363          clr.l     -(A7)
0000422C  4878 0001 7364          pea       1
00004230  42A7      7365          clr.l     -(A7)
00004232  2F02      7366          move.l    D2,-(A7)
00004234  4EB8 328E 7367          jsr       _Decode6BitEA
00004238  DEFC 0010 7368          add.w     #16,A7
                    7369   DisassembleInstruction_118:
                    7370   ; }
                    7371   ; /////////////////////////////////////////////////////////////////////////////////
                    7372   ; // if instruction is BSET dn,<EA>
                    7373   ; /////////////////////////////////////////////////////////////////////////////////
                    7374   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
0000423C  2042      7375          move.l    D2,A0
0000423E  3010      7376          move.w    (A0),D0
00004240  C07C F1C0 7377          and.w     #61888,D0
00004244  0C40 01C0 7378          cmp.w     #448,D0
00004248  6600 004C 7379          bne       DisassembleInstruction_120
                    7380   ; InstructionSize = 1;
0000424C  24BC 0000 7381          move.l    #1,(A2)
00004250  0001      
                    7382   ; strcpyInstruction("BSET ") ;
00004252  4879 0000 7383          pea       @m68kde~3_303.L
00004256  886E      
00004258  4E93      7384          jsr       (A3)
0000425A  584F      7385          addq.w    #4,A7
                    7386   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000425C  2042      7387          move.l    D2,A0
0000425E  3210      7388          move.w    (A0),D1
00004260  E041      7389          asr.w     #8,D1
00004262  E241      7390          asr.w     #1,D1
00004264  C27C 0007 7391          and.w     #7,D1
00004268  C2BC 0000 7392          and.l     #65535,D1
0000426C  FFFF      
0000426E  2F01      7393          move.l    D1,-(A7)
00004270  4879 0000 7394          pea       @m68kde~3_304.L
00004274  8874      
00004276  2F0C      7395          move.l    A4,-(A7)
00004278  4E95      7396          jsr       (A5)
0000427A  DEFC 000C 7397          add.w     #12,A7
                    7398   ; strcatInstruction(TempString) ;
0000427E  2F0C      7399          move.l    A4,-(A7)
00004280  4EB8 0CCC 7400          jsr       _strcatInstruction
00004284  584F      7401          addq.w    #4,A7
                    7402   ; Decode6BitEA(OpCode,0,0,0) ;
00004286  42A7      7403          clr.l     -(A7)
00004288  42A7      7404          clr.l     -(A7)
0000428A  42A7      7405          clr.l     -(A7)
0000428C  2F02      7406          move.l    D2,-(A7)
0000428E  4EB8 328E 7407          jsr       _Decode6BitEA
00004292  DEFC 0010 7408          add.w     #16,A7
                    7409   DisassembleInstruction_120:
                    7410   ; }
                    7411   ; /////////////////////////////////////////////////////////////////////////////////
                    7412   ; // if instruction is BSET #data,<EA>
                    7413   ; /////////////////////////////////////////////////////////////////////////////////
                    7414   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
00004296  2042      7415          move.l    D2,A0
00004298  3010      7416          move.w    (A0),D0
0000429A  C07C FFC0 7417          and.w     #65472,D0
0000429E  0C40 08C0 7418          cmp.w     #2240,D0
000042A2  6600 0044 7419          bne       DisassembleInstruction_122
                    7420   ; strcpyInstruction("BSET ") ;
000042A6  4879 0000 7421          pea       @m68kde~3_305.L
000042AA  887A      
000042AC  4E93      7422          jsr       (A3)
000042AE  584F      7423          addq.w    #4,A7
                    7424   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
000042B0  2042      7425          move.l    D2,A0
000042B2  3228 0002 7426          move.w    2(A0),D1
000042B6  48C1      7427          ext.l     D1
000042B8  2F01      7428          move.l    D1,-(A7)
000042BA  4879 0000 7429          pea       @m68kde~3_306.L
000042BE  8880      
000042C0  2F0C      7430          move.l    A4,-(A7)
000042C2  4E95      7431          jsr       (A5)
000042C4  DEFC 000C 7432          add.w     #12,A7
                    7433   ; InstructionSize = 2 ;
000042C8  24BC 0000 7434          move.l    #2,(A2)
000042CC  0002      
                    7435   ; strcatInstruction(TempString) ;
000042CE  2F0C      7436          move.l    A4,-(A7)
000042D0  4EB8 0CCC 7437          jsr       _strcatInstruction
000042D4  584F      7438          addq.w    #4,A7
                    7439   ; Decode6BitEA(OpCode,0,1,0) ;
000042D6  42A7      7440          clr.l     -(A7)
000042D8  4878 0001 7441          pea       1
000042DC  42A7      7442          clr.l     -(A7)
000042DE  2F02      7443          move.l    D2,-(A7)
000042E0  4EB8 328E 7444          jsr       _Decode6BitEA
000042E4  DEFC 0010 7445          add.w     #16,A7
                    7446   DisassembleInstruction_122:
                    7447   ; }
                    7448   ; /////////////////////////////////////////////////////////////////////////////////
                    7449   ; // if instruction is BTST dn,<EA>
                    7450   ; /////////////////////////////////////////////////////////////////////////////////
                    7451   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
000042E8  2042      7452          move.l    D2,A0
000042EA  3010      7453          move.w    (A0),D0
000042EC  C07C F1C0 7454          and.w     #61888,D0
000042F0  0C40 0100 7455          cmp.w     #256,D0
000042F4  6600 004C 7456          bne       DisassembleInstruction_124
                    7457   ; InstructionSize = 1;
000042F8  24BC 0000 7458          move.l    #1,(A2)
000042FC  0001      
                    7459   ; strcpyInstruction("BTST ") ;
000042FE  4879 0000 7460          pea       @m68kde~3_307.L
00004302  8886      
00004304  4E93      7461          jsr       (A3)
00004306  584F      7462          addq.w    #4,A7
                    7463   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004308  2042      7464          move.l    D2,A0
0000430A  3210      7465          move.w    (A0),D1
0000430C  E041      7466          asr.w     #8,D1
0000430E  E241      7467          asr.w     #1,D1
00004310  C27C 0007 7468          and.w     #7,D1
00004314  C2BC 0000 7469          and.l     #65535,D1
00004318  FFFF      
0000431A  2F01      7470          move.l    D1,-(A7)
0000431C  4879 0000 7471          pea       @m68kde~3_308.L
00004320  888C      
00004322  2F0C      7472          move.l    A4,-(A7)
00004324  4E95      7473          jsr       (A5)
00004326  DEFC 000C 7474          add.w     #12,A7
                    7475   ; strcatInstruction(TempString) ;
0000432A  2F0C      7476          move.l    A4,-(A7)
0000432C  4EB8 0CCC 7477          jsr       _strcatInstruction
00004330  584F      7478          addq.w    #4,A7
                    7479   ; Decode6BitEA(OpCode,0,0,0) ;
00004332  42A7      7480          clr.l     -(A7)
00004334  42A7      7481          clr.l     -(A7)
00004336  42A7      7482          clr.l     -(A7)
00004338  2F02      7483          move.l    D2,-(A7)
0000433A  4EB8 328E 7484          jsr       _Decode6BitEA
0000433E  DEFC 0010 7485          add.w     #16,A7
                    7486   DisassembleInstruction_124:
                    7487   ; }
                    7488   ; /////////////////////////////////////////////////////////////////////////////////
                    7489   ; // if instruction is BTST #data,<EA>
                    7490   ; /////////////////////////////////////////////////////////////////////////////////
                    7491   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
00004342  2042      7492          move.l    D2,A0
00004344  3010      7493          move.w    (A0),D0
00004346  C07C FFC0 7494          and.w     #65472,D0
0000434A  0C40 0800 7495          cmp.w     #2048,D0
0000434E  6600 0044 7496          bne       DisassembleInstruction_126
                    7497   ; strcpyInstruction("BTST ") ;
00004352  4879 0000 7498          pea       @m68kde~3_309.L
00004356  8892      
00004358  4E93      7499          jsr       (A3)
0000435A  584F      7500          addq.w    #4,A7
                    7501   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
0000435C  2042      7502          move.l    D2,A0
0000435E  3228 0002 7503          move.w    2(A0),D1
00004362  48C1      7504          ext.l     D1
00004364  2F01      7505          move.l    D1,-(A7)
00004366  4879 0000 7506          pea       @m68kde~3_310.L
0000436A  8898      
0000436C  2F0C      7507          move.l    A4,-(A7)
0000436E  4E95      7508          jsr       (A5)
00004370  DEFC 000C 7509          add.w     #12,A7
                    7510   ; InstructionSize = 2 ;
00004374  24BC 0000 7511          move.l    #2,(A2)
00004378  0002      
                    7512   ; strcatInstruction(TempString) ;
0000437A  2F0C      7513          move.l    A4,-(A7)
0000437C  4EB8 0CCC 7514          jsr       _strcatInstruction
00004380  584F      7515          addq.w    #4,A7
                    7516   ; Decode6BitEA(OpCode,0,1,0) ;
00004382  42A7      7517          clr.l     -(A7)
00004384  4878 0001 7518          pea       1
00004388  42A7      7519          clr.l     -(A7)
0000438A  2F02      7520          move.l    D2,-(A7)
0000438C  4EB8 328E 7521          jsr       _Decode6BitEA
00004390  DEFC 0010 7522          add.w     #16,A7
                    7523   DisassembleInstruction_126:
                    7524   ; }
                    7525   ; /////////////////////////////////////////////////////////////////////////////////
                    7526   ; // if instruction is CHK.W <EA>,DN
                    7527   ; /////////////////////////////////////////////////////////////////////////////////
                    7528   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
00004394  2042      7529          move.l    D2,A0
00004396  3010      7530          move.w    (A0),D0
00004398  C07C F1C0 7531          and.w     #61888,D0
0000439C  0C40 4180 7532          cmp.w     #16768,D0
000043A0  6600 004C 7533          bne       DisassembleInstruction_128
                    7534   ; InstructionSize = 1;
000043A4  24BC 0000 7535          move.l    #1,(A2)
000043A8  0001      
                    7536   ; strcpyInstruction("CHK ") ;
000043AA  4879 0000 7537          pea       @m68kde~3_311.L
000043AE  889E      
000043B0  4E93      7538          jsr       (A3)
000043B2  584F      7539          addq.w    #4,A7
                    7540   ; Decode6BitEA(OpCode,0,0,0) ;
000043B4  42A7      7541          clr.l     -(A7)
000043B6  42A7      7542          clr.l     -(A7)
000043B8  42A7      7543          clr.l     -(A7)
000043BA  2F02      7544          move.l    D2,-(A7)
000043BC  4EB8 328E 7545          jsr       _Decode6BitEA
000043C0  DEFC 0010 7546          add.w     #16,A7
                    7547   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000043C4  2042      7548          move.l    D2,A0
000043C6  3210      7549          move.w    (A0),D1
000043C8  E041      7550          asr.w     #8,D1
000043CA  E241      7551          asr.w     #1,D1
000043CC  C27C 0007 7552          and.w     #7,D1
000043D0  C2BC 0000 7553          and.l     #65535,D1
000043D4  FFFF      
000043D6  2F01      7554          move.l    D1,-(A7)
000043D8  4879 0000 7555          pea       @m68kde~3_312.L
000043DC  88A4      
000043DE  2F0C      7556          move.l    A4,-(A7)
000043E0  4E95      7557          jsr       (A5)
000043E2  DEFC 000C 7558          add.w     #12,A7
                    7559   ; strcatInstruction(TempString) ;
000043E6  2F0C      7560          move.l    A4,-(A7)
000043E8  4EB8 0CCC 7561          jsr       _strcatInstruction
000043EC  584F      7562          addq.w    #4,A7
                    7563   DisassembleInstruction_128:
                    7564   ; }
                    7565   ; /////////////////////////////////////////////////////////////////////////////////
                    7566   ; // if instruction is CLR <EA>
                    7567   ; /////////////////////////////////////////////////////////////////////////////////
                    7568   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
000043EE  2042      7569          move.l    D2,A0
000043F0  3010      7570          move.w    (A0),D0
000043F2  C07C FF00 7571          and.w     #65280,D0
000043F6  0C40 4200 7572          cmp.w     #16896,D0
000043FA  6600 0034 7573          bne       DisassembleInstruction_130
                    7574   ; InstructionSize = 1;
000043FE  24BC 0000 7575          move.l    #1,(A2)
00004402  0001      
                    7576   ; strcpyInstruction("CLR") ;
00004404  4879 0000 7577          pea       @m68kde~3_313.L
00004408  88AA      
0000440A  4E93      7578          jsr       (A3)
0000440C  584F      7579          addq.w    #4,A7
                    7580   ; Decode2BitOperandSize(*OpCode) ;
0000440E  2042      7581          move.l    D2,A0
00004410  3210      7582          move.w    (A0),D1
00004412  C2BC 0000 7583          and.l     #65535,D1
00004416  FFFF      
00004418  2F01      7584          move.l    D1,-(A7)
0000441A  4EB8 2FFA 7585          jsr       _Decode2BitOperandSize
0000441E  584F      7586          addq.w    #4,A7
                    7587   ; Decode6BitEA(OpCode,0,0,0) ;
00004420  42A7      7588          clr.l     -(A7)
00004422  42A7      7589          clr.l     -(A7)
00004424  42A7      7590          clr.l     -(A7)
00004426  2F02      7591          move.l    D2,-(A7)
00004428  4EB8 328E 7592          jsr       _Decode6BitEA
0000442C  DEFC 0010 7593          add.w     #16,A7
                    7594   DisassembleInstruction_130:
                    7595   ; }
                    7596   ; /////////////////////////////////////////////////////////////////////////////////
                    7597   ; // if instruction is CMP, CMPA
                    7598   ; /////////////////////////////////////////////////////////////////////////////////
                    7599   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
00004430  2042      7600          move.l    D2,A0
00004432  3010      7601          move.w    (A0),D0
00004434  C07C F000 7602          and.w     #61440,D0
00004438  0C40 B000 7603          cmp.w     #45056,D0
0000443C  6600 008C 7604          bne       DisassembleInstruction_135
                    7605   ; {
                    7606   ; InstructionSize = 1;
00004440  24BC 0000 7607          move.l    #1,(A2)
00004444  0001      
                    7608   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004446  2042      7609          move.l    D2,A0
00004448  3010      7610          move.w    (A0),D0
0000444A  EC40      7611          asr.w     #6,D0
0000444C  C07C 0007 7612          and.w     #7,D0
00004450  3600      7613          move.w    D0,D3
                    7614   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
00004452  0C43 0003 7615          cmp.w     #3,D3
00004456  6708      7616          beq.s     DisassembleInstruction_136
00004458  0C43 0007 7617          cmp.w     #7,D3
0000445C  6600 005A 7618          bne       DisassembleInstruction_134
                    7619   DisassembleInstruction_136:
                    7620   ; if(OpMode == (unsigned short int)(0x0003))
00004460  0C43 0003 7621          cmp.w     #3,D3
00004464  660C      7622          bne.s     DisassembleInstruction_137
                    7623   ; strcpyInstruction("CMPA.W ") ;
00004466  4879 0000 7624          pea       @m68kde~3_314.L
0000446A  88AE      
0000446C  4E93      7625          jsr       (A3)
0000446E  584F      7626          addq.w    #4,A7
00004470  600A      7627          bra.s     DisassembleInstruction_138
                    7628   DisassembleInstruction_137:
                    7629   ; else
                    7630   ; strcpyInstruction("CMPA.L ") ;
00004472  4879 0000 7631          pea       @m68kde~3_315.L
00004476  88B6      
00004478  4E93      7632          jsr       (A3)
0000447A  584F      7633          addq.w    #4,A7
                    7634   DisassembleInstruction_138:
                    7635   ; Decode6BitEA(OpCode,0,0,0) ;
0000447C  42A7      7636          clr.l     -(A7)
0000447E  42A7      7637          clr.l     -(A7)
00004480  42A7      7638          clr.l     -(A7)
00004482  2F02      7639          move.l    D2,-(A7)
00004484  4EB8 328E 7640          jsr       _Decode6BitEA
00004488  DEFC 0010 7641          add.w     #16,A7
                    7642   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
0000448C  2042      7643          move.l    D2,A0
0000448E  3210      7644          move.w    (A0),D1
00004490  E041      7645          asr.w     #8,D1
00004492  E241      7646          asr.w     #1,D1
00004494  C27C 0007 7647          and.w     #7,D1
00004498  C2BC 0000 7648          and.l     #65535,D1
0000449C  FFFF      
0000449E  2F01      7649          move.l    D1,-(A7)
000044A0  4879 0000 7650          pea       @m68kde~3_316.L
000044A4  88BE      
000044A6  2F0C      7651          move.l    A4,-(A7)
000044A8  4E95      7652          jsr       (A5)
000044AA  DEFC 000C 7653          add.w     #12,A7
                    7654   ; strcatInstruction(TempString) ;
000044AE  2F0C      7655          move.l    A4,-(A7)
000044B0  4EB8 0CCC 7656          jsr       _strcatInstruction
000044B4  584F      7657          addq.w    #4,A7
000044B6  6012      7658          bra.s     DisassembleInstruction_135
                    7659   DisassembleInstruction_134:
                    7660   ; }
                    7661   ; else {
                    7662   ; strcpyInstruction("CMP") ;
000044B8  4879 0000 7663          pea       @m68kde~3_317.L
000044BC  88C4      
000044BE  4E93      7664          jsr       (A3)
000044C0  584F      7665          addq.w    #4,A7
                    7666   ; Decode3BitOperandMode(OpCode) ;
000044C2  2F02      7667          move.l    D2,-(A7)
000044C4  4EB8 36B6 7668          jsr       _Decode3BitOperandMode
000044C8  584F      7669          addq.w    #4,A7
                    7670   DisassembleInstruction_135:
                    7671   ; }
                    7672   ; }
                    7673   ; /////////////////////////////////////////////////////////////////////////////////
                    7674   ; // if instruction is CMPM
                    7675   ; /////////////////////////////////////////////////////////////////////////////////
                    7676   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
000044CA  2042      7677          move.l    D2,A0
000044CC  3010      7678          move.w    (A0),D0
000044CE  C07C F138 7679          and.w     #61752,D0
000044D2  0C40 B108 7680          cmp.w     #45320,D0
000044D6  6600 007A 7681          bne       DisassembleInstruction_141
                    7682   ; {
                    7683   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000044DA  2042      7684          move.l    D2,A0
000044DC  3010      7685          move.w    (A0),D0
000044DE  EC40      7686          asr.w     #6,D0
000044E0  C07C 0003 7687          and.w     #3,D0
000044E4  3600      7688          move.w    D0,D3
                    7689   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
000044E6  0C43 0000 7690          cmp.w     #0,D3
000044EA  6500 0066 7691          blo       DisassembleInstruction_141
000044EE  0C43 0002 7692          cmp.w     #2,D3
000044F2  6200 005E 7693          bhi       DisassembleInstruction_141
                    7694   ; {
                    7695   ; InstructionSize = 1;
000044F6  24BC 0000 7696          move.l    #1,(A2)
000044FA  0001      
                    7697   ; strcpyInstruction("CMPM") ;
000044FC  4879 0000 7698          pea       @m68kde~3_318.L
00004500  88C8      
00004502  4E93      7699          jsr       (A3)
00004504  584F      7700          addq.w    #4,A7
                    7701   ; Decode2BitOperandSize(*OpCode) ;
00004506  2042      7702          move.l    D2,A0
00004508  3210      7703          move.w    (A0),D1
0000450A  C2BC 0000 7704          and.l     #65535,D1
0000450E  FFFF      
00004510  2F01      7705          move.l    D1,-(A7)
00004512  4EB8 2FFA 7706          jsr       _Decode2BitOperandSize
00004516  584F      7707          addq.w    #4,A7
                    7708   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
00004518  2042      7709          move.l    D2,A0
0000451A  3210      7710          move.w    (A0),D1
0000451C  E041      7711          asr.w     #8,D1
0000451E  E241      7712          asr.w     #1,D1
00004520  C27C 0007 7713          and.w     #7,D1
00004524  C2BC 0000 7714          and.l     #65535,D1
00004528  FFFF      
0000452A  2F01      7715          move.l    D1,-(A7)
0000452C  2042      7716          move.l    D2,A0
0000452E  3210      7717          move.w    (A0),D1
00004530  C27C 0007 7718          and.w     #7,D1
00004534  C2BC 0000 7719          and.l     #65535,D1
00004538  FFFF      
0000453A  2F01      7720          move.l    D1,-(A7)
0000453C  4879 0000 7721          pea       @m68kde~3_319.L
00004540  88CE      
00004542  2F0C      7722          move.l    A4,-(A7)
00004544  4E95      7723          jsr       (A5)
00004546  DEFC 0010 7724          add.w     #16,A7
                    7725   ; strcatInstruction(TempString) ;
0000454A  2F0C      7726          move.l    A4,-(A7)
0000454C  4EB8 0CCC 7727          jsr       _strcatInstruction
00004550  584F      7728          addq.w    #4,A7
                    7729   DisassembleInstruction_141:
                    7730   ; }
                    7731   ; }
                    7732   ; /////////////////////////////////////////////////////////////////////////////////
                    7733   ; // if instruction is DBCC
                    7734   ; /////////////////////////////////////////////////////////////////////////////////
                    7735   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
00004552  2042      7736          move.l    D2,A0
00004554  3010      7737          move.w    (A0),D0
00004556  C07C F0F8 7738          and.w     #61688,D0
0000455A  0C40 50C8 7739          cmp.w     #20680,D0
0000455E  6600 0084 7740          bne       DisassembleInstruction_143
                    7741   ; {
                    7742   ; InstructionSize = 2;
00004562  24BC 0000 7743          move.l    #2,(A2)
00004566  0002      
                    7744   ; strcpy(Instruction,"DB") ;
00004568  4879 0000 7745          pea       @m68kde~3_320.L
0000456C  88DC      
0000456E  4879 0803 7746          pea       _Instruction.L
00004572  04E2      
00004574  4EB9 0000 7747          jsr       _strcpy
00004578  5744      
0000457A  504F      7748          addq.w    #8,A7
                    7749   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
0000457C  2042      7750          move.l    D2,A0
0000457E  3010      7751          move.w    (A0),D0
00004580  E040      7752          asr.w     #8,D0
00004582  C07C 000F 7753          and.w     #15,D0
00004586  1D40 FFE9 7754          move.b    D0,-23(A6)
                    7755   ; DecodeBranchCondition(Condition) ;
0000458A  122E FFE9 7756          move.b    -23(A6),D1
0000458E  C27C 00FF 7757          and.w     #255,D1
00004592  C2BC 0000 7758          and.l     #65535,D1
00004596  FFFF      
00004598  2F01      7759          move.l    D1,-(A7)
0000459A  4EB8 374C 7760          jsr       _DecodeBranchCondition
0000459E  584F      7761          addq.w    #4,A7
                    7762   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
000045A0  2202      7763          move.l    D2,D1
000045A2  2042      7764          move.l    D2,A0
000045A4  2F00      7765          move.l    D0,-(A7)
000045A6  3028 0002 7766          move.w    2(A0),D0
000045AA  48C0      7767          ext.l     D0
000045AC  D280      7768          add.l     D0,D1
000045AE  201F      7769          move.l    (A7)+,D0
000045B0  5481      7770          addq.l    #2,D1
000045B2  2F01      7771          move.l    D1,-(A7)
000045B4  2042      7772          move.l    D2,A0
000045B6  3228 0002 7773          move.w    2(A0),D1
000045BA  48C1      7774          ext.l     D1
000045BC  2F01      7775          move.l    D1,-(A7)
000045BE  2042      7776          move.l    D2,A0
000045C0  3210      7777          move.w    (A0),D1
000045C2  C27C 0007 7778          and.w     #7,D1
000045C6  C2BC 0000 7779          and.l     #65535,D1
000045CA  FFFF      
000045CC  2F01      7780          move.l    D1,-(A7)
000045CE  4879 0000 7781          pea       @m68kde~3_321.L
000045D2  88E0      
000045D4  2F0C      7782          move.l    A4,-(A7)
000045D6  4E95      7783          jsr       (A5)
000045D8  DEFC 0014 7784          add.w     #20,A7
                    7785   ; strcatInstruction(TempString) ;
000045DC  2F0C      7786          move.l    A4,-(A7)
000045DE  4EB8 0CCC 7787          jsr       _strcatInstruction
000045E2  584F      7788          addq.w    #4,A7
                    7789   DisassembleInstruction_143:
                    7790   ; }
                    7791   ; /////////////////////////////////////////////////////////////////////////////////
                    7792   ; // if instruction is DIVS
                    7793   ; /////////////////////////////////////////////////////////////////////////////////
                    7794   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
000045E4  2042      7795          move.l    D2,A0
000045E6  3010      7796          move.w    (A0),D0
000045E8  C07C F1C0 7797          and.w     #61888,D0
000045EC  0C40 81C0 7798          cmp.w     #33216,D0
000045F0  6600 004A 7799          bne       DisassembleInstruction_145
                    7800   ; {
                    7801   ; InstructionSize = 1;
000045F4  24BC 0000 7802          move.l    #1,(A2)
000045F8  0001      
                    7803   ; strcpy(Instruction,"DIVS ") ;
000045FA  4879 0000 7804          pea       @m68kde~3_322.L
000045FE  88F8      
00004600  4879 0803 7805          pea       _Instruction.L
00004604  04E2      
00004606  4EB9 0000 7806          jsr       _strcpy
0000460A  5744      
0000460C  504F      7807          addq.w    #8,A7
                    7808   ; Decode6BitEA(OpCode,0,0,0) ;
0000460E  42A7      7809          clr.l     -(A7)
00004610  42A7      7810          clr.l     -(A7)
00004612  42A7      7811          clr.l     -(A7)
00004614  2F02      7812          move.l    D2,-(A7)
00004616  4EB8 328E 7813          jsr       _Decode6BitEA
0000461A  DEFC 0010 7814          add.w     #16,A7
                    7815   ; strcatInstruction(",") ;
0000461E  4879 0000 7816          pea       @m68kde~3_323.L
00004622  88FE      
00004624  4EB8 0CCC 7817          jsr       _strcatInstruction
00004628  584F      7818          addq.w    #4,A7
                    7819   ; Decode3BitDataRegister(*OpCode) ;
0000462A  2042      7820          move.l    D2,A0
0000462C  3210      7821          move.w    (A0),D1
0000462E  C2BC 0000 7822          and.l     #65535,D1
00004632  FFFF      
00004634  2F01      7823          move.l    D1,-(A7)
00004636  4EB8 3056 7824          jsr       _Decode3BitDataRegister
0000463A  584F      7825          addq.w    #4,A7
                    7826   DisassembleInstruction_145:
                    7827   ; }
                    7828   ; /////////////////////////////////////////////////////////////////////////////////
                    7829   ; // if instruction is DIVU
                    7830   ; /////////////////////////////////////////////////////////////////////////////////
                    7831   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
0000463C  2042      7832          move.l    D2,A0
0000463E  3010      7833          move.w    (A0),D0
00004640  C07C F1C0 7834          and.w     #61888,D0
00004644  0C40 80C0 7835          cmp.w     #32960,D0
00004648  6600 004A 7836          bne       DisassembleInstruction_147
                    7837   ; {
                    7838   ; InstructionSize = 1;
0000464C  24BC 0000 7839          move.l    #1,(A2)
00004650  0001      
                    7840   ; strcpy(Instruction,"DIVU ") ;
00004652  4879 0000 7841          pea       @m68kde~3_324.L
00004656  8900      
00004658  4879 0803 7842          pea       _Instruction.L
0000465C  04E2      
0000465E  4EB9 0000 7843          jsr       _strcpy
00004662  5744      
00004664  504F      7844          addq.w    #8,A7
                    7845   ; Decode6BitEA(OpCode,0,0,0) ;
00004666  42A7      7846          clr.l     -(A7)
00004668  42A7      7847          clr.l     -(A7)
0000466A  42A7      7848          clr.l     -(A7)
0000466C  2F02      7849          move.l    D2,-(A7)
0000466E  4EB8 328E 7850          jsr       _Decode6BitEA
00004672  DEFC 0010 7851          add.w     #16,A7
                    7852   ; strcatInstruction(",") ;
00004676  4879 0000 7853          pea       @m68kde~3_325.L
0000467A  8906      
0000467C  4EB8 0CCC 7854          jsr       _strcatInstruction
00004680  584F      7855          addq.w    #4,A7
                    7856   ; Decode3BitDataRegister(*OpCode) ;
00004682  2042      7857          move.l    D2,A0
00004684  3210      7858          move.w    (A0),D1
00004686  C2BC 0000 7859          and.l     #65535,D1
0000468A  FFFF      
0000468C  2F01      7860          move.l    D1,-(A7)
0000468E  4EB8 3056 7861          jsr       _Decode3BitDataRegister
00004692  584F      7862          addq.w    #4,A7
                    7863   DisassembleInstruction_147:
                    7864   ; }
                    7865   ; /////////////////////////////////////////////////////////////////////////////////
                    7866   ; // if instruction is EOR
                    7867   ; /////////////////////////////////////////////////////////////////////////////////
                    7868   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
00004694  2042      7869          move.l    D2,A0
00004696  3010      7870          move.w    (A0),D0
00004698  C07C F000 7871          and.w     #61440,D0
0000469C  0C40 B000 7872          cmp.w     #45056,D0
000046A0  6600 004A 7873          bne       DisassembleInstruction_151
                    7874   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000046A4  2042      7875          move.l    D2,A0
000046A6  3010      7876          move.w    (A0),D0
000046A8  EC40      7877          asr.w     #6,D0
000046AA  C07C 0007 7878          and.w     #7,D0
000046AE  3600      7879          move.w    D0,D3
                    7880   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
000046B0  2042      7881          move.l    D2,A0
000046B2  3010      7882          move.w    (A0),D0
000046B4  E640      7883          asr.w     #3,D0
000046B6  C07C 0007 7884          and.w     #7,D0
000046BA  3D40 FFEC 7885          move.w    D0,-20(A6)
                    7886   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
000046BE  0C43 0004 7887          cmp.w     #4,D3
000046C2  6528      7888          blo.s     DisassembleInstruction_151
000046C4  0C43 0006 7889          cmp.w     #6,D3
000046C8  6222      7890          bhi.s     DisassembleInstruction_151
000046CA  302E FFEC 7891          move.w    -20(A6),D0
000046CE  0C40 0001 7892          cmp.w     #1,D0
000046D2  6718      7893          beq.s     DisassembleInstruction_151
                    7894   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    7895   ; (EAMode != (unsigned short int)(0x0001)))
                    7896   ; {
                    7897   ; InstructionSize = 1;
000046D4  24BC 0000 7898          move.l    #1,(A2)
000046D8  0001      
                    7899   ; strcpyInstruction("EOR") ;
000046DA  4879 0000 7900          pea       @m68kde~3_326.L
000046DE  8908      
000046E0  4E93      7901          jsr       (A3)
000046E2  584F      7902          addq.w    #4,A7
                    7903   ; Decode3BitOperandMode(OpCode);
000046E4  2F02      7904          move.l    D2,-(A7)
000046E6  4EB8 36B6 7905          jsr       _Decode3BitOperandMode
000046EA  584F      7906          addq.w    #4,A7
                    7907   DisassembleInstruction_151:
                    7908   ; }
                    7909   ; }
                    7910   ; /////////////////////////////////////////////////////////////////////////////////
                    7911   ; // if instruction is EOR to CCR
                    7912   ; /////////////////////////////////////////////////////////////////////////////////
                    7913   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
000046EC  2042      7914          move.l    D2,A0
000046EE  3010      7915          move.w    (A0),D0
000046F0  0C40 0A3C 7916          cmp.w     #2620,D0
000046F4  662C      7917          bne.s     DisassembleInstruction_153
                    7918   ; InstructionSize = 1;
000046F6  24BC 0000 7919          move.l    #1,(A2)
000046FA  0001      
                    7920   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
000046FC  2042      7921          move.l    D2,A0
000046FE  3228 0002 7922          move.w    2(A0),D1
00004702  C27C 00FF 7923          and.w     #255,D1
00004706  C2BC 0000 7924          and.l     #65535,D1
0000470A  FFFF      
0000470C  2F01      7925          move.l    D1,-(A7)
0000470E  4879 0000 7926          pea       @m68kde~3_327.L
00004712  890C      
00004714  4879 0803 7927          pea       _Instruction.L
00004718  04E2      
0000471A  4E95      7928          jsr       (A5)
0000471C  DEFC 000C 7929          add.w     #12,A7
                    7930   ; InstructionSize += 1;
00004720  5292      7931          addq.l    #1,(A2)
                    7932   DisassembleInstruction_153:
                    7933   ; }
                    7934   ; /////////////////////////////////////////////////////////////////////////////////
                    7935   ; // if instruction is EORI #data,SR
                    7936   ; /////////////////////////////////////////////////////////////////////////////////
                    7937   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
00004722  2042      7938          move.l    D2,A0
00004724  3010      7939          move.w    (A0),D0
00004726  0C40 0A7C 7940          cmp.w     #2684,D0
0000472A  6622      7941          bne.s     DisassembleInstruction_155
                    7942   ; InstructionSize = 2;
0000472C  24BC 0000 7943          move.l    #2,(A2)
00004730  0002      
                    7944   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
00004732  2042      7945          move.l    D2,A0
00004734  3228 0002 7946          move.w    2(A0),D1
00004738  48C1      7947          ext.l     D1
0000473A  2F01      7948          move.l    D1,-(A7)
0000473C  4879 0000 7949          pea       @m68kde~3_328.L
00004740  891C      
00004742  4879 0803 7950          pea       _Instruction.L
00004746  04E2      
00004748  4E95      7951          jsr       (A5)
0000474A  DEFC 000C 7952          add.w     #12,A7
                    7953   DisassembleInstruction_155:
                    7954   ; }
                    7955   ; /////////////////////////////////////////////////////////////////////////////////
                    7956   ; // if instruction is EXG
                    7957   ; /////////////////////////////////////////////////////////////////////////////////
                    7958   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
0000474E  2042      7959          move.l    D2,A0
00004750  3010      7960          move.w    (A0),D0
00004752  C07C F100 7961          and.w     #61696,D0
00004756  0C40 C100 7962          cmp.w     #49408,D0
0000475A  6600 00E0 7963          bne       DisassembleInstruction_163
                    7964   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
0000475E  2042      7965          move.l    D2,A0
00004760  3010      7966          move.w    (A0),D0
00004762  E040      7967          asr.w     #8,D0
00004764  E240      7968          asr.w     #1,D0
00004766  C07C 0007 7969          and.w     #7,D0
0000476A  3D40 FFF0 7970          move.w    D0,-16(A6)
                    7971   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
0000476E  2042      7972          move.l    D2,A0
00004770  3010      7973          move.w    (A0),D0
00004772  C07C 0007 7974          and.w     #7,D0
00004776  3D40 FFF2 7975          move.w    D0,-14(A6)
                    7976   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
0000477A  2042      7977          move.l    D2,A0
0000477C  3010      7978          move.w    (A0),D0
0000477E  E640      7979          asr.w     #3,D0
00004780  C07C 001F 7980          and.w     #31,D0
00004784  3D40 FFF4 7981          move.w    D0,-12(A6)
                    7982   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
00004788  302E FFF4 7983          move.w    -12(A6),D0
0000478C  0C40 0008 7984          cmp.w     #8,D0
00004790  6634      7985          bne.s     DisassembleInstruction_159
                    7986   ; InstructionSize = 1;
00004792  24BC 0000 7987          move.l    #1,(A2)
00004796  0001      
                    7988   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
00004798  322E FFF2 7989          move.w    -14(A6),D1
0000479C  C2BC 0000 7990          and.l     #65535,D1
000047A0  FFFF      
000047A2  2F01      7991          move.l    D1,-(A7)
000047A4  322E FFF0 7992          move.w    -16(A6),D1
000047A8  C2BC 0000 7993          and.l     #65535,D1
000047AC  FFFF      
000047AE  2F01      7994          move.l    D1,-(A7)
000047B0  4879 0000 7995          pea       @m68kde~3_329.L
000047B4  892A      
000047B6  4879 0803 7996          pea       _Instruction.L
000047BA  04E2      
000047BC  4E95      7997          jsr       (A5)
000047BE  DEFC 0010 7998          add.w     #16,A7
000047C2  6000 0078 7999          bra       DisassembleInstruction_163
                    8000   DisassembleInstruction_159:
                    8001   ; }
                    8002   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
000047C6  302E FFF4 8003          move.w    -12(A6),D0
000047CA  0C40 0009 8004          cmp.w     #9,D0
000047CE  6632      8005          bne.s     DisassembleInstruction_161
                    8006   ; InstructionSize = 1;
000047D0  24BC 0000 8007          move.l    #1,(A2)
000047D4  0001      
                    8008   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
000047D6  322E FFF2 8009          move.w    -14(A6),D1
000047DA  C2BC 0000 8010          and.l     #65535,D1
000047DE  FFFF      
000047E0  2F01      8011          move.l    D1,-(A7)
000047E2  322E FFF0 8012          move.w    -16(A6),D1
000047E6  C2BC 0000 8013          and.l     #65535,D1
000047EA  FFFF      
000047EC  2F01      8014          move.l    D1,-(A7)
000047EE  4879 0000 8015          pea       @m68kde~3_330.L
000047F2  8936      
000047F4  4879 0803 8016          pea       _Instruction.L
000047F8  04E2      
000047FA  4E95      8017          jsr       (A5)
000047FC  DEFC 0010 8018          add.w     #16,A7
00004800  603A      8019          bra.s     DisassembleInstruction_163
                    8020   DisassembleInstruction_161:
                    8021   ; }
                    8022   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
00004802  302E FFF4 8023          move.w    -12(A6),D0
00004806  0C40 0011 8024          cmp.w     #17,D0
0000480A  6630      8025          bne.s     DisassembleInstruction_163
                    8026   ; InstructionSize = 1;
0000480C  24BC 0000 8027          move.l    #1,(A2)
00004810  0001      
                    8028   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
00004812  322E FFF2 8029          move.w    -14(A6),D1
00004816  C2BC 0000 8030          and.l     #65535,D1
0000481A  FFFF      
0000481C  2F01      8031          move.l    D1,-(A7)
0000481E  322E FFF0 8032          move.w    -16(A6),D1
00004822  C2BC 0000 8033          and.l     #65535,D1
00004826  FFFF      
00004828  2F01      8034          move.l    D1,-(A7)
0000482A  4879 0000 8035          pea       @m68kde~3_331.L
0000482E  8942      
00004830  4879 0803 8036          pea       _Instruction.L
00004834  04E2      
00004836  4E95      8037          jsr       (A5)
00004838  DEFC 0010 8038          add.w     #16,A7
                    8039   DisassembleInstruction_163:
                    8040   ; }
                    8041   ; }
                    8042   ; /////////////////////////////////////////////////////////////////////////////////
                    8043   ; // if instruction is EXT
                    8044   ; /////////////////////////////////////////////////////////////////////////////////
                    8045   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
0000483C  2042      8046          move.l    D2,A0
0000483E  3010      8047          move.w    (A0),D0
00004840  C07C FE38 8048          and.w     #65080,D0
00004844  0C40 4800 8049          cmp.w     #18432,D0
00004848  6600 0054 8050          bne       DisassembleInstruction_165
                    8051   ; {
                    8052   ; InstructionSize = 1;
0000484C  24BC 0000 8053          move.l    #1,(A2)
00004850  0001      
                    8054   ; strcpy(Instruction,"EXT") ;
00004852  4879 0000 8055          pea       @m68kde~3_332.L
00004856  894E      
00004858  4879 0803 8056          pea       _Instruction.L
0000485C  04E2      
0000485E  4EB9 0000 8057          jsr       _strcpy
00004862  5744      
00004864  504F      8058          addq.w    #8,A7
                    8059   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
00004866  2042      8060          move.l    D2,A0
00004868  3010      8061          move.w    (A0),D0
0000486A  C07C 00C0 8062          and.w     #192,D0
0000486E  0C40 00C0 8063          cmp.w     #192,D0
00004872  660E      8064          bne.s     DisassembleInstruction_167
                    8065   ; strcatInstruction(".L ") ;
00004874  4879 0000 8066          pea       @m68kde~3_333.L
00004878  8952      
0000487A  4EB8 0CCC 8067          jsr       _strcatInstruction
0000487E  584F      8068          addq.w    #4,A7
00004880  600C      8069          bra.s     DisassembleInstruction_168
                    8070   DisassembleInstruction_167:
                    8071   ; else
                    8072   ; strcatInstruction(".W ") ;
00004882  4879 0000 8073          pea       @m68kde~3_334.L
00004886  8956      
00004888  4EB8 0CCC 8074          jsr       _strcatInstruction
0000488C  584F      8075          addq.w    #4,A7
                    8076   DisassembleInstruction_168:
                    8077   ; Decode6BitEA(OpCode,0,0,0) ;
0000488E  42A7      8078          clr.l     -(A7)
00004890  42A7      8079          clr.l     -(A7)
00004892  42A7      8080          clr.l     -(A7)
00004894  2F02      8081          move.l    D2,-(A7)
00004896  4EB8 328E 8082          jsr       _Decode6BitEA
0000489A  DEFC 0010 8083          add.w     #16,A7
                    8084   DisassembleInstruction_165:
                    8085   ; }
                    8086   ; /////////////////////////////////////////////////////////////////////////////////
                    8087   ; // if instruction is ILLEGAL $4afc
                    8088   ; /////////////////////////////////////////////////////////////////////////////////
                    8089   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
0000489E  2042      8090          move.l    D2,A0
000048A0  3010      8091          move.w    (A0),D0
000048A2  0C40 4AFC 8092          cmp.w     #19196,D0
000048A6  661A      8093          bne.s     DisassembleInstruction_169
                    8094   ; InstructionSize = 1;
000048A8  24BC 0000 8095          move.l    #1,(A2)
000048AC  0001      
                    8096   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
000048AE  4879 0000 8097          pea       @m68kde~3_335.L
000048B2  895A      
000048B4  4879 0803 8098          pea       _Instruction.L
000048B8  04E2      
000048BA  4EB9 0000 8099          jsr       _strcpy
000048BE  5744      
000048C0  504F      8100          addq.w    #8,A7
                    8101   DisassembleInstruction_169:
                    8102   ; }
                    8103   ; /////////////////////////////////////////////////////////////////////////////////
                    8104   ; // if instruction is JMP
                    8105   ; /////////////////////////////////////////////////////////////////////////////////
                    8106   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
000048C2  2042      8107          move.l    D2,A0
000048C4  3010      8108          move.w    (A0),D0
000048C6  C07C FFC0 8109          and.w     #65472,D0
000048CA  0C40 4EC0 8110          cmp.w     #20160,D0
000048CE  662A      8111          bne.s     DisassembleInstruction_171
                    8112   ; {
                    8113   ; InstructionSize = 1;
000048D0  24BC 0000 8114          move.l    #1,(A2)
000048D4  0001      
                    8115   ; strcpy(Instruction,"JMP ") ;
000048D6  4879 0000 8116          pea       @m68kde~3_336.L
000048DA  896A      
000048DC  4879 0803 8117          pea       _Instruction.L
000048E0  04E2      
000048E2  4EB9 0000 8118          jsr       _strcpy
000048E6  5744      
000048E8  504F      8119          addq.w    #8,A7
                    8120   ; Decode6BitEA(OpCode,0,0,0) ;
000048EA  42A7      8121          clr.l     -(A7)
000048EC  42A7      8122          clr.l     -(A7)
000048EE  42A7      8123          clr.l     -(A7)
000048F0  2F02      8124          move.l    D2,-(A7)
000048F2  4EB8 328E 8125          jsr       _Decode6BitEA
000048F6  DEFC 0010 8126          add.w     #16,A7
                    8127   DisassembleInstruction_171:
                    8128   ; }
                    8129   ; /////////////////////////////////////////////////////////////////////////////////
                    8130   ; // if instruction is JSR
                    8131   ; /////////////////////////////////////////////////////////////////////////////////
                    8132   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
000048FA  2042      8133          move.l    D2,A0
000048FC  3010      8134          move.w    (A0),D0
000048FE  C07C FFC0 8135          and.w     #65472,D0
00004902  0C40 4E80 8136          cmp.w     #20096,D0
00004906  662A      8137          bne.s     DisassembleInstruction_173
                    8138   ; {
                    8139   ; InstructionSize = 1;
00004908  24BC 0000 8140          move.l    #1,(A2)
0000490C  0001      
                    8141   ; strcpy(Instruction,"JSR ") ;
0000490E  4879 0000 8142          pea       @m68kde~3_337.L
00004912  8970      
00004914  4879 0803 8143          pea       _Instruction.L
00004918  04E2      
0000491A  4EB9 0000 8144          jsr       _strcpy
0000491E  5744      
00004920  504F      8145          addq.w    #8,A7
                    8146   ; Decode6BitEA(OpCode,0,0,0) ;
00004922  42A7      8147          clr.l     -(A7)
00004924  42A7      8148          clr.l     -(A7)
00004926  42A7      8149          clr.l     -(A7)
00004928  2F02      8150          move.l    D2,-(A7)
0000492A  4EB8 328E 8151          jsr       _Decode6BitEA
0000492E  DEFC 0010 8152          add.w     #16,A7
                    8153   DisassembleInstruction_173:
                    8154   ; }
                    8155   ; /////////////////////////////////////////////////////////////////////////////////
                    8156   ; // if instruction is LEA
                    8157   ; /////////////////////////////////////////////////////////////////////////////////
                    8158   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
00004932  2042      8159          move.l    D2,A0
00004934  3010      8160          move.w    (A0),D0
00004936  C07C F1C0 8161          and.w     #61888,D0
0000493A  0C40 41C0 8162          cmp.w     #16832,D0
0000493E  6600 0056 8163          bne       DisassembleInstruction_175
                    8164   ; {
                    8165   ; InstructionSize = 1;
00004942  24BC 0000 8166          move.l    #1,(A2)
00004946  0001      
                    8167   ; strcpy(Instruction,"LEA ") ;
00004948  4879 0000 8168          pea       @m68kde~3_338.L
0000494C  8976      
0000494E  4879 0803 8169          pea       _Instruction.L
00004952  04E2      
00004954  4EB9 0000 8170          jsr       _strcpy
00004958  5744      
0000495A  504F      8171          addq.w    #8,A7
                    8172   ; Decode6BitEA(OpCode,0,0,0) ;
0000495C  42A7      8173          clr.l     -(A7)
0000495E  42A7      8174          clr.l     -(A7)
00004960  42A7      8175          clr.l     -(A7)
00004962  2F02      8176          move.l    D2,-(A7)
00004964  4EB8 328E 8177          jsr       _Decode6BitEA
00004968  DEFC 0010 8178          add.w     #16,A7
                    8179   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
0000496C  2042      8180          move.l    D2,A0
0000496E  3210      8181          move.w    (A0),D1
00004970  E041      8182          asr.w     #8,D1
00004972  E241      8183          asr.w     #1,D1
00004974  C27C 0007 8184          and.w     #7,D1
00004978  C2BC 0000 8185          and.l     #65535,D1
0000497C  FFFF      
0000497E  2F01      8186          move.l    D1,-(A7)
00004980  4879 0000 8187          pea       @m68kde~3_339.L
00004984  897C      
00004986  2F0C      8188          move.l    A4,-(A7)
00004988  4E95      8189          jsr       (A5)
0000498A  DEFC 000C 8190          add.w     #12,A7
                    8191   ; strcatInstruction(TempString);
0000498E  2F0C      8192          move.l    A4,-(A7)
00004990  4EB8 0CCC 8193          jsr       _strcatInstruction
00004994  584F      8194          addq.w    #4,A7
                    8195   DisassembleInstruction_175:
                    8196   ; }
                    8197   ; /////////////////////////////////////////////////////////////////////////////////
                    8198   ; // if instruction is LINK.W
                    8199   ; /////////////////////////////////////////////////////////////////////////////////
                    8200   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
00004996  2042      8201          move.l    D2,A0
00004998  3010      8202          move.w    (A0),D0
0000499A  C07C FFF8 8203          and.w     #65528,D0
0000499E  0C40 4E50 8204          cmp.w     #20048,D0
000049A2  6600 0052 8205          bne       DisassembleInstruction_177
                    8206   ; {
                    8207   ; InstructionSize = 1;
000049A6  24BC 0000 8208          move.l    #1,(A2)
000049AA  0001      
                    8209   ; strcpy(Instruction,"LINK ") ;
000049AC  4879 0000 8210          pea       @m68kde~3_340.L
000049B0  8982      
000049B2  4879 0803 8211          pea       _Instruction.L
000049B6  04E2      
000049B8  4EB9 0000 8212          jsr       _strcpy
000049BC  5744      
000049BE  504F      8213          addq.w    #8,A7
                    8214   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
000049C0  2042      8215          move.l    D2,A0
000049C2  3228 0002 8216          move.w    2(A0),D1
000049C6  48C1      8217          ext.l     D1
000049C8  2F01      8218          move.l    D1,-(A7)
000049CA  2042      8219          move.l    D2,A0
000049CC  3210      8220          move.w    (A0),D1
000049CE  C27C 0007 8221          and.w     #7,D1
000049D2  C2BC 0000 8222          and.l     #65535,D1
000049D6  FFFF      
000049D8  2F01      8223          move.l    D1,-(A7)
000049DA  4879 0000 8224          pea       @m68kde~3_341.L
000049DE  8988      
000049E0  2F0C      8225          move.l    A4,-(A7)
000049E2  4E95      8226          jsr       (A5)
000049E4  DEFC 0010 8227          add.w     #16,A7
                    8228   ; InstructionSize = 2 ;
000049E8  24BC 0000 8229          move.l    #2,(A2)
000049EC  0002      
                    8230   ; strcatInstruction(TempString);
000049EE  2F0C      8231          move.l    A4,-(A7)
000049F0  4EB8 0CCC 8232          jsr       _strcatInstruction
000049F4  584F      8233          addq.w    #4,A7
                    8234   DisassembleInstruction_177:
                    8235   ; }
                    8236   ; /////////////////////////////////////////////////////////////////////////////////
                    8237   ; // if instruction is MOVE, MOVEA
                    8238   ; /////////////////////////////////////////////////////////////////////////////////
                    8239   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
000049F6  2042      8240          move.l    D2,A0
000049F8  3010      8241          move.w    (A0),D0
000049FA  C07C C000 8242          and.w     #49152,D0
000049FE  6600 00F0 8243          bne       DisassembleInstruction_193
                    8244   ; {
                    8245   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
00004A02  2042      8246          move.l    D2,A0
00004A04  3010      8247          move.w    (A0),D0
00004A06  C07C 3000 8248          and.w     #12288,D0
00004A0A  E048      8249          lsr.w     #8,D0
00004A0C  E848      8250          lsr.w     #4,D0
00004A0E  3D40 FFE2 8251          move.w    D0,-30(A6)
                    8252   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
00004A12  2042      8253          move.l    D2,A0
00004A14  3010      8254          move.w    (A0),D0
00004A16  E640      8255          asr.w     #3,D0
00004A18  C07C 0007 8256          and.w     #7,D0
00004A1C  3600      8257          move.w    D0,D3
                    8258   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
00004A1E  2042      8259          move.l    D2,A0
00004A20  3010      8260          move.w    (A0),D0
00004A22  C07C 0007 8261          and.w     #7,D0
00004A26  3D40 FFF6 8262          move.w    D0,-10(A6)
                    8263   ; DataSize = 0 ;
00004A2A  7E00      8264          moveq     #0,D7
                    8265   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    8266   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
00004A2C  0C43 0005 8267          cmp.w     #5,D3
00004A30  6706      8268          beq.s     DisassembleInstruction_183
00004A32  0C43 0006 8269          cmp.w     #6,D3
00004A36  6602      8270          bne.s     DisassembleInstruction_181
                    8271   DisassembleInstruction_183:
                    8272   ; DataSize = 1;  // source operands has 1 word after EA
00004A38  7E01      8273          moveq     #1,D7
                    8274   DisassembleInstruction_181:
                    8275   ; // if source addressing mode is a 16 or 32 bit address
                    8276   ; if((OpMode == (unsigned short int)(0x0007))) {
00004A3A  0C43 0007 8277          cmp.w     #7,D3
00004A3E  660C      8278          bne.s     DisassembleInstruction_187
                    8279   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
00004A40  302E FFF6 8280          move.w    -10(A6),D0
00004A44  6604      8281          bne.s     DisassembleInstruction_186
                    8282   ; DataSize = 1 ;
00004A46  7E01      8283          moveq     #1,D7
00004A48  6002      8284          bra.s     DisassembleInstruction_187
                    8285   DisassembleInstruction_186:
                    8286   ; else
                    8287   ; DataSize = 2 ;
00004A4A  7E02      8288          moveq     #2,D7
                    8289   DisassembleInstruction_187:
                    8290   ; }
                    8291   ; // if source addressing mode is # then figure out size
                    8292   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
00004A4C  0C43 0007 8293          cmp.w     #7,D3
00004A50  6624      8294          bne.s     DisassembleInstruction_191
00004A52  302E FFF6 8295          move.w    -10(A6),D0
00004A56  0C40 0004 8296          cmp.w     #4,D0
00004A5A  661A      8297          bne.s     DisassembleInstruction_191
                    8298   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
00004A5C  302E FFE2 8299          move.w    -30(A6),D0
00004A60  0C40 0001 8300          cmp.w     #1,D0
00004A64  670A      8301          beq.s     DisassembleInstruction_192
00004A66  302E FFE2 8302          move.w    -30(A6),D0
00004A6A  0C40 0003 8303          cmp.w     #3,D0
00004A6E  6604      8304          bne.s     DisassembleInstruction_190
                    8305   DisassembleInstruction_192:
                    8306   ; DataSize = 1;
00004A70  7E01      8307          moveq     #1,D7
00004A72  6002      8308          bra.s     DisassembleInstruction_191
                    8309   DisassembleInstruction_190:
                    8310   ; else
                    8311   ; DataSize = 2 ;
00004A74  7E02      8312          moveq     #2,D7
                    8313   DisassembleInstruction_191:
                    8314   ; //printf("DataSize = %d",DataSize) ;
                    8315   ; }
                    8316   ; if(Size != 0)
00004A76  302E FFE2 8317          move.w    -30(A6),D0
00004A7A  6700 0074 8318          beq       DisassembleInstruction_193
                    8319   ; {
                    8320   ; InstructionSize = 1;
00004A7E  24BC 0000 8321          move.l    #1,(A2)
00004A82  0001      
                    8322   ; if(Size == 1)
00004A84  302E FFE2 8323          move.w    -30(A6),D0
00004A88  0C40 0001 8324          cmp.w     #1,D0
00004A8C  660C      8325          bne.s     DisassembleInstruction_195
                    8326   ; strcpyInstruction("MOVE.B ") ;
00004A8E  4879 0000 8327          pea       @m68kde~3_342.L
00004A92  8990      
00004A94  4E93      8328          jsr       (A3)
00004A96  584F      8329          addq.w    #4,A7
00004A98  6020      8330          bra.s     DisassembleInstruction_198
                    8331   DisassembleInstruction_195:
                    8332   ; else if(Size == 2)
00004A9A  302E FFE2 8333          move.w    -30(A6),D0
00004A9E  0C40 0002 8334          cmp.w     #2,D0
00004AA2  660C      8335          bne.s     DisassembleInstruction_197
                    8336   ; strcpyInstruction("MOVE.L ") ;
00004AA4  4879 0000 8337          pea       @m68kde~3_343.L
00004AA8  8998      
00004AAA  4E93      8338          jsr       (A3)
00004AAC  584F      8339          addq.w    #4,A7
00004AAE  600A      8340          bra.s     DisassembleInstruction_198
                    8341   DisassembleInstruction_197:
                    8342   ; else
                    8343   ; strcpyInstruction("MOVE.W ") ;
00004AB0  4879 0000 8344          pea       @m68kde~3_344.L
00004AB4  89A0      
00004AB6  4E93      8345          jsr       (A3)
00004AB8  584F      8346          addq.w    #4,A7
                    8347   DisassembleInstruction_198:
                    8348   ; Decode6BitEA(OpCode,0,0,1) ;
00004ABA  4878 0001 8349          pea       1
00004ABE  42A7      8350          clr.l     -(A7)
00004AC0  42A7      8351          clr.l     -(A7)
00004AC2  2F02      8352          move.l    D2,-(A7)
00004AC4  4EB8 328E 8353          jsr       _Decode6BitEA
00004AC8  DEFC 0010 8354          add.w     #16,A7
                    8355   ; strcatInstruction(",") ;
00004ACC  4879 0000 8356          pea       @m68kde~3_345.L
00004AD0  89A8      
00004AD2  4EB8 0CCC 8357          jsr       _strcatInstruction
00004AD6  584F      8358          addq.w    #4,A7
                    8359   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    8360   ; // but subtract 1 to make the maths correct in the called function
                    8361   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
00004AD8  42A7      8362          clr.l     -(A7)
00004ADA  CEBC 0000 8363          and.l     #65535,D7
00004ADE  FFFF      
00004AE0  2F07      8364          move.l    D7,-(A7)
00004AE2  4878 0002 8365          pea       2
00004AE6  2F02      8366          move.l    D2,-(A7)
00004AE8  4EB8 328E 8367          jsr       _Decode6BitEA
00004AEC  DEFC 0010 8368          add.w     #16,A7
                    8369   DisassembleInstruction_193:
                    8370   ; }
                    8371   ; }
                    8372   ; /////////////////////////////////////////////////////////////////////////////////
                    8373   ; // if instruction is MOVE <EA>,CCR
                    8374   ; /////////////////////////////////////////////////////////////////////////////////
                    8375   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
00004AF0  2042      8376          move.l    D2,A0
00004AF2  3010      8377          move.w    (A0),D0
00004AF4  C07C FFC0 8378          and.w     #65472,D0
00004AF8  0C40 44C0 8379          cmp.w     #17600,D0
00004AFC  6636      8380          bne.s     DisassembleInstruction_199
                    8381   ; {
                    8382   ; InstructionSize = 1;
00004AFE  24BC 0000 8383          move.l    #1,(A2)
00004B02  0001      
                    8384   ; strcpy(Instruction,"MOVE ") ;
00004B04  4879 0000 8385          pea       @m68kde~3_346.L
00004B08  89AA      
00004B0A  4879 0803 8386          pea       _Instruction.L
00004B0E  04E2      
00004B10  4EB9 0000 8387          jsr       _strcpy
00004B14  5744      
00004B16  504F      8388          addq.w    #8,A7
                    8389   ; Decode6BitEA(OpCode,0,0,0) ;
00004B18  42A7      8390          clr.l     -(A7)
00004B1A  42A7      8391          clr.l     -(A7)
00004B1C  42A7      8392          clr.l     -(A7)
00004B1E  2F02      8393          move.l    D2,-(A7)
00004B20  4EB8 328E 8394          jsr       _Decode6BitEA
00004B24  DEFC 0010 8395          add.w     #16,A7
                    8396   ; strcatInstruction(",CCR") ;
00004B28  4879 0000 8397          pea       @m68kde~3_347.L
00004B2C  89B0      
00004B2E  4EB8 0CCC 8398          jsr       _strcatInstruction
00004B32  584F      8399          addq.w    #4,A7
                    8400   DisassembleInstruction_199:
                    8401   ; }
                    8402   ; /////////////////////////////////////////////////////////////////////////////////
                    8403   ; // if instruction is MOVE SR,<EA>
                    8404   ; /////////////////////////////////////////////////////////////////////////////////
                    8405   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
00004B34  2042      8406          move.l    D2,A0
00004B36  3010      8407          move.w    (A0),D0
00004B38  C07C FFC0 8408          and.w     #65472,D0
00004B3C  0C40 40C0 8409          cmp.w     #16576,D0
00004B40  662A      8410          bne.s     DisassembleInstruction_201
                    8411   ; {
                    8412   ; InstructionSize = 1;
00004B42  24BC 0000 8413          move.l    #1,(A2)
00004B46  0001      
                    8414   ; strcpy(Instruction,"MOVE SR,") ;
00004B48  4879 0000 8415          pea       @m68kde~3_348.L
00004B4C  89B6      
00004B4E  4879 0803 8416          pea       _Instruction.L
00004B52  04E2      
00004B54  4EB9 0000 8417          jsr       _strcpy
00004B58  5744      
00004B5A  504F      8418          addq.w    #8,A7
                    8419   ; Decode6BitEA(OpCode,0,0,0) ;
00004B5C  42A7      8420          clr.l     -(A7)
00004B5E  42A7      8421          clr.l     -(A7)
00004B60  42A7      8422          clr.l     -(A7)
00004B62  2F02      8423          move.l    D2,-(A7)
00004B64  4EB8 328E 8424          jsr       _Decode6BitEA
00004B68  DEFC 0010 8425          add.w     #16,A7
                    8426   DisassembleInstruction_201:
                    8427   ; }
                    8428   ; /////////////////////////////////////////////////////////////////////////////////
                    8429   ; // if instruction is MOVE <EA>,SR
                    8430   ; /////////////////////////////////////////////////////////////////////////////////
                    8431   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
00004B6C  2042      8432          move.l    D2,A0
00004B6E  3010      8433          move.w    (A0),D0
00004B70  C07C FFC0 8434          and.w     #65472,D0
00004B74  0C40 46C0 8435          cmp.w     #18112,D0
00004B78  6636      8436          bne.s     DisassembleInstruction_203
                    8437   ; {
                    8438   ; InstructionSize = 1;
00004B7A  24BC 0000 8439          move.l    #1,(A2)
00004B7E  0001      
                    8440   ; strcpy(Instruction,"MOVE ") ;
00004B80  4879 0000 8441          pea       @m68kde~3_349.L
00004B84  89C0      
00004B86  4879 0803 8442          pea       _Instruction.L
00004B8A  04E2      
00004B8C  4EB9 0000 8443          jsr       _strcpy
00004B90  5744      
00004B92  504F      8444          addq.w    #8,A7
                    8445   ; Decode6BitEA(OpCode,0,0,0) ;
00004B94  42A7      8446          clr.l     -(A7)
00004B96  42A7      8447          clr.l     -(A7)
00004B98  42A7      8448          clr.l     -(A7)
00004B9A  2F02      8449          move.l    D2,-(A7)
00004B9C  4EB8 328E 8450          jsr       _Decode6BitEA
00004BA0  DEFC 0010 8451          add.w     #16,A7
                    8452   ; strcatInstruction(",SR") ;
00004BA4  4879 0000 8453          pea       @m68kde~3_350.L
00004BA8  89C6      
00004BAA  4EB8 0CCC 8454          jsr       _strcatInstruction
00004BAE  584F      8455          addq.w    #4,A7
                    8456   DisassembleInstruction_203:
                    8457   ; }
                    8458   ; /////////////////////////////////////////////////////////////////////////////////
                    8459   ; // if instruction is MOVE USP,An
                    8460   ; /////////////////////////////////////////////////////////////////////////////////
                    8461   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
00004BB0  2042      8462          move.l    D2,A0
00004BB2  3010      8463          move.w    (A0),D0
00004BB4  C07C FFF0 8464          and.w     #65520,D0
00004BB8  0C40 4E60 8465          cmp.w     #20064,D0
00004BBC  6600 0060 8466          bne       DisassembleInstruction_208
                    8467   ; {
                    8468   ; InstructionSize = 1;
00004BC0  24BC 0000 8469          move.l    #1,(A2)
00004BC4  0001      
                    8470   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
00004BC6  2042      8471          move.l    D2,A0
00004BC8  3010      8472          move.w    (A0),D0
00004BCA  C07C 0007 8473          and.w     #7,D0
00004BCE  3D40 FFEA 8474          move.w    D0,-22(A6)
                    8475   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
00004BD2  2042      8476          move.l    D2,A0
00004BD4  3010      8477          move.w    (A0),D0
00004BD6  C07C 0008 8478          and.w     #8,D0
00004BDA  0C40 0008 8479          cmp.w     #8,D0
00004BDE  6620      8480          bne.s     DisassembleInstruction_207
                    8481   ; sprintf(Instruction, "MOVE USP,A%d", Register);
00004BE0  322E FFEA 8482          move.w    -22(A6),D1
00004BE4  C2BC 0000 8483          and.l     #65535,D1
00004BE8  FFFF      
00004BEA  2F01      8484          move.l    D1,-(A7)
00004BEC  4879 0000 8485          pea       @m68kde~3_351.L
00004BF0  89CA      
00004BF2  4879 0803 8486          pea       _Instruction.L
00004BF6  04E2      
00004BF8  4E95      8487          jsr       (A5)
00004BFA  DEFC 000C 8488          add.w     #12,A7
00004BFE  601E      8489          bra.s     DisassembleInstruction_208
                    8490   DisassembleInstruction_207:
                    8491   ; else
                    8492   ; sprintf(Instruction, "MOVE A%d,USP", Register);
00004C00  322E FFEA 8493          move.w    -22(A6),D1
00004C04  C2BC 0000 8494          and.l     #65535,D1
00004C08  FFFF      
00004C0A  2F01      8495          move.l    D1,-(A7)
00004C0C  4879 0000 8496          pea       @m68kde~3_352.L
00004C10  89D8      
00004C12  4879 0803 8497          pea       _Instruction.L
00004C16  04E2      
00004C18  4E95      8498          jsr       (A5)
00004C1A  DEFC 000C 8499          add.w     #12,A7
                    8500   DisassembleInstruction_208:
                    8501   ; }
                    8502   ; /////////////////////////////////////////////////////////////////////////////////
                    8503   ; // if instruction is MOVEM
                    8504   ; /////////////////////////////////////////////////////////////////////////////////
                    8505   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
00004C1E  2042      8506          move.l    D2,A0
00004C20  3010      8507          move.w    (A0),D0
00004C22  C07C FB80 8508          and.w     #64384,D0
00004C26  0C40 4880 8509          cmp.w     #18560,D0
00004C2A  6600 01FC 8510          bne       DisassembleInstruction_230
                    8511   ; {
                    8512   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
00004C2E  2042      8513          move.l    D2,A0
00004C30  3010      8514          move.w    (A0),D0
00004C32  E640      8515          asr.w     #3,D0
00004C34  C07C 0007 8516          and.w     #7,D0
00004C38  3600      8517          move.w    D0,D3
                    8518   ; if( (OpMode != (unsigned short int)(0x0)) &&
00004C3A  4A43      8519          tst.w     D3
00004C3C  6700 01EA 8520          beq       DisassembleInstruction_230
00004C40  0C43 0001 8521          cmp.w     #1,D3
00004C44  6700 01E2 8522          beq       DisassembleInstruction_230
00004C48  4A43      8523          tst.w     D3
00004C4A  6700 01DC 8524          beq       DisassembleInstruction_230
                    8525   ; (OpMode != (unsigned short int)(0x1)) &&
                    8526   ; (OpMode != (unsigned short int)(0x0)))
                    8527   ; {
                    8528   ; InstructionSize = 1;
00004C4E  24BC 0000 8529          move.l    #1,(A2)
00004C52  0001      
                    8530   ; strcpy(Instruction,"MOVEM") ;
00004C54  4879 0000 8531          pea       @m68kde~3_353.L
00004C58  89E6      
00004C5A  4879 0803 8532          pea       _Instruction.L
00004C5E  04E2      
00004C60  4EB9 0000 8533          jsr       _strcpy
00004C64  5744      
00004C66  504F      8534          addq.w    #8,A7
                    8535   ; InstructionSize ++ ;
00004C68  5292      8536          addq.l    #1,(A2)
                    8537   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
00004C6A  2042      8538          move.l    D2,A0
00004C6C  3010      8539          move.w    (A0),D0
00004C6E  C07C 0040 8540          and.w     #64,D0
00004C72  660E      8541          bne.s     DisassembleInstruction_213
                    8542   ; strcatInstruction(".W ") ;
00004C74  4879 0000 8543          pea       @m68kde~3_354.L
00004C78  89EC      
00004C7A  4EB8 0CCC 8544          jsr       _strcatInstruction
00004C7E  584F      8545          addq.w    #4,A7
00004C80  600C      8546          bra.s     DisassembleInstruction_214
                    8547   DisassembleInstruction_213:
                    8548   ; else
                    8549   ; strcatInstruction(".L ") ;
00004C82  4879 0000 8550          pea       @m68kde~3_355.L
00004C86  89F0      
00004C88  4EB8 0CCC 8551          jsr       _strcatInstruction
00004C8C  584F      8552          addq.w    #4,A7
                    8553   DisassembleInstruction_214:
                    8554   ; // movem  reg,-(An) if bit 10 = 0
                    8555   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
00004C8E  2042      8556          move.l    D2,A0
00004C90  3010      8557          move.w    (A0),D0
00004C92  C07C 0400 8558          and.w     #1024,D0
00004C96  6600 00D2 8559          bne       DisassembleInstruction_215
                    8560   ; {
                    8561   ; Mask = 0x8000 ;                     // bit 15 = 1
00004C9A  3D7C 8000 8562          move.w    #32768,-2(A6)
00004C9E  FFFE      
                    8563   ; DoneSlash = 0 ;
00004CA0  4246      8564          clr.w     D6
                    8565   ; for(i = 0; i < 16; i ++)    {
00004CA2  4284      8566          clr.l     D4
                    8567   DisassembleInstruction_217:
00004CA4  0C84 0000 8568          cmp.l     #16,D4
00004CA8  0010      
00004CAA  6C00 009E 8569          bge       DisassembleInstruction_219
                    8570   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
00004CAE  4879 0000 8571          pea       @m68kde~3_356.L
00004CB2  89F4      
00004CB4  4EB9 0000 8572          jsr       _printf
00004CB8  5972      
00004CBA  584F      8573          addq.w    #4,A7
                    8574   ; if((OpCode[1] & Mask) == Mask)    {
00004CBC  2042      8575          move.l    D2,A0
00004CBE  3028 0002 8576          move.w    2(A0),D0
00004CC2  C06E FFFE 8577          and.w     -2(A6),D0
00004CC6  B06E FFFE 8578          cmp.w     -2(A6),D0
00004CCA  6600 006E 8579          bne       DisassembleInstruction_220
                    8580   ; if(i < 8 )  {
00004CCE  0C84 0000 8581          cmp.l     #8,D4
00004CD2  0008      
00004CD4  6C2C      8582          bge.s     DisassembleInstruction_222
                    8583   ; if(DoneSlash == 0)  {
00004CD6  4A46      8584          tst.w     D6
00004CD8  6614      8585          bne.s     DisassembleInstruction_224
                    8586   ; sprintf(TempString, "D%d", i) ;
00004CDA  2F04      8587          move.l    D4,-(A7)
00004CDC  4879 0000 8588          pea       @m68kde~3_357.L
00004CE0  89F6      
00004CE2  2F0C      8589          move.l    A4,-(A7)
00004CE4  4E95      8590          jsr       (A5)
00004CE6  DEFC 000C 8591          add.w     #12,A7
                    8592   ; DoneSlash = 1;
00004CEA  7C01      8593          moveq     #1,D6
00004CEC  6010      8594          bra.s     DisassembleInstruction_225
                    8595   DisassembleInstruction_224:
                    8596   ; }
                    8597   ; else
                    8598   ; sprintf(TempString, "/D%d", i) ;
00004CEE  2F04      8599          move.l    D4,-(A7)
00004CF0  4879 0000 8600          pea       @m68kde~3_358.L
00004CF4  89FA      
00004CF6  2F0C      8601          move.l    A4,-(A7)
00004CF8  4E95      8602          jsr       (A5)
00004CFA  DEFC 000C 8603          add.w     #12,A7
                    8604   DisassembleInstruction_225:
00004CFE  6000 0032 8605          bra       DisassembleInstruction_227
                    8606   DisassembleInstruction_222:
                    8607   ; }
                    8608   ; else   {
                    8609   ; if(DoneSlash == 0)  {
00004D02  4A46      8610          tst.w     D6
00004D04  6618      8611          bne.s     DisassembleInstruction_226
                    8612   ; sprintf(TempString, "A%d", i-8) ;
00004D06  2204      8613          move.l    D4,D1
00004D08  5181      8614          subq.l    #8,D1
00004D0A  2F01      8615          move.l    D1,-(A7)
00004D0C  4879 0000 8616          pea       @m68kde~3_359.L
00004D10  8A00      
00004D12  2F0C      8617          move.l    A4,-(A7)
00004D14  4E95      8618          jsr       (A5)
00004D16  DEFC 000C 8619          add.w     #12,A7
                    8620   ; DoneSlash = 1;
00004D1A  7C01      8621          moveq     #1,D6
00004D1C  6014      8622          bra.s     DisassembleInstruction_227
                    8623   DisassembleInstruction_226:
                    8624   ; }
                    8625   ; else
                    8626   ; sprintf(TempString, "/A%d", i-8) ;
00004D1E  2204      8627          move.l    D4,D1
00004D20  5181      8628          subq.l    #8,D1
00004D22  2F01      8629          move.l    D1,-(A7)
00004D24  4879 0000 8630          pea       @m68kde~3_360.L
00004D28  8A04      
00004D2A  2F0C      8631          move.l    A4,-(A7)
00004D2C  4E95      8632          jsr       (A5)
00004D2E  DEFC 000C 8633          add.w     #12,A7
                    8634   DisassembleInstruction_227:
                    8635   ; }
                    8636   ; strcatInstruction(TempString) ;
00004D32  2F0C      8637          move.l    A4,-(A7)
00004D34  4EB8 0CCC 8638          jsr       _strcatInstruction
00004D38  584F      8639          addq.w    #4,A7
                    8640   DisassembleInstruction_220:
                    8641   ; }
                    8642   ; Mask = Mask >> 1 ;
00004D3A  302E FFFE 8643          move.w    -2(A6),D0
00004D3E  E240      8644          asr.w     #1,D0
00004D40  3D40 FFFE 8645          move.w    D0,-2(A6)
00004D44  5284      8646          addq.l    #1,D4
00004D46  6000 FF5C 8647          bra       DisassembleInstruction_217
                    8648   DisassembleInstruction_219:
                    8649   ; }
                    8650   ; strcatInstruction(",") ;
00004D4A  4879 0000 8651          pea       @m68kde~3_361.L
00004D4E  8A0A      
00004D50  4EB8 0CCC 8652          jsr       _strcatInstruction
00004D54  584F      8653          addq.w    #4,A7
                    8654   ; Decode6BitEA(OpCode,0,0,0) ;
00004D56  42A7      8655          clr.l     -(A7)
00004D58  42A7      8656          clr.l     -(A7)
00004D5A  42A7      8657          clr.l     -(A7)
00004D5C  2F02      8658          move.l    D2,-(A7)
00004D5E  4EB8 328E 8659          jsr       _Decode6BitEA
00004D62  DEFC 0010 8660          add.w     #16,A7
00004D66  6000 00C0 8661          bra       DisassembleInstruction_230
                    8662   DisassembleInstruction_215:
                    8663   ; }
                    8664   ; //movem  (An)+,reg
                    8665   ; else    {
                    8666   ; Decode6BitEA(OpCode,0,0,0) ;
00004D6A  42A7      8667          clr.l     -(A7)
00004D6C  42A7      8668          clr.l     -(A7)
00004D6E  42A7      8669          clr.l     -(A7)
00004D70  2F02      8670          move.l    D2,-(A7)
00004D72  4EB8 328E 8671          jsr       _Decode6BitEA
00004D76  DEFC 0010 8672          add.w     #16,A7
                    8673   ; strcatInstruction(",") ;
00004D7A  4879 0000 8674          pea       @m68kde~3_362.L
00004D7E  8A0C      
00004D80  4EB8 0CCC 8675          jsr       _strcatInstruction
00004D84  584F      8676          addq.w    #4,A7
                    8677   ; Mask = 0x0001 ;                     // bit 0 = 1
00004D86  3D7C 0001 8678          move.w    #1,-2(A6)
00004D8A  FFFE      
                    8679   ; DoneSlash = 0 ;
00004D8C  4246      8680          clr.w     D6
                    8681   ; for(i = 0; i < 16 ; i ++)    {
00004D8E  4284      8682          clr.l     D4
                    8683   DisassembleInstruction_228:
00004D90  0C84 0000 8684          cmp.l     #16,D4
00004D94  0010      
00004D96  6C00 0090 8685          bge       DisassembleInstruction_230
                    8686   ; if((OpCode[1] & Mask) == Mask)    {
00004D9A  2042      8687          move.l    D2,A0
00004D9C  3028 0002 8688          move.w    2(A0),D0
00004DA0  C06E FFFE 8689          and.w     -2(A6),D0
00004DA4  B06E FFFE 8690          cmp.w     -2(A6),D0
00004DA8  6600 006E 8691          bne       DisassembleInstruction_231
                    8692   ; if(i < 8)   {       // data registers in bits 7-0
00004DAC  0C84 0000 8693          cmp.l     #8,D4
00004DB0  0008      
00004DB2  6C2C      8694          bge.s     DisassembleInstruction_233
                    8695   ; if(DoneSlash == 0)  {
00004DB4  4A46      8696          tst.w     D6
00004DB6  6614      8697          bne.s     DisassembleInstruction_235
                    8698   ; sprintf(TempString, "D%d", i) ;
00004DB8  2F04      8699          move.l    D4,-(A7)
00004DBA  4879 0000 8700          pea       @m68kde~3_363.L
00004DBE  8A0E      
00004DC0  2F0C      8701          move.l    A4,-(A7)
00004DC2  4E95      8702          jsr       (A5)
00004DC4  DEFC 000C 8703          add.w     #12,A7
                    8704   ; DoneSlash = 1;
00004DC8  7C01      8705          moveq     #1,D6
00004DCA  6010      8706          bra.s     DisassembleInstruction_236
                    8707   DisassembleInstruction_235:
                    8708   ; }
                    8709   ; else
                    8710   ; sprintf(TempString, "/D%d", i) ;
00004DCC  2F04      8711          move.l    D4,-(A7)
00004DCE  4879 0000 8712          pea       @m68kde~3_364.L
00004DD2  8A12      
00004DD4  2F0C      8713          move.l    A4,-(A7)
00004DD6  4E95      8714          jsr       (A5)
00004DD8  DEFC 000C 8715          add.w     #12,A7
                    8716   DisassembleInstruction_236:
00004DDC  6000 0032 8717          bra       DisassembleInstruction_238
                    8718   DisassembleInstruction_233:
                    8719   ; }
                    8720   ; else    {
                    8721   ; if(DoneSlash == 0)  {
00004DE0  4A46      8722          tst.w     D6
00004DE2  6618      8723          bne.s     DisassembleInstruction_237
                    8724   ; sprintf(TempString, "A%d", i-8) ;
00004DE4  2204      8725          move.l    D4,D1
00004DE6  5181      8726          subq.l    #8,D1
00004DE8  2F01      8727          move.l    D1,-(A7)
00004DEA  4879 0000 8728          pea       @m68kde~3_365.L
00004DEE  8A18      
00004DF0  2F0C      8729          move.l    A4,-(A7)
00004DF2  4E95      8730          jsr       (A5)
00004DF4  DEFC 000C 8731          add.w     #12,A7
                    8732   ; DoneSlash = 1;
00004DF8  7C01      8733          moveq     #1,D6
00004DFA  6014      8734          bra.s     DisassembleInstruction_238
                    8735   DisassembleInstruction_237:
                    8736   ; }
                    8737   ; else
                    8738   ; sprintf(TempString, "/A%d", i-8) ;
00004DFC  2204      8739          move.l    D4,D1
00004DFE  5181      8740          subq.l    #8,D1
00004E00  2F01      8741          move.l    D1,-(A7)
00004E02  4879 0000 8742          pea       @m68kde~3_366.L
00004E06  8A1C      
00004E08  2F0C      8743          move.l    A4,-(A7)
00004E0A  4E95      8744          jsr       (A5)
00004E0C  DEFC 000C 8745          add.w     #12,A7
                    8746   DisassembleInstruction_238:
                    8747   ; }
                    8748   ; strcatInstruction(TempString) ;
00004E10  2F0C      8749          move.l    A4,-(A7)
00004E12  4EB8 0CCC 8750          jsr       _strcatInstruction
00004E16  584F      8751          addq.w    #4,A7
                    8752   DisassembleInstruction_231:
                    8753   ; }
                    8754   ; Mask = Mask << 1 ;
00004E18  302E FFFE 8755          move.w    -2(A6),D0
00004E1C  E340      8756          asl.w     #1,D0
00004E1E  3D40 FFFE 8757          move.w    D0,-2(A6)
00004E22  5284      8758          addq.l    #1,D4
00004E24  6000 FF6A 8759          bra       DisassembleInstruction_228
                    8760   DisassembleInstruction_230:
                    8761   ; }
                    8762   ; }
                    8763   ; }
                    8764   ; }
                    8765   ; /////////////////////////////////////////////////////////////////////////////////
                    8766   ; // if instruction is MOVEP
                    8767   ; /////////////////////////////////////////////////////////////////////////////////
                    8768   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00004E28  2042      8769          move.l    D2,A0
00004E2A  3010      8770          move.w    (A0),D0
00004E2C  C07C F038 8771          and.w     #61496,D0
00004E30  0C40 0008 8772          cmp.w     #8,D0
00004E34  6600 0112 8773          bne       DisassembleInstruction_247
                    8774   ; {
                    8775   ; InstructionSize = 1;
00004E38  24BC 0000 8776          move.l    #1,(A2)
00004E3C  0001      
                    8777   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004E3E  2042      8778          move.l    D2,A0
00004E40  3010      8779          move.w    (A0),D0
00004E42  E040      8780          asr.w     #8,D0
00004E44  E240      8781          asr.w     #1,D0
00004E46  C07C 0007 8782          and.w     #7,D0
00004E4A  3A00      8783          move.w    D0,D5
                    8784   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
00004E4C  2042      8785          move.l    D2,A0
00004E4E  3010      8786          move.w    (A0),D0
00004E50  C07C 0007 8787          and.w     #7,D0
00004E54  3D40 FFF8 8788          move.w    D0,-8(A6)
                    8789   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00004E58  2042      8790          move.l    D2,A0
00004E5A  3010      8791          move.w    (A0),D0
00004E5C  EC40      8792          asr.w     #6,D0
00004E5E  C07C 0007 8793          and.w     #7,D0
00004E62  3600      8794          move.w    D0,D3
                    8795   ; InstructionSize++ ;
00004E64  5292      8796          addq.l    #1,(A2)
                    8797   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00004E66  0C43 0004 8798          cmp.w     #4,D3
00004E6A  6634      8799          bne.s     DisassembleInstruction_241
                    8800   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004E6C  CABC 0000 8801          and.l     #65535,D5
00004E70  FFFF      
00004E72  2F05      8802          move.l    D5,-(A7)
00004E74  322E FFF8 8803          move.w    -8(A6),D1
00004E78  C2BC 0000 8804          and.l     #65535,D1
00004E7C  FFFF      
00004E7E  2F01      8805          move.l    D1,-(A7)
00004E80  2042      8806          move.l    D2,A0
00004E82  3228 0002 8807          move.w    2(A0),D1
00004E86  48C1      8808          ext.l     D1
00004E88  2F01      8809          move.l    D1,-(A7)
00004E8A  4879 0000 8810          pea       @m68kde~3_367.L
00004E8E  8A22      
00004E90  4879 0803 8811          pea       _Instruction.L
00004E94  04E2      
00004E96  4E95      8812          jsr       (A5)
00004E98  DEFC 0014 8813          add.w     #20,A7
00004E9C  6000 00AA 8814          bra       DisassembleInstruction_247
                    8815   DisassembleInstruction_241:
                    8816   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
00004EA0  0C43 0005 8817          cmp.w     #5,D3
00004EA4  6634      8818          bne.s     DisassembleInstruction_243
                    8819   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004EA6  CABC 0000 8820          and.l     #65535,D5
00004EAA  FFFF      
00004EAC  2F05      8821          move.l    D5,-(A7)
00004EAE  322E FFF8 8822          move.w    -8(A6),D1
00004EB2  C2BC 0000 8823          and.l     #65535,D1
00004EB6  FFFF      
00004EB8  2F01      8824          move.l    D1,-(A7)
00004EBA  2042      8825          move.l    D2,A0
00004EBC  3228 0002 8826          move.w    2(A0),D1
00004EC0  48C1      8827          ext.l     D1
00004EC2  2F01      8828          move.l    D1,-(A7)
00004EC4  4879 0000 8829          pea       @m68kde~3_368.L
00004EC8  8A38      
00004ECA  4879 0803 8830          pea       _Instruction.L
00004ECE  04E2      
00004ED0  4E95      8831          jsr       (A5)
00004ED2  DEFC 0014 8832          add.w     #20,A7
00004ED6  6000 0070 8833          bra       DisassembleInstruction_247
                    8834   DisassembleInstruction_243:
                    8835   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
00004EDA  0C43 0006 8836          cmp.w     #6,D3
00004EDE  6632      8837          bne.s     DisassembleInstruction_245
                    8838   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004EE0  322E FFF8 8839          move.w    -8(A6),D1
00004EE4  C2BC 0000 8840          and.l     #65535,D1
00004EE8  FFFF      
00004EEA  2F01      8841          move.l    D1,-(A7)
00004EEC  2042      8842          move.l    D2,A0
00004EEE  3228 0002 8843          move.w    2(A0),D1
00004EF2  48C1      8844          ext.l     D1
00004EF4  2F01      8845          move.l    D1,-(A7)
00004EF6  CABC 0000 8846          and.l     #65535,D5
00004EFA  FFFF      
00004EFC  2F05      8847          move.l    D5,-(A7)
00004EFE  4879 0000 8848          pea       @m68kde~3_369.L
00004F02  8A4E      
00004F04  4879 0803 8849          pea       _Instruction.L
00004F08  04E2      
00004F0A  4E95      8850          jsr       (A5)
00004F0C  DEFC 0014 8851          add.w     #20,A7
00004F10  6036      8852          bra.s     DisassembleInstruction_247
                    8853   DisassembleInstruction_245:
                    8854   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
00004F12  0C43 0007 8855          cmp.w     #7,D3
00004F16  6630      8856          bne.s     DisassembleInstruction_247
                    8857   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004F18  322E FFF8 8858          move.w    -8(A6),D1
00004F1C  C2BC 0000 8859          and.l     #65535,D1
00004F20  FFFF      
00004F22  2F01      8860          move.l    D1,-(A7)
00004F24  2042      8861          move.l    D2,A0
00004F26  3228 0002 8862          move.w    2(A0),D1
00004F2A  48C1      8863          ext.l     D1
00004F2C  2F01      8864          move.l    D1,-(A7)
00004F2E  CABC 0000 8865          and.l     #65535,D5
00004F32  FFFF      
00004F34  2F05      8866          move.l    D5,-(A7)
00004F36  4879 0000 8867          pea       @m68kde~3_370.L
00004F3A  8A64      
00004F3C  4879 0803 8868          pea       _Instruction.L
00004F40  04E2      
00004F42  4E95      8869          jsr       (A5)
00004F44  DEFC 0014 8870          add.w     #20,A7
                    8871   DisassembleInstruction_247:
                    8872   ; }
                    8873   ; /////////////////////////////////////////////////////////////////////////////////
                    8874   ; // if instruction is MOVEQ
                    8875   ; /////////////////////////////////////////////////////////////////////////////////
                    8876   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
00004F48  2042      8877          move.l    D2,A0
00004F4A  3010      8878          move.w    (A0),D0
00004F4C  C07C F100 8879          and.w     #61696,D0
00004F50  0C40 7000 8880          cmp.w     #28672,D0
00004F54  6600 0040 8881          bne       DisassembleInstruction_249
                    8882   ; {
                    8883   ; InstructionSize = 1;
00004F58  24BC 0000 8884          move.l    #1,(A2)
00004F5C  0001      
                    8885   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
00004F5E  2042      8886          move.l    D2,A0
00004F60  3010      8887          move.w    (A0),D0
00004F62  E040      8888          asr.w     #8,D0
00004F64  E240      8889          asr.w     #1,D0
00004F66  C07C 0007 8890          and.w     #7,D0
00004F6A  3A00      8891          move.w    D0,D5
                    8892   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
00004F6C  CABC 0000 8893          and.l     #65535,D5
00004F70  FFFF      
00004F72  2F05      8894          move.l    D5,-(A7)
00004F74  2042      8895          move.l    D2,A0
00004F76  3210      8896          move.w    (A0),D1
00004F78  C27C 00FF 8897          and.w     #255,D1
00004F7C  C2BC 0000 8898          and.l     #65535,D1
00004F80  FFFF      
00004F82  2F01      8899          move.l    D1,-(A7)
00004F84  4879 0000 8900          pea       @m68kde~3_371.L
00004F88  8A7A      
00004F8A  4879 0803 8901          pea       _Instruction.L
00004F8E  04E2      
00004F90  4E95      8902          jsr       (A5)
00004F92  DEFC 0010 8903          add.w     #16,A7
                    8904   DisassembleInstruction_249:
                    8905   ; }
                    8906   ; /////////////////////////////////////////////////////////////////////////////////
                    8907   ; // if instruction is MULS.W
                    8908   ; /////////////////////////////////////////////////////////////////////////////////
                    8909   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
00004F96  2042      8910          move.l    D2,A0
00004F98  3010      8911          move.w    (A0),D0
00004F9A  C07C F1C0 8912          and.w     #61888,D0
00004F9E  0C40 C1C0 8913          cmp.w     #49600,D0
00004FA2  6600 004E 8914          bne       DisassembleInstruction_251
                    8915   ; {
                    8916   ; InstructionSize = 1;
00004FA6  24BC 0000 8917          move.l    #1,(A2)
00004FAA  0001      
                    8918   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004FAC  2042      8919          move.l    D2,A0
00004FAE  3010      8920          move.w    (A0),D0
00004FB0  E040      8921          asr.w     #8,D0
00004FB2  E240      8922          asr.w     #1,D0
00004FB4  C07C 0007 8923          and.w     #7,D0
00004FB8  3A00      8924          move.w    D0,D5
                    8925   ; strcpyInstruction("MULS ");
00004FBA  4879 0000 8926          pea       @m68kde~3_372.L
00004FBE  8A8A      
00004FC0  4E93      8927          jsr       (A3)
00004FC2  584F      8928          addq.w    #4,A7
                    8929   ; Decode6BitEA(OpCode,0,0,0) ;
00004FC4  42A7      8930          clr.l     -(A7)
00004FC6  42A7      8931          clr.l     -(A7)
00004FC8  42A7      8932          clr.l     -(A7)
00004FCA  2F02      8933          move.l    D2,-(A7)
00004FCC  4EB8 328E 8934          jsr       _Decode6BitEA
00004FD0  DEFC 0010 8935          add.w     #16,A7
                    8936   ; sprintf(TempString, ",D%d", DataRegister) ;
00004FD4  CABC 0000 8937          and.l     #65535,D5
00004FD8  FFFF      
00004FDA  2F05      8938          move.l    D5,-(A7)
00004FDC  4879 0000 8939          pea       @m68kde~3_373.L
00004FE0  8A90      
00004FE2  2F0C      8940          move.l    A4,-(A7)
00004FE4  4E95      8941          jsr       (A5)
00004FE6  DEFC 000C 8942          add.w     #12,A7
                    8943   ; strcatInstruction(TempString);
00004FEA  2F0C      8944          move.l    A4,-(A7)
00004FEC  4EB8 0CCC 8945          jsr       _strcatInstruction
00004FF0  584F      8946          addq.w    #4,A7
                    8947   DisassembleInstruction_251:
                    8948   ; }
                    8949   ; /////////////////////////////////////////////////////////////////////////////////
                    8950   ; // if instruction is MULU.W
                    8951   ; /////////////////////////////////////////////////////////////////////////////////
                    8952   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
00004FF2  2042      8953          move.l    D2,A0
00004FF4  3010      8954          move.w    (A0),D0
00004FF6  C07C F1C0 8955          and.w     #61888,D0
00004FFA  0C40 C0C0 8956          cmp.w     #49344,D0
00004FFE  6600 004E 8957          bne       DisassembleInstruction_253
                    8958   ; {
                    8959   ; InstructionSize = 1;
00005002  24BC 0000 8960          move.l    #1,(A2)
00005006  0001      
                    8961   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00005008  2042      8962          move.l    D2,A0
0000500A  3010      8963          move.w    (A0),D0
0000500C  E040      8964          asr.w     #8,D0
0000500E  E240      8965          asr.w     #1,D0
00005010  C07C 0007 8966          and.w     #7,D0
00005014  3A00      8967          move.w    D0,D5
                    8968   ; strcpyInstruction("MULU ");
00005016  4879 0000 8969          pea       @m68kde~3_374.L
0000501A  8A96      
0000501C  4E93      8970          jsr       (A3)
0000501E  584F      8971          addq.w    #4,A7
                    8972   ; Decode6BitEA(OpCode,0,0,0) ;
00005020  42A7      8973          clr.l     -(A7)
00005022  42A7      8974          clr.l     -(A7)
00005024  42A7      8975          clr.l     -(A7)
00005026  2F02      8976          move.l    D2,-(A7)
00005028  4EB8 328E 8977          jsr       _Decode6BitEA
0000502C  DEFC 0010 8978          add.w     #16,A7
                    8979   ; sprintf(TempString, ",D%d", DataRegister) ;
00005030  CABC 0000 8980          and.l     #65535,D5
00005034  FFFF      
00005036  2F05      8981          move.l    D5,-(A7)
00005038  4879 0000 8982          pea       @m68kde~3_375.L
0000503C  8A9C      
0000503E  2F0C      8983          move.l    A4,-(A7)
00005040  4E95      8984          jsr       (A5)
00005042  DEFC 000C 8985          add.w     #12,A7
                    8986   ; strcatInstruction(TempString);
00005046  2F0C      8987          move.l    A4,-(A7)
00005048  4EB8 0CCC 8988          jsr       _strcatInstruction
0000504C  584F      8989          addq.w    #4,A7
                    8990   DisassembleInstruction_253:
                    8991   ; }
                    8992   ; /////////////////////////////////////////////////////////////////////////////////
                    8993   ; // if instruction is NBCD <EA>
                    8994   ; /////////////////////////////////////////////////////////////////////////////////
                    8995   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
0000504E  2042      8996          move.l    D2,A0
00005050  3010      8997          move.w    (A0),D0
00005052  C07C FFC0 8998          and.w     #65472,D0
00005056  0C40 4800 8999          cmp.w     #18432,D0
0000505A  6620      9000          bne.s     DisassembleInstruction_255
                    9001   ; {
                    9002   ; InstructionSize = 1;
0000505C  24BC 0000 9003          move.l    #1,(A2)
00005060  0001      
                    9004   ; strcpyInstruction("NBCD ");
00005062  4879 0000 9005          pea       @m68kde~3_376.L
00005066  8AA2      
00005068  4E93      9006          jsr       (A3)
0000506A  584F      9007          addq.w    #4,A7
                    9008   ; Decode6BitEA(OpCode,0,0,0);
0000506C  42A7      9009          clr.l     -(A7)
0000506E  42A7      9010          clr.l     -(A7)
00005070  42A7      9011          clr.l     -(A7)
00005072  2F02      9012          move.l    D2,-(A7)
00005074  4EB8 328E 9013          jsr       _Decode6BitEA
00005078  DEFC 0010 9014          add.w     #16,A7
                    9015   DisassembleInstruction_255:
                    9016   ; }
                    9017   ; /////////////////////////////////////////////////////////////////////////////////
                    9018   ; // if instruction is NEG <EA>
                    9019   ; /////////////////////////////////////////////////////////////////////////////////
                    9020   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
0000507C  2042      9021          move.l    D2,A0
0000507E  3010      9022          move.w    (A0),D0
00005080  C07C FF00 9023          and.w     #65280,D0
00005084  0C40 4400 9024          cmp.w     #17408,D0
00005088  6600 0046 9025          bne       DisassembleInstruction_259
                    9026   ; {
                    9027   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
0000508C  2042      9028          move.l    D2,A0
0000508E  3010      9029          move.w    (A0),D0
00005090  EC40      9030          asr.w     #6,D0
00005092  C07C 0003 9031          and.w     #3,D0
00005096  0C40 0003 9032          cmp.w     #3,D0
0000509A  6700 0034 9033          beq       DisassembleInstruction_259
                    9034   ; {
                    9035   ; InstructionSize = 1;
0000509E  24BC 0000 9036          move.l    #1,(A2)
000050A2  0001      
                    9037   ; strcpyInstruction("NEG");
000050A4  4879 0000 9038          pea       @m68kde~3_377.L
000050A8  8AA8      
000050AA  4E93      9039          jsr       (A3)
000050AC  584F      9040          addq.w    #4,A7
                    9041   ; Decode2BitOperandSize(*OpCode) ;
000050AE  2042      9042          move.l    D2,A0
000050B0  3210      9043          move.w    (A0),D1
000050B2  C2BC 0000 9044          and.l     #65535,D1
000050B6  FFFF      
000050B8  2F01      9045          move.l    D1,-(A7)
000050BA  4EB8 2FFA 9046          jsr       _Decode2BitOperandSize
000050BE  584F      9047          addq.w    #4,A7
                    9048   ; Decode6BitEA(OpCode,0,0,0);
000050C0  42A7      9049          clr.l     -(A7)
000050C2  42A7      9050          clr.l     -(A7)
000050C4  42A7      9051          clr.l     -(A7)
000050C6  2F02      9052          move.l    D2,-(A7)
000050C8  4EB8 328E 9053          jsr       _Decode6BitEA
000050CC  DEFC 0010 9054          add.w     #16,A7
                    9055   DisassembleInstruction_259:
                    9056   ; }
                    9057   ; }
                    9058   ; /////////////////////////////////////////////////////////////////////////////////
                    9059   ; // if instruction is NEGX <EA>
                    9060   ; /////////////////////////////////////////////////////////////////////////////////
                    9061   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
000050D0  2042      9062          move.l    D2,A0
000050D2  3010      9063          move.w    (A0),D0
000050D4  C07C FF00 9064          and.w     #65280,D0
000050D8  0C40 4000 9065          cmp.w     #16384,D0
000050DC  6600 0046 9066          bne       DisassembleInstruction_263
                    9067   ; {
                    9068   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
000050E0  2042      9069          move.l    D2,A0
000050E2  3010      9070          move.w    (A0),D0
000050E4  EC40      9071          asr.w     #6,D0
000050E6  C07C 0003 9072          and.w     #3,D0
000050EA  0C40 0003 9073          cmp.w     #3,D0
000050EE  6700 0034 9074          beq       DisassembleInstruction_263
                    9075   ; {
                    9076   ; InstructionSize = 1;
000050F2  24BC 0000 9077          move.l    #1,(A2)
000050F6  0001      
                    9078   ; strcpyInstruction("NEGX");
000050F8  4879 0000 9079          pea       @m68kde~3_378.L
000050FC  8AAC      
000050FE  4E93      9080          jsr       (A3)
00005100  584F      9081          addq.w    #4,A7
                    9082   ; Decode2BitOperandSize(*OpCode) ;
00005102  2042      9083          move.l    D2,A0
00005104  3210      9084          move.w    (A0),D1
00005106  C2BC 0000 9085          and.l     #65535,D1
0000510A  FFFF      
0000510C  2F01      9086          move.l    D1,-(A7)
0000510E  4EB8 2FFA 9087          jsr       _Decode2BitOperandSize
00005112  584F      9088          addq.w    #4,A7
                    9089   ; Decode6BitEA(OpCode,0,0,0);
00005114  42A7      9090          clr.l     -(A7)
00005116  42A7      9091          clr.l     -(A7)
00005118  42A7      9092          clr.l     -(A7)
0000511A  2F02      9093          move.l    D2,-(A7)
0000511C  4EB8 328E 9094          jsr       _Decode6BitEA
00005120  DEFC 0010 9095          add.w     #16,A7
                    9096   DisassembleInstruction_263:
                    9097   ; }
                    9098   ; }
                    9099   ; /////////////////////////////////////////////////////////////////////////////////
                    9100   ; // if instruction is NOP
                    9101   ; /////////////////////////////////////////////////////////////////////////////////
                    9102   ; if(*OpCode == (unsigned short int)(0x4E71))
00005124  2042      9103          move.l    D2,A0
00005126  3010      9104          move.w    (A0),D0
00005128  0C40 4E71 9105          cmp.w     #20081,D0
0000512C  6610      9106          bne.s     DisassembleInstruction_265
                    9107   ; {
                    9108   ; InstructionSize = 1;
0000512E  24BC 0000 9109          move.l    #1,(A2)
00005132  0001      
                    9110   ; strcpyInstruction("NOP");
00005134  4879 0000 9111          pea       @m68kde~3_379.L
00005138  8AB2      
0000513A  4E93      9112          jsr       (A3)
0000513C  584F      9113          addq.w    #4,A7
                    9114   DisassembleInstruction_265:
                    9115   ; }
                    9116   ; /////////////////////////////////////////////////////////////////////////////////
                    9117   ; // if instruction is NOT <EA>
                    9118   ; /////////////////////////////////////////////////////////////////////////////////
                    9119   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
0000513E  2042      9120          move.l    D2,A0
00005140  3010      9121          move.w    (A0),D0
00005142  C07C FF00 9122          and.w     #65280,D0
00005146  0C40 4600 9123          cmp.w     #17920,D0
0000514A  6600 0046 9124          bne       DisassembleInstruction_269
                    9125   ; {
                    9126   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
0000514E  2042      9127          move.l    D2,A0
00005150  3010      9128          move.w    (A0),D0
00005152  EC40      9129          asr.w     #6,D0
00005154  C07C 0003 9130          and.w     #3,D0
00005158  0C40 0003 9131          cmp.w     #3,D0
0000515C  6700 0034 9132          beq       DisassembleInstruction_269
                    9133   ; {
                    9134   ; InstructionSize = 1;
00005160  24BC 0000 9135          move.l    #1,(A2)
00005164  0001      
                    9136   ; strcpyInstruction("NOT");
00005166  4879 0000 9137          pea       @m68kde~3_380.L
0000516A  8AB6      
0000516C  4E93      9138          jsr       (A3)
0000516E  584F      9139          addq.w    #4,A7
                    9140   ; Decode2BitOperandSize(*OpCode) ;
00005170  2042      9141          move.l    D2,A0
00005172  3210      9142          move.w    (A0),D1
00005174  C2BC 0000 9143          and.l     #65535,D1
00005178  FFFF      
0000517A  2F01      9144          move.l    D1,-(A7)
0000517C  4EB8 2FFA 9145          jsr       _Decode2BitOperandSize
00005180  584F      9146          addq.w    #4,A7
                    9147   ; Decode6BitEA(OpCode,0,0,0);
00005182  42A7      9148          clr.l     -(A7)
00005184  42A7      9149          clr.l     -(A7)
00005186  42A7      9150          clr.l     -(A7)
00005188  2F02      9151          move.l    D2,-(A7)
0000518A  4EB8 328E 9152          jsr       _Decode6BitEA
0000518E  DEFC 0010 9153          add.w     #16,A7
                    9154   DisassembleInstruction_269:
                    9155   ; }
                    9156   ; }
                    9157   ; /////////////////////////////////////////////////////////////////////////////////
                    9158   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    9159   ; /////////////////////////////////////////////////////////////////////////////////
                    9160   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
00005192  2042      9161          move.l    D2,A0
00005194  3010      9162          move.w    (A0),D0
00005196  C07C F000 9163          and.w     #61440,D0
0000519A  0C40 8000 9164          cmp.w     #32768,D0
0000519E  6600 0038 9165          bne       DisassembleInstruction_273
                    9166   ; {
                    9167   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000051A2  2042      9168          move.l    D2,A0
000051A4  3010      9169          move.w    (A0),D0
000051A6  EC40      9170          asr.w     #6,D0
000051A8  C07C 0007 9171          and.w     #7,D0
000051AC  3600      9172          move.w    D0,D3
                    9173   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
000051AE  0C43 0002 9174          cmp.w     #2,D3
000051B2  630C      9175          bls.s     DisassembleInstruction_275
000051B4  0C43 0004 9176          cmp.w     #4,D3
000051B8  651E      9177          blo.s     DisassembleInstruction_273
000051BA  0C43 0006 9178          cmp.w     #6,D3
000051BE  6218      9179          bhi.s     DisassembleInstruction_273
                    9180   DisassembleInstruction_275:
                    9181   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    9182   ; {
                    9183   ; InstructionSize = 1;
000051C0  24BC 0000 9184          move.l    #1,(A2)
000051C4  0001      
                    9185   ; strcpyInstruction("OR") ;
000051C6  4879 0000 9186          pea       @m68kde~3_381.L
000051CA  8ABA      
000051CC  4E93      9187          jsr       (A3)
000051CE  584F      9188          addq.w    #4,A7
                    9189   ; Decode3BitOperandMode(OpCode) ;
000051D0  2F02      9190          move.l    D2,-(A7)
000051D2  4EB8 36B6 9191          jsr       _Decode3BitOperandMode
000051D6  584F      9192          addq.w    #4,A7
                    9193   DisassembleInstruction_273:
                    9194   ; }
                    9195   ; }
                    9196   ; /////////////////////////////////////////////////////////////////////////////////
                    9197   ; // if instruction is ORI to CCR
                    9198   ; /////////////////////////////////////////////////////////////////////////////////
                    9199   ; if(*OpCode == (unsigned short int)(0x003C))   {
000051D8  2042      9200          move.l    D2,A0
000051DA  3010      9201          move.w    (A0),D0
000051DC  0C40 003C 9202          cmp.w     #60,D0
000051E0  662A      9203          bne.s     DisassembleInstruction_276
                    9204   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
000051E2  2042      9205          move.l    D2,A0
000051E4  3228 0002 9206          move.w    2(A0),D1
000051E8  C27C 00FF 9207          and.w     #255,D1
000051EC  C2BC 0000 9208          and.l     #65535,D1
000051F0  FFFF      
000051F2  2F01      9209          move.l    D1,-(A7)
000051F4  4879 0000 9210          pea       @m68kde~3_382.L
000051F8  8ABE      
000051FA  4879 0803 9211          pea       _Instruction.L
000051FE  04E2      
00005200  4E95      9212          jsr       (A5)
00005202  DEFC 000C 9213          add.w     #12,A7
                    9214   ; InstructionSize = 2;
00005206  24BC 0000 9215          move.l    #2,(A2)
0000520A  0002      
                    9216   DisassembleInstruction_276:
                    9217   ; }
                    9218   ; /////////////////////////////////////////////////////////////////////////////////
                    9219   ; // if instruction is ORI #data,SR
                    9220   ; /////////////////////////////////////////////////////////////////////////////////
                    9221   ; if(*OpCode  == (unsigned short int)(0x007c))
0000520C  2042      9222          move.l    D2,A0
0000520E  3010      9223          move.w    (A0),D0
00005210  0C40 007C 9224          cmp.w     #124,D0
00005214  6622      9225          bne.s     DisassembleInstruction_278
                    9226   ; {
                    9227   ; InstructionSize = 2;
00005216  24BC 0000 9228          move.l    #2,(A2)
0000521A  0002      
                    9229   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
0000521C  2042      9230          move.l    D2,A0
0000521E  3228 0002 9231          move.w    2(A0),D1
00005222  48C1      9232          ext.l     D1
00005224  2F01      9233          move.l    D1,-(A7)
00005226  4879 0000 9234          pea       @m68kde~3_383.L
0000522A  8ACC      
0000522C  4879 0803 9235          pea       _Instruction.L
00005230  04E2      
00005232  4E95      9236          jsr       (A5)
00005234  DEFC 000C 9237          add.w     #12,A7
                    9238   DisassembleInstruction_278:
                    9239   ; }
                    9240   ; /////////////////////////////////////////////////////////////////////////////////
                    9241   ; // if instruction is PEA
                    9242   ; /////////////////////////////////////////////////////////////////////////////////
                    9243   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
00005238  2042      9244          move.l    D2,A0
0000523A  3010      9245          move.w    (A0),D0
0000523C  C07C FFC0 9246          and.w     #65472,D0
00005240  0C40 4840 9247          cmp.w     #18496,D0
00005244  6620      9248          bne.s     DisassembleInstruction_280
                    9249   ; {
                    9250   ; InstructionSize = 1;
00005246  24BC 0000 9251          move.l    #1,(A2)
0000524A  0001      
                    9252   ; strcpyInstruction("PEA ");
0000524C  4879 0000 9253          pea       @m68kde~3_384.L
00005250  8ADA      
00005252  4E93      9254          jsr       (A3)
00005254  584F      9255          addq.w    #4,A7
                    9256   ; Decode6BitEA(OpCode,0,0,0);
00005256  42A7      9257          clr.l     -(A7)
00005258  42A7      9258          clr.l     -(A7)
0000525A  42A7      9259          clr.l     -(A7)
0000525C  2F02      9260          move.l    D2,-(A7)
0000525E  4EB8 328E 9261          jsr       _Decode6BitEA
00005262  DEFC 0010 9262          add.w     #16,A7
                    9263   DisassembleInstruction_280:
                    9264   ; }
                    9265   ; /////////////////////////////////////////////////////////////////////////////////
                    9266   ; // if instruction is reset
                    9267   ; /////////////////////////////////////////////////////////////////////////////////
                    9268   ; if(*OpCode  == (unsigned short int)(0x4E70))
00005266  2042      9269          move.l    D2,A0
00005268  3010      9270          move.w    (A0),D0
0000526A  0C40 4E70 9271          cmp.w     #20080,D0
0000526E  6616      9272          bne.s     DisassembleInstruction_282
                    9273   ; {
                    9274   ; InstructionSize = 1;
00005270  24BC 0000 9275          move.l    #1,(A2)
00005274  0001      
                    9276   ; sprintf(Instruction, "RESET");
00005276  4879 0000 9277          pea       @m68kde~3_385.L
0000527A  8AE0      
0000527C  4879 0803 9278          pea       _Instruction.L
00005280  04E2      
00005282  4E95      9279          jsr       (A5)
00005284  504F      9280          addq.w    #8,A7
                    9281   DisassembleInstruction_282:
                    9282   ; }
                    9283   ; /////////////////////////////////////////////////////////////////////////////////
                    9284   ; // if instruction is RTE
                    9285   ; /////////////////////////////////////////////////////////////////////////////////
                    9286   ; if(*OpCode  == (unsigned short int)(0x4E73))
00005286  2042      9287          move.l    D2,A0
00005288  3010      9288          move.w    (A0),D0
0000528A  0C40 4E73 9289          cmp.w     #20083,D0
0000528E  6616      9290          bne.s     DisassembleInstruction_284
                    9291   ; {
                    9292   ; InstructionSize = 1;
00005290  24BC 0000 9293          move.l    #1,(A2)
00005294  0001      
                    9294   ; sprintf(Instruction, "RTE");
00005296  4879 0000 9295          pea       @m68kde~3_386.L
0000529A  8AE6      
0000529C  4879 0803 9296          pea       _Instruction.L
000052A0  04E2      
000052A2  4E95      9297          jsr       (A5)
000052A4  504F      9298          addq.w    #8,A7
                    9299   DisassembleInstruction_284:
                    9300   ; }
                    9301   ; /////////////////////////////////////////////////////////////////////////////////
                    9302   ; // if instruction is RTR
                    9303   ; /////////////////////////////////////////////////////////////////////////////////
                    9304   ; if(*OpCode == (unsigned short int)(0x4E77))
000052A6  2042      9305          move.l    D2,A0
000052A8  3010      9306          move.w    (A0),D0
000052AA  0C40 4E77 9307          cmp.w     #20087,D0
000052AE  6610      9308          bne.s     DisassembleInstruction_286
                    9309   ; {
                    9310   ; InstructionSize = 1;
000052B0  24BC 0000 9311          move.l    #1,(A2)
000052B4  0001      
                    9312   ; strcpyInstruction("RTR");
000052B6  4879 0000 9313          pea       @m68kde~3_387.L
000052BA  8AEA      
000052BC  4E93      9314          jsr       (A3)
000052BE  584F      9315          addq.w    #4,A7
                    9316   DisassembleInstruction_286:
                    9317   ; }
                    9318   ; /////////////////////////////////////////////////////////////////////////////////
                    9319   ; // if instruction is RTS
                    9320   ; /////////////////////////////////////////////////////////////////////////////////
                    9321   ; if(*OpCode == (unsigned short int)(0x4E75))
000052C0  2042      9322          move.l    D2,A0
000052C2  3010      9323          move.w    (A0),D0
000052C4  0C40 4E75 9324          cmp.w     #20085,D0
000052C8  6610      9325          bne.s     DisassembleInstruction_288
                    9326   ; {
                    9327   ; InstructionSize = 1;
000052CA  24BC 0000 9328          move.l    #1,(A2)
000052CE  0001      
                    9329   ; strcpyInstruction("RTS");
000052D0  4879 0000 9330          pea       @m68kde~3_388.L
000052D4  8AEE      
000052D6  4E93      9331          jsr       (A3)
000052D8  584F      9332          addq.w    #4,A7
                    9333   DisassembleInstruction_288:
                    9334   ; }
                    9335   ; /////////////////////////////////////////////////////////////////////////////////
                    9336   ; // if instruction is STOP
                    9337   ; /////////////////////////////////////////////////////////////////////////////////
                    9338   ; if(*OpCode  == (unsigned short int)(0x4E72))
000052DA  2042      9339          move.l    D2,A0
000052DC  3010      9340          move.w    (A0),D0
000052DE  0C40 4E72 9341          cmp.w     #20082,D0
000052E2  6622      9342          bne.s     DisassembleInstruction_290
                    9343   ; {
                    9344   ; InstructionSize = 2;
000052E4  24BC 0000 9345          move.l    #2,(A2)
000052E8  0002      
                    9346   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
000052EA  2042      9347          move.l    D2,A0
000052EC  3228 0002 9348          move.w    2(A0),D1
000052F0  48C1      9349          ext.l     D1
000052F2  2F01      9350          move.l    D1,-(A7)
000052F4  4879 0000 9351          pea       @m68kde~3_389.L
000052F8  8AF2      
000052FA  4879 0803 9352          pea       _Instruction.L
000052FE  04E2      
00005300  4E95      9353          jsr       (A5)
00005302  DEFC 000C 9354          add.w     #12,A7
                    9355   DisassembleInstruction_290:
                    9356   ; }
                    9357   ; /////////////////////////////////////////////////////////////////////////////////
                    9358   ; // if instruction is SBCD
                    9359   ; /////////////////////////////////////////////////////////////////////////////////
                    9360   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
00005306  2042      9361          move.l    D2,A0
00005308  3010      9362          move.w    (A0),D0
0000530A  C07C F1F0 9363          and.w     #61936,D0
0000530E  0C40 8100 9364          cmp.w     #33024,D0
00005312  6600 0092 9365          bne       DisassembleInstruction_295
                    9366   ; {
                    9367   ; InstructionSize = 1;
00005316  24BC 0000 9368          move.l    #1,(A2)
0000531A  0001      
                    9369   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
0000531C  2042      9370          move.l    D2,A0
0000531E  3010      9371          move.w    (A0),D0
00005320  E040      9372          asr.w     #8,D0
00005322  E240      9373          asr.w     #1,D0
00005324  C07C 0007 9374          and.w     #7,D0
00005328  3D40 FFE0 9375          move.w    D0,-32(A6)
                    9376   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
0000532C  2042      9377          move.l    D2,A0
0000532E  3010      9378          move.w    (A0),D0
00005330  C07C 0007 9379          and.w     #7,D0
00005334  3D40 FFDE 9380          move.w    D0,-34(A6)
                    9381   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
00005338  2042      9382          move.l    D2,A0
0000533A  3010      9383          move.w    (A0),D0
0000533C  E640      9384          asr.w     #3,D0
0000533E  48C0      9385          ext.l     D0
00005340  C0BC 0000 9386          and.l     #1,D0
00005344  0001      
00005346  2D40 FFE4 9387          move.l    D0,-28(A6)
                    9388   ; if(Mode == 0)
0000534A  202E FFE4 9389          move.l    -28(A6),D0
0000534E  662C      9390          bne.s     DisassembleInstruction_294
                    9391   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
00005350  322E FFE0 9392          move.w    -32(A6),D1
00005354  C2BC 0000 9393          and.l     #65535,D1
00005358  FFFF      
0000535A  2F01      9394          move.l    D1,-(A7)
0000535C  322E FFDE 9395          move.w    -34(A6),D1
00005360  C2BC 0000 9396          and.l     #65535,D1
00005364  FFFF      
00005366  2F01      9397          move.l    D1,-(A7)
00005368  4879 0000 9398          pea       @m68kde~3_390.L
0000536C  8AFC      
0000536E  4879 0803 9399          pea       _Instruction.L
00005372  04E2      
00005374  4E95      9400          jsr       (A5)
00005376  DEFC 0010 9401          add.w     #16,A7
0000537A  602A      9402          bra.s     DisassembleInstruction_295
                    9403   DisassembleInstruction_294:
                    9404   ; else
                    9405   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
0000537C  322E FFE0 9406          move.w    -32(A6),D1
00005380  C2BC 0000 9407          and.l     #65535,D1
00005384  FFFF      
00005386  2F01      9408          move.l    D1,-(A7)
00005388  322E FFDE 9409          move.w    -34(A6),D1
0000538C  C2BC 0000 9410          and.l     #65535,D1
00005390  FFFF      
00005392  2F01      9411          move.l    D1,-(A7)
00005394  4879 0000 9412          pea       @m68kde~3_391.L
00005398  8B0A      
0000539A  4879 0803 9413          pea       _Instruction.L
0000539E  04E2      
000053A0  4E95      9414          jsr       (A5)
000053A2  DEFC 0010 9415          add.w     #16,A7
                    9416   DisassembleInstruction_295:
                    9417   ; }
                    9418   ; /////////////////////////////////////////////////////////////////////////////////
                    9419   ; // if instruction is Scc
                    9420   ; /////////////////////////////////////////////////////////////////////////////////
                    9421   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
000053A6  2042      9422          move.l    D2,A0
000053A8  3010      9423          move.w    (A0),D0
000053AA  C07C F0C0 9424          and.w     #61632,D0
000053AE  0C40 50C0 9425          cmp.w     #20672,D0
000053B2  6600 0060 9426          bne       DisassembleInstruction_298
                    9427   ; {
                    9428   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
000053B6  2042      9429          move.l    D2,A0
000053B8  3010      9430          move.w    (A0),D0
000053BA  E640      9431          asr.w     #3,D0
000053BC  C07C 0007 9432          and.w     #7,D0
000053C0  3D40 FFEC 9433          move.w    D0,-20(A6)
                    9434   ; if(EAMode != (unsigned short int)(0x0001))
000053C4  302E FFEC 9435          move.w    -20(A6),D0
000053C8  0C40 0001 9436          cmp.w     #1,D0
000053CC  6700 0046 9437          beq       DisassembleInstruction_298
                    9438   ; {
                    9439   ; InstructionSize = 1;
000053D0  24BC 0000 9440          move.l    #1,(A2)
000053D4  0001      
                    9441   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
000053D6  2042      9442          move.l    D2,A0
000053D8  3010      9443          move.w    (A0),D0
000053DA  E040      9444          asr.w     #8,D0
000053DC  C07C 000F 9445          and.w     #15,D0
000053E0  1D40 FFE9 9446          move.b    D0,-23(A6)
                    9447   ; strcpyInstruction("S") ;
000053E4  4879 0000 9448          pea       @m68kde~3_392.L
000053E8  8B1E      
000053EA  4E93      9449          jsr       (A3)
000053EC  584F      9450          addq.w    #4,A7
                    9451   ; DecodeBranchCondition(Condition) ;
000053EE  122E FFE9 9452          move.b    -23(A6),D1
000053F2  C27C 00FF 9453          and.w     #255,D1
000053F6  C2BC 0000 9454          and.l     #65535,D1
000053FA  FFFF      
000053FC  2F01      9455          move.l    D1,-(A7)
000053FE  4EB8 374C 9456          jsr       _DecodeBranchCondition
00005402  584F      9457          addq.w    #4,A7
                    9458   ; Decode6BitEA(OpCode,0,0,0);
00005404  42A7      9459          clr.l     -(A7)
00005406  42A7      9460          clr.l     -(A7)
00005408  42A7      9461          clr.l     -(A7)
0000540A  2F02      9462          move.l    D2,-(A7)
0000540C  4EB8 328E 9463          jsr       _Decode6BitEA
00005410  DEFC 0010 9464          add.w     #16,A7
                    9465   DisassembleInstruction_298:
                    9466   ; }
                    9467   ; }
                    9468   ; /////////////////////////////////////////////////////////////////////////////////
                    9469   ; // if instruction is SUB or SUBA
                    9470   ; /////////////////////////////////////////////////////////////////////////////////
                    9471   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
00005414  2042      9472          move.l    D2,A0
00005416  3010      9473          move.w    (A0),D0
00005418  C07C F000 9474          and.w     #61440,D0
0000541C  0C40 9000 9475          cmp.w     #36864,D0
00005420  6600 008C 9476          bne       DisassembleInstruction_303
                    9477   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00005424  2042      9478          move.l    D2,A0
00005426  3010      9479          move.w    (A0),D0
00005428  EC40      9480          asr.w     #6,D0
0000542A  C07C 0007 9481          and.w     #7,D0
0000542E  3600      9482          move.w    D0,D3
                    9483   ; InstructionSize = 1;
00005430  24BC 0000 9484          move.l    #1,(A2)
00005434  0001      
                    9485   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
00005436  0C43 0003 9486          cmp.w     #3,D3
0000543A  6708      9487          beq.s     DisassembleInstruction_304
0000543C  0C43 0007 9488          cmp.w     #7,D3
00005440  6600 005A 9489          bne       DisassembleInstruction_302
                    9490   DisassembleInstruction_304:
                    9491   ; {
                    9492   ; if(OpMode == (unsigned short int)(0x0003))
00005444  0C43 0003 9493          cmp.w     #3,D3
00005448  660C      9494          bne.s     DisassembleInstruction_305
                    9495   ; strcpyInstruction("SUBA.W ") ;
0000544A  4879 0000 9496          pea       @m68kde~3_393.L
0000544E  8B20      
00005450  4E93      9497          jsr       (A3)
00005452  584F      9498          addq.w    #4,A7
00005454  600A      9499          bra.s     DisassembleInstruction_306
                    9500   DisassembleInstruction_305:
                    9501   ; else
                    9502   ; strcpyInstruction("SUBA.L ") ;
00005456  4879 0000 9503          pea       @m68kde~3_394.L
0000545A  8B28      
0000545C  4E93      9504          jsr       (A3)
0000545E  584F      9505          addq.w    #4,A7
                    9506   DisassembleInstruction_306:
                    9507   ; Decode6BitEA(OpCode,0,0,0)  ;
00005460  42A7      9508          clr.l     -(A7)
00005462  42A7      9509          clr.l     -(A7)
00005464  42A7      9510          clr.l     -(A7)
00005466  2F02      9511          move.l    D2,-(A7)
00005468  4EB8 328E 9512          jsr       _Decode6BitEA
0000546C  DEFC 0010 9513          add.w     #16,A7
                    9514   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00005470  2042      9515          move.l    D2,A0
00005472  3210      9516          move.w    (A0),D1
00005474  E041      9517          asr.w     #8,D1
00005476  E241      9518          asr.w     #1,D1
00005478  C27C 0007 9519          and.w     #7,D1
0000547C  C2BC 0000 9520          and.l     #65535,D1
00005480  FFFF      
00005482  2F01      9521          move.l    D1,-(A7)
00005484  4879 0000 9522          pea       @m68kde~3_395.L
00005488  8B30      
0000548A  2F0C      9523          move.l    A4,-(A7)
0000548C  4E95      9524          jsr       (A5)
0000548E  DEFC 000C 9525          add.w     #12,A7
                    9526   ; strcatInstruction(TempString) ;
00005492  2F0C      9527          move.l    A4,-(A7)
00005494  4EB8 0CCC 9528          jsr       _strcatInstruction
00005498  584F      9529          addq.w    #4,A7
0000549A  6012      9530          bra.s     DisassembleInstruction_303
                    9531   DisassembleInstruction_302:
                    9532   ; }
                    9533   ; else {
                    9534   ; strcpyInstruction("SUB") ;
0000549C  4879 0000 9535          pea       @m68kde~3_396.L
000054A0  8B36      
000054A2  4E93      9536          jsr       (A3)
000054A4  584F      9537          addq.w    #4,A7
                    9538   ; Decode3BitOperandMode(OpCode) ;
000054A6  2F02      9539          move.l    D2,-(A7)
000054A8  4EB8 36B6 9540          jsr       _Decode3BitOperandMode
000054AC  584F      9541          addq.w    #4,A7
                    9542   DisassembleInstruction_303:
                    9543   ; }
                    9544   ; }
                    9545   ; /////////////////////////////////////////////////////////////////////////////////
                    9546   ; // if instruction is SUBQ
                    9547   ; /////////////////////////////////////////////////////////////////////////////////
                    9548   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
000054AE  2042      9549          move.l    D2,A0
000054B0  3010      9550          move.w    (A0),D0
000054B2  C07C F100 9551          and.w     #61696,D0
000054B6  0C40 5100 9552          cmp.w     #20736,D0
000054BA  6600 0072 9553          bne       DisassembleInstruction_309
                    9554   ; {
                    9555   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000054BE  2042      9556          move.l    D2,A0
000054C0  3010      9557          move.w    (A0),D0
000054C2  EC40      9558          asr.w     #6,D0
000054C4  C07C 0003 9559          and.w     #3,D0
000054C8  3600      9560          move.w    D0,D3
                    9561   ; if(OpMode <= (unsigned short int)(0x0002))
000054CA  0C43 0002 9562          cmp.w     #2,D3
000054CE  6200 005E 9563          bhi       DisassembleInstruction_309
                    9564   ; {
                    9565   ; InstructionSize = 1;
000054D2  24BC 0000 9566          move.l    #1,(A2)
000054D6  0001      
                    9567   ; strcpyInstruction("SUBQ") ;
000054D8  4879 0000 9568          pea       @m68kde~3_397.L
000054DC  8B3A      
000054DE  4E93      9569          jsr       (A3)
000054E0  584F      9570          addq.w    #4,A7
                    9571   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000054E2  2042      9572          move.l    D2,A0
000054E4  3210      9573          move.w    (A0),D1
000054E6  C2BC 0000 9574          and.l     #65535,D1
000054EA  FFFF      
000054EC  2F01      9575          move.l    D1,-(A7)
000054EE  4EB8 2FFA 9576          jsr       _Decode2BitOperandSize
000054F2  584F      9577          addq.w    #4,A7
                    9578   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
000054F4  2042      9579          move.l    D2,A0
000054F6  3210      9580          move.w    (A0),D1
000054F8  E041      9581          asr.w     #8,D1
000054FA  E241      9582          asr.w     #1,D1
000054FC  C27C 0007 9583          and.w     #7,D1
00005500  C2BC 0000 9584          and.l     #65535,D1
00005504  FFFF      
00005506  2F01      9585          move.l    D1,-(A7)
00005508  4879 0000 9586          pea       @m68kde~3_398.L
0000550C  8B40      
0000550E  2F0C      9587          move.l    A4,-(A7)
00005510  4E95      9588          jsr       (A5)
00005512  DEFC 000C 9589          add.w     #12,A7
                    9590   ; strcatInstruction(TempString) ;
00005516  2F0C      9591          move.l    A4,-(A7)
00005518  4EB8 0CCC 9592          jsr       _strcatInstruction
0000551C  584F      9593          addq.w    #4,A7
                    9594   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
0000551E  42A7      9595          clr.l     -(A7)
00005520  42A7      9596          clr.l     -(A7)
00005522  42A7      9597          clr.l     -(A7)
00005524  2F02      9598          move.l    D2,-(A7)
00005526  4EB8 328E 9599          jsr       _Decode6BitEA
0000552A  DEFC 0010 9600          add.w     #16,A7
                    9601   DisassembleInstruction_309:
                    9602   ; }
                    9603   ; }
                    9604   ; /////////////////////////////////////////////////////////////////////////////////
                    9605   ; // if instruction is SUBX
                    9606   ; /////////////////////////////////////////////////////////////////////////////////
                    9607   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
0000552E  2042      9608          move.l    D2,A0
00005530  3010      9609          move.w    (A0),D0
00005532  C07C F130 9610          and.w     #61744,D0
00005536  0C40 9100 9611          cmp.w     #37120,D0
0000553A  6600 00A4 9612          bne       DisassembleInstruction_313
                    9613   ; {
                    9614   ; InstructionSize = 1;
0000553E  24BC 0000 9615          move.l    #1,(A2)
00005542  0001      
                    9616   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00005544  2042      9617          move.l    D2,A0
00005546  3010      9618          move.w    (A0),D0
00005548  EC40      9619          asr.w     #6,D0
0000554A  C07C 0003 9620          and.w     #3,D0
0000554E  3600      9621          move.w    D0,D3
                    9622   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
00005550  0C43 0003 9623          cmp.w     #3,D3
00005554  6700 008A 9624          beq       DisassembleInstruction_313
                    9625   ; {
                    9626   ; strcpyInstruction("SUBX") ;
00005558  4879 0000 9627          pea       @m68kde~3_399.L
0000555C  8B46      
0000555E  4E93      9628          jsr       (A3)
00005560  584F      9629          addq.w    #4,A7
                    9630   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005562  2042      9631          move.l    D2,A0
00005564  3210      9632          move.w    (A0),D1
00005566  C2BC 0000 9633          and.l     #65535,D1
0000556A  FFFF      
0000556C  2F01      9634          move.l    D1,-(A7)
0000556E  4EB8 2FFA 9635          jsr       _Decode2BitOperandSize
00005572  584F      9636          addq.w    #4,A7
                    9637   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00005574  2042      9638          move.l    D2,A0
00005576  3010      9639          move.w    (A0),D0
00005578  C07C 0008 9640          and.w     #8,D0
0000557C  6600 0030 9641          bne       DisassembleInstruction_315
                    9642   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00005580  2042      9643          move.l    D2,A0
00005582  3210      9644          move.w    (A0),D1
00005584  E041      9645          asr.w     #8,D1
00005586  E241      9646          asr.w     #1,D1
00005588  C27C 0007 9647          and.w     #7,D1
0000558C  48C1      9648          ext.l     D1
0000558E  2F01      9649          move.l    D1,-(A7)
00005590  2042      9650          move.l    D2,A0
00005592  3210      9651          move.w    (A0),D1
00005594  C27C 0007 9652          and.w     #7,D1
00005598  48C1      9653          ext.l     D1
0000559A  2F01      9654          move.l    D1,-(A7)
0000559C  4879 0000 9655          pea       @m68kde~3_400.L
000055A0  8B4C      
000055A2  2F0C      9656          move.l    A4,-(A7)
000055A4  4E95      9657          jsr       (A5)
000055A6  DEFC 0010 9658          add.w     #16,A7
000055AA  6000 002C 9659          bra       DisassembleInstruction_316
                    9660   DisassembleInstruction_315:
                    9661   ; else        // -(ax),-(ay) mode used
                    9662   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
000055AE  2042      9663          move.l    D2,A0
000055B0  3210      9664          move.w    (A0),D1
000055B2  E041      9665          asr.w     #8,D1
000055B4  E241      9666          asr.w     #1,D1
000055B6  C27C 0007 9667          and.w     #7,D1
000055BA  48C1      9668          ext.l     D1
000055BC  2F01      9669          move.l    D1,-(A7)
000055BE  2042      9670          move.l    D2,A0
000055C0  3210      9671          move.w    (A0),D1
000055C2  C27C 0007 9672          and.w     #7,D1
000055C6  48C1      9673          ext.l     D1
000055C8  2F01      9674          move.l    D1,-(A7)
000055CA  4879 0000 9675          pea       @m68kde~3_401.L
000055CE  8B56      
000055D0  2F0C      9676          move.l    A4,-(A7)
000055D2  4E95      9677          jsr       (A5)
000055D4  DEFC 0010 9678          add.w     #16,A7
                    9679   DisassembleInstruction_316:
                    9680   ; strcatInstruction(TempString) ;
000055D8  2F0C      9681          move.l    A4,-(A7)
000055DA  4EB8 0CCC 9682          jsr       _strcatInstruction
000055DE  584F      9683          addq.w    #4,A7
                    9684   DisassembleInstruction_313:
                    9685   ; }
                    9686   ; }
                    9687   ; /////////////////////////////////////////////////////////////////////////////////
                    9688   ; // if instruction is SWAP
                    9689   ; /////////////////////////////////////////////////////////////////////////////////
                    9690   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
000055E0  2042      9691          move.l    D2,A0
000055E2  3010      9692          move.w    (A0),D0
000055E4  C07C FFF8 9693          and.w     #65528,D0
000055E8  0C40 4840 9694          cmp.w     #18496,D0
000055EC  662A      9695          bne.s     DisassembleInstruction_317
                    9696   ; {
                    9697   ; InstructionSize = 1;
000055EE  24BC 0000 9698          move.l    #1,(A2)
000055F2  0001      
                    9699   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
000055F4  2042      9700          move.l    D2,A0
000055F6  3010      9701          move.w    (A0),D0
000055F8  C07C 0007 9702          and.w     #7,D0
000055FC  3A00      9703          move.w    D0,D5
                    9704   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
000055FE  CABC 0000 9705          and.l     #65535,D5
00005602  FFFF      
00005604  2F05      9706          move.l    D5,-(A7)
00005606  4879 0000 9707          pea       @m68kde~3_402.L
0000560A  8B66      
0000560C  4879 0803 9708          pea       _Instruction.L
00005610  04E2      
00005612  4E95      9709          jsr       (A5)
00005614  DEFC 000C 9710          add.w     #12,A7
                    9711   DisassembleInstruction_317:
                    9712   ; }
                    9713   ; /////////////////////////////////////////////////////////////////////////////////
                    9714   ; // if instruction is TAS
                    9715   ; /////////////////////////////////////////////////////////////////////////////////
                    9716   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
00005618  2042      9717          move.l    D2,A0
0000561A  3010      9718          move.w    (A0),D0
0000561C  C07C FFC0 9719          and.w     #65472,D0
00005620  0C40 4AC0 9720          cmp.w     #19136,D0
00005624  662A      9721          bne.s     DisassembleInstruction_321
                    9722   ; {
                    9723   ; if(*OpCode != (unsigned short int)(0x4AFC))
00005626  2042      9724          move.l    D2,A0
00005628  3010      9725          move.w    (A0),D0
0000562A  0C40 4AFC 9726          cmp.w     #19196,D0
0000562E  6720      9727          beq.s     DisassembleInstruction_321
                    9728   ; {
                    9729   ; InstructionSize = 1;
00005630  24BC 0000 9730          move.l    #1,(A2)
00005634  0001      
                    9731   ; strcpyInstruction("TAS ") ;
00005636  4879 0000 9732          pea       @m68kde~3_403.L
0000563A  8B70      
0000563C  4E93      9733          jsr       (A3)
0000563E  584F      9734          addq.w    #4,A7
                    9735   ; Decode6BitEA(OpCode,0,0,0) ;
00005640  42A7      9736          clr.l     -(A7)
00005642  42A7      9737          clr.l     -(A7)
00005644  42A7      9738          clr.l     -(A7)
00005646  2F02      9739          move.l    D2,-(A7)
00005648  4EB8 328E 9740          jsr       _Decode6BitEA
0000564C  DEFC 0010 9741          add.w     #16,A7
                    9742   DisassembleInstruction_321:
                    9743   ; }
                    9744   ; }
                    9745   ; /////////////////////////////////////////////////////////////////////////////////
                    9746   ; // if instruction is TRAP
                    9747   ; /////////////////////////////////////////////////////////////////////////////////
                    9748   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
00005650  2042      9749          move.l    D2,A0
00005652  3010      9750          move.w    (A0),D0
00005654  C07C FFF0 9751          and.w     #65520,D0
00005658  0C40 4E40 9752          cmp.w     #20032,D0
0000565C  6622      9753          bne.s     DisassembleInstruction_323
                    9754   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
0000565E  2042      9755          move.l    D2,A0
00005660  3210      9756          move.w    (A0),D1
00005662  C27C 000F 9757          and.w     #15,D1
00005666  C2BC 0000 9758          and.l     #65535,D1
0000566A  FFFF      
0000566C  2F01      9759          move.l    D1,-(A7)
0000566E  4879 0000 9760          pea       @m68kde~3_404.L
00005672  8B76      
00005674  4879 0803 9761          pea       _Instruction.L
00005678  04E2      
0000567A  4E95      9762          jsr       (A5)
0000567C  DEFC 000C 9763          add.w     #12,A7
                    9764   DisassembleInstruction_323:
                    9765   ; }
                    9766   ; /////////////////////////////////////////////////////////////////////////////////
                    9767   ; // if instruction is TRAPV
                    9768   ; /////////////////////////////////////////////////////////////////////////////////
                    9769   ; if(*OpCode == (unsigned short int)(0x4E76))
00005680  2042      9770          move.l    D2,A0
00005682  3010      9771          move.w    (A0),D0
00005684  0C40 4E76 9772          cmp.w     #20086,D0
00005688  6610      9773          bne.s     DisassembleInstruction_325
                    9774   ; {
                    9775   ; InstructionSize = 1;
0000568A  24BC 0000 9776          move.l    #1,(A2)
0000568E  0001      
                    9777   ; strcpyInstruction("TRAPV") ;
00005690  4879 0000 9778          pea       @m68kde~3_405.L
00005694  8B80      
00005696  4E93      9779          jsr       (A3)
00005698  584F      9780          addq.w    #4,A7
                    9781   DisassembleInstruction_325:
                    9782   ; }
                    9783   ; /////////////////////////////////////////////////////////////////////////////////
                    9784   ; // if instruction is TST
                    9785   ; /////////////////////////////////////////////////////////////////////////////////
                    9786   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
0000569A  2042      9787          move.l    D2,A0
0000569C  3010      9788          move.w    (A0),D0
0000569E  C07C FF00 9789          and.w     #65280,D0
000056A2  0C40 4A00 9790          cmp.w     #18944,D0
000056A6  6600 005A 9791          bne       DisassembleInstruction_329
                    9792   ; {
                    9793   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000056AA  2042      9794          move.l    D2,A0
000056AC  3010      9795          move.w    (A0),D0
000056AE  EC40      9796          asr.w     #6,D0
000056B0  C07C 0003 9797          and.w     #3,D0
000056B4  3D40 FFE2 9798          move.w    D0,-30(A6)
                    9799   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
000056B8  2042      9800          move.l    D2,A0
000056BA  3010      9801          move.w    (A0),D0
000056BC  0C40 4AFC 9802          cmp.w     #19196,D0
000056C0  6700 0040 9803          beq       DisassembleInstruction_329
000056C4  302E FFE2 9804          move.w    -30(A6),D0
000056C8  0C40 0003 9805          cmp.w     #3,D0
000056CC  6700 0034 9806          beq       DisassembleInstruction_329
                    9807   ; InstructionSize = 1;
000056D0  24BC 0000 9808          move.l    #1,(A2)
000056D4  0001      
                    9809   ; strcpyInstruction("TST") ;
000056D6  4879 0000 9810          pea       @m68kde~3_406.L
000056DA  8B86      
000056DC  4E93      9811          jsr       (A3)
000056DE  584F      9812          addq.w    #4,A7
                    9813   ; Decode2BitOperandSize(*OpCode) ;
000056E0  2042      9814          move.l    D2,A0
000056E2  3210      9815          move.w    (A0),D1
000056E4  C2BC 0000 9816          and.l     #65535,D1
000056E8  FFFF      
000056EA  2F01      9817          move.l    D1,-(A7)
000056EC  4EB8 2FFA 9818          jsr       _Decode2BitOperandSize
000056F0  584F      9819          addq.w    #4,A7
                    9820   ; Decode6BitEA(OpCode,0,0,0) ;
000056F2  42A7      9821          clr.l     -(A7)
000056F4  42A7      9822          clr.l     -(A7)
000056F6  42A7      9823          clr.l     -(A7)
000056F8  2F02      9824          move.l    D2,-(A7)
000056FA  4EB8 328E 9825          jsr       _Decode6BitEA
000056FE  DEFC 0010 9826          add.w     #16,A7
                    9827   DisassembleInstruction_329:
                    9828   ; }
                    9829   ; }
                    9830   ; /////////////////////////////////////////////////////////////////////////////////
                    9831   ; // if instruction is UNLK
                    9832   ; //////////////////////////////////////////////////////////
                    9833   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
00005702  2042      9834          move.l    D2,A0
00005704  3010      9835          move.w    (A0),D0
00005706  C07C FFF8 9836          and.w     #65528,D0
0000570A  0C40 4E58 9837          cmp.w     #20056,D0
0000570E  6628      9838          bne.s     DisassembleInstruction_331
                    9839   ; {
                    9840   ; InstructionSize = 1;
00005710  24BC 0000 9841          move.l    #1,(A2)
00005714  0001      
                    9842   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
00005716  2042      9843          move.l    D2,A0
00005718  3210      9844          move.w    (A0),D1
0000571A  C27C 0007 9845          and.w     #7,D1
0000571E  C2BC 0000 9846          and.l     #65535,D1
00005722  FFFF      
00005724  2F01      9847          move.l    D1,-(A7)
00005726  4879 0000 9848          pea       @m68kde~3_407.L
0000572A  8B8A      
0000572C  4879 0803 9849          pea       _Instruction.L
00005730  04E2      
00005732  4E95      9850          jsr       (A5)
00005734  DEFC 000C 9851          add.w     #12,A7
                    9852   DisassembleInstruction_331:
                    9853   ; }
                    9854   ; FormatInstruction() ;
00005738  4EB8 2F68 9855          jsr       _FormatInstruction
0000573C  4CDF 3CFC 9856          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005740  4E5E      9857          unlk      A6
00005742  4E75      9858          rts
                    9859   ; }
                    9860   _strcpy:
00005744  206F 0004 9861          move.l    (4,A7),A0
00005748  226F 0008 9862          move.l    (8,A7),A1
0000574C  2008      9863          move.l    A0,D0
                    9864   strcpy_1:
0000574E  10D9      9865          move.b    (A1)+,(A0)+
00005750  66FC      9866          bne       strcpy_1
00005752  4E75      9867          rts
                    9868   ULDIV:
00005754  4E56 0000 9869          link    A6,#0
00005758  48E7 C000 9870          movem.l D0/D1,-(A7)
0000575C  222E 0008 9871          move.l  8(A6),D1
00005760  202E 000C 9872          move.l  12(A6),D0
00005764  6036      9873          bra.s   ldiv_3
                    9874   LDIV:
00005766  4E56 0000 9875          link    A6,#0
0000576A  48E7 C000 9876          movem.l D0/D1,-(A7)
0000576E  222E 0008 9877          move.l  8(A6),D1
00005772  202E 000C 9878          move.l  12(A6),D0
00005776  4A80      9879          tst.l   D0
00005778  6A0E      9880          bpl.s   ldiv_1
0000577A  4480      9881          neg.l   D0
0000577C  4A81      9882          tst.l   D1
0000577E  6A14      9883          bpl.s   ldiv_2
00005780  4481      9884          neg.l   D1
00005782  612A      9885          bsr.s   dodiv
00005784  4481      9886          neg.l   D1
00005786  6016      9887          bra.s   ldiv_4
                    9888   ldiv_1:
00005788  4A81      9889          tst.l   D1
0000578A  6A10      9890          bpl.s   ldiv_3
0000578C  4481      9891          neg.l   D1
0000578E  611E      9892          bsr.s   dodiv
00005790  4480      9893          neg.l   D0
00005792  600A      9894          bra.s   ldiv_4
                    9895   ldiv_2:
00005794  6118      9896          bsr.s   dodiv
00005796  4480      9897          neg.l   D0
00005798  4481      9898          neg.l   D1
0000579A  6002      9899          bra.s   ldiv_4
                    9900   ldiv_3:
0000579C  6110      9901          bsr.s   dodiv
                    9902   ldiv_4:
0000579E  2D40 0008 9903          move.l  D0,8(A6)
000057A2  2D41 000C 9904          move.l  D1,12(A6)
000057A6  4CDF 0003 9905          movem.l (A7)+,D0/D1
000057AA  4E5E      9906          unlk    A6
000057AC  4E75      9907          rts
                    9908   dodiv:
000057AE  0C81 0000 9909          cmpi.l  #$FFFF,D1
000057B2  FFFF      
000057B4  6236      9910          bhi.s   dodiv_2
000057B6  0C80 0000 9911          cmpi.l  #$FFFF,D0
000057BA  FFFF      
000057BC  6210      9912          bhi.s   dodiv_1
000057BE  80C1      9913          divu    D1,D0
000057C0  2200      9914          move.l  D0,D1
000057C2  4241      9915          clr.w   D1
000057C4  4841      9916          swap    D1
000057C6  0280 0000 9917          andi.l  #$FFFF,D0
000057CA  FFFF      
000057CC  4E75      9918          rts
                    9919   dodiv_1:
000057CE  48A7 A000 9920          movem.w D0/D2,-(A7)
000057D2  4240      9921          clr.w   D0
000057D4  4840      9922          swap    D0
000057D6  80C1      9923          divu    D1,D0
000057D8  3400      9924          move.w  D0,D2
000057DA  301F      9925          move.w  (A7)+,D0
000057DC  80C1      9926          divu    D1,D0
000057DE  4840      9927          swap    D0
000057E0  4281      9928          clr.l   D1
000057E2  3200      9929          move.w  D0,D1
000057E4  3002      9930          move.w  D2,D0
000057E6  4840      9931          swap    D0
000057E8  341F      9932          move.w  (A7)+,D2
000057EA  4E75      9933          rts
                    9934   dodiv_2:
000057EC  48E7 3800 9935          movem.l D2/D3/D4,-(A7)
000057F0  2401      9936          move.l  D1,D2
000057F2  4242      9937          clr.w   D2
000057F4  4842      9938          swap    D2
000057F6  5282      9939          addq.l  #1,D2
000057F8  2600      9940          move.l  D0,D3
000057FA  2801      9941          move.l  D1,D4
000057FC  2202      9942          move.l  D2,D1
000057FE  61CE      9943          bsr.s   dodiv_1
00005800  2204      9944          move.l  D4,D1
00005802  82C2      9945          divu    D2,D1
00005804  80C1      9946          divu    D1,D0
00005806  0280 0000 9947          andi.l  #$FFFF,D0
0000580A  FFFF      
                    9948   dodiv_3:
0000580C  2204      9949          move.l  D4,D1
0000580E  2404      9950          move.l  D4,D2
00005810  4842      9951          swap    D2
00005812  C2C0      9952          mulu    D0,D1
00005814  C4C0      9953          mulu    D0,D2
00005816  4842      9954          swap    D2
00005818  D282      9955          add.l   D2,D1
0000581A  9283      9956          sub.l   D3,D1
0000581C  620A      9957          bhi.s   dodiv_4
0000581E  4481      9958          neg.l   D1
00005820  B881      9959          cmp.l   D1,D4
00005822  6208      9960          bhi.s   dodiv_5
00005824  5280      9961          addq.l  #1,D0
00005826  60E4      9962          bra.s   dodiv_3
                    9963   dodiv_4:
00005828  5380      9964          subq.l  #1,D0
0000582A  60E0      9965          bra.s   dodiv_3
                    9966   dodiv_5:
0000582C  4CDF 001C 9967          movem.l (A7)+,D2/D3/D4
00005830  4E75      9968          rts
                    9969   _putch:
00005832  4E56 0000 9970          link      A6,#0
00005836  48E7 2000 9971          movem.l   D2,-(A7)
0000583A  242E 0008 9972          move.l    8(A6),D2
0000583E  0C82 0000 9973          cmp.l     #10,D2
00005842  000A      
00005844  660A      9974          bne.s     putch_1
00005846  4878 000D 9975          pea       13
0000584A  6100 B2F0 9976          bsr       __putch
0000584E  584F      9977          addq.w    #4,A7
                    9978   putch_1:
00005850  2F02      9979          move.l    D2,-(A7)
00005852  6100 B2E8 9980          bsr       __putch
00005856  584F      9981          addq.w    #4,A7
00005858  2002      9982          move.l    D2,D0
0000585A  4CDF 0004 9983          movem.l   (A7)+,D2
0000585E  4E5E      9984          unlk      A6
00005860  4E75      9985          rts
                    9986   _getch:
00005862  48E7 2000 9987          movem.l   D2,-(A7)
00005866  2439 0803 9988          move.l    __ungetbuf,D2
0000586A  00C0      
0000586C  2039 0803 9989          move.l    __ungetbuf,D0
00005870  00C0      
00005872  0C80 FFFF 9990          cmp.l     #-1,D0
00005876  FFFF      
00005878  670C      9991          beq.s     getch_1
0000587A  23FC FFFF 9992          move.l    #-1,__ungetbuf
0000587E  FFFF 0803 
00005882  00C0      
00005884  6010      9993          bra.s     getch_3
                    9994   getch_1:
00005886  6100 B2E0 9995          bsr       __getch
0000588A  2400      9996          move.l    D0,D2
0000588C  0C80 0000 9997          cmp.l     #13,D0
00005890  000D      
00005892  6602      9998          bne.s     getch_3
00005894  740A      9999          moveq     #10,D2
                    10000   getch_3:
00005896  2002      10001          move.l    D2,D0
00005898  4CDF 0004 10002          movem.l   (A7)+,D2
0000589C  4E75      10003          rts
                    10004   _tolower:
0000589E  4E56 0000 10005          link      A6,#0
000058A2  48E7 2000 10006          movem.l   D2,-(A7)
000058A6  242E 0008 10007          move.l    8(A6),D2
000058AA  0C82 0000 10008          cmp.l     #65,D2
000058AE  0041      
000058B0  6D0E      10009          blt.s     tolower_1
000058B2  0C82 0000 10010          cmp.l     #90,D2
000058B6  005A      
000058B8  6E06      10011          bgt.s     tolower_1
000058BA  84BC 0000 10012          or.l      #32,D2
000058BE  0020      
                    10013   tolower_1:
000058C0  2002      10014          move.l    D2,D0
000058C2  4CDF 0004 10015          movem.l   (A7)+,D2
000058C6  4E5E      10016          unlk      A6
000058C8  4E75      10017          rts
                    10018   _sprintf:
000058CA  4E56 FFFC 10019          link      A6,#-4
000058CE  48E7 2000 10020          movem.l   D2,-(A7)
000058D2  41EE 000C 10021          lea       12(A6),A0
000058D6  5848      10022          addq.w    #4,A0
000058D8  2408      10023          move.l    A0,D2
000058DA  2F02      10024          move.l    D2,-(A7)
000058DC  2F2E 000C 10025          move.l    12(A6),-(A7)
000058E0  2F2E 0008 10026          move.l    8(A6),-(A7)
000058E4  6100 0170 10027          bsr       _vsprintf
000058E8  DEFC 000C 10028          add.w     #12,A7
000058EC  2D40 FFFC 10029          move.l    D0,-4(A6)
000058F0  4282      10030          clr.l     D2
000058F2  202E FFFC 10031          move.l    -4(A6),D0
000058F6  4CDF 0004 10032          movem.l   (A7)+,D2
000058FA  4E5E      10033          unlk      A6
000058FC  4E75      10034          rts
                    10035   _strcat:
000058FE  206F 0004 10036          move.l    (4,A7),A0	
00005902  226F 0008 10037          move.l    (8,A7),A1	
00005906  2008      10038          move.l    A0,D0		
                    10039   strcat_0:
00005908  4A18      10040          tst.b     (A0)+
0000590A  66FC      10041          bne       strcat_0
0000590C  5348      10042          subq      #1,A0
                    10043   strcat_1:
0000590E  10D9      10044          move.b    (A1)+,(A0)+
00005910  66FC      10045          bne       strcat_1
00005912  4E75      10046          rts
                    10047   _toupper:
00005914  4E56 0000 10048          link      A6,#0
00005918  48E7 2000 10049          movem.l   D2,-(A7)
0000591C  242E 0008 10050          move.l    8(A6),D2
00005920  0C82 0000 10051          cmp.l     #97,D2
00005924  0061      
00005926  6D0E      10052          blt.s     toupper_1
00005928  0C82 0000 10053          cmp.l     #122,D2
0000592C  007A      
0000592E  6E06      10054          bgt.s     toupper_1
00005930  C4BC 0000 10055          and.l     #95,D2
00005934  005F      
                    10056   toupper_1:
00005936  2002      10057          move.l    D2,D0
00005938  4CDF 0004 10058          movem.l   (A7)+,D2
0000593C  4E5E      10059          unlk      A6
0000593E  4E75      10060          rts
                    10061   _scanf:
00005940  4E56 FFFC 10062          link      A6,#-4
00005944  48E7 2000 10063          movem.l   D2,-(A7)
00005948  41EE 0008 10064          lea       8(A6),A0
0000594C  5848      10065          addq.w    #4,A0
0000594E  2408      10066          move.l    A0,D2
00005950  2F02      10067          move.l    D2,-(A7)
00005952  2F2E 0008 10068          move.l    8(A6),-(A7)
00005956  42A7      10069          clr.l     -(A7)
00005958  6100 0A08 10070          bsr       _vsscanf
0000595C  DEFC 000C 10071          add.w     #12,A7
00005960  2D40 FFFC 10072          move.l    D0,-4(A6)
00005964  4282      10073          clr.l     D2
00005966  202E FFFC 10074          move.l    -4(A6),D0
0000596A  4CDF 0004 10075          movem.l   (A7)+,D2
0000596E  4E5E      10076          unlk      A6
00005970  4E75      10077          rts
                    10078   _printf:
00005972  4E56 FFFC 10079          link      A6,#-4
00005976  48E7 2000 10080          movem.l   D2,-(A7)
0000597A  41EE 0008 10081          lea       8(A6),A0
0000597E  5848      10082          addq.w    #4,A0
00005980  2408      10083          move.l    A0,D2
00005982  2F02      10084          move.l    D2,-(A7)
00005984  2F2E 0008 10085          move.l    8(A6),-(A7)
00005988  42A7      10086          clr.l     -(A7)
0000598A  6100 00CA 10087          bsr       _vsprintf
0000598E  DEFC 000C 10088          add.w     #12,A7
00005992  2D40 FFFC 10089          move.l    D0,-4(A6)
00005996  4282      10090          clr.l     D2
00005998  202E FFFC 10091          move.l    -4(A6),D0
0000599C  4CDF 0004 10092          movem.l   (A7)+,D2
000059A0  4E5E      10093          unlk      A6
000059A2  4E75      10094          rts
                    10095   @vsprintf_copy:
000059A4  4E56 0000 10096          link      A6,#0
000059A8  206E 0008 10097          move.l    8(A6),A0
000059AC  4A90      10098          tst.l     (A0)
000059AE  6710      10099          beq.s     @vsprintf_copy_1
000059B0  202E 000C 10100          move.l    12(A6),D0
000059B4  206E 0008 10101          move.l    8(A6),A0
000059B8  2250      10102          move.l    (A0),A1
000059BA  5290      10103          addq.l    #1,(A0)
000059BC  1280      10104          move.b    D0,(A1)
000059BE  600A      10105          bra.s     @vsprintf_copy_2
                    10106   @vsprintf_copy_1:
000059C0  2F2E 000C 10107          move.l    12(A6),-(A7)
000059C4  6100 FE6C 10108          bsr       _putch
000059C8  584F      10109          addq.w    #4,A7
                    10110   @vsprintf_copy_2:
000059CA  4E5E      10111          unlk      A6
000059CC  4E75      10112          rts
                    10113   @vsprintf_getval:
000059CE  4E56 0000 10114          link      A6,#0
000059D2  48E7 3000 10115          movem.l   D2/D3,-(A7)
000059D6  242E 0008 10116          move.l    8(A6),D2
000059DA  4283      10117          clr.l     D3
000059DC  2042      10118          move.l    D2,A0
000059DE  2050      10119          move.l    (A0),A0
000059E0  1010      10120          move.b    (A0),D0
000059E2  4880      10121          ext.w     D0
000059E4  48C0      10122          ext.l     D0
000059E6  0C80 0000 10123          cmp.l     #42,D0
000059EA  002A      
000059EC  6612      10124          bne.s     @vsprintf_getval_1
000059EE  206E 000C 10125          move.l    12(A6),A0
000059F2  2250      10126          move.l    (A0),A1
000059F4  5890      10127          addq.l    #4,(A0)
000059F6  2611      10128          move.l    (A1),D3
000059F8  2042      10129          move.l    D2,A0
000059FA  5290      10130          addq.l    #1,(A0)
000059FC  6000 004E 10131          bra       @vsprintf_getval_5
                    10132   @vsprintf_getval_1:
00005A00  2042      10133          move.l    D2,A0
00005A02  2050      10134          move.l    (A0),A0
00005A04  1010      10135          move.b    (A0),D0
00005A06  4880      10136          ext.w     D0
00005A08  48C0      10137          ext.l     D0
00005A0A  0C80 0000 10138          cmp.l     #48,D0
00005A0E  0030      
00005A10  6D00 003A 10139          blt       @vsprintf_getval_5
00005A14  2042      10140          move.l    D2,A0
00005A16  2050      10141          move.l    (A0),A0
00005A18  1010      10142          move.b    (A0),D0
00005A1A  4880      10143          ext.w     D0
00005A1C  48C0      10144          ext.l     D0
00005A1E  0C80 0000 10145          cmp.l     #57,D0
00005A22  0039      
00005A24  6E26      10146          bgt.s     @vsprintf_getval_5
00005A26  2F03      10147          move.l    D3,-(A7)
00005A28  4878 000A 10148          pea       10
00005A2C  6100 108A 10149          bsr       LMUL
00005A30  2017      10150          move.l    (A7),D0
00005A32  504F      10151          addq.w    #8,A7
00005A34  2042      10152          move.l    D2,A0
00005A36  2250      10153          move.l    (A0),A1
00005A38  5290      10154          addq.l    #1,(A0)
00005A3A  1211      10155          move.b    (A1),D1
00005A3C  4881      10156          ext.w     D1
00005A3E  48C1      10157          ext.l     D1
00005A40  D081      10158          add.l     D1,D0
00005A42  0480 0000 10159          sub.l     #48,D0
00005A46  0030      
00005A48  2600      10160          move.l    D0,D3
00005A4A  60B4      10161          bra       @vsprintf_getval_1
                    10162   @vsprintf_getval_5:
00005A4C  2003      10163          move.l    D3,D0
00005A4E  4CDF 000C 10164          movem.l   (A7)+,D2/D3
00005A52  4E5E      10165          unlk      A6
00005A54  4E75      10166          rts
                    10167   _vsprintf:
00005A56  4E56 FFCC 10168          link      A6,#-52
00005A5A  48E7 3F3C 10169          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00005A5E  45EE 0008 10170          lea       8(A6),A2
00005A62  47F8 59A4 10171          lea       @vsprintf_copy,A3
00005A66  49F9 0000 10172          lea       _ultoa,A4
00005A6A  6A44      
00005A6C  4286      10173          clr.l     D6
                    10174   vsprintf_1:
00005A6E  206E 000C 10175          move.l    12(A6),A0
00005A72  4A10      10176          tst.b     (A0)
00005A74  6700 0624 10177          beq       vsprintf_3
00005A78  206E 000C 10178          move.l    12(A6),A0
00005A7C  1010      10179          move.b    (A0),D0
00005A7E  4880      10180          ext.w     D0
00005A80  48C0      10181          ext.l     D0
00005A82  0C80 0000 10182          cmp.l     #37,D0
00005A86  0025      
00005A88  671C      10183          beq.s     vsprintf_4
00005A8A  206E 000C 10184          move.l    12(A6),A0
00005A8E  52AE 000C 10185          addq.l    #1,12(A6)
00005A92  1210      10186          move.b    (A0),D1
00005A94  4881      10187          ext.w     D1
00005A96  48C1      10188          ext.l     D1
00005A98  2F01      10189          move.l    D1,-(A7)
00005A9A  2F0A      10190          move.l    A2,-(A7)
00005A9C  4E93      10191          jsr       (A3)
00005A9E  504F      10192          addq.w    #8,A7
00005AA0  5286      10193          addq.l    #1,D6
00005AA2  6000 05F2 10194          bra       vsprintf_2
                    10195   vsprintf_4:
00005AA6  52AE 000C 10196          addq.l    #1,12(A6)
00005AAA  422E FFD3 10197          clr.b     -45(A6)
00005AAE  422E FFD2 10198          clr.b     -46(A6)
00005AB2  422E FFD0 10199          clr.b     -48(A6)
00005AB6  422E FFCF 10200          clr.b     -49(A6)
00005ABA  422E FFCE 10201          clr.b     -50(A6)
00005ABE  422E FFCD 10202          clr.b     -51(A6)
00005AC2  42AE FFFC 10203          clr.l     -4(A6)
00005AC6  7AFF      10204          moveq     #-1,D5
00005AC8  41EE FFDC 10205          lea       -36(A6),A0
00005ACC  2608      10206          move.l    A0,D3
00005ACE  2408      10207          move.l    A0,D2
                    10208   vsprintf_6:
00005AD0  206E 000C 10209          move.l    12(A6),A0
00005AD4  1010      10210          move.b    (A0),D0
00005AD6  4880      10211          ext.w     D0
00005AD8  48C0      10212          ext.l     D0
00005ADA  0C80 0000 10213          cmp.l     #43,D0
00005ADE  002B      
00005AE0  6730      10214          beq.s     vsprintf_12
00005AE2  6E18      10215          bgt.s     vsprintf_15
00005AE4  0C80 0000 10216          cmp.l     #35,D0
00005AE8  0023      
00005AEA  6700 003E 10217          beq       vsprintf_14
00005AEE  6E00 0046 10218          bgt       vsprintf_9
00005AF2  0C80 0000 10219          cmp.l     #32,D0
00005AF6  0020      
00005AF8  6724      10220          beq.s     vsprintf_13
00005AFA  603A      10221          bra.s     vsprintf_9
                    10222   vsprintf_15:
00005AFC  0C80 0000 10223          cmp.l     #45,D0
00005B00  002D      
00005B02  6702      10224          beq.s     vsprintf_11
00005B04  6030      10225          bra.s     vsprintf_9
                    10226   vsprintf_11:
00005B06  1D7C 0001 10227          move.b    #1,-51(A6)
00005B0A  FFCD      
00005B0C  52AE 000C 10228          addq.l    #1,12(A6)
00005B10  6026      10229          bra.s     vsprintf_7
                    10230   vsprintf_12:
00005B12  1D7C 0001 10231          move.b    #1,-50(A6)
00005B16  FFCE      
00005B18  52AE 000C 10232          addq.l    #1,12(A6)
00005B1C  601A      10233          bra.s     vsprintf_7
                    10234   vsprintf_13:
00005B1E  1D7C 0001 10235          move.b    #1,-49(A6)
00005B22  FFCF      
00005B24  52AE 000C 10236          addq.l    #1,12(A6)
00005B28  600E      10237          bra.s     vsprintf_7
                    10238   vsprintf_14:
00005B2A  1D7C 0001 10239          move.b    #1,-48(A6)
00005B2E  FFD0      
00005B30  52AE 000C 10240          addq.l    #1,12(A6)
00005B34  6002      10241          bra.s     vsprintf_7
                    10242   vsprintf_9:
00005B36  6002      10243          bra.s     vsprintf_8
                    10244   vsprintf_7:
00005B38  6096      10245          bra       vsprintf_6
                    10246   vsprintf_8:
00005B3A  206E 000C 10247          move.l    12(A6),A0
00005B3E  1010      10248          move.b    (A0),D0
00005B40  4880      10249          ext.w     D0
00005B42  48C0      10250          ext.l     D0
00005B44  0C80 0000 10251          cmp.l     #48,D0
00005B48  0030      
00005B4A  660A      10252          bne.s     vsprintf_16
00005B4C  52AE 000C 10253          addq.l    #1,12(A6)
00005B50  1D7C 0001 10254          move.b    #1,-46(A6)
00005B54  FFD2      
                    10255   vsprintf_16:
00005B56  486E 0010 10256          pea       16(A6)
00005B5A  486E 000C 10257          pea       12(A6)
00005B5E  6100 FE6E 10258          bsr       @vsprintf_getval
00005B62  504F      10259          addq.w    #8,A7
00005B64  2A40      10260          move.l    D0,A5
00005B66  206E 000C 10261          move.l    12(A6),A0
00005B6A  1010      10262          move.b    (A0),D0
00005B6C  4880      10263          ext.w     D0
00005B6E  48C0      10264          ext.l     D0
00005B70  0C80 0000 10265          cmp.l     #46,D0
00005B74  002E      
00005B76  6614      10266          bne.s     vsprintf_18
00005B78  52AE 000C 10267          addq.l    #1,12(A6)
00005B7C  486E 0010 10268          pea       16(A6)
00005B80  486E 000C 10269          pea       12(A6)
00005B84  6100 FE48 10270          bsr       @vsprintf_getval
00005B88  504F      10271          addq.w    #8,A7
00005B8A  2A00      10272          move.l    D0,D5
                    10273   vsprintf_18:
00005B8C  206E 000C 10274          move.l    12(A6),A0
00005B90  1010      10275          move.b    (A0),D0
00005B92  4880      10276          ext.w     D0
00005B94  48C0      10277          ext.l     D0
00005B96  0C80 0000 10278          cmp.l     #108,D0
00005B9A  006C      
00005B9C  660A      10279          bne.s     vsprintf_20
00005B9E  52AE 000C 10280          addq.l    #1,12(A6)
00005BA2  1D7C 0001 10281          move.b    #1,-45(A6)
00005BA6  FFD3      
                    10282   vsprintf_20:
00005BA8  206E 000C 10283          move.l    12(A6),A0
00005BAC  1010      10284          move.b    (A0),D0
00005BAE  4880      10285          ext.w     D0
00005BB0  48C0      10286          ext.l     D0
00005BB2  0C80 0000 10287          cmp.l     #111,D0
00005BB6  006F      
00005BB8  6700 00D4 10288          beq       vsprintf_27
00005BBC  6E34      10289          bgt.s     vsprintf_33
00005BBE  0C80 0000 10290          cmp.l     #100,D0
00005BC2  0064      
00005BC4  6700 0054 10291          beq       vsprintf_24
00005BC8  6E1C      10292          bgt.s     vsprintf_34
00005BCA  0C80 0000 10293          cmp.l     #99,D0
00005BCE  0063      
00005BD0  6700 012C 10294          beq       vsprintf_30
00005BD4  6E00 016A 10295          bgt       vsprintf_22
00005BD8  0C80 0000 10296          cmp.l     #88,D0
00005BDC  0058      
00005BDE  6700 00E6 10297          beq       vsprintf_28
00005BE2  6000 015C 10298          bra       vsprintf_22
                    10299   vsprintf_34:
00005BE6  0C80 0000 10300          cmp.l     #105,D0
00005BEA  0069      
00005BEC  672C      10301          beq.s     vsprintf_24
00005BEE  6000 0150 10302          bra       vsprintf_22
                    10303   vsprintf_33:
00005BF2  0C80 0000 10304          cmp.l     #117,D0
00005BF6  0075      
00005BF8  6700 005C 10305          beq       vsprintf_26
00005BFC  6E0E      10306          bgt.s     vsprintf_35
00005BFE  0C80 0000 10307          cmp.l     #115,D0
00005C02  0073      
00005C04  6700 011C 10308          beq       vsprintf_31
00005C08  6000 0136 10309          bra       vsprintf_22
                    10310   vsprintf_35:
00005C0C  0C80 0000 10311          cmp.l     #120,D0
00005C10  0078      
00005C12  6700 00B2 10312          beq       vsprintf_28
00005C16  6000 0128 10313          bra       vsprintf_22
                    10314   vsprintf_24:
00005C1A  4A2E FFD3 10315          tst.b     -45(A6)
00005C1E  671A      10316          beq.s     vsprintf_36
00005C20  4878 000A 10317          pea       10
00005C24  2F03      10318          move.l    D3,-(A7)
00005C26  206E 0010 10319          move.l    16(A6),A0
00005C2A  58AE 0010 10320          addq.l    #4,16(A6)
00005C2E  2F10      10321          move.l    (A0),-(A7)
00005C30  6100 0D8E 10322          bsr       _ltoa
00005C34  DEFC 000C 10323          add.w     #12,A7
00005C38  6018      10324          bra.s     vsprintf_37
                    10325   vsprintf_36:
00005C3A  4878 000A 10326          pea       10
00005C3E  2F03      10327          move.l    D3,-(A7)
00005C40  206E 0010 10328          move.l    16(A6),A0
00005C44  58AE 0010 10329          addq.l    #4,16(A6)
00005C48  2F10      10330          move.l    (A0),-(A7)
00005C4A  6100 0D74 10331          bsr       _ltoa
00005C4E  DEFC 000C 10332          add.w     #12,A7
                    10333   vsprintf_37:
00005C52  6000 00FA 10334          bra       vsprintf_23
                    10335   vsprintf_26:
00005C56  4A2E FFD3 10336          tst.b     -45(A6)
00005C5A  6718      10337          beq.s     vsprintf_38
00005C5C  4878 000A 10338          pea       10
00005C60  2F03      10339          move.l    D3,-(A7)
00005C62  206E 0010 10340          move.l    16(A6),A0
00005C66  58AE 0010 10341          addq.l    #4,16(A6)
00005C6A  2F10      10342          move.l    (A0),-(A7)
00005C6C  4E94      10343          jsr       (A4)
00005C6E  DEFC 000C 10344          add.w     #12,A7
00005C72  6016      10345          bra.s     vsprintf_39
                    10346   vsprintf_38:
00005C74  4878 000A 10347          pea       10
00005C78  2F03      10348          move.l    D3,-(A7)
00005C7A  206E 0010 10349          move.l    16(A6),A0
00005C7E  58AE 0010 10350          addq.l    #4,16(A6)
00005C82  2F10      10351          move.l    (A0),-(A7)
00005C84  4E94      10352          jsr       (A4)
00005C86  DEFC 000C 10353          add.w     #12,A7
                    10354   vsprintf_39:
00005C8A  6000 00C2 10355          bra       vsprintf_23
                    10356   vsprintf_27:
00005C8E  4A2E FFD3 10357          tst.b     -45(A6)
00005C92  6718      10358          beq.s     vsprintf_40
00005C94  4878 0008 10359          pea       8
00005C98  2F03      10360          move.l    D3,-(A7)
00005C9A  206E 0010 10361          move.l    16(A6),A0
00005C9E  58AE 0010 10362          addq.l    #4,16(A6)
00005CA2  2F10      10363          move.l    (A0),-(A7)
00005CA4  4E94      10364          jsr       (A4)
00005CA6  DEFC 000C 10365          add.w     #12,A7
00005CAA  6016      10366          bra.s     vsprintf_41
                    10367   vsprintf_40:
00005CAC  4878 0008 10368          pea       8
00005CB0  2F03      10369          move.l    D3,-(A7)
00005CB2  206E 0010 10370          move.l    16(A6),A0
00005CB6  58AE 0010 10371          addq.l    #4,16(A6)
00005CBA  2F10      10372          move.l    (A0),-(A7)
00005CBC  4E94      10373          jsr       (A4)
00005CBE  DEFC 000C 10374          add.w     #12,A7
                    10375   vsprintf_41:
00005CC2  6000 008A 10376          bra       vsprintf_23
                    10377   vsprintf_28:
00005CC6  4A2E FFD3 10378          tst.b     -45(A6)
00005CCA  6718      10379          beq.s     vsprintf_42
00005CCC  4878 0010 10380          pea       16
00005CD0  2F03      10381          move.l    D3,-(A7)
00005CD2  206E 0010 10382          move.l    16(A6),A0
00005CD6  58AE 0010 10383          addq.l    #4,16(A6)
00005CDA  2F10      10384          move.l    (A0),-(A7)
00005CDC  4E94      10385          jsr       (A4)
00005CDE  DEFC 000C 10386          add.w     #12,A7
00005CE2  6016      10387          bra.s     vsprintf_43
                    10388   vsprintf_42:
00005CE4  4878 0010 10389          pea       16
00005CE8  2F03      10390          move.l    D3,-(A7)
00005CEA  206E 0010 10391          move.l    16(A6),A0
00005CEE  58AE 0010 10392          addq.l    #4,16(A6)
00005CF2  2F10      10393          move.l    (A0),-(A7)
00005CF4  4E94      10394          jsr       (A4)
00005CF6  DEFC 000C 10395          add.w     #12,A7
                    10396   vsprintf_43:
00005CFA  6000 0052 10397          bra       vsprintf_23
                    10398   vsprintf_30:
00005CFE  206E 0010 10399          move.l    16(A6),A0
00005D02  58AE 0010 10400          addq.l    #4,16(A6)
00005D06  2010      10401          move.l    (A0),D0
00005D08  2042      10402          move.l    D2,A0
00005D0A  5282      10403          addq.l    #1,D2
00005D0C  1080      10404          move.b    D0,(A0)
00005D0E  2042      10405          move.l    D2,A0
00005D10  4210      10406          clr.b     (A0)
00005D12  200D      10407          move.l    A5,D0
00005D14  6704      10408          beq.s     vsprintf_44
00005D16  200D      10409          move.l    A5,D0
00005D18  6002      10410          bra.s     vsprintf_45
                    10411   vsprintf_44:
00005D1A  7001      10412          moveq     #1,D0
                    10413   vsprintf_45:
00005D1C  2A00      10414          move.l    D0,D5
00005D1E  6000 002E 10415          bra       vsprintf_23
                    10416   vsprintf_31:
00005D22  206E 0010 10417          move.l    16(A6),A0
00005D26  58AE 0010 10418          addq.l    #4,16(A6)
00005D2A  2610      10419          move.l    (A0),D3
00005D2C  0C85 FFFF 10420          cmp.l     #-1,D5
00005D30  FFFF      
00005D32  660A      10421          bne.s     vsprintf_46
00005D34  2F03      10422          move.l    D3,-(A7)
00005D36  6100 0E0E 10423          bsr       _strlen
00005D3A  584F      10424          addq.w    #4,A7
00005D3C  2A00      10425          move.l    D0,D5
                    10426   vsprintf_46:
00005D3E  600E      10427          bra.s     vsprintf_23
                    10428   vsprintf_22:
00005D40  206E 000C 10429          move.l    12(A6),A0
00005D44  2242      10430          move.l    D2,A1
00005D46  5282      10431          addq.l    #1,D2
00005D48  1290      10432          move.b    (A0),(A1)
00005D4A  2042      10433          move.l    D2,A0
00005D4C  4210      10434          clr.b     (A0)
                    10435   vsprintf_23:
00005D4E  2F03      10436          move.l    D3,-(A7)
00005D50  6100 0DF4 10437          bsr       _strlen
00005D54  584F      10438          addq.w    #4,A7
00005D56  1800      10439          move.b    D0,D4
00005D58  206E 000C 10440          move.l    12(A6),A0
00005D5C  1010      10441          move.b    (A0),D0
00005D5E  4880      10442          ext.w     D0
00005D60  48C0      10443          ext.l     D0
00005D62  0C80 0000 10444          cmp.l     #115,D0
00005D66  0073      
00005D68  6618      10445          bne.s     vsprintf_48
00005D6A  0C85 0000 10446          cmp.l     #0,D5
00005D6E  0000      
00005D70  6D10      10447          blt.s     vsprintf_48
00005D72  4884      10448          ext.w     D4
00005D74  48C4      10449          ext.l     D4
00005D76  B885      10450          cmp.l     D5,D4
00005D78  6F04      10451          ble.s     vsprintf_50
00005D7A  1005      10452          move.b    D5,D0
00005D7C  6002      10453          bra.s     vsprintf_51
                    10454   vsprintf_50:
00005D7E  1004      10455          move.b    D4,D0
                    10456   vsprintf_51:
00005D80  1800      10457          move.b    D0,D4
                    10458   vsprintf_48:
00005D82  206E 000C 10459          move.l    12(A6),A0
00005D86  1010      10460          move.b    (A0),D0
00005D88  4880      10461          ext.w     D0
00005D8A  48C0      10462          ext.l     D0
00005D8C  0C80 0000 10463          cmp.l     #88,D0
00005D90  0058      
00005D92  6600 0026 10464          bne       vsprintf_56
00005D96  41EE FFDC 10465          lea       -36(A6),A0
00005D9A  2408      10466          move.l    A0,D2
                    10467   vsprintf_54:
00005D9C  2042      10468          move.l    D2,A0
00005D9E  4A10      10469          tst.b     (A0)
00005DA0  6718      10470          beq.s     vsprintf_56
00005DA2  2042      10471          move.l    D2,A0
00005DA4  1210      10472          move.b    (A0),D1
00005DA6  4881      10473          ext.w     D1
00005DA8  48C1      10474          ext.l     D1
00005DAA  2F01      10475          move.l    D1,-(A7)
00005DAC  6100 FB66 10476          bsr       _toupper
00005DB0  584F      10477          addq.w    #4,A7
00005DB2  2042      10478          move.l    D2,A0
00005DB4  1080      10479          move.b    D0,(A0)
00005DB6  5282      10480          addq.l    #1,D2
00005DB8  60E2      10481          bra       vsprintf_54
                    10482   vsprintf_56:
00005DBA  7E00      10483          moveq     #0,D7
00005DBC  41EE FFD4 10484          lea       -44(A6),A0
00005DC0  2408      10485          move.l    A0,D2
00005DC2  206E 000C 10486          move.l    12(A6),A0
00005DC6  1010      10487          move.b    (A0),D0
00005DC8  4880      10488          ext.w     D0
00005DCA  48C0      10489          ext.l     D0
00005DCC  0C80 0000 10490          cmp.l     #100,D0
00005DD0  0064      
00005DD2  6714      10491          beq.s     vsprintf_59
00005DD4  206E 000C 10492          move.l    12(A6),A0
00005DD8  1010      10493          move.b    (A0),D0
00005DDA  4880      10494          ext.w     D0
00005DDC  48C0      10495          ext.l     D0
00005DDE  0C80 0000 10496          cmp.l     #105,D0
00005DE2  0069      
00005DE4  6600 0076 10497          bne       vsprintf_65
                    10498   vsprintf_59:
00005DE8  4A2E FFCE 10499          tst.b     -50(A6)
00005DEC  6612      10500          bne.s     vsprintf_62
00005DEE  2043      10501          move.l    D3,A0
00005DF0  1010      10502          move.b    (A0),D0
00005DF2  4880      10503          ext.w     D0
00005DF4  48C0      10504          ext.l     D0
00005DF6  0C80 0000 10505          cmp.l     #45,D0
00005DFA  002D      
00005DFC  6600 002E 10506          bne       vsprintf_60
                    10507   vsprintf_62:
00005E00  2043      10508          move.l    D3,A0
00005E02  1010      10509          move.b    (A0),D0
00005E04  4880      10510          ext.w     D0
00005E06  48C0      10511          ext.l     D0
00005E08  0C80 0000 10512          cmp.l     #45,D0
00005E0C  002D      
00005E0E  660E      10513          bne.s     vsprintf_63
00005E10  2043      10514          move.l    D3,A0
00005E12  5283      10515          addq.l    #1,D3
00005E14  2242      10516          move.l    D2,A1
00005E16  5282      10517          addq.l    #1,D2
00005E18  1290      10518          move.b    (A0),(A1)
00005E1A  5304      10519          subq.b    #1,D4
00005E1C  6008      10520          bra.s     vsprintf_64
                    10521   vsprintf_63:
00005E1E  2042      10522          move.l    D2,A0
00005E20  5282      10523          addq.l    #1,D2
00005E22  10BC 002B 10524          move.b    #43,(A0)
                    10525   vsprintf_64:
00005E26  5287      10526          addq.l    #1,D7
00005E28  6000 0032 10527          bra       vsprintf_65
                    10528   vsprintf_60:
00005E2C  4A2E FFCF 10529          tst.b     -49(A6)
00005E30  6700 002A 10530          beq       vsprintf_65
00005E34  2043      10531          move.l    D3,A0
00005E36  1010      10532          move.b    (A0),D0
00005E38  4880      10533          ext.w     D0
00005E3A  48C0      10534          ext.l     D0
00005E3C  0C80 0000 10535          cmp.l     #45,D0
00005E40  002D      
00005E42  660E      10536          bne.s     vsprintf_67
00005E44  2043      10537          move.l    D3,A0
00005E46  5283      10538          addq.l    #1,D3
00005E48  2242      10539          move.l    D2,A1
00005E4A  5282      10540          addq.l    #1,D2
00005E4C  1290      10541          move.b    (A0),(A1)
00005E4E  5304      10542          subq.b    #1,D4
00005E50  6008      10543          bra.s     vsprintf_68
                    10544   vsprintf_67:
00005E52  2042      10545          move.l    D2,A0
00005E54  5282      10546          addq.l    #1,D2
00005E56  10BC 0020 10547          move.b    #32,(A0)
                    10548   vsprintf_68:
00005E5A  5287      10549          addq.l    #1,D7
                    10550   vsprintf_65:
00005E5C  4A2E FFD0 10551          tst.b     -48(A6)
00005E60  6700 0066 10552          beq       vsprintf_77
00005E64  206E 000C 10553          move.l    12(A6),A0
00005E68  1010      10554          move.b    (A0),D0
00005E6A  4880      10555          ext.w     D0
00005E6C  48C0      10556          ext.l     D0
00005E6E  0C80 0000 10557          cmp.l     #111,D0
00005E72  006F      
00005E74  671A      10558          beq.s     vsprintf_73
00005E76  6E0C      10559          bgt.s     vsprintf_76
00005E78  0C80 0000 10560          cmp.l     #88,D0
00005E7C  0058      
00005E7E  6710      10561          beq.s     vsprintf_73
00005E80  6000 0046 10562          bra       vsprintf_77
                    10563   vsprintf_76:
00005E84  0C80 0000 10564          cmp.l     #120,D0
00005E88  0078      
00005E8A  6704      10565          beq.s     vsprintf_73
00005E8C  6000 003A 10566          bra       vsprintf_77
                    10567   vsprintf_73:
00005E90  2042      10568          move.l    D2,A0
00005E92  5282      10569          addq.l    #1,D2
00005E94  10BC 0030 10570          move.b    #48,(A0)
00005E98  5287      10571          addq.l    #1,D7
00005E9A  206E 000C 10572          move.l    12(A6),A0
00005E9E  1010      10573          move.b    (A0),D0
00005EA0  4880      10574          ext.w     D0
00005EA2  48C0      10575          ext.l     D0
00005EA4  0C80 0000 10576          cmp.l     #120,D0
00005EA8  0078      
00005EAA  6712      10577          beq.s     vsprintf_79
00005EAC  206E 000C 10578          move.l    12(A6),A0
00005EB0  1010      10579          move.b    (A0),D0
00005EB2  4880      10580          ext.w     D0
00005EB4  48C0      10581          ext.l     D0
00005EB6  0C80 0000 10582          cmp.l     #88,D0
00005EBA  0058      
00005EBC  660A      10583          bne.s     vsprintf_77
                    10584   vsprintf_79:
00005EBE  2042      10585          move.l    D2,A0
00005EC0  5282      10586          addq.l    #1,D2
00005EC2  10BC 0078 10587          move.b    #120,(A0)
00005EC6  5287      10588          addq.l    #1,D7
                    10589   vsprintf_77:
00005EC8  2042      10590          move.l    D2,A0
00005ECA  4210      10591          clr.b     (A0)
00005ECC  206E 000C 10592          move.l    12(A6),A0
00005ED0  1010      10593          move.b    (A0),D0
00005ED2  4880      10594          ext.w     D0
00005ED4  48C0      10595          ext.l     D0
00005ED6  0C80 0000 10596          cmp.l     #105,D0
00005EDA  0069      
00005EDC  6700 0076 10597          beq       vsprintf_82
00005EE0  6E42      10598          bgt.s     vsprintf_93
00005EE2  0C80 0000 10599          cmp.l     #99,D0
00005EE6  0063      
00005EE8  6700 0084 10600          beq       vsprintf_96
00005EEC  6E1C      10601          bgt.s     vsprintf_94
00005EEE  0C80 0000 10602          cmp.l     #88,D0
00005EF2  0058      
00005EF4  6700 005E 10603          beq       vsprintf_82
00005EF8  6E00 0184 10604          bgt       vsprintf_80
00005EFC  0C80 0000 10605          cmp.l     #69,D0
00005F00  0045      
00005F02  6700 0050 10606          beq       vsprintf_82
00005F06  6000 0176 10607          bra       vsprintf_80
                    10608   vsprintf_94:
00005F0A  0C80 0000 10609          cmp.l     #101,D0
00005F0E  0065      
00005F10  6700 0042 10610          beq       vsprintf_82
00005F14  6E00 0168 10611          bgt       vsprintf_80
00005F18  0C80 0000 10612          cmp.l     #100,D0
00005F1C  0064      
00005F1E  6734      10613          beq.s     vsprintf_82
00005F20  6000 015C 10614          bra       vsprintf_80
                    10615   vsprintf_93:
00005F24  0C80 0000 10616          cmp.l     #117,D0
00005F28  0075      
00005F2A  6728      10617          beq.s     vsprintf_82
00005F2C  6E1A      10618          bgt.s     vsprintf_95
00005F2E  0C80 0000 10619          cmp.l     #115,D0
00005F32  0073      
00005F34  6700 0038 10620          beq       vsprintf_96
00005F38  6E00 0144 10621          bgt       vsprintf_80
00005F3C  0C80 0000 10622          cmp.l     #111,D0
00005F40  006F      
00005F42  6710      10623          beq.s     vsprintf_82
00005F44  6000 0138 10624          bra       vsprintf_80
                    10625   vsprintf_95:
00005F48  0C80 0000 10626          cmp.l     #120,D0
00005F4C  0078      
00005F4E  6704      10627          beq.s     vsprintf_82
00005F50  6000 012C 10628          bra       vsprintf_80
                    10629   vsprintf_82:
00005F54  4A2E FFD2 10630          tst.b     -46(A6)
00005F58  6714      10631          beq.s     vsprintf_96
00005F5A  4A2E FFCD 10632          tst.b     -51(A6)
00005F5E  660E      10633          bne.s     vsprintf_96
00005F60  200D      10634          move.l    A5,D0
00005F62  9087      10635          sub.l     D7,D0
00005F64  4884      10636          ext.w     D4
00005F66  48C4      10637          ext.l     D4
00005F68  9084      10638          sub.l     D4,D0
00005F6A  2D40 FFFC 10639          move.l    D0,-4(A6)
                    10640   vsprintf_96:
00005F6E  202E FFFC 10641          move.l    -4(A6),D0
00005F72  0C80 0000 10642          cmp.l     #0,D0
00005F76  0000      
00005F78  6C04      10643          bge.s     vsprintf_98
00005F7A  42AE FFFC 10644          clr.l     -4(A6)
                    10645   vsprintf_98:
00005F7E  4A2E FFCD 10646          tst.b     -51(A6)
00005F82  6600 0030 10647          bne       vsprintf_104
00005F86  4884      10648          ext.w     D4
00005F88  48C4      10649          ext.l     D4
00005F8A  2004      10650          move.l    D4,D0
00005F8C  D0AE FFFC 10651          add.l     -4(A6),D0
00005F90  D087      10652          add.l     D7,D0
00005F92  1D40 FFD1 10653          move.b    D0,-47(A6)
                    10654   vsprintf_102:
00005F96  102E FFD1 10655          move.b    -47(A6),D0
00005F9A  4880      10656          ext.w     D0
00005F9C  48C0      10657          ext.l     D0
00005F9E  220D      10658          move.l    A5,D1
00005FA0  534D      10659          subq.w    #1,A5
00005FA2  B081      10660          cmp.l     D1,D0
00005FA4  6C0E      10661          bge.s     vsprintf_104
00005FA6  4878 0020 10662          pea       32
00005FAA  2F0A      10663          move.l    A2,-(A7)
00005FAC  4E93      10664          jsr       (A3)
00005FAE  504F      10665          addq.w    #8,A7
00005FB0  5286      10666          addq.l    #1,D6
00005FB2  60E2      10667          bra       vsprintf_102
                    10668   vsprintf_104:
00005FB4  41EE FFD4 10669          lea       -44(A6),A0
00005FB8  2408      10670          move.l    A0,D2
                    10671   vsprintf_105:
00005FBA  2042      10672          move.l    D2,A0
00005FBC  4A10      10673          tst.b     (A0)
00005FBE  6716      10674          beq.s     vsprintf_107
00005FC0  2042      10675          move.l    D2,A0
00005FC2  5282      10676          addq.l    #1,D2
00005FC4  1210      10677          move.b    (A0),D1
00005FC6  4881      10678          ext.w     D1
00005FC8  48C1      10679          ext.l     D1
00005FCA  2F01      10680          move.l    D1,-(A7)
00005FCC  2F0A      10681          move.l    A2,-(A7)
00005FCE  4E93      10682          jsr       (A3)
00005FD0  504F      10683          addq.w    #8,A7
00005FD2  5286      10684          addq.l    #1,D6
00005FD4  60E4      10685          bra       vsprintf_105
                    10686   vsprintf_107:
00005FD6  202E FFFC 10687          move.l    -4(A6),D0
00005FDA  1D40 FFD1 10688          move.b    D0,-47(A6)
                    10689   vsprintf_108:
00005FDE  102E FFD1 10690          move.b    -47(A6),D0
00005FE2  532E FFD1 10691          subq.b    #1,-47(A6)
00005FE6  4A00      10692          tst.b     D0
00005FE8  670E      10693          beq.s     vsprintf_110
00005FEA  4878 0030 10694          pea       48
00005FEE  2F0A      10695          move.l    A2,-(A7)
00005FF0  4E93      10696          jsr       (A3)
00005FF2  504F      10697          addq.w    #8,A7
00005FF4  5286      10698          addq.l    #1,D6
00005FF6  60E6      10699          bra       vsprintf_108
                    10700   vsprintf_110:
00005FF8  2043      10701          move.l    D3,A0
00005FFA  4A10      10702          tst.b     (A0)
00005FFC  6700 0048 10703          beq       vsprintf_113
00006000  206E 000C 10704          move.l    12(A6),A0
00006004  1010      10705          move.b    (A0),D0
00006006  4880      10706          ext.w     D0
00006008  48C0      10707          ext.l     D0
0000600A  0C80 0000 10708          cmp.l     #115,D0
0000600E  0073      
00006010  670C      10709          beq.s     vsprintf_116
00006012  6E18      10710          bgt.s     vsprintf_119
00006014  0C80 0000 10711          cmp.l     #99,D0
00006018  0063      
0000601A  6702      10712          beq.s     vsprintf_116
0000601C  600E      10713          bra.s     vsprintf_119
                    10714   vsprintf_116:
0000601E  2005      10715          move.l    D5,D0
00006020  5385      10716          subq.l    #1,D5
00006022  0C80 0000 10717          cmp.l     #0,D0
00006026  0000      
00006028  6E02      10718          bgt.s     vsprintf_119
0000602A  6016      10719          bra.s     vsprintf_115
                    10720   vsprintf_119:
0000602C  2043      10721          move.l    D3,A0
0000602E  5283      10722          addq.l    #1,D3
00006030  1210      10723          move.b    (A0),D1
00006032  4881      10724          ext.w     D1
00006034  48C1      10725          ext.l     D1
00006036  2F01      10726          move.l    D1,-(A7)
00006038  2F0A      10727          move.l    A2,-(A7)
0000603A  4E93      10728          jsr       (A3)
0000603C  504F      10729          addq.w    #8,A7
0000603E  5286      10730          addq.l    #1,D6
00006040  6002      10731          bra.s     vsprintf_112
                    10732   vsprintf_115:
00006042  6002      10733          bra.s     vsprintf_113
                    10734   vsprintf_112:
00006044  60B2      10735          bra       vsprintf_110
                    10736   vsprintf_113:
00006046  4A2E FFCD 10737          tst.b     -51(A6)
0000604A  6700 0030 10738          beq       vsprintf_125
0000604E  4884      10739          ext.w     D4
00006050  48C4      10740          ext.l     D4
00006052  2004      10741          move.l    D4,D0
00006054  D0AE FFFC 10742          add.l     -4(A6),D0
00006058  D087      10743          add.l     D7,D0
0000605A  1D40 FFD1 10744          move.b    D0,-47(A6)
                    10745   vsprintf_123:
0000605E  102E FFD1 10746          move.b    -47(A6),D0
00006062  4880      10747          ext.w     D0
00006064  48C0      10748          ext.l     D0
00006066  220D      10749          move.l    A5,D1
00006068  534D      10750          subq.w    #1,A5
0000606A  B081      10751          cmp.l     D1,D0
0000606C  6C0E      10752          bge.s     vsprintf_125
0000606E  4878 0020 10753          pea       32
00006072  2F0A      10754          move.l    A2,-(A7)
00006074  4E93      10755          jsr       (A3)
00006076  504F      10756          addq.w    #8,A7
00006078  5386      10757          subq.l    #1,D6
0000607A  60E2      10758          bra       vsprintf_123
                    10759   vsprintf_125:
0000607C  6014      10760          bra.s     vsprintf_81
                    10761   vsprintf_80:
0000607E  206E 000C 10762          move.l    12(A6),A0
00006082  1210      10763          move.b    (A0),D1
00006084  4881      10764          ext.w     D1
00006086  48C1      10765          ext.l     D1
00006088  2F01      10766          move.l    D1,-(A7)
0000608A  2F0A      10767          move.l    A2,-(A7)
0000608C  4E93      10768          jsr       (A3)
0000608E  504F      10769          addq.w    #8,A7
00006090  5286      10770          addq.l    #1,D6
                    10771   vsprintf_81:
00006092  52AE 000C 10772          addq.l    #1,12(A6)
                    10773   vsprintf_2:
00006096  6000 F9D6 10774          bra       vsprintf_1
                    10775   vsprintf_3:
0000609A  4A92      10776          tst.l     (A2)
0000609C  6710      10777          beq.s     vsprintf_126
0000609E  4201      10778          clr.b     D1
000060A0  C2BC 0000 10779          and.l     #255,D1
000060A4  00FF      
000060A6  2F01      10780          move.l    D1,-(A7)
000060A8  2F0A      10781          move.l    A2,-(A7)
000060AA  4E93      10782          jsr       (A3)
000060AC  504F      10783          addq.w    #8,A7
                    10784   vsprintf_126:
000060AE  2006      10785          move.l    D6,D0
000060B0  4CDF 3CFC 10786          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000060B4  4E5E      10787          unlk      A6
000060B6  4E75      10788          rts
                    10789   @vsscanf_scanread:
000060B8  4E56 FFFC 10790          link      A6,#-4
000060BC  48E7 0020 10791          movem.l   A2,-(A7)
000060C0  45F9 0000 10792          lea       @vsscanf_bufx,A2
000060C4  8BB0      
000060C6  4AAE 0008 10793          tst.l     8(A6)
000060CA  6722      10794          beq.s     @vsscanf_scanread_1
000060CC  206E 0008 10795          move.l    8(A6),A0
000060D0  58AE 0008 10796          addq.l    #4,8(A6)
000060D4  2050      10797          move.l    (A0),A0
000060D6  1010      10798          move.b    (A0),D0
000060D8  4880      10799          ext.w     D0
000060DA  48C0      10800          ext.l     D0
000060DC  2D40 FFFC 10801          move.l    D0,-4(A6)
000060E0  6706      10802          beq.s     @vsscanf_scanread_3
000060E2  202E FFFC 10803          move.l    -4(A6),D0
000060E6  6002      10804          bra.s     @vsscanf_scanread_4
                    10805   @vsscanf_scanread_3:
000060E8  70FF      10806          moveq     #-1,D0
                    10807   @vsscanf_scanread_4:
000060EA  6000 0032 10808          bra       @vsscanf_scanread_5
                    10809   @vsscanf_scanread_1:
000060EE  2052      10810          move.l    (A2),A0
000060F0  1010      10811          move.b    (A0),D0
000060F2  6620      10812          bne.s     @vsscanf_scanread_6
000060F4  4879 0803 10813          pea       @vsscanf_buf
000060F8  05AA      
000060FA  6100 0A5C 10814          bsr       _gets
000060FE  584F      10815          addq.w    #4,A7
00006100  2480      10816          move.l    D0,(A2)
00006102  4879 0000 10817          pea       @vsscanf_1
00006106  8BB4      
00006108  4879 0803 10818          pea       @vsscanf_buf
0000610C  05AA      
0000610E  6100 F7EE 10819          bsr       _strcat
00006112  504F      10820          addq.w    #8,A7
                    10821   @vsscanf_scanread_6:
00006114  2052      10822          move.l    (A2),A0
00006116  5292      10823          addq.l    #1,(A2)
00006118  1010      10824          move.b    (A0),D0
0000611A  4880      10825          ext.w     D0
0000611C  48C0      10826          ext.l     D0
                    10827   @vsscanf_scanread_5:
0000611E  4CDF 0400 10828          movem.l   (A7)+,A2
00006122  4E5E      10829          unlk      A6
00006124  4E75      10830          rts
                    10831   @vsscanf_scanputback:
00006126  4E56 0000 10832          link      A6,#0
0000612A  48E7 3000 10833          movem.l   D2/D3,-(A7)
0000612E  242E 000C 10834          move.l    12(A6),D2
00006132  262E 0008 10835          move.l    8(A6),D3
00006136  6718      10836          beq.s     @vsscanf_scanputback_1
00006138  0C82 FFFF 10837          cmp.l     #-1,D2
0000613C  FFFF      
0000613E  670A      10838          beq.s     @vsscanf_scanputback_3
00006140  5983      10839          subq.l    #4,D3
00006142  2043      10840          move.l    D3,A0
00006144  2050      10841          move.l    (A0),A0
00006146  1082      10842          move.b    D2,(A0)
00006148  6004      10843          bra.s     @vsscanf_scanputback_4
                    10844   @vsscanf_scanputback_3:
0000614A  2043      10845          move.l    D3,A0
0000614C  5390      10846          subq.l    #1,(A0)
                    10847   @vsscanf_scanputback_4:
0000614E  602E      10848          bra.s     @vsscanf_scanputback_6
                    10849   @vsscanf_scanputback_1:
00006150  41F9 0803 10850          lea       @vsscanf_buf,A0
00006154  05AA      
00006156  2008      10851          move.l    A0,D0
00006158  B0B9 0000 10852          cmp.l     @vsscanf_bufx,D0
0000615C  8BB0      
0000615E  6610      10853          bne.s     @vsscanf_scanputback_5
00006160  4239 0803 10854          clr.b     @vsscanf_buf
00006164  05AA      
00006166  2F02      10855          move.l    D2,-(A7)
00006168  6100 0A60 10856          bsr       _ungetch
0000616C  584F      10857          addq.w    #4,A7
0000616E  600E      10858          bra.s     @vsscanf_scanputback_6
                    10859   @vsscanf_scanputback_5:
00006170  53B9 0000 10860          subq.l    #1,@vsscanf_bufx
00006174  8BB0      
00006176  2079 0000 10861          move.l    @vsscanf_bufx,A0
0000617A  8BB0      
0000617C  1082      10862          move.b    D2,(A0)
                    10863   @vsscanf_scanputback_6:
0000617E  2002      10864          move.l    D2,D0
00006180  4CDF 000C 10865          movem.l   (A7)+,D2/D3
00006184  4E5E      10866          unlk      A6
00006186  4E75      10867          rts
                    10868   @vsscanf_scanspace:
00006188  4E56 0000 10869          link      A6,#0
0000618C  48E7 2000 10870          movem.l   D2,-(A7)
                    10871   @vsscanf_scanspace_1:
00006190  2F2E 0008 10872          move.l    8(A6),-(A7)
00006194  6100 FF22 10873          bsr       @vsscanf_scanread
00006198  584F      10874          addq.w    #4,A7
0000619A  2400      10875          move.l    D0,D2
0000619C  206E 000C 10876          move.l    12(A6),A0
000061A0  5290      10877          addq.l    #1,(A0)
000061A2  2042      10878          move.l    D2,A0
000061A4  43F9 0000 10879          lea       __ctype,A1
000061A8  8BC2      
000061AA  1030 9801 10880          move.b    1(A0,A1.L),D0
000061AE  C03C 0010 10881          and.b     #16,D0
000061B2  66DC      10882          bne       @vsscanf_scanspace_1
000061B4  2002      10883          move.l    D2,D0
000061B6  4CDF 0004 10884          movem.l   (A7)+,D2
000061BA  4E5E      10885          unlk      A6
000061BC  4E75      10886          rts
                    10887   @vsscanf_scanselect:
000061BE  4E56 0000 10888          link      A6,#0
000061C2  48E7 3F20 10889          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
000061C6  262E 000C 10890          move.l    12(A6),D3
000061CA  2C2E 0018 10891          move.l    24(A6),D6
000061CE  2E2E 0014 10892          move.l    20(A6),D7
000061D2  2043      10893          move.l    D3,A0
000061D4  1010      10894          move.b    (A0),D0
000061D6  4880      10895          ext.w     D0
000061D8  48C0      10896          ext.l     D0
000061DA  0C80 0000 10897          cmp.l     #94,D0
000061DE  005E      
000061E0  6608      10898          bne.s     @vsscanf_scanselect_1
000061E2  347C 0001 10899          move.w    #1,A2
000061E6  5283      10900          addq.l    #1,D3
000061E8  6004      10901          bra.s     @vsscanf_scanselect_2
                    10902   @vsscanf_scanselect_1:
000061EA  347C 0000 10903          move.w    #0,A2
                    10904   @vsscanf_scanselect_2:
000061EE  202E 0010 10905          move.l    16(A6),D0
000061F2  53AE 0010 10906          subq.l    #1,16(A6)
000061F6  4A80      10907          tst.l     D0
000061F8  6700 0108 10908          beq       @vsscanf_scanselect_5
000061FC  2F2E 0008 10909          move.l    8(A6),-(A7)
00006200  6100 FEB6 10910          bsr       @vsscanf_scanread
00006204  584F      10911          addq.w    #4,A7
00006206  2800      10912          move.l    D0,D4
00006208  0C84 FFFF 10913          cmp.l     #-1,D4
0000620C  FFFF      
0000620E  6604      10914          bne.s     @vsscanf_scanselect_6
00006210  6000 00F0 10915          bra       @vsscanf_scanselect_5
                    10916   @vsscanf_scanselect_6:
00006214  206E 001C 10917          move.l    28(A6),A0
00006218  5290      10918          addq.l    #1,(A0)
0000621A  4285      10919          clr.l     D5
0000621C  4282      10920          clr.l     D2
                    10921   @vsscanf_scanselect_8:
0000621E  2043      10922          move.l    D3,A0
00006220  1030 2800 10923          move.b    0(A0,D2.L),D0
00006224  4880      10924          ext.w     D0
00006226  48C0      10925          ext.l     D0
00006228  0C80 0000 10926          cmp.l     #93,D0
0000622C  005D      
0000622E  6700 008E 10927          beq       @vsscanf_scanselect_10
00006232  4A82      10928          tst.l     D2
00006234  6716      10929          beq.s     @vsscanf_scanselect_11
00006236  2043      10930          move.l    D3,A0
00006238  1030 2800 10931          move.b    0(A0,D2.L),D0
0000623C  4880      10932          ext.w     D0
0000623E  48C0      10933          ext.l     D0
00006240  0C80 0000 10934          cmp.l     #93,D0
00006244  005D      
00006246  6604      10935          bne.s     @vsscanf_scanselect_11
00006248  6000 0074 10936          bra       @vsscanf_scanselect_10
                    10937   @vsscanf_scanselect_11:
0000624C  4A82      10938          tst.l     D2
0000624E  6700 0058 10939          beq       @vsscanf_scanselect_15
00006252  2043      10940          move.l    D3,A0
00006254  1030 2800 10941          move.b    0(A0,D2.L),D0
00006258  4880      10942          ext.w     D0
0000625A  48C0      10943          ext.l     D0
0000625C  0C80 0000 10944          cmp.l     #45,D0
00006260  002D      
00006262  6600 0044 10945          bne       @vsscanf_scanselect_15
00006266  2043      10946          move.l    D3,A0
00006268  2002      10947          move.l    D2,D0
0000626A  5380      10948          subq.l    #1,D0
0000626C  2243      10949          move.l    D3,A1
0000626E  2F08      10950          move.l    A0,-(A7)
00006270  2042      10951          move.l    D2,A0
00006272  1230 0800 10952          move.b    0(A0,D0.L),D1
00006276  B230 9801 10953          cmp.b     1(A0,A1.L),D1
0000627A  6C00 002C 10954          bge       @vsscanf_scanselect_15
0000627E  205F      10955          move.l    (A7)+,A0
00006280  2043      10956          move.l    D3,A0
00006282  2002      10957          move.l    D2,D0
00006284  5380      10958          subq.l    #1,D0
00006286  1030 0800 10959          move.b    0(A0,D0.L),D0
0000628A  4880      10960          ext.w     D0
0000628C  48C0      10961          ext.l     D0
0000628E  B880      10962          cmp.l     D0,D4
00006290  6D12      10963          blt.s     @vsscanf_scanselect_17
00006292  2043      10964          move.l    D3,A0
00006294  2242      10965          move.l    D2,A1
00006296  1031 8801 10966          move.b    1(A1,A0.L),D0
0000629A  4880      10967          ext.w     D0
0000629C  48C0      10968          ext.l     D0
0000629E  B880      10969          cmp.l     D0,D4
000062A0  6E02      10970          bgt.s     @vsscanf_scanselect_17
000062A2  601A      10971          bra.s     @vsscanf_scanselect_10
                    10972   @vsscanf_scanselect_17:
000062A4  5282      10973          addq.l    #1,D2
000062A6  6010      10974          bra.s     @vsscanf_scanselect_19
                    10975   @vsscanf_scanselect_15:
000062A8  2043      10976          move.l    D3,A0
000062AA  1030 2800 10977          move.b    0(A0,D2.L),D0
000062AE  4880      10978          ext.w     D0
000062B0  48C0      10979          ext.l     D0
000062B2  B880      10980          cmp.l     D0,D4
000062B4  6602      10981          bne.s     @vsscanf_scanselect_19
000062B6  6006      10982          bra.s     @vsscanf_scanselect_10
                    10983   @vsscanf_scanselect_19:
000062B8  5282      10984          addq.l    #1,D2
000062BA  6000 FF62 10985          bra       @vsscanf_scanselect_8
                    10986   @vsscanf_scanselect_10:
000062BE  4A82      10987          tst.l     D2
000062C0  6712      10988          beq.s     @vsscanf_scanselect_23
000062C2  2043      10989          move.l    D3,A0
000062C4  1030 2800 10990          move.b    0(A0,D2.L),D0
000062C8  4880      10991          ext.w     D0
000062CA  48C0      10992          ext.l     D0
000062CC  0C80 0000 10993          cmp.l     #93,D0
000062D0  005D      
000062D2  6702      10994          beq.s     @vsscanf_scanselect_21
                    10995   @vsscanf_scanselect_23:
000062D4  7A01      10996          moveq     #1,D5
                    10997   @vsscanf_scanselect_21:
000062D6  200A      10998          move.l    A2,D0
000062D8  6712      10999          beq.s     @vsscanf_scanselect_24
000062DA  4A85      11000          tst.l     D5
000062DC  660C      11001          bne.s     @vsscanf_scanselect_26
000062DE  4A87      11002          tst.l     D7
000062E0  6606      11003          bne.s     @vsscanf_scanselect_28
000062E2  2046      11004          move.l    D6,A0
000062E4  5286      11005          addq.l    #1,D6
000062E6  1084      11006          move.b    D4,(A0)
                    11007   @vsscanf_scanselect_28:
000062E8  6014      11008          bra.s     @vsscanf_scanselect_4
                    11009   @vsscanf_scanselect_26:
000062EA  6016      11010          bra.s     @vsscanf_scanselect_5
                    11011   @vsscanf_scanselect_24:
000062EC  4A85      11012          tst.l     D5
000062EE  670C      11013          beq.s     @vsscanf_scanselect_30
000062F0  4A87      11014          tst.l     D7
000062F2  6606      11015          bne.s     @vsscanf_scanselect_32
000062F4  2046      11016          move.l    D6,A0
000062F6  5286      11017          addq.l    #1,D6
000062F8  1084      11018          move.b    D4,(A0)
                    11019   @vsscanf_scanselect_32:
000062FA  6002      11020          bra.s     @vsscanf_scanselect_4
                    11021   @vsscanf_scanselect_30:
000062FC  6004      11022          bra.s     @vsscanf_scanselect_5
                    11023   @vsscanf_scanselect_4:
000062FE  6000 FEEE 11024          bra       @vsscanf_scanselect_2
                    11025   @vsscanf_scanselect_5:
00006302  0C84 FFFF 11026          cmp.l     #-1,D4
00006306  FFFF      
00006308  6712      11027          beq.s     @vsscanf_scanselect_34
0000630A  2F04      11028          move.l    D4,-(A7)
0000630C  2F2E 0008 11029          move.l    8(A6),-(A7)
00006310  6100 FE14 11030          bsr       @vsscanf_scanputback
00006314  504F      11031          addq.w    #8,A7
00006316  206E 001C 11032          move.l    28(A6),A0
0000631A  5390      11033          subq.l    #1,(A0)
                    11034   @vsscanf_scanselect_34:
0000631C  4A87      11035          tst.l     D7
0000631E  6604      11036          bne.s     @vsscanf_scanselect_36
00006320  2046      11037          move.l    D6,A0
00006322  4210      11038          clr.b     (A0)
                    11039   @vsscanf_scanselect_36:
00006324  5283      11040          addq.l    #1,D3
00006326  2043      11041          move.l    D3,A0
00006328  1010      11042          move.b    (A0),D0
0000632A  4880      11043          ext.w     D0
0000632C  48C0      11044          ext.l     D0
0000632E  0C80 0000 11045          cmp.l     #93,D0
00006332  005D      
00006334  6702      11046          beq.s     @vsscanf_scanselect_40
00006336  60EC      11047          bra       @vsscanf_scanselect_36
                    11048   @vsscanf_scanselect_40:
00006338  5283      11049          addq.l    #1,D3
0000633A  2003      11050          move.l    D3,D0
0000633C  4CDF 04FC 11051          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00006340  4E5E      11052          unlk      A6
00006342  4E75      11053          rts
                    11054   _scanflush:
00006344  41F9 0803 11055          lea       @vsscanf_buf,A0
00006348  05AA      
0000634A  23C8 0000 11056          move.l    A0,@vsscanf_bufx
0000634E  8BB0      
00006350  4239 0803 11057          clr.b     @vsscanf_buf
00006354  05AA      
00006356  4878 FFFF 11058          pea       -1
0000635A  6100 086E 11059          bsr       _ungetch
0000635E  584F      11060          addq.w    #4,A7
00006360  4E75      11061          rts
                    11062   _vsscanf:
00006362  4E56 FF88 11063          link      A6,#-120
00006366  48E7 3F3C 11064          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000636A  47F8 60B8 11065          lea       @vsscanf_scanread,A3
0000636E  4AAE 0008 11066          tst.l     8(A6)
00006372  6706      11067          beq.s     vsscanf_1
00006374  41EE 0008 11068          lea       8(A6),A0
00006378  6004      11069          bra.s     vsscanf_2
                    11070   vsscanf_1:
0000637A  4280      11071          clr.l     D0
0000637C  2040      11072          move.l    D0,A0
                    11073   vsscanf_2:
0000637E  2A08      11074          move.l    A0,D5
00006380  42AE FFE4 11075          clr.l     -28(A6)
00006384  4284      11076          clr.l     D4
                    11077   vsscanf_3:
00006386  206E 000C 11078          move.l    12(A6),A0
0000638A  52AE 000C 11079          addq.l    #1,12(A6)
0000638E  1010      11080          move.b    (A0),D0
00006390  4880      11081          ext.w     D0
00006392  48C0      11082          ext.l     D0
00006394  2600      11083          move.l    D0,D3
00006396  6700 05AC 11084          beq       vsscanf_5
0000639A  4286      11085          clr.l     D6
0000639C  387C 0000 11086          move.w    #0,A4
000063A0  0C83 0000 11087          cmp.l     #32,D3
000063A4  0020      
000063A6  6712      11088          beq.s     vsscanf_8
000063A8  0C83 0000 11089          cmp.l     #9,D3
000063AC  0009      
000063AE  670A      11090          beq.s     vsscanf_8
000063B0  0C83 0000 11091          cmp.l     #10,D3
000063B4  000A      
000063B6  6600 0048 11092          bne       vsscanf_6
                    11093   vsscanf_8:
000063BA  2F05      11094          move.l    D5,-(A7)
000063BC  4E93      11095          jsr       (A3)
000063BE  584F      11096          addq.w    #4,A7
000063C0  2400      11097          move.l    D0,D2
000063C2  52AE FFE4 11098          addq.l    #1,-28(A6)
000063C6  0C82 FFFF 11099          cmp.l     #-1,D2
000063CA  FFFF      
000063CC  660E      11100          bne.s     vsscanf_11
000063CE  4A84      11101          tst.l     D4
000063D0  6704      11102          beq.s     vsscanf_13
000063D2  2004      11103          move.l    D4,D0
000063D4  6002      11104          bra.s     vsscanf_14
                    11105   vsscanf_13:
000063D6  70FF      11106          moveq     #-1,D0
                    11107   vsscanf_14:
000063D8  6000 056C 11108          bra       vsscanf_15
                    11109   vsscanf_11:
000063DC  2042      11110          move.l    D2,A0
000063DE  43F9 0000 11111          lea       __ctype,A1
000063E2  8BC2      
000063E4  1030 9801 11112          move.b    1(A0,A1.L),D0
000063E8  C03C 0010 11113          and.b     #16,D0
000063EC  66CC      11114          bne       vsscanf_8
000063EE  53AE FFE4 11115          subq.l    #1,-28(A6)
000063F2  2F02      11116          move.l    D2,-(A7)
000063F4  2F05      11117          move.l    D5,-(A7)
000063F6  6100 FD2E 11118          bsr       @vsscanf_scanputback
000063FA  504F      11119          addq.w    #8,A7
000063FC  6000 0542 11120          bra       vsscanf_139
                    11121   vsscanf_6:
00006400  0C83 0000 11122          cmp.l     #37,D3
00006404  0025      
00006406  6600 0502 11123          bne       vsscanf_127
0000640A  206E 000C 11124          move.l    12(A6),A0
0000640E  52AE 000C 11125          addq.l    #1,12(A6)
00006412  1010      11126          move.b    (A0),D0
00006414  4880      11127          ext.w     D0
00006416  48C0      11128          ext.l     D0
00006418  2600      11129          move.l    D0,D3
0000641A  42AE FFEC 11130          clr.l     -20(A6)
0000641E  4286      11131          clr.l     D6
00006420  42AE FFE8 11132          clr.l     -24(A6)
00006424  347C 7FFF 11133          move.w    #32767,A2
00006428  0C83 0000 11134          cmp.l     #42,D3
0000642C  002A      
0000642E  6612      11135          bne.s     vsscanf_18
00006430  7C01      11136          moveq     #1,D6
00006432  206E 000C 11137          move.l    12(A6),A0
00006436  52AE 000C 11138          addq.l    #1,12(A6)
0000643A  1010      11139          move.b    (A0),D0
0000643C  4880      11140          ext.w     D0
0000643E  48C0      11141          ext.l     D0
00006440  2600      11142          move.l    D0,D3
                    11143   vsscanf_18:
00006442  2043      11144          move.l    D3,A0
00006444  43F9 0000 11145          lea       __ctype,A1
00006448  8BC2      
0000644A  1030 9801 11146          move.b    1(A0,A1.L),D0
0000644E  C03C 0004 11147          and.b     #4,D0
00006452  6700 004E 11148          beq       vsscanf_24
00006456  2003      11149          move.l    D3,D0
00006458  0480 0000 11150          sub.l     #48,D0
0000645C  0030      
0000645E  2440      11151          move.l    D0,A2
                    11152   vsscanf_22:
00006460  206E 000C 11153          move.l    12(A6),A0
00006464  52AE 000C 11154          addq.l    #1,12(A6)
00006468  1010      11155          move.b    (A0),D0
0000646A  4880      11156          ext.w     D0
0000646C  48C0      11157          ext.l     D0
0000646E  2600      11158          move.l    D0,D3
00006470  2040      11159          move.l    D0,A0
00006472  43F9 0000 11160          lea       __ctype,A1
00006476  8BC2      
00006478  1030 9801 11161          move.b    1(A0,A1.L),D0
0000647C  C0BC 0000 11162          and.l     #255,D0
00006480  00FF      
00006482  C0BC 0000 11163          and.l     #4,D0
00006486  0004      
00006488  6718      11164          beq.s     vsscanf_24
0000648A  70D0      11165          moveq     #-48,D0
0000648C  2F0A      11166          move.l    A2,-(A7)
0000648E  4878 000A 11167          pea       10
00006492  6100 0624 11168          bsr       LMUL
00006496  2217      11169          move.l    (A7),D1
00006498  504F      11170          addq.w    #8,A7
0000649A  D283      11171          add.l     D3,D1
0000649C  D081      11172          add.l     D1,D0
0000649E  2440      11173          move.l    D0,A2
000064A0  60BE      11174          bra       vsscanf_22
                    11175   vsscanf_24:
000064A2  0C83 0000 11176          cmp.l     #108,D3
000064A6  006C      
000064A8  6708      11177          beq.s     vsscanf_27
000064AA  0C83 0000 11178          cmp.l     #76,D3
000064AE  004C      
000064B0  661A      11179          bne.s     vsscanf_25
                    11180   vsscanf_27:
000064B2  2D7C 0000 11181          move.l    #1,-24(A6)
000064B6  0001 FFE8 
000064BA  206E 000C 11182          move.l    12(A6),A0
000064BE  52AE 000C 11183          addq.l    #1,12(A6)
000064C2  1010      11184          move.b    (A0),D0
000064C4  4880      11185          ext.w     D0
000064C6  48C0      11186          ext.l     D0
000064C8  2600      11187          move.l    D0,D3
000064CA  6020      11188          bra.s     vsscanf_28
                    11189   vsscanf_25:
000064CC  0C83 0000 11190          cmp.l     #104,D3
000064D0  0068      
000064D2  6618      11191          bne.s     vsscanf_28
000064D4  2D7C 0000 11192          move.l    #1,-20(A6)
000064D8  0001 FFEC 
000064DC  206E 000C 11193          move.l    12(A6),A0
000064E0  52AE 000C 11194          addq.l    #1,12(A6)
000064E4  1010      11195          move.b    (A0),D0
000064E6  4880      11196          ext.w     D0
000064E8  48C0      11197          ext.l     D0
000064EA  2600      11198          move.l    D0,D3
                    11199   vsscanf_28:
000064EC  0C83 0000 11200          cmp.l     #91,D3
000064F0  005B      
000064F2  6600 0036 11201          bne       vsscanf_30
000064F6  4A86      11202          tst.l     D6
000064F8  660A      11203          bne.s     vsscanf_32
000064FA  206E 0010 11204          move.l    16(A6),A0
000064FE  58AE 0010 11205          addq.l    #4,16(A6)
00006502  2E10      11206          move.l    (A0),D7
                    11207   vsscanf_32:
00006504  486E FFE4 11208          pea       -28(A6)
00006508  2F07      11209          move.l    D7,-(A7)
0000650A  2F06      11210          move.l    D6,-(A7)
0000650C  2F0A      11211          move.l    A2,-(A7)
0000650E  2F2E 000C 11212          move.l    12(A6),-(A7)
00006512  2F05      11213          move.l    D5,-(A7)
00006514  6100 FCA8 11214          bsr       @vsscanf_scanselect
00006518  DEFC 0018 11215          add.w     #24,A7
0000651C  2D40 000C 11216          move.l    D0,12(A6)
00006520  4A86      11217          tst.l     D6
00006522  6602      11218          bne.s     vsscanf_34
00006524  5284      11219          addq.l    #1,D4
                    11220   vsscanf_34:
00006526  6000 0418 11221          bra       vsscanf_139
                    11222   vsscanf_30:
0000652A  0C83 0000 11223          cmp.l     #110,D3
0000652E  006E      
00006530  661A      11224          bne.s     vsscanf_36
00006532  4A86      11225          tst.l     D6
00006534  6612      11226          bne.s     vsscanf_38
00006536  206E 0010 11227          move.l    16(A6),A0
0000653A  58AE 0010 11228          addq.l    #4,16(A6)
0000653E  2E10      11229          move.l    (A0),D7
00006540  2047      11230          move.l    D7,A0
00006542  20AE FFE4 11231          move.l    -28(A6),(A0)
00006546  5284      11232          addq.l    #1,D4
                    11233   vsscanf_38:
00006548  6000 03F6 11234          bra       vsscanf_139
                    11235   vsscanf_36:
0000654C  0C83 0000 11236          cmp.l     #115,D3
00006550  0073      
00006552  6600 00AC 11237          bne       vsscanf_40
00006556  486E FFE4 11238          pea       -28(A6)
0000655A  2F05      11239          move.l    D5,-(A7)
0000655C  6100 FC2A 11240          bsr       @vsscanf_scanspace
00006560  504F      11241          addq.w    #8,A7
00006562  2400      11242          move.l    D0,D2
00006564  4A86      11243          tst.l     D6
00006566  660A      11244          bne.s     vsscanf_42
00006568  206E 0010 11245          move.l    16(A6),A0
0000656C  58AE 0010 11246          addq.l    #4,16(A6)
00006570  2E10      11247          move.l    (A0),D7
                    11248   vsscanf_42:
00006572  52AE FFE4 11249          addq.l    #1,-28(A6)
                    11250   vsscanf_44:
00006576  200A      11251          move.l    A2,D0
00006578  534A      11252          subq.w    #1,A2
0000657A  4A80      11253          tst.l     D0
0000657C  6700 0038 11254          beq       vsscanf_46
00006580  2042      11255          move.l    D2,A0
00006582  43F9 0000 11256          lea       __ctype,A1
00006586  8BC2      
00006588  1030 9801 11257          move.b    1(A0,A1.L),D0
0000658C  C03C 0010 11258          and.b     #16,D0
00006590  6624      11259          bne.s     vsscanf_46
00006592  0C82 FFFF 11260          cmp.l     #-1,D2
00006596  FFFF      
00006598  671C      11261          beq.s     vsscanf_46
0000659A  387C 0001 11262          move.w    #1,A4
0000659E  4A86      11263          tst.l     D6
000065A0  6606      11264          bne.s     vsscanf_47
000065A2  2047      11265          move.l    D7,A0
000065A4  5287      11266          addq.l    #1,D7
000065A6  1082      11267          move.b    D2,(A0)
                    11268   vsscanf_47:
000065A8  2F05      11269          move.l    D5,-(A7)
000065AA  4E93      11270          jsr       (A3)
000065AC  584F      11271          addq.w    #4,A7
000065AE  2400      11272          move.l    D0,D2
000065B0  52AE FFE4 11273          addq.l    #1,-28(A6)
000065B4  60C0      11274          bra       vsscanf_44
                    11275   vsscanf_46:
000065B6  4A86      11276          tst.l     D6
000065B8  660A      11277          bne.s     vsscanf_51
000065BA  2047      11278          move.l    D7,A0
000065BC  4210      11279          clr.b     (A0)
000065BE  200C      11280          move.l    A4,D0
000065C0  6702      11281          beq.s     vsscanf_51
000065C2  5284      11282          addq.l    #1,D4
                    11283   vsscanf_51:
000065C4  0C82 FFFF 11284          cmp.l     #-1,D2
000065C8  FFFF      
000065CA  6708      11285          beq.s     vsscanf_55
000065CC  4A86      11286          tst.l     D6
000065CE  661E      11287          bne.s     vsscanf_53
000065D0  200C      11288          move.l    A4,D0
000065D2  661A      11289          bne.s     vsscanf_53
                    11290   vsscanf_55:
000065D4  4A84      11291          tst.l     D4
000065D6  6704      11292          beq.s     vsscanf_56
000065D8  2004      11293          move.l    D4,D0
000065DA  600E      11294          bra.s     vsscanf_59
                    11295   vsscanf_56:
000065DC  0C82 FFFF 11296          cmp.l     #-1,D2
000065E0  FFFF      
000065E2  6604      11297          bne.s     vsscanf_58
000065E4  70FF      11298          moveq     #-1,D0
000065E6  6002      11299          bra.s     vsscanf_59
                    11300   vsscanf_58:
000065E8  2004      11301          move.l    D4,D0
                    11302   vsscanf_59:
000065EA  6000 035A 11303          bra       vsscanf_15
                    11304   vsscanf_53:
000065EE  53AE FFE4 11305          subq.l    #1,-28(A6)
000065F2  2F02      11306          move.l    D2,-(A7)
000065F4  2F05      11307          move.l    D5,-(A7)
000065F6  6100 FB2E 11308          bsr       @vsscanf_scanputback
000065FA  504F      11309          addq.w    #8,A7
000065FC  6000 0342 11310          bra       vsscanf_139
                    11311   vsscanf_40:
00006600  0C83 0000 11312          cmp.l     #99,D3
00006604  0063      
00006606  6600 008E 11313          bne       vsscanf_60
0000660A  4A86      11314          tst.l     D6
0000660C  660A      11315          bne.s     vsscanf_62
0000660E  206E 0010 11316          move.l    16(A6),A0
00006612  58AE 0010 11317          addq.l    #4,16(A6)
00006616  2E10      11318          move.l    (A0),D7
                    11319   vsscanf_62:
00006618  2F05      11320          move.l    D5,-(A7)
0000661A  4E93      11321          jsr       (A3)
0000661C  584F      11322          addq.w    #4,A7
0000661E  2400      11323          move.l    D0,D2
00006620  52AE FFE4 11324          addq.l    #1,-28(A6)
00006624  200A      11325          move.l    A2,D0
00006626  0C80 0000 11326          cmp.l     #32767,D0
0000662A  7FFF      
0000662C  6604      11327          bne.s     vsscanf_64
0000662E  347C 0001 11328          move.w    #1,A2
                    11329   vsscanf_64:
00006632  0C82 FFFF 11330          cmp.l     #-1,D2
00006636  FFFF      
00006638  6606      11331          bne.s     vsscanf_66
0000663A  4A86      11332          tst.l     D6
0000663C  6602      11333          bne.s     vsscanf_66
0000663E  5384      11334          subq.l    #1,D4
                    11335   vsscanf_66:
00006640  200A      11336          move.l    A2,D0
00006642  534A      11337          subq.w    #1,A2
00006644  4A80      11338          tst.l     D0
00006646  6720      11339          beq.s     vsscanf_70
00006648  0C82 FFFF 11340          cmp.l     #-1,D2
0000664C  FFFF      
0000664E  6718      11341          beq.s     vsscanf_70
00006650  4A86      11342          tst.l     D6
00006652  6606      11343          bne.s     vsscanf_71
00006654  2047      11344          move.l    D7,A0
00006656  5287      11345          addq.l    #1,D7
00006658  1082      11346          move.b    D2,(A0)
                    11347   vsscanf_71:
0000665A  2F05      11348          move.l    D5,-(A7)
0000665C  4E93      11349          jsr       (A3)
0000665E  584F      11350          addq.w    #4,A7
00006660  2400      11351          move.l    D0,D2
00006662  52AE FFE4 11352          addq.l    #1,-28(A6)
00006666  60D8      11353          bra       vsscanf_66
                    11354   vsscanf_70:
00006668  0C82 FFFF 11355          cmp.l     #-1,D2
0000666C  FFFF      
0000666E  660E      11356          bne.s     vsscanf_73
00006670  4A84      11357          tst.l     D4
00006672  6704      11358          beq.s     vsscanf_75
00006674  2004      11359          move.l    D4,D0
00006676  6002      11360          bra.s     vsscanf_76
                    11361   vsscanf_75:
00006678  70FF      11362          moveq     #-1,D0
                    11363   vsscanf_76:
0000667A  6000 02CA 11364          bra       vsscanf_15
                    11365   vsscanf_73:
0000667E  4A86      11366          tst.l     D6
00006680  6602      11367          bne.s     vsscanf_77
00006682  5284      11368          addq.l    #1,D4
                    11369   vsscanf_77:
00006684  53AE FFE4 11370          subq.l    #1,-28(A6)
00006688  2F02      11371          move.l    D2,-(A7)
0000668A  2F05      11372          move.l    D5,-(A7)
0000668C  6100 FA98 11373          bsr       @vsscanf_scanputback
00006690  504F      11374          addq.w    #8,A7
00006692  6000 02AC 11375          bra       vsscanf_139
                    11376   vsscanf_60:
00006696  0C83 0000 11377          cmp.l     #105,D3
0000669A  0069      
0000669C  6600 0060 11378          bne       vsscanf_82
000066A0  486E FFE4 11379          pea       -28(A6)
000066A4  2F05      11380          move.l    D5,-(A7)
000066A6  6100 FAE0 11381          bsr       @vsscanf_scanspace
000066AA  504F      11382          addq.w    #8,A7
000066AC  2400      11383          move.l    D0,D2
000066AE  0C82 0000 11384          cmp.l     #48,D2
000066B2  0030      
000066B4  6600 0038 11385          bne       vsscanf_81
000066B8  387C 0001 11386          move.w    #1,A4
000066BC  2F05      11387          move.l    D5,-(A7)
000066BE  4E93      11388          jsr       (A3)
000066C0  584F      11389          addq.w    #4,A7
000066C2  2400      11390          move.l    D0,D2
000066C4  2F02      11391          move.l    D2,-(A7)
000066C6  6100 F1D6 11392          bsr       _tolower
000066CA  584F      11393          addq.w    #4,A7
000066CC  0C80 0000 11394          cmp.l     #120,D0
000066D0  0078      
000066D2  6604      11395          bne.s     vsscanf_83
000066D4  7678      11396          moveq     #120,D3
000066D6  6010      11397          bra.s     vsscanf_84
                    11398   vsscanf_83:
000066D8  53AE FFE4 11399          subq.l    #1,-28(A6)
000066DC  2F02      11400          move.l    D2,-(A7)
000066DE  2F05      11401          move.l    D5,-(A7)
000066E0  6100 FA44 11402          bsr       @vsscanf_scanputback
000066E4  504F      11403          addq.w    #8,A7
000066E6  766F      11404          moveq     #111,D3
                    11405   vsscanf_84:
000066E8  52AE FFE4 11406          addq.l    #1,-28(A6)
000066EC  6010      11407          bra.s     vsscanf_82
                    11408   vsscanf_81:
000066EE  53AE FFE4 11409          subq.l    #1,-28(A6)
000066F2  2F02      11410          move.l    D2,-(A7)
000066F4  2F05      11411          move.l    D5,-(A7)
000066F6  6100 FA2E 11412          bsr       @vsscanf_scanputback
000066FA  504F      11413          addq.w    #8,A7
000066FC  7664      11414          moveq     #100,D3
                    11415   vsscanf_82:
000066FE  0C83 0000 11416          cmp.l     #100,D3
00006702  0064      
00006704  671A      11417          beq.s     vsscanf_87
00006706  0C83 0000 11418          cmp.l     #117,D3
0000670A  0075      
0000670C  6712      11419          beq.s     vsscanf_87
0000670E  0C83 0000 11420          cmp.l     #120,D3
00006712  0078      
00006714  670A      11421          beq.s     vsscanf_87
00006716  0C83 0000 11422          cmp.l     #111,D3
0000671A  006F      
0000671C  6600 01A4 11423          bne       vsscanf_85
                    11424   vsscanf_87:
00006720  486E FFE4 11425          pea       -28(A6)
00006724  2F05      11426          move.l    D5,-(A7)
00006726  6100 FA60 11427          bsr       @vsscanf_scanspace
0000672A  504F      11428          addq.w    #8,A7
0000672C  2400      11429          move.l    D0,D2
0000672E  2D7C 0000 11430          move.l    #10,-4(A6)
00006732  000A FFFC 
00006736  0C83 0000 11431          cmp.l     #120,D3
0000673A  0078      
0000673C  6608      11432          bne.s     vsscanf_88
0000673E  2D7C 0000 11433          move.l    #16,-4(A6)
00006742  0010 FFFC 
                    11434   vsscanf_88:
00006746  0C83 0000 11435          cmp.l     #111,D3
0000674A  006F      
0000674C  6608      11436          bne.s     vsscanf_90
0000674E  2D7C 0000 11437          move.l    #8,-4(A6)
00006752  0008 FFFC 
                    11438   vsscanf_90:
00006756  4A86      11439          tst.l     D6
00006758  660A      11440          bne.s     vsscanf_92
0000675A  206E 0010 11441          move.l    16(A6),A0
0000675E  58AE 0010 11442          addq.l    #4,16(A6)
00006762  2E10      11443          move.l    (A0),D7
                    11444   vsscanf_92:
00006764  42AE FFE0 11445          clr.l     -32(A6)
00006768  52AE FFE4 11446          addq.l    #1,-28(A6)
0000676C  0C83 0000 11447          cmp.l     #117,D3
00006770  0075      
00006772  6720      11448          beq.s     vsscanf_94
00006774  0C82 0000 11449          cmp.l     #45,D2
00006778  002D      
0000677A  6618      11450          bne.s     vsscanf_94
0000677C  2F05      11451          move.l    D5,-(A7)
0000677E  4E93      11452          jsr       (A3)
00006780  584F      11453          addq.w    #4,A7
00006782  2400      11454          move.l    D0,D2
00006784  52AE FFE4 11455          addq.l    #1,-28(A6)
00006788  2D7C 0000 11456          move.l    #1,-32(A6)
0000678C  0001 FFE0 
00006790  387C 0001 11457          move.w    #1,A4
                    11458   vsscanf_94:
00006794  3A7C 0000 11459          move.w    #0,A5
00006798  0C82 FFFF 11460          cmp.l     #-1,D2
0000679C  FFFF      
0000679E  660E      11461          bne.s     vsscanf_96
000067A0  4A84      11462          tst.l     D4
000067A2  6704      11463          beq.s     vsscanf_98
000067A4  2004      11464          move.l    D4,D0
000067A6  6002      11465          bra.s     vsscanf_99
                    11466   vsscanf_98:
000067A8  70FF      11467          moveq     #-1,D0
                    11468   vsscanf_99:
000067AA  6000 019A 11469          bra       vsscanf_15
                    11470   vsscanf_96:
000067AE  200A      11471          move.l    A2,D0
000067B0  534A      11472          subq.w    #1,A2
000067B2  4A80      11473          tst.l     D0
000067B4  6700 0090 11474          beq       vsscanf_102
000067B8  0C83 0000 11475          cmp.l     #120,D3
000067BC  0078      
000067BE  6620      11476          bne.s     vsscanf_104
000067C0  2F02      11477          move.l    D2,-(A7)
000067C2  6100 F150 11478          bsr       _toupper
000067C6  584F      11479          addq.w    #4,A7
000067C8  0C80 0000 11480          cmp.l     #65,D0
000067CC  0041      
000067CE  6D10      11481          blt.s     vsscanf_104
000067D0  2F02      11482          move.l    D2,-(A7)
000067D2  6100 F140 11483          bsr       _toupper
000067D6  584F      11484          addq.w    #4,A7
000067D8  0C80 0000 11485          cmp.l     #70,D0
000067DC  0046      
000067DE  6F14      11486          ble.s     vsscanf_103
                    11487   vsscanf_104:
000067E0  2042      11488          move.l    D2,A0
000067E2  43F9 0000 11489          lea       __ctype,A1
000067E6  8BC2      
000067E8  1030 9801 11490          move.b    1(A0,A1.L),D0
000067EC  C03C 0004 11491          and.b     #4,D0
000067F0  6700 0054 11492          beq       vsscanf_102
                    11493   vsscanf_103:
000067F4  2042      11494          move.l    D2,A0
000067F6  43F9 0000 11495          lea       __ctype,A1
000067FA  8BC2      
000067FC  1030 9801 11496          move.b    1(A0,A1.L),D0
00006800  C03C 0004 11497          and.b     #4,D0
00006804  6614      11498          bne.s     vsscanf_105
00006806  70F9      11499          moveq     #-7,D0
00006808  2F00      11500          move.l    D0,-(A7)
0000680A  2F02      11501          move.l    D2,-(A7)
0000680C  6100 F106 11502          bsr       _toupper
00006810  584F      11503          addq.w    #4,A7
00006812  2200      11504          move.l    D0,D1
00006814  201F      11505          move.l    (A7)+,D0
00006816  D081      11506          add.l     D1,D0
00006818  2400      11507          move.l    D0,D2
                    11508   vsscanf_105:
0000681A  2F0D      11509          move.l    A5,-(A7)
0000681C  2F2E FFFC 11510          move.l    -4(A6),-(A7)
00006820  6100 0296 11511          bsr       LMUL
00006824  2017      11512          move.l    (A7),D0
00006826  504F      11513          addq.w    #8,A7
00006828  D082      11514          add.l     D2,D0
0000682A  0480 0000 11515          sub.l     #48,D0
0000682E  0030      
00006830  2A40      11516          move.l    D0,A5
00006832  2F05      11517          move.l    D5,-(A7)
00006834  4E93      11518          jsr       (A3)
00006836  584F      11519          addq.w    #4,A7
00006838  2400      11520          move.l    D0,D2
0000683A  52AE FFE4 11521          addq.l    #1,-28(A6)
0000683E  387C 0001 11522          move.w    #1,A4
00006842  6000 FF6A 11523          bra       vsscanf_96
                    11524   vsscanf_102:
00006846  0C82 FFFF 11525          cmp.l     #-1,D2
0000684A  FFFF      
0000684C  671A      11526          beq.s     vsscanf_107
0000684E  2F02      11527          move.l    D2,-(A7)
00006850  2F05      11528          move.l    D5,-(A7)
00006852  6100 F8D2 11529          bsr       @vsscanf_scanputback
00006856  504F      11530          addq.w    #8,A7
00006858  53AE FFE4 11531          subq.l    #1,-28(A6)
0000685C  200C      11532          move.l    A4,D0
0000685E  6606      11533          bne.s     vsscanf_109
00006860  2004      11534          move.l    D4,D0
00006862  6000 00E2 11535          bra       vsscanf_15
                    11536   vsscanf_109:
00006866  6012      11537          bra.s     vsscanf_111
                    11538   vsscanf_107:
00006868  200C      11539          move.l    A4,D0
0000686A  660E      11540          bne.s     vsscanf_111
0000686C  4A84      11541          tst.l     D4
0000686E  6704      11542          beq.s     vsscanf_113
00006870  2004      11543          move.l    D4,D0
00006872  6002      11544          bra.s     vsscanf_114
                    11545   vsscanf_113:
00006874  70FF      11546          moveq     #-1,D0
                    11547   vsscanf_114:
00006876  6000 00CE 11548          bra       vsscanf_15
                    11549   vsscanf_111:
0000687A  4AAE FFE0 11550          tst.l     -32(A6)
0000687E  6706      11551          beq.s     vsscanf_115
00006880  200D      11552          move.l    A5,D0
00006882  4480      11553          neg.l     D0
00006884  2A40      11554          move.l    D0,A5
                    11555   vsscanf_115:
00006886  4A86      11556          tst.l     D6
00006888  661E      11557          bne.s     vsscanf_117
0000688A  4AAE FFE8 11558          tst.l     -24(A6)
0000688E  6706      11559          beq.s     vsscanf_119
00006890  2047      11560          move.l    D7,A0
00006892  208D      11561          move.l    A5,(A0)
00006894  6010      11562          bra.s     vsscanf_122
                    11563   vsscanf_119:
00006896  4AAE FFEC 11564          tst.l     -20(A6)
0000689A  6706      11565          beq.s     vsscanf_121
0000689C  2047      11566          move.l    D7,A0
0000689E  308D      11567          move.w    A5,(A0)
000068A0  6004      11568          bra.s     vsscanf_122
                    11569   vsscanf_121:
000068A2  2047      11570          move.l    D7,A0
000068A4  208D      11571          move.l    A5,(A0)
                    11572   vsscanf_122:
000068A6  5284      11573          addq.l    #1,D4
                    11574   vsscanf_117:
000068A8  0C82 FFFF 11575          cmp.l     #-1,D2
000068AC  FFFF      
000068AE  660E      11576          bne.s     vsscanf_123
000068B0  4A84      11577          tst.l     D4
000068B2  6704      11578          beq.s     vsscanf_125
000068B4  2004      11579          move.l    D4,D0
000068B6  6002      11580          bra.s     vsscanf_126
                    11581   vsscanf_125:
000068B8  70FF      11582          moveq     #-1,D0
                    11583   vsscanf_126:
000068BA  6000 008A 11584          bra       vsscanf_15
                    11585   vsscanf_123:
000068BE  6000 0080 11586          bra       vsscanf_139
                    11587   vsscanf_85:
000068C2  0C83 0000 11588          cmp.l     #37,D3
000068C6  0025      
000068C8  6600 0040 11589          bne       vsscanf_127
000068CC  2F05      11590          move.l    D5,-(A7)
000068CE  4E93      11591          jsr       (A3)
000068D0  584F      11592          addq.w    #4,A7
000068D2  2400      11593          move.l    D0,D2
000068D4  0C82 FFFF 11594          cmp.l     #-1,D2
000068D8  FFFF      
000068DA  660E      11595          bne.s     vsscanf_129
000068DC  4A84      11596          tst.l     D4
000068DE  6704      11597          beq.s     vsscanf_131
000068E0  2004      11598          move.l    D4,D0
000068E2  6002      11599          bra.s     vsscanf_132
                    11600   vsscanf_131:
000068E4  70FF      11601          moveq     #-1,D0
                    11602   vsscanf_132:
000068E6  6000 005E 11603          bra       vsscanf_15
                    11604   vsscanf_129:
000068EA  52AE FFE4 11605          addq.l    #1,-28(A6)
000068EE  B483      11606          cmp.l     D3,D2
000068F0  6714      11607          beq.s     vsscanf_133
000068F2  2F02      11608          move.l    D2,-(A7)
000068F4  2F05      11609          move.l    D5,-(A7)
000068F6  6100 F82E 11610          bsr       @vsscanf_scanputback
000068FA  504F      11611          addq.w    #8,A7
000068FC  53AE FFE4 11612          subq.l    #1,-28(A6)
00006900  2004      11613          move.l    D4,D0
00006902  6000 0042 11614          bra       vsscanf_15
                    11615   vsscanf_133:
00006906  6000 0038 11616          bra       vsscanf_139
                    11617   vsscanf_127:
0000690A  2F05      11618          move.l    D5,-(A7)
0000690C  4E93      11619          jsr       (A3)
0000690E  584F      11620          addq.w    #4,A7
00006910  2400      11621          move.l    D0,D2
00006912  52AE FFE4 11622          addq.l    #1,-28(A6)
00006916  0C82 FFFF 11623          cmp.l     #-1,D2
0000691A  FFFF      
0000691C  660C      11624          bne.s     vsscanf_135
0000691E  4A84      11625          tst.l     D4
00006920  6704      11626          beq.s     vsscanf_137
00006922  2004      11627          move.l    D4,D0
00006924  6002      11628          bra.s     vsscanf_138
                    11629   vsscanf_137:
00006926  70FF      11630          moveq     #-1,D0
                    11631   vsscanf_138:
00006928  601C      11632          bra.s     vsscanf_15
                    11633   vsscanf_135:
0000692A  B483      11634          cmp.l     D3,D2
0000692C  6712      11635          beq.s     vsscanf_139
0000692E  2F02      11636          move.l    D2,-(A7)
00006930  2F05      11637          move.l    D5,-(A7)
00006932  6100 F7F2 11638          bsr       @vsscanf_scanputback
00006936  504F      11639          addq.w    #8,A7
00006938  53AE FFE4 11640          subq.l    #1,-28(A6)
0000693C  2004      11641          move.l    D4,D0
0000693E  6006      11642          bra.s     vsscanf_15
                    11643   vsscanf_139:
00006940  6000 FA44 11644          bra       vsscanf_3
                    11645   vsscanf_5:
00006944  2004      11646          move.l    D4,D0
                    11647   vsscanf_15:
00006946  4CDF 3CFC 11648          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000694A  4E5E      11649          unlk      A6
0000694C  4E75      11650          rts
                    11651   @itoa_convert:
0000694E  4E56 0000 11652          link      A6,#0
00006952  48E7 3C00 11653          movem.l   D2/D3/D4/D5,-(A7)
00006956  242E 0008 11654          move.l    8(A6),D2
0000695A  262E 0010 11655          move.l    16(A6),D3
0000695E  2A2E 000C 11656          move.l    12(A6),D5
00006962  2F05      11657          move.l    D5,-(A7)
00006964  2F03      11658          move.l    D3,-(A7)
00006966  6100 EDEC 11659          bsr       ULDIV
0000696A  202F 0004 11660          move.l    4(A7),D0
0000696E  504F      11661          addq.w    #8,A7
00006970  2800      11662          move.l    D0,D4
00006972  BA83      11663          cmp.l     D3,D5
00006974  651A      11664          blo.s     @itoa_convert_1
00006976  2F03      11665          move.l    D3,-(A7)
00006978  2F05      11666          move.l    D5,-(A7)
0000697A  2F03      11667          move.l    D3,-(A7)
0000697C  6100 EDD6 11668          bsr       ULDIV
00006980  2217      11669          move.l    (A7),D1
00006982  504F      11670          addq.w    #8,A7
00006984  2F01      11671          move.l    D1,-(A7)
00006986  2F02      11672          move.l    D2,-(A7)
00006988  61C4      11673          bsr       @itoa_convert
0000698A  DEFC 000C 11674          add.w     #12,A7
0000698E  2400      11675          move.l    D0,D2
                    11676   @itoa_convert_1:
00006990  0C84 0000 11677          cmp.l     #9,D4
00006994  0009      
00006996  6E0A      11678          bgt.s     @itoa_convert_3
00006998  2004      11679          move.l    D4,D0
0000699A  0680 0000 11680          add.l     #48,D0
0000699E  0030      
000069A0  600E      11681          bra.s     @itoa_convert_4
                    11682   @itoa_convert_3:
000069A2  2004      11683          move.l    D4,D0
000069A4  0680 0000 11684          add.l     #97,D0
000069A8  0061      
000069AA  0480 0000 11685          sub.l     #10,D0
000069AE  000A      
                    11686   @itoa_convert_4:
000069B0  2042      11687          move.l    D2,A0
000069B2  1080      11688          move.b    D0,(A0)
000069B4  2002      11689          move.l    D2,D0
000069B6  5280      11690          addq.l    #1,D0
000069B8  4CDF 003C 11691          movem.l   (A7)+,D2/D3/D4/D5
000069BC  4E5E      11692          unlk      A6
000069BE  4E75      11693          rts
                    11694   _ltoa:
000069C0  4E56 0000 11695          link      A6,#0
000069C4  48E7 3C00 11696          movem.l   D2/D3/D4/D5,-(A7)
000069C8  242E 0008 11697          move.l    8(A6),D2
000069CC  262E 000C 11698          move.l    12(A6),D3
000069D0  2A2E 0010 11699          move.l    16(A6),D5
000069D4  2803      11700          move.l    D3,D4
000069D6  0C85 0000 11701          cmp.l     #2,D5
000069DA  0002      
000069DC  6D08      11702          blt.s     ltoa_3
000069DE  0C85 0000 11703          cmp.l     #36,D5
000069E2  0024      
000069E4  6F06      11704          ble.s     ltoa_1
                    11705   ltoa_3:
000069E6  2003      11706          move.l    D3,D0
000069E8  6000 0052 11707          bra       ltoa_4
                    11708   ltoa_1:
000069EC  0C85 0000 11709          cmp.l     #10,D5
000069F0  000A      
000069F2  6600 0032 11710          bne       ltoa_5
000069F6  0C82 0000 11711          cmp.l     #0,D2
000069FA  0000      
000069FC  6C28      11712          bge.s     ltoa_5
000069FE  2002      11713          move.l    D2,D0
00006A00  4480      11714          neg.l     D0
00006A02  2400      11715          move.l    D0,D2
00006A04  0C82 0000 11716          cmp.l     #0,D2
00006A08  0000      
00006A0A  6C12      11717          bge.s     ltoa_7
00006A0C  4879 0000 11718          pea       @itoa_1
00006A10  8BB6      
00006A12  2F03      11719          move.l    D3,-(A7)
00006A14  6100 ED2E 11720          bsr       _strcpy
00006A18  504F      11721          addq.w    #8,A7
00006A1A  2003      11722          move.l    D3,D0
00006A1C  601E      11723          bra.s     ltoa_4
                    11724   ltoa_7:
00006A1E  2044      11725          move.l    D4,A0
00006A20  5284      11726          addq.l    #1,D4
00006A22  10BC 002D 11727          move.b    #45,(A0)
                    11728   ltoa_5:
00006A26  2F05      11729          move.l    D5,-(A7)
00006A28  2F02      11730          move.l    D2,-(A7)
00006A2A  2F04      11731          move.l    D4,-(A7)
00006A2C  6100 FF20 11732          bsr       @itoa_convert
00006A30  DEFC 000C 11733          add.w     #12,A7
00006A34  2800      11734          move.l    D0,D4
00006A36  2044      11735          move.l    D4,A0
00006A38  4210      11736          clr.b     (A0)
00006A3A  2003      11737          move.l    D3,D0
                    11738   ltoa_4:
00006A3C  4CDF 003C 11739          movem.l   (A7)+,D2/D3/D4/D5
00006A40  4E5E      11740          unlk      A6
00006A42  4E75      11741          rts
                    11742   _ultoa:
00006A44  4E56 0000 11743          link      A6,#0
00006A48  48E7 3800 11744          movem.l   D2/D3/D4,-(A7)
00006A4C  262E 0010 11745          move.l    16(A6),D3
00006A50  282E 000C 11746          move.l    12(A6),D4
00006A54  2404      11747          move.l    D4,D2
00006A56  0C83 0000 11748          cmp.l     #2,D3
00006A5A  0002      
00006A5C  6D08      11749          blt.s     ultoa_3
00006A5E  0C83 0000 11750          cmp.l     #36,D3
00006A62  0024      
00006A64  6F04      11751          ble.s     ultoa_1
                    11752   ultoa_3:
00006A66  2004      11753          move.l    D4,D0
00006A68  6018      11754          bra.s     ultoa_4
                    11755   ultoa_1:
00006A6A  2F03      11756          move.l    D3,-(A7)
00006A6C  2F2E 0008 11757          move.l    8(A6),-(A7)
00006A70  2F02      11758          move.l    D2,-(A7)
00006A72  6100 FEDA 11759          bsr       @itoa_convert
00006A76  DEFC 000C 11760          add.w     #12,A7
00006A7A  2400      11761          move.l    D0,D2
00006A7C  2042      11762          move.l    D2,A0
00006A7E  4210      11763          clr.b     (A0)
00006A80  2004      11764          move.l    D4,D0
                    11765   ultoa_4:
00006A82  4CDF 001C 11766          movem.l   (A7)+,D2/D3/D4
00006A86  4E5E      11767          unlk      A6
00006A88  4E75      11768          rts
                    11769   _itoa:
00006A8A  4E56 0000 11770          link      A6,#0
00006A8E  2F2E 0010 11771          move.l    16(A6),-(A7)
00006A92  2F2E 000C 11772          move.l    12(A6),-(A7)
00006A96  2F2E 0008 11773          move.l    8(A6),-(A7)
00006A9A  6100 FF24 11774          bsr       _ltoa
00006A9E  DEFC 000C 11775          add.w     #12,A7
00006AA2  4E5E      11776          unlk      A6
00006AA4  4E75      11777          rts
                    11778   ULMUL:
00006AA6  4E56 0000 11779          link    A6,#0
00006AAA  48E7 C000 11780          movem.l D0/D1,-(A7)
00006AAE  222E 0008 11781          move.l  8(A6),D1
00006AB2  202E 000C 11782          move.l  12(A6),D0
00006AB6  602C      11783          bra.s   lmul_3
                    11784   LMUL:
00006AB8  4E56 0000 11785          link    A6,#0
00006ABC  48E7 C000 11786          movem.l D0/D1,-(A7)
00006AC0  222E 0008 11787          move.l  8(A6),D1
00006AC4  202E 000C 11788          move.l  12(A6),D0
00006AC8  4A80      11789          tst.l   D0
00006ACA  6A0A      11790          bpl.s   lmul_1
00006ACC  4480      11791          neg.l   D0
00006ACE  4A81      11792          tst.l   D1
00006AD0  6A0A      11793          bpl.s   lmul_2
00006AD2  4481      11794          neg.l   D1
00006AD4  600E      11795          bra.s   lmul_3
                    11796   lmul_1:
00006AD6  4A81      11797          tst.l   D1
00006AD8  6A0A      11798          bpl.s   lmul_3
00006ADA  4481      11799          neg.l   D1
                    11800   lmul_2:
00006ADC  6114      11801          bsr.s   domul
00006ADE  4481      11802          neg.l   D1
00006AE0  4080      11803          negx.l  D0
00006AE2  6002      11804          bra.s   lmul_4
                    11805   lmul_3:
00006AE4  610C      11806          bsr.s   domul
                    11807   lmul_4:
00006AE6  2D41 0008 11808          move.l  D1,8(A6)
00006AEA  4CDF 0003 11809          movem.l (A7)+,D0/D1
00006AEE  4E5E      11810          unlk    A6
00006AF0  4E75      11811          rts
                    11812   domul:
00006AF2  0C81 0000 11813          cmpi.l  #$FFFF,D1
00006AF6  FFFF      
00006AF8  620C      11814          bhi.s   domul_1
00006AFA  0C80 0000 11815          cmpi.l  #$FFFF,D0
00006AFE  FFFF      
00006B00  620E      11816          bhi.s   domul_2
00006B02  C2C0      11817          mulu    D0,D1
00006B04  4E75      11818          rts
                    11819   domul_1:
00006B06  0C80 0000 11820          cmpi.l  #$FFFF,D0
00006B0A  FFFF      
00006B0C  6218      11821          bhi.s   domul_4
00006B0E  6002      11822          bra.s   domul_3
                    11823   domul_2
00006B10  C141      11824          exg     D0,D1
                    11825   domul_3:
00006B12  2F02      11826          move.l  D2,-(A7)
00006B14  2401      11827          move.l  D1,D2
00006B16  4842      11828          swap    D2
00006B18  C2C0      11829          mulu    D0,D1
00006B1A  C4C0      11830          mulu    D0,D2
00006B1C  4842      11831          swap    D2
00006B1E  4242      11832          clr.w   D2
00006B20  D282      11833          add.l   D2,D1
00006B22  241F      11834          move.l  (A7)+,D2
00006B24  4E75      11835          rts
                    11836   domul_4:
00006B26  48E7 3000 11837          movem.l D2/D3,-(A7)
00006B2A  2401      11838          move.l  D1,D2
00006B2C  2601      11839          move.l  D1,D3
00006B2E  C2C0      11840          mulu    D0,D1
00006B30  4842      11841          swap    D2
00006B32  C4C0      11842          mulu    D0,D2
00006B34  4840      11843          swap    D0
00006B36  C6C0      11844          mulu    D0,D3
00006B38  D483      11845          add.l   D3,D2
00006B3A  4842      11846          swap    D2
00006B3C  4242      11847          clr.w   D2
00006B3E  D282      11848          add.l   D2,D1
00006B40  4CDF 000C 11849          movem.l (A7)+,D2/D3
00006B44  4E75      11850          rts
                    11851   _strlen:
00006B46  206F 0004 11852          move.l    (4,A7),A0
00006B4A  2248      11853          move.l    A0,A1
                    11854   strlen_1:
00006B4C  4A19      11855          tst.b     (A1)+
00006B4E  66FC      11856          bne       strlen_1
00006B50  2009      11857          move.l    A1,D0
00006B52  9088      11858          sub.l     A0,D0
00006B54  5380      11859          subq.l    #1,D0
00006B56  4E75      11860          rts
                    11861   _gets:
00006B58  4E56 0000 11862          link      A6,#0
00006B5C  48E7 3820 11863          movem.l   D2/D3/D4/A2,-(A7)
00006B60  45F8 5832 11864          lea       _putch,A2
00006B64  282E 0008 11865          move.l    8(A6),D4
00006B68  2404      11866          move.l    D4,D2
                    11867   gets_1:
00006B6A  6100 ECF6 11868          bsr       _getch
00006B6E  2600      11869          move.l    D0,D3
00006B70  0C80 0000 11870          cmp.l     #10,D0
00006B74  000A      
00006B76  6700 003C 11871          beq       gets_3
00006B7A  0C83 0000 11872          cmp.l     #8,D3
00006B7E  0008      
00006B80  6712      11873          beq.s     gets_4
00006B82  2042      11874          move.l    D2,A0
00006B84  5282      11875          addq.l    #1,D2
00006B86  1083      11876          move.b    D3,(A0)
00006B88  4883      11877          ext.w     D3
00006B8A  48C3      11878          ext.l     D3
00006B8C  2F03      11879          move.l    D3,-(A7)
00006B8E  4E92      11880          jsr       (A2)
00006B90  584F      11881          addq.w    #4,A7
00006B92  601E      11882          bra.s     gets_6
                    11883   gets_4:
00006B94  B484      11884          cmp.l     D4,D2
00006B96  631A      11885          bls.s     gets_6
00006B98  4878 0008 11886          pea       8
00006B9C  4E92      11887          jsr       (A2)
00006B9E  584F      11888          addq.w    #4,A7
00006BA0  4878 0020 11889          pea       32
00006BA4  4E92      11890          jsr       (A2)
00006BA6  584F      11891          addq.w    #4,A7
00006BA8  4878 0008 11892          pea       8
00006BAC  4E92      11893          jsr       (A2)
00006BAE  584F      11894          addq.w    #4,A7
00006BB0  5382      11895          subq.l    #1,D2
                    11896   gets_6:
00006BB2  60B6      11897          bra       gets_1
                    11898   gets_3:
00006BB4  4878 000A 11899          pea       10
00006BB8  4E92      11900          jsr       (A2)
00006BBA  584F      11901          addq.w    #4,A7
00006BBC  2042      11902          move.l    D2,A0
00006BBE  4210      11903          clr.b     (A0)
00006BC0  2004      11904          move.l    D4,D0
00006BC2  4CDF 041C 11905          movem.l   (A7)+,D2/D3/D4/A2
00006BC6  4E5E      11906          unlk      A6
00006BC8  4E75      11907          rts
                    11908   _ungetch:
00006BCA  4E56 0000 11909          link      A6,#0
00006BCE  23EE 0008 11910          move.l    8(A6),__ungetbuf
00006BD2  0803 00C0 
00006BD6  202E 0008 11911          move.l    8(A6),D0
00006BDA  4E5E      11912          unlk      A6
00006BDC  4E75      11913          rts
                    11914          section   const
                    11915   
                    11916   @m68kde~3_1:
00006BDE  0D0A 00   11917          dc.b      13,10,0
                    11918   @m68kde~3_2:
00006BE2  0D53 7769 11919          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00006BE6  7463 6865 
00006BEA  7320 5357 
00006BEE  5B        
00006BEF  372D 305D 11920          dc.b      55,45,48,93,32,61,32,0
00006BF3  203D 2000 
                    11921   @m68kde~3_3:
00006BF8  3000      11922          dc.b      48,0
                    11923   @m68kde~3_4:
00006BFA  3100      11924          dc.b      49,0
                    11925   @m68kde~3_5:
00006BFC  0D0A 456E 11926          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00006C00  7465 7220 
00006C04  5374 6172 
00006C08  74        
00006C09  2041 6464 11927          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006C0D  7265 7373 
00006C11  3A20 00   
                    11928   @m68kde~3_6:
00006C14  0D0A 3C45 11929          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
00006C18  5343 3E20 
00006C1C  3D20 4162 
00006C20  6F72      
00006C22  742C 2053 11930          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
00006C26  5041 4345 
00006C2A  2074 6F20 
00006C2E  436F      
00006C30  6E74 696E 11931          dc.b      110,116,105,110,117,101,0
00006C34  7565 00   
                    11932   @m68kde~3_7:
00006C38  0D0A 2530 11933          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
00006C3C  3858 2020 
00006C40  2530 3458 
00006C44  2020 20   
00006C47  2020 2020 11934          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
00006C4B  2020 2020 
00006C4F  2020 2020 
00006C53  2020 20   
00006C56  2020 2020 11935          dc.b      32,32,32,32,32,32,37,115,0
00006C5A  2020 2573 
00006C5E  00        
                    11936   @m68kde~3_8:
00006C60  0D0A 2530 11937          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006C64  3858 2020 
00006C68  2530 3458 
00006C6C  2025 30   
00006C6F  3458 2020 11938          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
00006C73  2020 2020 
00006C77  2020 2020 
00006C7B  2020 20   
00006C7E  2020 2020 11939          dc.b      32,32,32,32,32,32,37,115,0
00006C82  2020 2573 
00006C86  00        
                    11940   @m68kde~3_9:
00006C88  0D0A 2530 11941          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006C8C  3858 2020 
00006C90  2530 3458 
00006C94  2025 30   
00006C97  3458 2025 11942          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
00006C9B  3034 5820 
00006C9F  2020 2020 
00006CA3  2020 20   
00006CA6  2020 2020 11943          dc.b      32,32,32,32,32,32,37,115,0
00006CAA  2020 2573 
00006CAE  00        
                    11944   @m68kde~3_10:
00006CB0  0D0A 2530 11945          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006CB4  3858 2020 
00006CB8  2530 3458 
00006CBC  2025 30   
00006CBF  3458 2025 11946          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
00006CC3  3034 5820 
00006CC7  2530 3458 
00006CCB  2020 20   
00006CCE  2020 2020 11947          dc.b      32,32,32,32,32,32,37,115,0
00006CD2  2020 2573 
00006CD6  00        
                    11948   @m68kde~3_11:
00006CD8  0D0A 2530 11949          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006CDC  3858 2020 
00006CE0  2530 3458 
00006CE4  2025 30   
00006CE7  3458 2025 11950          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
00006CEB  3034 5820 
00006CEF  2530 3458 
00006CF3  2025 30   
00006CF6  3458 2020 11951          dc.b      52,88,32,32,32,32,37,115,0
00006CFA  2020 2573 
00006CFE  00        
                    11952   @m68kde~3_12:
00006D00  0D0A 4475 11953          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00006D04  6D70 204D 
00006D08  656D 6F72 
00006D0C  79        
00006D0D  2042 6C6F 11954          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00006D11  636B 3A20 
00006D15  3C45 5343 
00006D19  3E20      
00006D1B  746F 2041 11955          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00006D1F  626F 7274 
00006D23  2C20 3C53 
00006D27  50        
00006D28  4143 453E 11956          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00006D2C  2074 6F20 
00006D30  436F 6E74 
00006D34  69        
00006D35  6E75 6500 11957          dc.b      110,117,101,0
                    11958   @m68kde~3_13:
00006D3A  0D0A 456E 11959          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00006D3E  7465 7220 
00006D42  5374 6172 
00006D46  74        
00006D47  2041 6464 11960          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006D4B  7265 7373 
00006D4F  3A20 00   
                    11961   @m68kde~3_14:
00006D52  0D0A 2530 11962          dc.b      13,10,37,48,56,120,32,0
00006D56  3878 2000 
                    11963   @m68kde~3_15:
00006D5A  2530 3258 11964          dc.b      37,48,50,88,0
00006D5E  00        
                    11965   @m68kde~3_16:
00006D60  2020 00   11966          dc.b      32,32,0
                    11967   @m68kde~3_17:
00006D64  0D0A 00   11968          dc.b      13,10,0
                    11969   @m68kde~3_18:
00006D68  0D0A 4669 11970          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00006D6C  6C6C 204D 
00006D70  656D 6F72 
00006D74  79        
00006D75  2042 6C6F 11971          dc.b      32,66,108,111,99,107,0
00006D79  636B 00   
                    11972   @m68kde~3_19:
00006D7C  0D0A 456E 11973          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00006D80  7465 7220 
00006D84  5374 6172 
00006D88  74        
00006D89  2041 6464 11974          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006D8D  7265 7373 
00006D91  3A20 00   
                    11975   @m68kde~3_20:
00006D94  0D0A 456E 11976          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00006D98  7465 7220 
00006D9C  456E 6420 
00006DA0  41        
00006DA1  6464 7265 11977          dc.b      100,100,114,101,115,115,58,32,0
00006DA5  7373 3A20 
00006DA9  00        
                    11978   @m68kde~3_21:
00006DAA  0D0A 456E 11979          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00006DAE  7465 7220 
00006DB2  4669 6C6C 
00006DB6  20        
00006DB7  4461 7461 11980          dc.b      68,97,116,97,58,32,0
00006DBB  3A20 00   
                    11981   @m68kde~3_22:
00006DBE  0D0A 4669 11982          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00006DC2  6C6C 696E 
00006DC6  6720 4164 
00006DCA  64        
00006DCB  7265 7373 11983          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00006DCF  6573 205B 
00006DD3  2425 3038 
00006DD7  58        
00006DD8  202D 2024 11984          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00006DDC  2530 3858 
00006DE0  5D20 7769 
00006DE4  7468      
00006DE6  2024 2530 11985          dc.b      32,36,37,48,50,88,0
00006DEA  3258 00   
                    11986   @m68kde~3_23:
00006DEE  0D0A 5573 11987          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00006DF2  6520 4879 
00006DF6  7065 7254 
00006DFA  65        
00006DFB  726D 696E 11988          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00006DFF  616C 2074 
00006E03  6F20 5365 
00006E07  6E64 2054 11989          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00006E0B  6578 7420 
00006E0F  4669 6C65 
00006E13  2028 2E68 11990          dc.b      32,40,46,104,101,120,41,13,10,0
00006E17  6578 290D 
00006E1B  0A00      
                    11991   @m68kde~3_24:
00006E1E  0D0A 4C6F 11992          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00006E22  6164 2046 
00006E26  6169 6C65 
00006E2A  64        
00006E2B  2061 7420 11993          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00006E2F  4164 6472 
00006E33  6573 7320 
00006E37  3D        
00006E38  205B 2425 11994          dc.b      32,91,36,37,48,56,88,93,13,10,0
00006E3C  3038 585D 
00006E40  0D0A 00   
                    11995   @m68kde~3_25:
00006E44  0D0A 5375 11996          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00006E48  6363 6573 
00006E4C  733A 2044 
00006E50  6F        
00006E51  776E 6C6F 11997          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00006E55  6164 6564 
00006E59  2025 6420 
00006E5D  6279 7465 11998          dc.b      98,121,116,101,115,13,10,0
00006E61  730D 0A00 
                    11999   @m68kde~3_26:
00006E66  0D0A 4578 12000          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00006E6A  616D 696E 
00006E6E  6520 616E 
00006E72  64        
00006E73  2043 6861 12001          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00006E77  6E67 6520 
00006E7B  4D65 6D6F 
00006E7F  72        
00006E80  7900      12002          dc.b      121,0
                    12003   @m68kde~3_27:
00006E82  0D0A 3C45 12004          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00006E86  5343 3E20 
00006E8A  746F 2053 
00006E8E  746F      
00006E90  702C 203C 12005          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00006E94  5350 4143 
00006E98  453E 2074 
00006E9C  6F20      
00006E9E  4164 7661 12006          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00006EA2  6E63 652C 
00006EA6  2027 2D27 
00006EAA  2074      
00006EAC  6F20 476F 12007          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00006EB0  2042 6163 
00006EB4  6B2C 203C 
00006EB8  4441      
00006EBA  5441 3E20 12008          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00006EBE  746F 2063 
00006EC2  6861 6E67 
00006EC6  65        
00006EC7  00        12009          dc.b      0
                    12010   @m68kde~3_28:
00006EC8  0D0A 456E 12011          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00006ECC  7465 7220 
00006ED0  4164 6472 
00006ED4  65        
00006ED5  7373 3A20 12012          dc.b      115,115,58,32,0
00006ED9  00        
                    12013   @m68kde~3_29:
00006EDA  0D0A 5B25 12014          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00006EDE  3038 785D 
00006EE2  203A 2025 
00006EE6  3032 78   
00006EE9  2020 00   12015          dc.b      32,32,0
                    12016   @m68kde~3_30:
00006EEC  0D0A 5761 12017          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00006EF0  726E 696E 
00006EF4  6720 4368 
00006EF8  61        
00006EF9  6E67 6520 12018          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00006EFD  4661 696C 
00006F01  6564 3A20 
00006F05  57        
00006F06  726F 7465 12019          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00006F0A  205B 2530 
00006F0E  3278 5D2C 
00006F12  20        
00006F13  5265 6164 12020          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00006F17  205B 2530 
00006F1B  3278 5D00 
                    12021   @m68kde~3_31:
00006F20  0D0A 4C6F 12022          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00006F24  6164 696E 
00006F28  6720 5072 
00006F2C  6F        
00006F2D  6772 616D 12023          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00006F31  2046 726F 
00006F35  6D20 5350 
00006F39  49        
00006F3A  2046 6C61 12024          dc.b      32,70,108,97,115,104,46,46,46,46,0
00006F3E  7368 2E2E 
00006F42  2E2E 00   
                    12025   @m68kde~3_32:
00006F46  2425 3038 12026          dc.b      36,37,48,56,88,32,32,0
00006F4A  5820 2000 
                    12027   @m68kde~3_33:
00006F4E  2530 3258 12028          dc.b      37,48,50,88,0
00006F52  00        
                    12029   @m68kde~3_34:
00006F54  2000      12030          dc.b      32,0
                    12031   @m68kde~3_35:
00006F56  2020 00   12032          dc.b      32,32,0
                    12033   @m68kde~3_36:
00006F5A  2E00      12034          dc.b      46,0
                    12035   @m68kde~3_37:
00006F5C  2563 00   12036          dc.b      37,99,0
                    12037   @m68kde~3_38:
00006F60  00        12038          dc.b      0
                    12039   @m68kde~3_39:
00006F62  0D0A 0D0A 12040          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00006F66  2044 3020 
00006F6A  3D20 2425 
00006F6E  3038 58   
00006F71  2020 4130 12041          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00006F75  203D 2024 
00006F79  2530 3858 
00006F7D  00        
                    12042   @m68kde~3_40:
00006F7E  0D0A 2044 12043          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00006F82  3120 3D20 
00006F86  2425 3038 
00006F8A  5820 20   
00006F8D  4131 203D 12044          dc.b      65,49,32,61,32,36,37,48,56,88,0
00006F91  2024 2530 
00006F95  3858 00   
                    12045   @m68kde~3_41:
00006F98  0D0A 2044 12046          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00006F9C  3220 3D20 
00006FA0  2425 3038 
00006FA4  5820 20   
00006FA7  4132 203D 12047          dc.b      65,50,32,61,32,36,37,48,56,88,0
00006FAB  2024 2530 
00006FAF  3858 00   
                    12048   @m68kde~3_42:
00006FB2  0D0A 2044 12049          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00006FB6  3320 3D20 
00006FBA  2425 3038 
00006FBE  5820 20   
00006FC1  4133 203D 12050          dc.b      65,51,32,61,32,36,37,48,56,88,0
00006FC5  2024 2530 
00006FC9  3858 00   
                    12051   @m68kde~3_43:
00006FCC  0D0A 2044 12052          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00006FD0  3420 3D20 
00006FD4  2425 3038 
00006FD8  5820 20   
00006FDB  4134 203D 12053          dc.b      65,52,32,61,32,36,37,48,56,88,0
00006FDF  2024 2530 
00006FE3  3858 00   
                    12054   @m68kde~3_44:
00006FE6  0D0A 2044 12055          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00006FEA  3520 3D20 
00006FEE  2425 3038 
00006FF2  5820 20   
00006FF5  4135 203D 12056          dc.b      65,53,32,61,32,36,37,48,56,88,0
00006FF9  2024 2530 
00006FFD  3858 00   
                    12057   @m68kde~3_45:
00007000  0D0A 2044 12058          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00007004  3620 3D20 
00007008  2425 3038 
0000700C  5820 20   
0000700F  4136 203D 12059          dc.b      65,54,32,61,32,36,37,48,56,88,0
00007013  2024 2530 
00007017  3858 00   
                    12060   @m68kde~3_46:
0000701A  0D0A 2044 12061          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
0000701E  3720 3D20 
00007022  2425 3038 
00007026  5820 20   
00007029  4137 203D 12062          dc.b      65,55,32,61,32,36,37,48,56,88,0
0000702D  2024 2530 
00007031  3858 00   
                    12063   @m68kde~3_47:
00007034  0D0A 0D0A 12064          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00007038  5553 5020 
0000703C  3D20 2425 
00007040  3038 58   
00007043  2020 2841 12065          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00007047  3729 2055 
0000704B  7365 7220 
0000704F  5350      
00007051  00        12066          dc.b      0
                    12067   @m68kde~3_48:
00007052  0D0A 5353 12068          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00007056  5020 3D20 
0000705A  2425 3038 
0000705E  5820 20   
00007061  2841 3729 12069          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00007065  2053 7570 
00007069  6572 7669 
0000706D  73        
0000706E  6F72 2053 12070          dc.b      111,114,32,83,80,0
00007072  5000      
                    12071   @m68kde~3_49:
00007074  0D0A 2053 12072          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00007078  5220 3D20 
0000707C  2425 3034 
00007080  5820 20   
00007083  2000      12073          dc.b      32,0
                    12074   @m68kde~3_50:
00007086  2020 205B 12075          dc.b      32,32,32,91,0
0000708A  00        
                    12076   @m68kde~3_51:
0000708C  0D0A 2050 12077          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00007090  4320 3D20 
00007094  2425 3038 
00007098  5820 20   
0000709B  00        12078          dc.b      0
                    12079   @m68kde~3_52:
0000709C  2573 00   12080          dc.b      37,115,0
                    12081   @m68kde~3_53:
000070A0  5B42 5245 12082          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
000070A4  414B 504F 
000070A8  494E 545D 
000070AC  00        
                    12083   @m68kde~3_54:
000070AE  0D0A 00   12084          dc.b      13,10,0
                    12085   @m68kde~3_55:
000070B2  0D0A 5750 12086          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
000070B6  2564 203D 
000070BA  2025 7300 
                    12087   @m68kde~3_56:
000070BE  0D0A 0D0A 12088          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
000070C2  0D0A 0D0A 
000070C6  0D0A 0D0A 
000070CA  5369 6E   
000070CD  676C 6520 12089          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000070D1  5374 6570 
000070D5  2020 3A5B 
000070D9  4F        
000070DA  4E5D 00   12090          dc.b      78,93,0
                    12091   @m68kde~3_57:
000070DE  0D0A 4272 12092          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000070E2  6561 6B20 
000070E6  506F 696E 
000070EA  74        
000070EB  7320 3A5B 12093          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000070EF  4469 7361 
000070F3  626C 6564 
000070F7  5D        
000070F8  00        12094          dc.b      0
                    12095   @m68kde~3_58:
000070FA  0D0A 5072 12096          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000070FE  6573 7320 
00007102  3C53 5041 
00007106  4345      
00007108  3E20 746F 12097          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
0000710C  2045 7865 
00007110  6375 7465 
00007114  20        
00007115  4E65 7874 12098          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00007119  2049 6E73 
0000711D  7472 7563 
00007121  7469 6F6E 12099          dc.b      116,105,111,110,0
00007125  00        
                    12100   @m68kde~3_59:
00007126  0D0A 5072 12101          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000712A  6573 7320 
0000712E  3C45 5343 
00007132  3E20      
00007134  746F 2052 12102          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00007138  6573 756D 
0000713C  6520 5072 
00007140  6F67 7261 12103          dc.b      111,103,114,97,109,0
00007144  6D00      
                    12104   @m68kde~3_60:
00007146  0D0A 496C 12105          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
0000714A  6C65 6761 
0000714E  6C20 4461 
00007152  74        
00007153  6120 5265 12106          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00007157  6769 7374 
0000715B  6572 203A 
0000715F  20        
00007160  5573 6520 12107          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00007164  4430 2D44 
00007168  372E 2E2E 
0000716C  2E2E      
0000716E  0D0A 00   12108          dc.b      13,10,0
                    12109   @m68kde~3_61:
00007172  0D0A 4425 12110          dc.b      13,10,68,37,99,32,61,32,0
00007176  6320 3D20 
0000717A  00        
                    12111   @m68kde~3_62:
0000717C  0D0A 496C 12112          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00007180  6C65 6761 
00007184  6C20 4164 
00007188  64        
00007189  7265 7373 12113          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
0000718D  2052 6567 
00007191  6973 7465 
00007195  7220 3A20 12114          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00007199  5573 6520 
0000719D  4130 2D41 
000071A1  372E      
000071A3  2E2E 2E2E 12115          dc.b      46,46,46,46,13,10,0
000071A7  0D0A 00   
                    12116   @m68kde~3_63:
000071AA  0D0A 4125 12117          dc.b      13,10,65,37,99,32,61,32,0
000071AE  6320 3D20 
000071B2  00        
                    12118   @m68kde~3_64:
000071B4  0D0A 5573 12119          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
000071B8  6572 2053 
000071BC  5020 3D20 
000071C0  00        
                    12120   @m68kde~3_65:
000071C2  0D0A 496C 12121          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000071C6  6C65 6761 
000071CA  6C20 5265 
000071CE  67        
000071CF  6973 7465 12122          dc.b      105,115,116,101,114,46,46,46,46,0
000071D3  722E 2E2E 
000071D7  2E00      
                    12123   @m68kde~3_66:
000071DA  0D0A 5379 12124          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
000071DE  7374 656D 
000071E2  2053 5020 
000071E6  3D        
000071E7  2000      12125          dc.b      32,0
                    12126   @m68kde~3_67:
000071EA  0D0A 496C 12127          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000071EE  6C65 6761 
000071F2  6C20 5265 
000071F6  67        
000071F7  6973 7465 12128          dc.b      105,115,116,101,114,46,46,46,46,0
000071FB  722E 2E2E 
000071FF  2E00      
                    12129   @m68kde~3_68:
00007202  0D0A 5043 12130          dc.b      13,10,80,67,32,61,32,0
00007206  203D 2000 
                    12131   @m68kde~3_69:
0000720A  0D0A 5352 12132          dc.b      13,10,83,82,32,61,32,0
0000720E  203D 2000 
                    12133   @m68kde~3_70:
00007212  0D0A 496C 12134          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00007216  6C65 6761 
0000721A  6C20 5265 
0000721E  67        
0000721F  6973 7465 12135          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00007223  723A 2055 
00007227  7365 2041 
0000722B  30        
0000722C  2D41 372C 12136          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00007230  2044 302D 
00007234  4437 2C20 
00007238  5353 50   
0000723B  2C20 5553 12137          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
0000723F  502C 2050 
00007243  4320 6F72 
00007247  2053      
00007249  520D 0A00 12138          dc.b      82,13,10,0
                    12139   @m68kde~3_71:
0000724E  0D0A 0D0A 12140          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00007252  4E75 6D20 
00007256  2020 2020 
0000725A  4164      
0000725C  6472 6573 12141          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00007260  7320 2020 
00007264  2020 2049 
00007268  6E        
00007269  7374 7275 12142          dc.b      115,116,114,117,99,116,105,111,110,0
0000726D  6374 696F 
00007271  6E00      
                    12143   @m68kde~3_72:
00007274  0D0A 2D2D 12144          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00007278  2D20 2020 
0000727C  2020 2D2D 
00007280  2D2D 2D   
00007283  2D2D 2D2D 12145          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00007287  2020 2020 
0000728B  2D2D 2D2D 
0000728F  2D2D 2D   
00007292  2D2D 2D2D 12146          dc.b      45,45,45,45,0
00007296  00        
                    12147   @m68kde~3_73:
00007298  0D0A 4E6F 12148          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
0000729C  2042 7265 
000072A0  616B 506F 
000072A4  69        
000072A5  6E74 7320 12149          dc.b      110,116,115,32,83,101,116,0
000072A9  5365 7400 
                    12150   @m68kde~3_74:
000072AE  0D0A 2533 12151          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000072B2  6420 2020 
000072B6  2020 2425 
000072BA  3038 78   
000072BD  00        12152          dc.b      0
                    12153   @m68kde~3_75:
000072BE  2020 2020 12154          dc.b      32,32,32,32,37,115,0
000072C2  2573 00   
                    12155   @m68kde~3_76:
000072C6  0D0A 00   12156          dc.b      13,10,0
                    12157   @m68kde~3_77:
000072CA  0D0A 4E75 12158          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000072CE  6D20 2020 
000072D2  2020 4164 
000072D6  6472      
000072D8  6573 7300 12159          dc.b      101,115,115,0
                    12160   @m68kde~3_78:
000072DC  0D0A 2D2D 12161          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000072E0  2D20 2020 
000072E4  2020 2D2D 
000072E8  2D2D 2D   
000072EB  2D2D 2D2D 12162          dc.b      45,45,45,45,0
000072EF  00        
                    12163   @m68kde~3_79:
000072F0  0D0A 4E6F 12164          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000072F4  2057 6174 
000072F8  6368 506F 
000072FC  69        
000072FD  6E74 7320 12165          dc.b      110,116,115,32,83,101,116,0
00007301  5365 7400 
                    12166   @m68kde~3_80:
00007306  0D0A 2533 12167          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
0000730A  6420 2020 
0000730E  2020 2425 
00007312  3038 78   
00007315  00        12168          dc.b      0
                    12169   @m68kde~3_81:
00007316  0D0A 00   12170          dc.b      13,10,0
                    12171   @m68kde~3_82:
0000731A  0D0A 456E 12172          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000731E  7465 7220 
00007322  4272 6561 
00007326  6B        
00007327  2050 6F69 12173          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000732B  6E74 204E 
0000732F  756D 6265 
00007333  72        
00007334  3A20 00   12174          dc.b      58,32,0
                    12175   @m68kde~3_83:
00007338  0D0A 496C 12176          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
0000733C  6C65 6761 
00007340  6C20 5261 
00007344  6E        
00007345  6765 203A 12177          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00007349  2055 7365 
0000734D  2030 202D 
00007351  2037      
00007353  00        12178          dc.b      0
                    12179   @m68kde~3_84:
00007354  0D0A 4272 12180          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007358  6561 6B20 
0000735C  506F 696E 
00007360  74        
00007361  2043 6C65 12181          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00007365  6172 6564 
00007369  2E2E 2E2E 
0000736D  2E        
0000736E  0D0A 00   12182          dc.b      13,10,0
                    12183   @m68kde~3_85:
00007372  0D0A 4272 12184          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007376  6561 6B20 
0000737A  506F 696E 
0000737E  74        
0000737F  2077 6173 12185          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00007383  6E27 7420 
00007387  5365 742E 
0000738B  2E        
0000738C  2E2E 2E00 12186          dc.b      46,46,46,0
                    12187   @m68kde~3_86:
00007390  0D0A 456E 12188          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00007394  7465 7220 
00007398  5761 7463 
0000739C  68        
0000739D  2050 6F69 12189          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000073A1  6E74 204E 
000073A5  756D 6265 
000073A9  72        
000073AA  3A20 00   12190          dc.b      58,32,0
                    12191   @m68kde~3_87:
000073AE  0D0A 496C 12192          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
000073B2  6C65 6761 
000073B6  6C20 5261 
000073BA  6E        
000073BB  6765 203A 12193          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000073BF  2055 7365 
000073C3  2030 202D 
000073C7  2037      
000073C9  00        12194          dc.b      0
                    12195   @m68kde~3_88:
000073CA  0D0A 5761 12196          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000073CE  7463 6820 
000073D2  506F 696E 
000073D6  74        
000073D7  2043 6C65 12197          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000073DB  6172 6564 
000073DF  2E2E 2E2E 
000073E3  2E        
000073E4  0D0A 00   12198          dc.b      13,10,0
                    12199   @m68kde~3_89:
000073E8  0D0A 5761 12200          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000073EC  7463 6820 
000073F0  506F 696E 
000073F4  74        
000073F5  2057 6173 12201          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000073F9  206E 6F74 
000073FD  2053 6574 
00007401  2E        
00007402  2E2E 2E2E 12202          dc.b      46,46,46,46,0
00007406  00        
                    12203   @m68kde~3_90:
00007408  0D0A 4E6F 12204          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
0000740C  2046 5245 
00007410  4520 4272 
00007414  6561      
00007416  6B20 506F 12205          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
0000741A  696E 7473 
0000741E  2E2E 2E2E 
00007422  2E        
00007423  00        12206          dc.b      0
                    12207   @m68kde~3_91:
00007424  0D0A 4272 12208          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007428  6561 6B20 
0000742C  506F 696E 
00007430  74        
00007431  2041 6464 12209          dc.b      32,65,100,100,114,101,115,115,58,32,0
00007435  7265 7373 
00007439  3A20 00   
                    12210   @m68kde~3_92:
0000743C  0D0A 4572 12211          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00007440  726F 7220 
00007444  3A20 4272 
00007448  65        
00007449  616B 2050 12212          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000744D  6F69 6E74 
00007451  7320 4341 
00007455  4E        
00007456  4E4F 5420 12213          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
0000745A  6265 2073 
0000745E  6574 2061 
00007462  74        
00007463  204F 4444 12214          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00007467  2061 6464 
0000746B  7265 7373 
0000746F  65        
00007470  7300      12215          dc.b      115,0
                    12216   @m68kde~3_93:
00007472  0D0A 4572 12217          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00007476  726F 7220 
0000747A  3A20 4272 
0000747E  65        
0000747F  616B 2050 12218          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00007483  6F69 6E74 
00007487  7320 4341 
0000748B  4E        
0000748C  4E4F 5420 12219          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00007490  6265 2073 
00007494  6574 2066 
00007498  6F        
00007499  7220 524F 12220          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
0000749D  4D20 696E 
000074A1  2052 616E 
000074A5  67        
000074A6  6520 3A20 12221          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
000074AA  5B24 302D 
000074AE  2430 3030 
000074B2  3037 46   
000074B5  4646 5D00 12222          dc.b      70,70,93,0
                    12223   @m68kde~3_94:
000074BA  0D0A 4572 12224          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
000074BE  726F 723A 
000074C2  2042 7265 
000074C6  61        
000074C7  6B20 506F 12225          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000074CB  696E 7420 
000074CF  416C 7265 
000074D3  6164 7920 12226          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000074D7  4578 6973 
000074DB  7473 2061 
000074DF  74        
000074E0  2041 6464 12227          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000074E4  7265 7373 
000074E8  203A 2025 
000074EC  30        
000074ED  3878 0D0A 12228          dc.b      56,120,13,10,0
000074F1  00        
                    12229   @m68kde~3_95:
000074F2  0D0A 4272 12230          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000074F6  6561 6B20 
000074FA  506F 696E 
000074FE  74        
000074FF  2053 6574 12231          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00007503  2061 7420 
00007507  4164 6472 
0000750B  65        
0000750C  7373 3A20 12232          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
00007510  5B24 2530 
00007514  3878 5D2C 
00007518  2049      
0000751A  6E73 7472 12233          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
0000751E  7563 7469 
00007522  6F6E 203D 
00007526  2025 7300 12234          dc.b      32,37,115,0
                    12235   @m68kde~3_96:
0000752A  0D0A 00   12236          dc.b      13,10,0
                    12237   @m68kde~3_97:
0000752E  0D0A 4E6F 12238          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00007532  2046 5245 
00007536  4520 5761 
0000753A  7463      
0000753C  6820 506F 12239          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00007540  696E 7473 
00007544  2E2E 2E2E 
00007548  2E        
00007549  00        12240          dc.b      0
                    12241   @m68kde~3_98:
0000754A  0D0A 5761 12242          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000754E  7463 6820 
00007552  506F 696E 
00007556  74        
00007557  2041 6464 12243          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000755B  7265 7373 
0000755F  3A20 00   
                    12244   @m68kde~3_99:
00007562  0D0A 4572 12245          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00007566  726F 723A 
0000756A  2057 6174 
0000756E  63        
0000756F  6820 506F 12246          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00007573  696E 7420 
00007577  416C 7265 
0000757B  6164 7920 12247          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
0000757F  5365 7420 
00007583  6174 2041 
00007587  64        
00007588  6472 6573 12248          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
0000758C  7320 3A20 
00007590  2530 3878 
00007594  0D        
00007595  0A00      12249          dc.b      10,0
                    12250   @m68kde~3_100:
00007598  0D0A 5761 12251          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000759C  7463 6820 
000075A0  506F 696E 
000075A4  74        
000075A5  2053 6574 12252          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000075A9  2061 7420 
000075AD  4164 6472 
000075B1  65        
000075B2  7373 3A20 12253          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000075B6  5B24 2530 
000075BA  3878 5D00 
                    12254   @m68kde~3_101:
000075BE  0D0A 00   12255          dc.b      13,10,0
                    12256   @m68kde~3_102:
000075C2  0D0A 0D0A 12257          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
000075C6  0D0A 0D0A 
000075CA  4042 5245 
000075CE  414B 50   
000075D1  4F49 4E54 12258          dc.b      79,73,78,84,0
000075D5  00        
                    12259   @m68kde~3_103:
000075D6  0D0A 5369 12260          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000075DA  6E67 6C65 
000075DE  2053 7465 
000075E2  70        
000075E3  203A 205B 12261          dc.b      32,58,32,91,79,78,93,0
000075E7  4F4E 5D00 
                    12262   @m68kde~3_104:
000075EC  0D0A 4272 12263          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000075F0  6561 6B50 
000075F4  6F69 6E74 
000075F8  73        
000075F9  203A 205B 12264          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
000075FD  456E 6162 
00007601  6C65 645D 
00007605  00        
                    12265   @m68kde~3_105:
00007606  0D0A 5072 12266          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
0000760A  6573 7320 
0000760E  3C53 5041 
00007612  4345      
00007614  3E20 746F 12267          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00007618  2045 7865 
0000761C  6375 7465 
00007620  20        
00007621  4E65 7874 12268          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00007625  2049 6E73 
00007629  7472 7563 
0000762D  7469 6F6E 12269          dc.b      116,105,111,110,0
00007631  00        
                    12270   @m68kde~3_106:
00007632  0D0A 5072 12271          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00007636  6573 7320 
0000763A  3C45 5343 
0000763E  3E20      
00007640  746F 2052 12272          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00007644  6573 756D 
00007648  6520 5573 
0000764C  6572 2050 12273          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00007650  726F 6772 
00007654  616D 0D0A 
00007658  00        
                    12274   @m68kde~3_107:
0000765A  0D0A 556E 12275          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
0000765E  6B6E 6F77 
00007662  6E20 436F 
00007666  6D        
00007667  6D61 6E64 12276          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
0000766B  2E2E 2E2E 
0000766F  2E0D 0A00 
                    12277   @m68kde~3_108:
00007674  0D0A 5072 12278          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00007678  6F67 7261 
0000767C  6D20 456E 
00007680  64        
00007681  6564 2028 12279          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00007685  5452 4150 
00007689  2023 3135 
0000768D  292E      
0000768F  2E2E 2E00 12280          dc.b      46,46,46,0
                    12281   @m68kde~3_109:
00007694  0D0A 4B69 12282          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00007698  6C6C 2041 
0000769C  6C6C 2042 
000076A0  72        
000076A1  6561 6B20 12283          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
000076A5  506F 696E 
000076A9  7473 2E2E 
000076AD  2E        
000076AE  2879 2F6E 12284          dc.b      40,121,47,110,41,63,0
000076B2  293F 00   
                    12285   @m68kde~3_110:
000076B6  0D0A 4B69 12286          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
000076BA  6C6C 2041 
000076BE  6C6C 2057 
000076C2  61        
000076C3  7463 6820 12287          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
000076C7  506F 696E 
000076CB  7473 2E2E 
000076CF  2E        
000076D0  2879 2F6E 12288          dc.b      40,121,47,110,41,63,0
000076D4  293F 00   
                    12289   @m68kde~3_111:
000076D8  0D0A 2D2D 12290          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
000076DC  2D2D 2D2D 
000076E0  2D2D 2D2D 
000076E4  2D2D 2D   
000076E7  2D2D 2D2D 12291          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000076EB  2D2D 2D2D 
000076EF  2D2D 2D2D 
000076F3  2D2D 2D   
000076F6  2D2D 2D2D 12292          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000076FA  2D2D 2D2D 
000076FE  2D2D 2D2D 
00007702  2D2D 2D   
00007705  2D2D 2D2D 12293          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00007709  2D2D 2D2D 
0000770D  2D2D 2D2D 
00007711  2D2D 2D   
00007714  2D2D 2D2D 12294          dc.b      45,45,45,45,45,45,0
00007718  2D2D 00   
                    12295   @m68kde~3_112:
0000771C  0D0A 2020 12296          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00007720  4465 6275 
00007724  6767 6572 
00007728  20        
00007729  436F 6D6D 12297          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
0000772D  616E 6420 
00007731  5375 6D6D 
00007735  6172 7900 12298          dc.b      97,114,121,0
                    12299   @m68kde~3_113:
0000773A  0D0A 2020 12300          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
0000773E  2E28 7265 
00007742  6729 2020 
00007746  2020      
00007748  2020 202D 12301          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
0000774C  2043 6861 
00007750  6E67 6520 
00007754  5265      
00007756  6769 7374 12302          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
0000775A  6572 733A 
0000775E  2065 2E67 
00007762  2041 302D 12303          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00007766  4137 2C44 
0000776A  302D 4437 
0000776E  2C50 43   
00007771  2C53 5350 12304          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00007775  2C55 5350 
00007779  2C53 5200 
                    12305   @m68kde~3_114:
0000777E  0D0A 2020 12306          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00007782  4244 2F42 
00007786  532F 4243 
0000778A  2F42 4B   
0000778D  2020 2D20 12307          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00007791  4272 6561 
00007795  6B20 506F 
00007799  69        
0000779A  6E74 3A20 12308          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
0000779E  4469 7370 
000077A2  6C61 792F 
000077A6  53        
000077A7  6574 2F43 12309          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
000077AB  6C65 6172 
000077AF  2F4B 696C 
000077B3  6C        
000077B4  00        12310          dc.b      0
                    12311   @m68kde~3_115:
000077B6  0D0A 2020 12312          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
000077BA  4320 2020 
000077BE  2020 2020 
000077C2  2020 20   
000077C5  2020 2D20 12313          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
000077C9  436F 7079 
000077CD  2050 726F 
000077D1  67        
000077D2  7261 6D20 12314          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
000077D6  6672 6F6D 
000077DA  2046 6C61 
000077DE  73        
000077DF  6820 746F 12315          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
000077E3  204D 6169 
000077E7  6E20 4D65 
000077EB  6D        
000077EC  6F72 7900 12316          dc.b      111,114,121,0
                    12317   @m68kde~3_116:
000077F0  0D0A 2020 12318          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
000077F4  4449 2020 
000077F8  2020 2020 
000077FC  2020 20   
000077FF  2020 2D20 12319          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
00007803  4469 7361 
00007807  7373 656D 
0000780B  62        
0000780C  6C65 2050 12320          dc.b      108,101,32,80,114,111,103,114,97,109,0
00007810  726F 6772 
00007814  616D 00   
                    12321   @m68kde~3_117:
00007818  0D0A 2020 12322          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
0000781C  4455 2020 
00007820  2020 2020 
00007824  2020 20   
00007827  2020 2D20 12323          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
0000782B  4475 6D70 
0000782F  204D 656D 
00007833  6F        
00007834  7279 2043 12324          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00007838  6F6E 7465 
0000783C  6E74 7320 
00007840  746F 2053 12325          dc.b      116,111,32,83,99,114,101,101,110,0
00007844  6372 6565 
00007848  6E00      
                    12326   @m68kde~3_118:
0000784A  0D0A 2020 12327          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
0000784E  4520 2020 
00007852  2020 2020 
00007856  2020 20   
00007859  2020 2D20 12328          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
0000785D  456E 7465 
00007861  7220 5374 
00007865  72        
00007866  696E 6720 12329          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
0000786A  696E 746F 
0000786E  204D 656D 
00007872  6F72 7900 12330          dc.b      111,114,121,0
                    12331   @m68kde~3_119:
00007876  0D0A 2020 12332          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
0000787A  4620 2020 
0000787E  2020 2020 
00007882  2020 20   
00007885  2020 2D20 12333          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00007889  4669 6C6C 
0000788D  204D 656D 
00007891  6F        
00007892  7279 2077 12334          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00007896  6974 6820 
0000789A  4461 7461 
0000789E  00        
                    12335   @m68kde~3_120:
000078A0  0D0A 2020 12336          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
000078A4  4720 2020 
000078A8  2020 2020 
000078AC  2020 20   
000078AF  2020 2D20 12337          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
000078B3  476F 2050 
000078B7  726F 6772 
000078BB  61        
000078BC  6D20 5374 12338          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
000078C0  6172 7469 
000078C4  6E67 2061 
000078C8  74        
000078C9  2041 6464 12339          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
000078CD  7265 7373 
000078D1  3A20 2425 
000078D5  30        
000078D6  3858 00   12340          dc.b      56,88,0
                    12341   @m68kde~3_121:
000078DA  0D0A 2020 12342          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
000078DE  4C20 2020 
000078E2  2020 2020 
000078E6  2020 20   
000078E9  2020 2D20 12343          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
000078ED  4C6F 6164 
000078F1  2050 726F 
000078F5  67        
000078F6  7261 6D20 12344          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
000078FA  282E 4845 
000078FE  5820 6669 
00007902  6C        
00007903  6529 2066 12345          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00007907  726F 6D20 
0000790B  4C61 7074 
0000790F  6F        
00007910  7000      12346          dc.b      112,0
                    12347   @m68kde~3_122:
00007912  0D0A 2020 12348          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00007916  4D20 2020 
0000791A  2020 2020 
0000791E  2020 20   
00007921  2020 2D20 12349          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00007925  4D65 6D6F 
00007929  7279 2045 
0000792D  78        
0000792E  616D 696E 12350          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00007932  6520 616E 
00007936  6420 4368 
0000793A  61        
0000793B  6E67 6500 12351          dc.b      110,103,101,0
                    12352   @m68kde~3_123:
00007940  0D0A 2020 12353          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00007944  5020 2020 
00007948  2020 2020 
0000794C  2020 20   
0000794F  2020 2D20 12354          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00007953  5072 6F67 
00007957  7261 6D20 
0000795B  46        
0000795C  6C61 7368 12355          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00007960  204D 656D 
00007964  6F72 7920 
00007968  7769 7468 12356          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
0000796C  2055 7365 
00007970  7220 5072 
00007974  6F67 7261 12357          dc.b      111,103,114,97,109,0
00007978  6D00      
                    12358   @m68kde~3_124:
0000797A  0D0A 2020 12359          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
0000797E  5220 2020 
00007982  2020 2020 
00007986  2020 20   
00007989  2020 2D20 12360          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
0000798D  4469 7370 
00007991  6C61 7920 
00007995  36        
00007996  3830 3030 12361          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
0000799A  2052 6567 
0000799E  6973 7465 
000079A2  72        
000079A3  7300      12362          dc.b      115,0
                    12363   @m68kde~3_125:
000079A6  0D0A 2020 12364          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
000079AA  5320 2020 
000079AE  2020 2020 
000079B2  2020 20   
000079B5  2020 2D20 12365          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
000079B9  546F 6767 
000079BD  6C65 204F 
000079C1  4E        
000079C2  2F4F 4646 12366          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
000079C6  2053 696E 
000079CA  676C 6520 
000079CE  53        
000079CF  7465 7020 12367          dc.b      116,101,112,32,77,111,100,101,0
000079D3  4D6F 6465 
000079D7  00        
                    12368   @m68kde~3_126:
000079D8  0D0A 2020 12369          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
000079DC  544D 2020 
000079E0  2020 2020 
000079E4  2020 20   
000079E7  2020 2D20 12370          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
000079EB  5465 7374 
000079EF  204D 656D 
000079F3  6F        
000079F4  7279 00   12371          dc.b      114,121,0
                    12372   @m68kde~3_127:
000079F8  0D0A 2020 12373          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
000079FC  5453 2020 
00007A00  2020 2020 
00007A04  2020 20   
00007A07  2020 2D20 12374          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00007A0B  5465 7374 
00007A0F  2053 7769 
00007A13  74        
00007A14  6368 6573 12375          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00007A18  3A20 5357 
00007A1C  372D 3000 
                    12376   @m68kde~3_128:
00007A20  0D0A 2020 12377          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00007A24  5444 2020 
00007A28  2020 2020 
00007A2C  2020 20   
00007A2F  2020 2D20 12378          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00007A33  5465 7374 
00007A37  2044 6973 
00007A3B  70        
00007A3C  6C61 7973 12379          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00007A40  3A20 4C45 
00007A44  4473 2061 
00007A48  6E        
00007A49  6420 372D 12380          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00007A4D  5365 676D 
00007A51  656E 7400 
                    12381   @m68kde~3_129:
00007A56  0D0A 2020 12382          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00007A5A  5744 2F57 
00007A5E  532F 5743 
00007A62  2F57 4B   
00007A65  2020 2D20 12383          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00007A69  5761 7463 
00007A6D  6820 506F 
00007A71  696E      
00007A73  743A 2044 12384          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00007A77  6973 706C 
00007A7B  6179 2F53 
00007A7F  65        
00007A80  742F 436C 12385          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00007A84  6561 722F 
00007A88  4B69 6C6C 
00007A8C  00        
                    12386   @m68kde~3_130:
00007A8E  0D0A 2300 12387          dc.b      13,10,35,0
                    12388   @m68kde~3_131:
00007A92  0D0A 5072 12389          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00007A96  6F67 7261 
00007A9A  6D20 5275 
00007A9E  6E        
00007A9F  6E69 6E67 12390          dc.b      110,105,110,103,46,46,46,46,46,0
00007AA3  2E2E 2E2E 
00007AA7  2E00      
                    12391   @m68kde~3_132:
00007AAA  0D0A 5072 12392          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00007AAE  6573 7320 
00007AB2  3C52 4553 
00007AB6  4554      
00007AB8  3E20 6275 12393          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00007ABC  7474 6F6E 
00007AC0  203C 4B65 
00007AC4  79        
00007AC5  303E 206F 12394          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00007AC9  6E20 4445 
00007ACD  3120 746F 
00007AD1  2073      
00007AD3  746F 7000 12395          dc.b      116,111,112,0
                    12396   @m68kde~3_133:
00007AD8  0D0A 4572 12397          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00007ADC  726F 723A 
00007AE0  2050 7265 
00007AE4  73        
00007AE5  7320 2747 12398          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00007AE9  2720 6669 
00007AED  7273 7420 
00007AF1  74        
00007AF2  6F20 7374 12399          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00007AF6  6172 7420 
00007AFA  7072 6F67 
00007AFE  7261 6D00 12400          dc.b      114,97,109,0
                    12401   @m68kde~3_134:
00007B02  0D0A 5369 12402          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00007B06  6E67 6C65 
00007B0A  2053 7465 
00007B0E  70        
00007B0F  2020 3A5B 12403          dc.b      32,32,58,91,79,78,93,0
00007B13  4F4E 5D00 
                    12404   @m68kde~3_135:
00007B18  0D0A 4272 12405          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007B1C  6561 6B20 
00007B20  506F 696E 
00007B24  74        
00007B25  7320 3A5B 12406          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00007B29  4469 7361 
00007B2D  626C 6564 
00007B31  5D        
00007B32  00        12407          dc.b      0
                    12408   @m68kde~3_136:
00007B34  0D0A 5072 12409          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00007B38  6573 7320 
00007B3C  2747 2720 
00007B40  74        
00007B41  6F20 5472 12410          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00007B45  6163 6520 
00007B49  5072 6F67 
00007B4D  72        
00007B4E  616D 2066 12411          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00007B52  726F 6D20 
00007B56  6164 6472 
00007B5A  6573 7320 12412          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00007B5E  2425 582E 
00007B62  2E2E 2E2E 
00007B66  00        
                    12413   @m68kde~3_137:
00007B68  0D0A 5075 12414          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00007B6C  7368 203C 
00007B70  5245 5345 
00007B74  5420      
00007B76  4275 7474 12415          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00007B7A  6F6E 3E20 
00007B7E  746F 2053 
00007B82  74        
00007B83  6F70 2E2E 12416          dc.b      111,112,46,46,46,46,46,0
00007B87  2E2E 2E00 
                    12417   @m68kde~3_138:
00007B8C  0D0A 5369 12418          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00007B90  6E67 6C65 
00007B94  2053 7465 
00007B98  70        
00007B99  203A 205B 12419          dc.b      32,58,32,91,79,70,70,93,0
00007B9D  4F46 465D 
00007BA1  00        
                    12420   @m68kde~3_139:
00007BA2  0D0A 4272 12421          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007BA6  6561 6B20 
00007BAA  506F 696E 
00007BAE  74        
00007BAF  7320 3A5B 12422          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00007BB3  456E 6162 
00007BB7  6C65 645D 
00007BBB  00        
                    12423   @m68kde~3_140:
00007BBC  0D0A 5072 12424          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00007BC0  6573 7320 
00007BC4  3C45 5343 
00007BC8  3E20      
00007BCA  746F 2052 12425          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00007BCE  6573 756D 
00007BD2  6520 5573 
00007BD6  6572 2050 12426          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00007BDA  726F 6772 
00007BDE  616D 2E2E 
00007BE2  2E        
00007BE3  2E2E 00   12427          dc.b      46,46,0
                    12428   @m68kde~3_141:
00007BE6  0D0A 5369 12429          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00007BEA  6E67 6C65 
00007BEE  2053 7465 
00007BF2  70        
00007BF3  2020 3A5B 12430          dc.b      32,32,58,91,79,70,70,93,0
00007BF7  4F46 465D 
00007BFB  00        
                    12431   @m68kde~3_142:
00007BFC  0D0A 4272 12432          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007C00  6561 6B20 
00007C04  506F 696E 
00007C08  74        
00007C09  7320 3A5B 12433          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00007C0D  456E 6162 
00007C11  6C65 645D 
00007C15  00        
                    12434   @m68kde~3_143:
00007C16  0D0A 5072 12435          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00007C1A  6F67 7261 
00007C1E  6D20 5275 
00007C22  6E        
00007C23  6E69 6E67 12436          dc.b      110,105,110,103,46,46,46,46,46,0
00007C27  2E2E 2E2E 
00007C2B  2E00      
                    12437   @m68kde~3_144:
00007C2E  0D0A 5072 12438          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00007C32  6573 7320 
00007C36  3C52 4553 
00007C3A  4554      
00007C3C  3E20 6275 12439          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00007C40  7474 6F6E 
00007C44  203C 4B65 
00007C48  79        
00007C49  303E 206F 12440          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00007C4D  6E20 4445 
00007C51  3120 746F 
00007C55  2073      
00007C57  746F 7000 12441          dc.b      116,111,112,0
                    12442   @m68kde~3_145:
00007C5C  0D0A 0D0A 12443          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00007C60  5072 6F67 
00007C64  7261 6D20 
00007C68  41        
00007C69  424F 5254 12444          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00007C6D  2021 2121 
00007C71  2121 210D 
00007C75  0A00      
                    12445   @m68kde~3_146:
00007C78  2573 0D0A 12446          dc.b      37,115,13,10,0
00007C7C  00        
                    12447   @m68kde~3_147:
00007C7E  0D0A 0D0A 12448          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00007C82  5072 6F67 
00007C86  7261 6D20 
00007C8A  41        
00007C8B  424F 5254 12449          dc.b      66,79,82,84,32,33,33,33,33,33,0
00007C8F  2021 2121 
00007C93  2121 00   
                    12450   @m68kde~3_148:
00007C96  0D0A 556E 12451          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00007C9A  6861 6E64 
00007C9E  6C65 6420 
00007CA2  49        
00007CA3  6E74 6572 12452          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00007CA7  7275 7074 
00007CAB  3A20 4952 
00007CAF  5125 6420 12453          dc.b      81,37,100,32,33,33,33,33,33,0
00007CB3  2121 2121 
00007CB7  2100      
                    12454   @m68kde~3_149:
00007CBA  4144 4452 12455          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00007CBE  4553 5320 
00007CC2  4552 524F 
00007CC6  523A 20   
00007CC9  3136 206F 12456          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00007CCD  7220 3332 
00007CD1  2042 6974 
00007CD5  2054      
00007CD7  7261 6E73 12457          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00007CDB  6665 7220 
00007CDF  746F 2F66 
00007CE3  726F 6D20 12458          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00007CE7  616E 204F 
00007CEB  4444 2041 
00007CEF  64        
00007CF0  6472 6573 12459          dc.b      100,114,101,115,115,46,46,46,46,0
00007CF4  732E 2E2E 
00007CF8  2E00      
                    12460   @m68kde~3_150:
00007CFA  556E 6861 12461          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00007CFE  6E64 6C65 
00007D02  6420 5472 
00007D06  6170 2021 12462          dc.b      97,112,32,33,33,33,33,33,0
00007D0A  2121 2121 
00007D0E  00        
                    12463   @m68kde~3_151:
00007D10  4255 5320 12464          dc.b      66,85,83,32,69,114,114,111,114,33,0
00007D14  4572 726F 
00007D18  7221 00   
                    12465   @m68kde~3_152:
00007D1C  4144 4452 12466          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00007D20  4553 5320 
00007D24  4572 726F 
00007D28  7221      
00007D2A  00        12467          dc.b      0
                    12468   @m68kde~3_153:
00007D2C  494C 4C45 12469          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00007D30  4741 4C20 
00007D34  494E 5354 
00007D38  5255 43   
00007D3B  5449 4F4E 12470          dc.b      84,73,79,78,0
00007D3F  00        
                    12471   @m68kde~3_154:
00007D40  4449 5649 12472          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00007D44  4445 2042 
00007D48  5920 5A45 
00007D4C  524F 00   
                    12473   @m68kde~3_155:
00007D50  2743 484B 12474          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00007D54  2720 494E 
00007D58  5354 5255 
00007D5C  4354 49   
00007D5F  4F4E 00   12475          dc.b      79,78,0
                    12476   @m68kde~3_156:
00007D62  5452 4150 12477          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00007D66  5620 494E 
00007D6A  5354 5255 
00007D6E  4354 49   
00007D71  4F4E 00   12478          dc.b      79,78,0
                    12479   @m68kde~3_157:
00007D74  5052 4956 12480          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00007D78  494C 4547 
00007D7C  4520 5649 
00007D80  4F4C 41   
00007D83  5449 4F4E 12481          dc.b      84,73,79,78,0
00007D87  00        
                    12482   @m68kde~3_158:
00007D88  554E 494E 12483          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00007D8C  4954 4941 
00007D90  4C49 5345 
00007D94  4420 49   
00007D97  5251 00   12484          dc.b      82,81,0
                    12485   @m68kde~3_159:
00007D9A  5350 5552 12486          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00007D9E  494F 5553 
00007DA2  2049 5251 
00007DA6  00        
                    12487   @m68kde~3_160:
00007DA8  0D0A 5374 12488          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00007DAC  6172 7420 
00007DB0  4164 6472 
00007DB4  65        
00007DB5  7373 2069 12489          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00007DB9  6E20 4D65 
00007DBD  6D6F 7279 
00007DC1  3A20 00   12490          dc.b      58,32,0
                    12491   @m68kde~3_161:
00007DC4  0D0A 456E 12492          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00007DC8  7465 7220 
00007DCC  5374 7269 
00007DD0  6E        
00007DD1  6720 2845 12493          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00007DD5  5343 2074 
00007DD9  6F20 656E 
00007DDD  64        
00007DDE  2920 3A00 12494          dc.b      41,32,58,0
                    12495   @m68kde~3_162:
00007DE2  0D0A 456E 12496          dc.b      13,10,69,110,116,101,114,32,116,104,101,32,118
00007DE6  7465 7220 
00007DEA  7468 6520 
00007DEE  76        
00007DEF  616C 7565 12497          dc.b      97,108,117,101,32,98,101,108,111,119,32,102
00007DF3  2062 656C 
00007DF7  6F77 2066 
00007DFB  6F72 2074 12498          dc.b      111,114,32,116,104,101,32,115,105,122,101,32
00007DFF  6865 2073 
00007E03  697A 6520 
00007E07  6F66 2074 12499          dc.b      111,102,32,116,104,101,32,116,101,115,116,32
00007E0B  6865 2074 
00007E0F  6573 7420 
00007E13  796F 7520 12500          dc.b      121,111,117,32,119,111,117,108,100,32,108,105
00007E17  776F 756C 
00007E1B  6420 6C69 
00007E1F  6B65 2074 12501          dc.b      107,101,32,116,111,32,117,115,101,63,10,49,32
00007E23  6F20 7573 
00007E27  653F 0A31 
00007E2B  20        
00007E2C  3D20 6279 12502          dc.b      61,32,98,121,116,101,115,32,40,56,32,98,105
00007E30  7465 7320 
00007E34  2838 2062 
00007E38  69        
00007E39  7473 290A 12503          dc.b      116,115,41,10,50,32,61,32,119,111,114,100,115
00007E3D  3220 3D20 
00007E41  776F 7264 
00007E45  73        
00007E46  2028 3136 12504          dc.b      32,40,49,54,32,98,105,116,115,41,10,51,32,61
00007E4A  2062 6974 
00007E4E  7329 0A33 
00007E52  203D      
00007E54  206C 6F6E 12505          dc.b      32,108,111,110,103,32,119,111,114,100,115,32
00007E58  6720 776F 
00007E5C  7264 7320 
00007E60  2833 3220 12506          dc.b      40,51,50,32,98,105,116,115,41,10,0
00007E64  6269 7473 
00007E68  290A 00   
                    12507   @m68kde~3_163:
00007E6C  2564 00   12508          dc.b      37,100,0
                    12509   @m68kde~3_164:
00007E70  0A59 6F75 12510          dc.b      10,89,111,117,32,104,97,118,101,32,115,101,108
00007E74  2068 6176 
00007E78  6520 7365 
00007E7C  6C        
00007E7D  6374 6564 12511          dc.b      99,116,101,100,32,116,111,32,117,115,101,32
00007E81  2074 6F20 
00007E85  7573 6520 
00007E89  6279 7465 12512          dc.b      98,121,116,101,115,32,115,105,122,101,32,100
00007E8D  7320 7369 
00007E91  7A65 2064 
00007E95  6174 6120 12513          dc.b      97,116,97,32,116,111,32,116,101,115,116,32,121
00007E99  746F 2074 
00007E9D  6573 7420 
00007EA1  79        
00007EA2  6F75 7220 12514          dc.b      111,117,114,32,109,101,109,111,114,121,10,0
00007EA6  6D65 6D6F 
00007EAA  7279 0A00 
                    12515   @m68kde~3_165:
00007EAE  4F75 7420 12516          dc.b      79,117,116,32,111,102,32,116,104,101,32,98,101
00007EB2  6F66 2074 
00007EB6  6865 2062 
00007EBA  65        
00007EBB  6C6F 7720 12517          dc.b      108,111,119,32,101,120,97,109,112,108,101,32
00007EBF  6578 616D 
00007EC3  706C 6520 
00007EC7  7465 7374 12518          dc.b      116,101,115,116,32,100,97,116,97,44,32,112,108
00007ECB  2064 6174 
00007ECF  612C 2070 
00007ED3  6C        
00007ED4  6561 7365 12519          dc.b      101,97,115,101,32,115,101,108,101,99,116,32
00007ED8  2073 656C 
00007EDC  6563 7420 
00007EE0  6F6E 6520 12520          dc.b      111,110,101,32,98,121,32,101,110,116,101,114
00007EE4  6279 2065 
00007EE8  6E74 6572 
00007EEC  696E 6720 12521          dc.b      105,110,103,32,116,104,101,32,118,97,108,117
00007EF0  7468 6520 
00007EF4  7661 6C75 
00007EF8  6520 6173 12522          dc.b      101,32,97,115,115,111,99,105,97,116,101,100
00007EFC  736F 6369 
00007F00  6174 6564 
00007F04  2074 6F20 12523          dc.b      32,116,111,32,101,97,99,104,32,101,120,97,109
00007F08  6561 6368 
00007F0C  2065 7861 
00007F10  6D        
00007F11  706C 653A 12524          dc.b      112,108,101,58,10,0
00007F15  0A00      
                    12525   @m68kde~3_166:
00007F18  3120 3D20 12526          dc.b      49,32,61,32,34,65,65,34,10,50,32,61,32,34,66
00007F1C  2241 4122 
00007F20  0A32 203D 
00007F24  2022 42   
00007F27  4222 0A33 12527          dc.b      66,34,10,51,32,61,32,34,67,67,34,10,52,32,61
00007F2B  203D 2022 
00007F2F  4343 220A 
00007F33  3420 3D   
00007F36  2022 4444 12528          dc.b      32,34,68,68,34,10,0
00007F3A  220A 00   
                    12529   @m68kde~3_167:
00007F3E  2564 00   12530          dc.b      37,100,0
                    12531   @m68kde~3_168:
00007F42  506C 6561 12532          dc.b      80,108,101,97,115,101,32,101,110,116,101,114
00007F46  7365 2065 
00007F4A  6E74 6572 
00007F4E  2074 6865 12533          dc.b      32,116,104,101,32,115,116,97,114,116,32,97,100
00007F52  2073 7461 
00007F56  7274 2061 
00007F5A  64        
00007F5B  6472 6573 12534          dc.b      100,114,101,115,115,32,121,111,117,32,119,111
00007F5F  7320 796F 
00007F63  7520 776F 
00007F67  756C 6420 12535          dc.b      117,108,100,32,108,105,107,101,32,116,111,32
00007F6B  6C69 6B65 
00007F6F  2074 6F20 
00007F73  7573 6520 12536          dc.b      117,115,101,32,102,111,114,32,116,104,101,32
00007F77  666F 7220 
00007F7B  7468 6520 
00007F7F  7465 7374 12537          dc.b      116,101,115,116,32,100,97,116,97,32,105,110
00007F83  2064 6174 
00007F87  6120 696E 
00007F8B  746F 206D 12538          dc.b      116,111,32,109,101,109,111,114,121,10,0
00007F8F  656D 6F72 
00007F93  790A 00   
                    12539   @m68kde~3_169:
00007F96  506C 6561 12540          dc.b      80,108,101,97,115,101,32,101,110,116,101,114
00007F9A  7365 2065 
00007F9E  6E74 6572 
00007FA2  2074 6865 12541          dc.b      32,116,104,101,32,101,110,100,32,97,100,100
00007FA6  2065 6E64 
00007FAA  2061 6464 
00007FAE  7265 7373 12542          dc.b      114,101,115,115,32,121,111,117,32,119,111,117
00007FB2  2079 6F75 
00007FB6  2077 6F75 
00007FBA  6C64 206C 12543          dc.b      108,100,32,108,105,107,101,32,116,111,32,117
00007FBE  696B 6520 
00007FC2  746F 2075 
00007FC6  7365 2066 12544          dc.b      115,101,32,102,111,114,32,116,104,101,32,116
00007FCA  6F72 2074 
00007FCE  6865 2074 
00007FD2  6573 7420 12545          dc.b      101,115,116,32,100,97,116,97,32,105,110,32,109
00007FD6  6461 7461 
00007FDA  2069 6E20 
00007FDE  6D        
00007FDF  656D 6F72 12546          dc.b      101,109,111,114,121,10,0
00007FE3  790A 00   
                    12547   @m68kde~3_170:
00007FE6  0D0A 4669 12548          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00007FEA  6C6C 696E 
00007FEE  6720 4164 
00007FF2  64        
00007FF3  7265 7373 12549          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00007FF7  6573 205B 
00007FFB  2425 3038 
00007FFF  58        
00008000  202D 2024 12550          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00008004  2530 3858 
00008008  5D20 7769 
0000800C  7468      
0000800E  2024 2530 12551          dc.b      32,36,37,48,50,88,0
00008012  3258 00   
                    12552   @m68kde~3_171:
00008016  0D0A 4649 12553          dc.b      13,10,70,73,76,76,73,78,71,32,65,100,100,114
0000801A  4C4C 494E 
0000801E  4720 4164 
00008022  6472      
00008024  6573 7365 12554          dc.b      101,115,115,101,115,32,91,36,37,48,56,88,32
00008028  7320 5B24 
0000802C  2530 3858 
00008030  20        
00008031  2D20 2425 12555          dc.b      45,32,36,37,48,56,88,93,32,119,105,116,104,32
00008035  3038 585D 
00008039  2077 6974 
0000803D  6820      
0000803F  2425 3032 12556          dc.b      36,37,48,50,88,0
00008043  5800      
                    12557   @m68kde~3_172:
00008046  0A59 6F75 12558          dc.b      10,89,111,117,32,104,97,118,101,32,115,101,108
0000804A  2068 6176 
0000804E  6520 7365 
00008052  6C        
00008053  6374 6564 12559          dc.b      99,116,101,100,32,116,111,32,117,115,101,32
00008057  2074 6F20 
0000805B  7573 6520 
0000805F  776F 7264 12560          dc.b      119,111,114,100,32,115,105,122,101,32,100,97
00008063  2073 697A 
00008067  6520 6461 
0000806B  7461 2074 12561          dc.b      116,97,32,116,111,32,116,101,115,116,32,121
0000806F  6F20 7465 
00008073  7374 2079 
00008077  6F75 7220 12562          dc.b      111,117,114,32,109,101,109,111,114,121,10,0
0000807B  6D65 6D6F 
0000807F  7279 0A00 
                    12563   @m68kde~3_173:
00008084  4F75 7420 12564          dc.b      79,117,116,32,111,102,32,116,104,101,32,98,101
00008088  6F66 2074 
0000808C  6865 2062 
00008090  65        
00008091  6C6F 7720 12565          dc.b      108,111,119,32,101,120,97,109,112,108,101,32
00008095  6578 616D 
00008099  706C 6520 
0000809D  7465 7374 12566          dc.b      116,101,115,116,32,100,97,116,97,44,32,112,108
000080A1  2064 6174 
000080A5  612C 2070 
000080A9  6C        
000080AA  6561 7365 12567          dc.b      101,97,115,101,32,115,101,108,101,99,116,32
000080AE  2073 656C 
000080B2  6563 7420 
000080B6  6F6E 6520 12568          dc.b      111,110,101,32,98,121,32,101,110,116,101,114
000080BA  6279 2065 
000080BE  6E74 6572 
000080C2  696E 6720 12569          dc.b      105,110,103,32,116,104,101,32,118,97,108,117
000080C6  7468 6520 
000080CA  7661 6C75 
000080CE  6520 6173 12570          dc.b      101,32,97,115,115,111,99,105,97,116,101,100
000080D2  736F 6369 
000080D6  6174 6564 
000080DA  2074 6F20 12571          dc.b      32,116,111,32,101,97,99,104,32,101,120,97,109
000080DE  6561 6368 
000080E2  2065 7861 
000080E6  6D        
000080E7  706C 653A 12572          dc.b      112,108,101,58,10,0
000080EB  0A00      
                    12573   @m68kde~3_174:
000080EE  3120 3D20 12574          dc.b      49,32,61,32,34,65,65,65,65,34,10,50,32,61,32
000080F2  2241 4141 
000080F6  4122 0A32 
000080FA  203D 20   
000080FD  2242 4242 12575          dc.b      34,66,66,66,66,34,10,51,32,61,32,34,67,67,67
00008101  4222 0A33 
00008105  203D 2022 
00008109  4343 43   
0000810C  4322 0A34 12576          dc.b      67,34,10,52,32,61,32,34,68,68,68,68,34,10,0
00008110  203D 2022 
00008114  4444 4444 
00008118  220A 00   
                    12577   @m68kde~3_175:
0000811C  2564 00   12578          dc.b      37,100,0
                    12579   @m68kde~3_176:
00008120  506C 6561 12580          dc.b      80,108,101,97,115,101,32,101,110,116,101,114
00008124  7365 2065 
00008128  6E74 6572 
0000812C  2074 6865 12581          dc.b      32,116,104,101,32,115,116,97,114,116,32,97,100
00008130  2073 7461 
00008134  7274 2061 
00008138  64        
00008139  6472 6573 12582          dc.b      100,114,101,115,115,32,121,111,117,32,119,111
0000813D  7320 796F 
00008141  7520 776F 
00008145  756C 6420 12583          dc.b      117,108,100,32,108,105,107,101,32,116,111,32
00008149  6C69 6B65 
0000814D  2074 6F20 
00008151  7573 6520 12584          dc.b      117,115,101,32,102,111,114,32,116,104,101,32
00008155  666F 7220 
00008159  7468 6520 
0000815D  7465 7374 12585          dc.b      116,101,115,116,32,100,97,116,97,32,105,110
00008161  2064 6174 
00008165  6120 696E 
00008169  746F 206D 12586          dc.b      116,111,32,109,101,109,111,114,121,32,40,69
0000816D  656D 6F72 
00008171  7920 2845 
00008175  6E73 7572 12587          dc.b      110,115,117,114,101,32,116,111,32,101,110,116
00008179  6520 746F 
0000817D  2065 6E74 
00008181  6572 2061 12588          dc.b      101,114,32,97,110,32,101,118,101,110,32,110
00008185  6E20 6576 
00008189  656E 206E 
0000818D  756D 6265 12589          dc.b      117,109,98,101,114,41,10,0
00008191  7229 0A00 
                    12590   @m68kde~3_177:
00008196  4552 524F 12591          dc.b      69,82,82,79,82,58,32,84,104,101,32,97,100,100
0000819A  523A 2054 
0000819E  6865 2061 
000081A2  6464      
000081A4  7265 7373 12592          dc.b      114,101,115,115,32,121,111,117,32,104,97,118
000081A8  2079 6F75 
000081AC  2068 6176 
000081B0  6520 656E 12593          dc.b      101,32,101,110,116,101,114,101,100,32,105,115
000081B4  7465 7265 
000081B8  6420 6973 
000081BC  206E 6F74 12594          dc.b      32,110,111,116,32,101,118,101,110,46,32,80,108
000081C0  2065 7665 
000081C4  6E2E 2050 
000081C8  6C        
000081C9  6561 7365 12595          dc.b      101,97,115,101,32,116,114,121,32,97,103,97,105
000081CD  2074 7279 
000081D1  2061 6761 
000081D5  69        
000081D6  6E00      12596          dc.b      110,0
                    12597   @m68kde~3_178:
000081D8  506C 6561 12598          dc.b      80,108,101,97,115,101,32,101,110,116,101,114
000081DC  7365 2065 
000081E0  6E74 6572 
000081E4  2074 6865 12599          dc.b      32,116,104,101,32,101,110,100,32,97,100,100
000081E8  2065 6E64 
000081EC  2061 6464 
000081F0  7265 7373 12600          dc.b      114,101,115,115,32,121,111,117,32,119,111,117
000081F4  2079 6F75 
000081F8  2077 6F75 
000081FC  6C64 206C 12601          dc.b      108,100,32,108,105,107,101,32,116,111,32,117
00008200  696B 6520 
00008204  746F 2075 
00008208  7365 2066 12602          dc.b      115,101,32,102,111,114,32,116,104,101,32,116
0000820C  6F72 2074 
00008210  6865 2074 
00008214  6573 7420 12603          dc.b      101,115,116,32,100,97,116,97,32,105,110,32,109
00008218  6461 7461 
0000821C  2069 6E20 
00008220  6D        
00008221  656D 6F72 12604          dc.b      101,109,111,114,121,32,40,69,110,115,117,114
00008225  7920 2845 
00008229  6E73 7572 
0000822D  6520 746F 12605          dc.b      101,32,116,111,32,101,110,116,101,114,32,97
00008231  2065 6E74 
00008235  6572 2061 
00008239  6E20 6576 12606          dc.b      110,32,101,118,101,110,32,110,117,109,98,101
0000823D  656E 206E 
00008241  756D 6265 
00008245  7229 0A00 12607          dc.b      114,41,10,0
                    12608   @m68kde~3_179:
0000824A  4552 524F 12609          dc.b      69,82,82,79,82,58,32,84,104,101,32,97,100,100
0000824E  523A 2054 
00008252  6865 2061 
00008256  6464      
00008258  7265 7373 12610          dc.b      114,101,115,115,32,121,111,117,32,104,97,118
0000825C  2079 6F75 
00008260  2068 6176 
00008264  6520 656E 12611          dc.b      101,32,101,110,116,101,114,101,100,32,105,115
00008268  7465 7265 
0000826C  6420 6973 
00008270  206E 6F74 12612          dc.b      32,110,111,116,32,101,118,101,110,46,32,80,108
00008274  2065 7665 
00008278  6E2E 2050 
0000827C  6C        
0000827D  6561 7365 12613          dc.b      101,97,115,101,32,116,114,121,32,97,103,97,105
00008281  2074 7279 
00008285  2061 6761 
00008289  69        
0000828A  6E00      12614          dc.b      110,0
                    12615   @m68kde~3_180:
0000828C  0D0A 4669 12616          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00008290  6C6C 696E 
00008294  6720 4164 
00008298  64        
00008299  7265 7373 12617          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
0000829D  6573 205B 
000082A1  2425 3038 
000082A5  58        
000082A6  202D 2024 12618          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000082AA  2530 3858 
000082AE  5D20 7769 
000082B2  7468      
000082B4  2024 2530 12619          dc.b      32,36,37,48,52,88,0
000082B8  3458 00   
                    12620   @m68kde~3_181:
000082BC  0D0A 4649 12621          dc.b      13,10,70,73,76,76,73,78,71,32,65,100,100,114
000082C0  4C4C 494E 
000082C4  4720 4164 
000082C8  6472      
000082CA  6573 7365 12622          dc.b      101,115,115,101,115,32,91,36,37,48,56,88,32
000082CE  7320 5B24 
000082D2  2530 3858 
000082D6  20        
000082D7  2D20 2425 12623          dc.b      45,32,36,37,48,56,88,93,32,119,105,116,104,32
000082DB  3038 585D 
000082DF  2077 6974 
000082E3  6820      
000082E5  2425 3032 12624          dc.b      36,37,48,50,88,0
000082E9  5800      
                    12625   @m68kde~3_182:
000082EC  0A59 6F75 12626          dc.b      10,89,111,117,32,104,97,118,101,32,115,101,108
000082F0  2068 6176 
000082F4  6520 7365 
000082F8  6C        
000082F9  6374 6564 12627          dc.b      99,116,101,100,32,116,111,32,117,115,101,32
000082FD  2074 6F20 
00008301  7573 6520 
00008305  6279 7465 12628          dc.b      98,121,116,101,115,32,115,105,122,101,32,100
00008309  7320 7369 
0000830D  7A65 2064 
00008311  6174 6120 12629          dc.b      97,116,97,32,116,111,32,116,101,115,116,32,121
00008315  746F 2074 
00008319  6573 7420 
0000831D  79        
0000831E  6F75 7220 12630          dc.b      111,117,114,32,109,101,109,111,114,121,10,0
00008322  6D65 6D6F 
00008326  7279 0A00 
                    12631   @m68kde~3_183:
0000832A  4F75 7420 12632          dc.b      79,117,116,32,111,102,32,116,104,101,32,98,101
0000832E  6F66 2074 
00008332  6865 2062 
00008336  65        
00008337  6C6F 7720 12633          dc.b      108,111,119,32,101,120,97,109,112,108,101,32
0000833B  6578 616D 
0000833F  706C 6520 
00008343  7465 7374 12634          dc.b      116,101,115,116,32,100,97,116,97,44,32,112,108
00008347  2064 6174 
0000834B  612C 2070 
0000834F  6C        
00008350  6561 7365 12635          dc.b      101,97,115,101,32,115,101,108,101,99,116,32
00008354  2073 656C 
00008358  6563 7420 
0000835C  6F6E 6520 12636          dc.b      111,110,101,32,98,121,32,101,110,116,101,114
00008360  6279 2065 
00008364  6E74 6572 
00008368  696E 6720 12637          dc.b      105,110,103,32,116,104,101,32,118,97,108,117
0000836C  7468 6520 
00008370  7661 6C75 
00008374  6520 6173 12638          dc.b      101,32,97,115,115,111,99,105,97,116,101,100
00008378  736F 6369 
0000837C  6174 6564 
00008380  2074 6F20 12639          dc.b      32,116,111,32,101,97,99,104,32,101,120,97,109
00008384  6561 6368 
00008388  2065 7861 
0000838C  6D        
0000838D  706C 653A 12640          dc.b      112,108,101,58,10,0
00008391  0A00      
                    12641   @m68kde~3_184:
00008394  3120 3D20 12642          dc.b      49,32,61,32,34,65,65,65,65,65,65,65,65,34,10
00008398  2241 4141 
0000839C  4141 4141 
000083A0  4122 0A   
000083A3  3220 3D20 12643          dc.b      50,32,61,32,34,66,66,66,66,66,66,66,66,34,10
000083A7  2242 4242 
000083AB  4242 4242 
000083AF  4222 0A   
000083B2  3320 3D20 12644          dc.b      51,32,61,32,34,67,67,67,67,67,67,67,67,34,10
000083B6  2243 4343 
000083BA  4343 4343 
000083BE  4322 0A   
000083C1  3420 3D20 12645          dc.b      52,32,61,32,34,68,68,68,68,68,68,68,68,34,10
000083C5  2244 4444 
000083C9  4444 4444 
000083CD  4422 0A   
000083D0  00        12646          dc.b      0
                    12647   @m68kde~3_185:
000083D2  2564 00   12648          dc.b      37,100,0
                    12649   @m68kde~3_186:
000083D6  506C 6561 12650          dc.b      80,108,101,97,115,101,32,101,110,116,101,114
000083DA  7365 2065 
000083DE  6E74 6572 
000083E2  2074 6865 12651          dc.b      32,116,104,101,32,115,116,97,114,116,32,97,100
000083E6  2073 7461 
000083EA  7274 2061 
000083EE  64        
000083EF  6472 6573 12652          dc.b      100,114,101,115,115,32,121,111,117,32,119,111
000083F3  7320 796F 
000083F7  7520 776F 
000083FB  756C 6420 12653          dc.b      117,108,100,32,108,105,107,101,32,116,111,32
000083FF  6C69 6B65 
00008403  2074 6F20 
00008407  7573 6520 12654          dc.b      117,115,101,32,102,111,114,32,116,104,101,32
0000840B  666F 7220 
0000840F  7468 6520 
00008413  7465 7374 12655          dc.b      116,101,115,116,32,100,97,116,97,32,105,110
00008417  2064 6174 
0000841B  6120 696E 
0000841F  746F 206D 12656          dc.b      116,111,32,109,101,109,111,114,121,32,40,69
00008423  656D 6F72 
00008427  7920 2845 
0000842B  6E73 7572 12657          dc.b      110,115,117,114,101,32,116,111,32,101,110,116
0000842F  6520 746F 
00008433  2065 6E74 
00008437  6572 2061 12658          dc.b      101,114,32,97,110,32,101,118,101,110,32,110
0000843B  6E20 6576 
0000843F  656E 206E 
00008443  756D 6265 12659          dc.b      117,109,98,101,114,41,10,0
00008447  7229 0A00 
                    12660   @m68kde~3_187:
0000844C  4552 524F 12661          dc.b      69,82,82,79,82,58,32,84,104,101,32,97,100,100
00008450  523A 2054 
00008454  6865 2061 
00008458  6464      
0000845A  7265 7373 12662          dc.b      114,101,115,115,32,121,111,117,32,104,97,118
0000845E  2079 6F75 
00008462  2068 6176 
00008466  6520 656E 12663          dc.b      101,32,101,110,116,101,114,101,100,32,105,115
0000846A  7465 7265 
0000846E  6420 6973 
00008472  206E 6F74 12664          dc.b      32,110,111,116,32,101,118,101,110,46,32,80,108
00008476  2065 7665 
0000847A  6E2E 2050 
0000847E  6C        
0000847F  6561 7365 12665          dc.b      101,97,115,101,32,116,114,121,32,97,103,97,105
00008483  2074 7279 
00008487  2061 6761 
0000848B  69        
0000848C  6E00      12666          dc.b      110,0
                    12667   @m68kde~3_188:
0000848E  506C 6561 12668          dc.b      80,108,101,97,115,101,32,101,110,116,101,114
00008492  7365 2065 
00008496  6E74 6572 
0000849A  2074 6865 12669          dc.b      32,116,104,101,32,101,110,100,32,97,100,100
0000849E  2065 6E64 
000084A2  2061 6464 
000084A6  7265 7373 12670          dc.b      114,101,115,115,32,121,111,117,32,119,111,117
000084AA  2079 6F75 
000084AE  2077 6F75 
000084B2  6C64 206C 12671          dc.b      108,100,32,108,105,107,101,32,116,111,32,117
000084B6  696B 6520 
000084BA  746F 2075 
000084BE  7365 2066 12672          dc.b      115,101,32,102,111,114,32,116,104,101,32,116
000084C2  6F72 2074 
000084C6  6865 2074 
000084CA  6573 7420 12673          dc.b      101,115,116,32,100,97,116,97,32,105,110,32,109
000084CE  6461 7461 
000084D2  2069 6E20 
000084D6  6D        
000084D7  656D 6F72 12674          dc.b      101,109,111,114,121,32,40,69,110,115,117,114
000084DB  7920 2845 
000084DF  6E73 7572 
000084E3  6520 746F 12675          dc.b      101,32,116,111,32,101,110,116,101,114,32,97
000084E7  2065 6E74 
000084EB  6572 2061 
000084EF  6E20 6576 12676          dc.b      110,32,101,118,101,110,32,110,117,109,98,101
000084F3  656E 206E 
000084F7  756D 6265 
000084FB  7229 0A00 12677          dc.b      114,41,10,0
                    12678   @m68kde~3_189:
00008500  4552 524F 12679          dc.b      69,82,82,79,82,58,32,84,104,101,32,97,100,100
00008504  523A 2054 
00008508  6865 2061 
0000850C  6464      
0000850E  7265 7373 12680          dc.b      114,101,115,115,32,121,111,117,32,104,97,118
00008512  2079 6F75 
00008516  2068 6176 
0000851A  6520 656E 12681          dc.b      101,32,101,110,116,101,114,101,100,32,105,115
0000851E  7465 7265 
00008522  6420 6973 
00008526  206E 6F74 12682          dc.b      32,110,111,116,32,101,118,101,110,46,32,80,108
0000852A  2065 7665 
0000852E  6E2E 2050 
00008532  6C        
00008533  6561 7365 12683          dc.b      101,97,115,101,32,116,114,121,32,97,103,97,105
00008537  2074 7279 
0000853B  2061 6761 
0000853F  69        
00008540  6E00      12684          dc.b      110,0
                    12685   @m68kde~3_190:
00008542  0D0A 4669 12686          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00008546  6C6C 696E 
0000854A  6720 4164 
0000854E  64        
0000854F  7265 7373 12687          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00008553  6573 205B 
00008557  2425 3038 
0000855B  58        
0000855C  202D 2024 12688          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00008560  2530 3858 
00008564  5D20 7769 
00008568  7468      
0000856A  2024 2530 12689          dc.b      32,36,37,48,56,88,0
0000856E  3858 00   
                    12690   @m68kde~3_191:
00008572  0D0A 4649 12691          dc.b      13,10,70,73,76,76,73,78,71,32,65,100,100,114
00008576  4C4C 494E 
0000857A  4720 4164 
0000857E  6472      
00008580  6573 7365 12692          dc.b      101,115,115,101,115,32,91,36,37,48,56,88,32
00008584  7320 5B24 
00008588  2530 3858 
0000858C  20        
0000858D  2D20 2425 12693          dc.b      45,32,36,37,48,56,88,93,32,119,105,116,104,32
00008591  3038 585D 
00008595  2077 6974 
00008599  6820      
0000859B  2425 3032 12694          dc.b      36,37,48,50,88,0
0000859F  5800      
                    12695   @m68kde~3_192:
000085A2  0A59 6F75 12696          dc.b      10,89,111,117,32,102,97,105,108,101,100,32,116
000085A6  2066 6169 
000085AA  6C65 6420 
000085AE  74        
000085AF  6F20 7365 12697          dc.b      111,32,115,101,108,101,99,116,32,97,32,100,97
000085B3  6C65 6374 
000085B7  2061 2064 
000085BB  61        
000085BC  7461 2074 12698          dc.b      116,97,32,116,121,112,101,32,116,111,32,117
000085C0  7970 6520 
000085C4  746F 2075 
000085C8  7365 2120 12699          dc.b      115,101,33,32,67,108,105,99,107,32,114,101,115
000085CC  436C 6963 
000085D0  6B20 7265 
000085D4  73        
000085D5  6574 2062 12700          dc.b      101,116,32,98,117,116,116,111,110,32,116,111
000085D9  7574 746F 
000085DD  6E20 746F 
000085E1  2072 6573 12701          dc.b      32,114,101,115,101,116,0
000085E5  6574 00   
                    12702   @m68kde~3_193:
000085E8  4445 312D 12703          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000085EC  3638 6B20 
000085F0  4275 6720 
000085F4  5631      
000085F6  2E37 3700 12704          dc.b      46,55,55,0
                    12705   @m68kde~3_194:
000085FA  436F 7079 12706          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000085FE  7269 6768 
00008602  7420 2843 
00008606  2920 504A 12707          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
0000860A  2044 6176 
0000860E  6965 7320 
00008612  3230      
00008614  3136 00   12708          dc.b      49,54,0
                    12709   @m68kde~3_195:
00008618  0D0A 5275 12710          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
0000861C  6E6E 696E 
00008620  672E 2E2E 
00008624  2E        
00008625  2E00      12711          dc.b      46,0
                    12712   @m68kde~3_196:
00008628  5275 6E6E 12713          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
0000862C  696E 672E 
00008630  2E2E 2E2E 
00008634  00        
                    12714   @m68kde~3_197:
00008636  4279 3A20 12715          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
0000863A  504A 2044 
0000863E  6176 6965 
00008642  73        
00008643  00        12716          dc.b      0
                    12717   @m68kde~3_198:
00008644  0D0A 2573 12718          dc.b      13,10,37,115,0
00008648  00        
                    12719   @m68kde~3_199:
0000864A  0D0A 2573 12720          dc.b      13,10,37,115,0
0000864E  00        
                    12721   @m68kde~3_200:
00008650  2E42 2000 12722          dc.b      46,66,32,0
                    12723   @m68kde~3_201:
00008654  2E57 2000 12724          dc.b      46,87,32,0
                    12725   @m68kde~3_202:
00008658  2E4C 2000 12726          dc.b      46,76,32,0
                    12727   @m68kde~3_203:
0000865C  2324 2558 12728          dc.b      35,36,37,88,0
00008660  00        
                    12729   @m68kde~3_204:
00008662  2324 2558 12730          dc.b      35,36,37,88,0
00008666  00        
                    12731   @m68kde~3_205:
00008668  2324 2558 12732          dc.b      35,36,37,88,0
0000866C  00        
                    12733   @m68kde~3_206:
0000866E  2324 2558 12734          dc.b      35,36,37,88,0
00008672  00        
                    12735   @m68kde~3_207:
00008674  2324 2558 12736          dc.b      35,36,37,88,0
00008678  00        
                    12737   @m68kde~3_208:
0000867A  2324 2558 12738          dc.b      35,36,37,88,0
0000867E  00        
                    12739   @m68kde~3_209:
00008680  2324 2558 12740          dc.b      35,36,37,88,0
00008684  00        
                    12741   @m68kde~3_210:
00008686  2800      12742          dc.b      40,0
                    12743   @m68kde~3_211:
00008688  2900      12744          dc.b      41,0
                    12745   @m68kde~3_212:
0000868A  2800      12746          dc.b      40,0
                    12747   @m68kde~3_213:
0000868C  292B 00   12748          dc.b      41,43,0
                    12749   @m68kde~3_214:
00008690  2D28 00   12750          dc.b      45,40,0
                    12751   @m68kde~3_215:
00008694  2900      12752          dc.b      41,0
                    12753   @m68kde~3_216:
00008696  2564 2841 12754          dc.b      37,100,40,65,37,100,41,0
0000869A  2564 2900 
                    12755   @m68kde~3_217:
0000869E  2564 2841 12756          dc.b      37,100,40,65,37,100,44,0
000086A2  2564 2C00 
                    12757   @m68kde~3_218:
000086A6  4400      12758          dc.b      68,0
                    12759   @m68kde~3_219:
000086A8  4100      12760          dc.b      65,0
                    12761   @m68kde~3_220:
000086AA  2564 00   12762          dc.b      37,100,0
                    12763   @m68kde~3_221:
000086AE  2E57 2900 12764          dc.b      46,87,41,0
                    12765   @m68kde~3_222:
000086B2  2E4C 2900 12766          dc.b      46,76,41,0
                    12767   @m68kde~3_223:
000086B6  2425 5800 12768          dc.b      36,37,88,0
                    12769   @m68kde~3_224:
000086BA  2425 5800 12770          dc.b      36,37,88,0
                    12771   @m68kde~3_225:
000086BE  2564 2850 12772          dc.b      37,100,40,80,67,41,0
000086C2  4329 00   
                    12773   @m68kde~3_226:
000086C6  2564 2850 12774          dc.b      37,100,40,80,67,44,0
000086CA  432C 00   
                    12775   @m68kde~3_227:
000086CE  4400      12776          dc.b      68,0
                    12777   @m68kde~3_228:
000086D0  4100      12778          dc.b      65,0
                    12779   @m68kde~3_229:
000086D2  2564 00   12780          dc.b      37,100,0
                    12781   @m68kde~3_230:
000086D6  2E57 2900 12782          dc.b      46,87,41,0
                    12783   @m68kde~3_231:
000086DA  2E4C 2900 12784          dc.b      46,76,41,0
                    12785   @m68kde~3_232:
000086DE  2C00      12786          dc.b      44,0
                    12787   @m68kde~3_233:
000086E0  2C00      12788          dc.b      44,0
                    12789   @m68kde~3_234:
000086E2  4343 00   12790          dc.b      67,67,0
                    12791   @m68kde~3_235:
000086E6  4353 00   12792          dc.b      67,83,0
                    12793   @m68kde~3_236:
000086EA  4551 00   12794          dc.b      69,81,0
                    12795   @m68kde~3_237:
000086EE  4745 00   12796          dc.b      71,69,0
                    12797   @m68kde~3_238:
000086F2  4754 00   12798          dc.b      71,84,0
                    12799   @m68kde~3_239:
000086F6  4849 00   12800          dc.b      72,73,0
                    12801   @m68kde~3_240:
000086FA  4C45 00   12802          dc.b      76,69,0
                    12803   @m68kde~3_241:
000086FE  4C53 00   12804          dc.b      76,83,0
                    12805   @m68kde~3_242:
00008702  4C54 00   12806          dc.b      76,84,0
                    12807   @m68kde~3_243:
00008706  4D49 00   12808          dc.b      77,73,0
                    12809   @m68kde~3_244:
0000870A  4E45 00   12810          dc.b      78,69,0
                    12811   @m68kde~3_245:
0000870E  504C 00   12812          dc.b      80,76,0
                    12813   @m68kde~3_246:
00008712  5653 00   12814          dc.b      86,83,0
                    12815   @m68kde~3_247:
00008716  5643 00   12816          dc.b      86,67,0
                    12817   @m68kde~3_248:
0000871A  5241 00   12818          dc.b      82,65,0
                    12819   @m68kde~3_249:
0000871E  5352 00   12820          dc.b      83,82,0
                    12821   @m68kde~3_250:
00008722  2000      12822          dc.b      32,0
                    12823   @m68kde~3_251:
00008724  556E 6B6E 12824          dc.b      85,110,107,110,111,119,110,0
00008728  6F77 6E00 
                    12825   @m68kde~3_252:
0000872C  4142 4344 12826          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
00008730  2044 2564 
00008734  2C44 2564 
00008738  00        
                    12827   @m68kde~3_253:
0000873A  4142 4344 12828          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
0000873E  202D 2841 
00008742  2564 292C 
00008746  2D28 41   
00008749  2564 2900 12829          dc.b      37,100,41,0
                    12830   @m68kde~3_254:
0000874E  4144 4441 12831          dc.b      65,68,68,65,46,87,32,0
00008752  2E57 2000 
                    12832   @m68kde~3_255:
00008756  4144 4441 12833          dc.b      65,68,68,65,46,76,32,0
0000875A  2E4C 2000 
                    12834   @m68kde~3_256:
0000875E  2C41 2558 12835          dc.b      44,65,37,88,0
00008762  00        
                    12836   @m68kde~3_257:
00008764  4144 4400 12837          dc.b      65,68,68,0
                    12838   @m68kde~3_258:
00008768  4144 4449 12839          dc.b      65,68,68,73,0
0000876C  00        
                    12840   @m68kde~3_259:
0000876E  414E 4449 12841          dc.b      65,78,68,73,0
00008772  00        
                    12842   @m68kde~3_260:
00008774  434D 5049 12843          dc.b      67,77,80,73,0
00008778  00        
                    12844   @m68kde~3_261:
0000877A  454F 5249 12845          dc.b      69,79,82,73,0
0000877E  00        
                    12846   @m68kde~3_262:
00008780  4F52 4900 12847          dc.b      79,82,73,0
                    12848   @m68kde~3_263:
00008784  5355 4249 12849          dc.b      83,85,66,73,0
00008788  00        
                    12850   @m68kde~3_264:
0000878A  2C00      12851          dc.b      44,0
                    12852   @m68kde~3_265:
0000878C  414E 4449 12853          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
00008790  2023 2425 
00008794  582C 5352 
00008798  00        
                    12854   @m68kde~3_266:
0000879A  4144 4451 12855          dc.b      65,68,68,81,0
0000879E  00        
                    12856   @m68kde~3_267:
000087A0  2325 3158 12857          dc.b      35,37,49,88,44,0
000087A4  2C00      
                    12858   @m68kde~3_268:
000087A6  4144 4458 12859          dc.b      65,68,68,88,0
000087AA  00        
                    12860   @m68kde~3_269:
000087AC  4425 582C 12861          dc.b      68,37,88,44,68,37,88,0
000087B0  4425 5800 
                    12862   @m68kde~3_270:
000087B4  2D28 4125 12863          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
000087B8  5829 2C2D 
000087BC  2841 2558 
000087C0  2900      
                    12864   @m68kde~3_271:
000087C2  414E 4400 12865          dc.b      65,78,68,0
                    12866   @m68kde~3_272:
000087C6  414E 4449 12867          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
000087CA  2023 2425 
000087CE  3258 2C43 
000087D2  4352 00   
                    12868   @m68kde~3_273:
000087D6  4153 4C00 12869          dc.b      65,83,76,0
                    12870   @m68kde~3_274:
000087DA  4153 5200 12871          dc.b      65,83,82,0
                    12872   @m68kde~3_275:
000087DE  4C53 4C00 12873          dc.b      76,83,76,0
                    12874   @m68kde~3_276:
000087E2  4C53 5200 12875          dc.b      76,83,82,0
                    12876   @m68kde~3_277:
000087E6  524F 4C00 12877          dc.b      82,79,76,0
                    12878   @m68kde~3_278:
000087EA  524F 5200 12879          dc.b      82,79,82,0
                    12880   @m68kde~3_279:
000087EE  524F 584C 12881          dc.b      82,79,88,76,0
000087F2  00        
                    12882   @m68kde~3_280:
000087F4  524F 5852 12883          dc.b      82,79,88,82,0
000087F8  00        
                    12884   @m68kde~3_281:
000087FA  2020 00   12885          dc.b      32,32,0
                    12886   @m68kde~3_282:
000087FE  4153 4C00 12887          dc.b      65,83,76,0
                    12888   @m68kde~3_283:
00008802  4153 5200 12889          dc.b      65,83,82,0
                    12890   @m68kde~3_284:
00008806  4C53 4C00 12891          dc.b      76,83,76,0
                    12892   @m68kde~3_285:
0000880A  4C53 5200 12893          dc.b      76,83,82,0
                    12894   @m68kde~3_286:
0000880E  524F 4C00 12895          dc.b      82,79,76,0
                    12896   @m68kde~3_287:
00008812  524F 5200 12897          dc.b      82,79,82,0
                    12898   @m68kde~3_288:
00008816  524F 584C 12899          dc.b      82,79,88,76,0
0000881A  00        
                    12900   @m68kde~3_289:
0000881C  524F 5852 12901          dc.b      82,79,88,82,0
00008820  00        
                    12902   @m68kde~3_290:
00008822  2324 2558 12903          dc.b      35,36,37,88,44,68,37,88,0
00008826  2C44 2558 
0000882A  00        
                    12904   @m68kde~3_291:
0000882C  4425 582C 12905          dc.b      68,37,88,44,68,37,88,0
00008830  4425 5800 
                    12906   @m68kde~3_292:
00008834  4200      12907          dc.b      66,0
                    12908   @m68kde~3_293:
00008836  2425 5800 12909          dc.b      36,37,88,0
                    12910   @m68kde~3_294:
0000883A  2425 5800 12911          dc.b      36,37,88,0
                    12912   @m68kde~3_295:
0000883E  4243 4847 12913          dc.b      66,67,72,71,32,0
00008842  2000      
                    12914   @m68kde~3_296:
00008844  4425 642C 12915          dc.b      68,37,100,44,0
00008848  00        
                    12916   @m68kde~3_297:
0000884A  4243 4847 12917          dc.b      66,67,72,71,32,0
0000884E  2000      
                    12918   @m68kde~3_298:
00008850  2324 2558 12919          dc.b      35,36,37,88,44,0
00008854  2C00      
                    12920   @m68kde~3_299:
00008856  4243 4C52 12921          dc.b      66,67,76,82,32,0
0000885A  2000      
                    12922   @m68kde~3_300:
0000885C  4425 642C 12923          dc.b      68,37,100,44,0
00008860  00        
                    12924   @m68kde~3_301:
00008862  4243 4C52 12925          dc.b      66,67,76,82,32,0
00008866  2000      
                    12926   @m68kde~3_302:
00008868  2324 2558 12927          dc.b      35,36,37,88,44,0
0000886C  2C00      
                    12928   @m68kde~3_303:
0000886E  4253 4554 12929          dc.b      66,83,69,84,32,0
00008872  2000      
                    12930   @m68kde~3_304:
00008874  4425 642C 12931          dc.b      68,37,100,44,0
00008878  00        
                    12932   @m68kde~3_305:
0000887A  4253 4554 12933          dc.b      66,83,69,84,32,0
0000887E  2000      
                    12934   @m68kde~3_306:
00008880  2324 2558 12935          dc.b      35,36,37,88,44,0
00008884  2C00      
                    12936   @m68kde~3_307:
00008886  4254 5354 12937          dc.b      66,84,83,84,32,0
0000888A  2000      
                    12938   @m68kde~3_308:
0000888C  4425 642C 12939          dc.b      68,37,100,44,0
00008890  00        
                    12940   @m68kde~3_309:
00008892  4254 5354 12941          dc.b      66,84,83,84,32,0
00008896  2000      
                    12942   @m68kde~3_310:
00008898  2324 2558 12943          dc.b      35,36,37,88,44,0
0000889C  2C00      
                    12944   @m68kde~3_311:
0000889E  4348 4B20 12945          dc.b      67,72,75,32,0
000088A2  00        
                    12946   @m68kde~3_312:
000088A4  2C44 2564 12947          dc.b      44,68,37,100,0
000088A8  00        
                    12948   @m68kde~3_313:
000088AA  434C 5200 12949          dc.b      67,76,82,0
                    12950   @m68kde~3_314:
000088AE  434D 5041 12951          dc.b      67,77,80,65,46,87,32,0
000088B2  2E57 2000 
                    12952   @m68kde~3_315:
000088B6  434D 5041 12953          dc.b      67,77,80,65,46,76,32,0
000088BA  2E4C 2000 
                    12954   @m68kde~3_316:
000088BE  2C41 2564 12955          dc.b      44,65,37,100,0
000088C2  00        
                    12956   @m68kde~3_317:
000088C4  434D 5000 12957          dc.b      67,77,80,0
                    12958   @m68kde~3_318:
000088C8  434D 504D 12959          dc.b      67,77,80,77,0
000088CC  00        
                    12960   @m68kde~3_319:
000088CE  2841 2564 12961          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
000088D2  292B 2C28 
000088D6  4125 6429 
000088DA  2B00      
                    12962   @m68kde~3_320:
000088DC  4442 00   12963          dc.b      68,66,0
                    12964   @m68kde~3_321:
000088E0  4425 642C 12965          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
000088E4  252B 6428 
000088E8  5043 2920 
000088EC  746F      
000088EE  2041 6464 12966          dc.b      32,65,100,100,114,58,36,37,88,0
000088F2  723A 2425 
000088F6  5800      
                    12967   @m68kde~3_322:
000088F8  4449 5653 12968          dc.b      68,73,86,83,32,0
000088FC  2000      
                    12969   @m68kde~3_323:
000088FE  2C00      12970          dc.b      44,0
                    12971   @m68kde~3_324:
00008900  4449 5655 12972          dc.b      68,73,86,85,32,0
00008904  2000      
                    12973   @m68kde~3_325:
00008906  2C00      12974          dc.b      44,0
                    12975   @m68kde~3_326:
00008908  454F 5200 12976          dc.b      69,79,82,0
                    12977   @m68kde~3_327:
0000890C  454F 5249 12978          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
00008910  2023 2425 
00008914  3258 2C43 
00008918  4352 00   
                    12979   @m68kde~3_328:
0000891C  454F 5249 12980          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
00008920  2023 2425 
00008924  582C 5352 
00008928  00        
                    12981   @m68kde~3_329:
0000892A  4558 4720 12982          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
0000892E  4425 642C 
00008932  4425 6400 
                    12983   @m68kde~3_330:
00008936  4558 4720 12984          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
0000893A  4125 642C 
0000893E  4125 6400 
                    12985   @m68kde~3_331:
00008942  4558 4720 12986          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
00008946  4425 642C 
0000894A  4125 6400 
                    12987   @m68kde~3_332:
0000894E  4558 5400 12988          dc.b      69,88,84,0
                    12989   @m68kde~3_333:
00008952  2E4C 2000 12990          dc.b      46,76,32,0
                    12991   @m68kde~3_334:
00008956  2E57 2000 12992          dc.b      46,87,32,0
                    12993   @m68kde~3_335:
0000895A  494C 4C45 12994          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
0000895E  4741 4C20 
00008962  2824 3441 
00008966  4643 29   
00008969  00        12995          dc.b      0
                    12996   @m68kde~3_336:
0000896A  4A4D 5020 12997          dc.b      74,77,80,32,0
0000896E  00        
                    12998   @m68kde~3_337:
00008970  4A53 5220 12999          dc.b      74,83,82,32,0
00008974  00        
                    13000   @m68kde~3_338:
00008976  4C45 4120 13001          dc.b      76,69,65,32,0
0000897A  00        
                    13002   @m68kde~3_339:
0000897C  2C41 2564 13003          dc.b      44,65,37,100,0
00008980  00        
                    13004   @m68kde~3_340:
00008982  4C49 4E4B 13005          dc.b      76,73,78,75,32,0
00008986  2000      
                    13006   @m68kde~3_341:
00008988  4125 642C 13007          dc.b      65,37,100,44,35,37,100,0
0000898C  2325 6400 
                    13008   @m68kde~3_342:
00008990  4D4F 5645 13009          dc.b      77,79,86,69,46,66,32,0
00008994  2E42 2000 
                    13010   @m68kde~3_343:
00008998  4D4F 5645 13011          dc.b      77,79,86,69,46,76,32,0
0000899C  2E4C 2000 
                    13012   @m68kde~3_344:
000089A0  4D4F 5645 13013          dc.b      77,79,86,69,46,87,32,0
000089A4  2E57 2000 
                    13014   @m68kde~3_345:
000089A8  2C00      13015          dc.b      44,0
                    13016   @m68kde~3_346:
000089AA  4D4F 5645 13017          dc.b      77,79,86,69,32,0
000089AE  2000      
                    13018   @m68kde~3_347:
000089B0  2C43 4352 13019          dc.b      44,67,67,82,0
000089B4  00        
                    13020   @m68kde~3_348:
000089B6  4D4F 5645 13021          dc.b      77,79,86,69,32,83,82,44,0
000089BA  2053 522C 
000089BE  00        
                    13022   @m68kde~3_349:
000089C0  4D4F 5645 13023          dc.b      77,79,86,69,32,0
000089C4  2000      
                    13024   @m68kde~3_350:
000089C6  2C53 5200 13025          dc.b      44,83,82,0
                    13026   @m68kde~3_351:
000089CA  4D4F 5645 13027          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
000089CE  2055 5350 
000089D2  2C41 2564 
000089D6  00        
                    13028   @m68kde~3_352:
000089D8  4D4F 5645 13029          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
000089DC  2041 2564 
000089E0  2C55 5350 
000089E4  00        
                    13030   @m68kde~3_353:
000089E6  4D4F 5645 13031          dc.b      77,79,86,69,77,0
000089EA  4D00      
                    13032   @m68kde~3_354:
000089EC  2E57 2000 13033          dc.b      46,87,32,0
                    13034   @m68kde~3_355:
000089F0  2E4C 2000 13035          dc.b      46,76,32,0
                    13036   @m68kde~3_356:
000089F4  00        13037          dc.b      0
                    13038   @m68kde~3_357:
000089F6  4425 6400 13039          dc.b      68,37,100,0
                    13040   @m68kde~3_358:
000089FA  2F44 2564 13041          dc.b      47,68,37,100,0
000089FE  00        
                    13042   @m68kde~3_359:
00008A00  4125 6400 13043          dc.b      65,37,100,0
                    13044   @m68kde~3_360:
00008A04  2F41 2564 13045          dc.b      47,65,37,100,0
00008A08  00        
                    13046   @m68kde~3_361:
00008A0A  2C00      13047          dc.b      44,0
                    13048   @m68kde~3_362:
00008A0C  2C00      13049          dc.b      44,0
                    13050   @m68kde~3_363:
00008A0E  4425 6400 13051          dc.b      68,37,100,0
                    13052   @m68kde~3_364:
00008A12  2F44 2564 13053          dc.b      47,68,37,100,0
00008A16  00        
                    13054   @m68kde~3_365:
00008A18  4125 6400 13055          dc.b      65,37,100,0
                    13056   @m68kde~3_366:
00008A1C  2F41 2564 13057          dc.b      47,65,37,100,0
00008A20  00        
                    13058   @m68kde~3_367:
00008A22  4D4F 5645 13059          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
00008A26  502E 5720 
00008A2A  2425 5828 
00008A2E  4125 64   
00008A31  292C 4425 13060          dc.b      41,44,68,37,100,0
00008A35  6400      
                    13061   @m68kde~3_368:
00008A38  4D4F 5645 13062          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
00008A3C  502E 4C20 
00008A40  2425 5828 
00008A44  4125 64   
00008A47  292C 4425 13063          dc.b      41,44,68,37,100,0
00008A4B  6400      
                    13064   @m68kde~3_369:
00008A4E  4D4F 5645 13065          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
00008A52  502E 5720 
00008A56  4425 642C 
00008A5A  2425 58   
00008A5D  2841 2564 13066          dc.b      40,65,37,100,41,0
00008A61  2900      
                    13067   @m68kde~3_370:
00008A64  4D4F 5645 13068          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
00008A68  502E 4C20 
00008A6C  4425 642C 
00008A70  2425 58   
00008A73  2841 2564 13069          dc.b      40,65,37,100,41,0
00008A77  2900      
                    13070   @m68kde~3_371:
00008A7A  4D4F 5645 13071          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
00008A7E  5120 2324 
00008A82  2558 2C44 
00008A86  2564 00   
                    13072   @m68kde~3_372:
00008A8A  4D55 4C53 13073          dc.b      77,85,76,83,32,0
00008A8E  2000      
                    13074   @m68kde~3_373:
00008A90  2C44 2564 13075          dc.b      44,68,37,100,0
00008A94  00        
                    13076   @m68kde~3_374:
00008A96  4D55 4C55 13077          dc.b      77,85,76,85,32,0
00008A9A  2000      
                    13078   @m68kde~3_375:
00008A9C  2C44 2564 13079          dc.b      44,68,37,100,0
00008AA0  00        
                    13080   @m68kde~3_376:
00008AA2  4E42 4344 13081          dc.b      78,66,67,68,32,0
00008AA6  2000      
                    13082   @m68kde~3_377:
00008AA8  4E45 4700 13083          dc.b      78,69,71,0
                    13084   @m68kde~3_378:
00008AAC  4E45 4758 13085          dc.b      78,69,71,88,0
00008AB0  00        
                    13086   @m68kde~3_379:
00008AB2  4E4F 5000 13087          dc.b      78,79,80,0
                    13088   @m68kde~3_380:
00008AB6  4E4F 5400 13089          dc.b      78,79,84,0
                    13090   @m68kde~3_381:
00008ABA  4F52 00   13091          dc.b      79,82,0
                    13092   @m68kde~3_382:
00008ABE  4F52 4920 13093          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
00008AC2  2324 2532 
00008AC6  582C 4343 
00008ACA  5200      
                    13094   @m68kde~3_383:
00008ACC  4F52 4920 13095          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
00008AD0  2023 2425 
00008AD4  582C 5352 
00008AD8  00        
                    13096   @m68kde~3_384:
00008ADA  5045 4120 13097          dc.b      80,69,65,32,0
00008ADE  00        
                    13098   @m68kde~3_385:
00008AE0  5245 5345 13099          dc.b      82,69,83,69,84,0
00008AE4  5400      
                    13100   @m68kde~3_386:
00008AE6  5254 4500 13101          dc.b      82,84,69,0
                    13102   @m68kde~3_387:
00008AEA  5254 5200 13103          dc.b      82,84,82,0
                    13104   @m68kde~3_388:
00008AEE  5254 5300 13105          dc.b      82,84,83,0
                    13106   @m68kde~3_389:
00008AF2  5354 4F50 13107          dc.b      83,84,79,80,32,35,36,37,88,0
00008AF6  2023 2425 
00008AFA  5800      
                    13108   @m68kde~3_390:
00008AFC  5342 4344 13109          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
00008B00  2044 2564 
00008B04  2C44 2564 
00008B08  00        
                    13110   @m68kde~3_391:
00008B0A  5342 4344 13111          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00008B0E  202D 2841 
00008B12  2564 292C 
00008B16  2D28 41   
00008B19  2564 2900 13112          dc.b      37,100,41,0
                    13113   @m68kde~3_392:
00008B1E  5300      13114          dc.b      83,0
                    13115   @m68kde~3_393:
00008B20  5355 4241 13116          dc.b      83,85,66,65,46,87,32,0
00008B24  2E57 2000 
                    13117   @m68kde~3_394:
00008B28  5355 4241 13118          dc.b      83,85,66,65,46,76,32,0
00008B2C  2E4C 2000 
                    13119   @m68kde~3_395:
00008B30  2C41 2558 13120          dc.b      44,65,37,88,0
00008B34  00        
                    13121   @m68kde~3_396:
00008B36  5355 4200 13122          dc.b      83,85,66,0
                    13123   @m68kde~3_397:
00008B3A  5355 4251 13124          dc.b      83,85,66,81,0
00008B3E  00        
                    13125   @m68kde~3_398:
00008B40  2325 3158 13126          dc.b      35,37,49,88,44,0
00008B44  2C00      
                    13127   @m68kde~3_399:
00008B46  5355 4258 13128          dc.b      83,85,66,88,0
00008B4A  00        
                    13129   @m68kde~3_400:
00008B4C  4425 3158 13130          dc.b      68,37,49,88,44,68,37,49,88,0
00008B50  2C44 2531 
00008B54  5800      
                    13131   @m68kde~3_401:
00008B56  2D28 4125 13132          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
00008B5A  3158 292C 
00008B5E  2D28 4125 
00008B62  3158 29   
00008B65  00        13133          dc.b      0
                    13134   @m68kde~3_402:
00008B66  5357 4150 13135          dc.b      83,87,65,80,32,68,37,100,0
00008B6A  2044 2564 
00008B6E  00        
                    13136   @m68kde~3_403:
00008B70  5441 5320 13137          dc.b      84,65,83,32,0
00008B74  00        
                    13138   @m68kde~3_404:
00008B76  5452 4150 13139          dc.b      84,82,65,80,32,35,37,100,0
00008B7A  2023 2564 
00008B7E  00        
                    13140   @m68kde~3_405:
00008B80  5452 4150 13141          dc.b      84,82,65,80,86,0
00008B84  5600      
                    13142   @m68kde~3_406:
00008B86  5453 5400 13143          dc.b      84,83,84,0
                    13144   @m68kde~3_407:
00008B8A  554E 4C4B 13145          dc.b      85,78,76,75,32,65,37,100,0
00008B8E  2041 2564 
00008B92  00        
                    13146   MemoryTest_test_data_byte:
00008B94  AABB CCDD 13147          dc.b      170,187,204,221
                    13148          section   data
00008B98            13149                   align
          0000 8B98 13150   DataStart       equ       *
                    13151   
                    13152   *********************************************************************************************************
                    13153   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    13154   * to ram as part of the CStart routine in this file
                    13155   *********************************************************************************************************
                    13156   
                    13157   MemoryTest_test_data_word:
00008B98  AAAA BBBB 13158          dc.w      43690,48059,52428,56797
00008B9C  CCCC DDDD 
                    13159   MemoryTest_test_data_long_word:
00008BA0  AAAA AAAA 13160          dc.l      -1431655766,-1145324613,-858993460,-572662307
00008BA4  BBBB BBBB 
00008BA8  CCCC CCCC 
00008BAC  DDDD DDDD 
                    13161   @vsscanf_bufx:
00008BB0  0803 05AA 13162          dc.l      @vsscanf_buf
                    13163   @vsscanf_1:
00008BB4  0A00      13164          dc.b      10,0
                    13165   @itoa_1:
00008BB6  2D32 3134 13166          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00008BBA  3734 3833 
00008BBE  3634 3800 
                    13167   __ctype:
00008BC2  0040 4040 13168          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00008BC6  4040 4040 
00008BCA  4040 5050 
00008BCE  5050 50   
00008BD1  4040 4040 13169          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00008BD5  4040 4040 
00008BD9  4040 4040 
00008BDD  4040 40   
00008BE0  4040 40D0 13170          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00008BE4  A0A0 A0A0 
00008BE8  A0A0 A0A0 
00008BEC  A0A0 A0A0 13171          dc.b      160,160,160,160,160,160,160,140,140,140,140
00008BF0  A0A0 A08C 
00008BF4  8C8C 8C   
00008BF7  8C8C 8C8C 13172          dc.b      140,140,140,140,140,140,160,160,160,160,160
00008BFB  8C8C A0A0 
00008BFF  A0A0 A0   
00008C02  A0A0 8A8A 13173          dc.b      160,160,138,138,138,138,138,138,130,130,130
00008C06  8A8A 8A8A 
00008C0A  8282 82   
00008C0D  8282 8282 13174          dc.b      130,130,130,130,130,130,130,130,130,130,130
00008C11  8282 8282 
00008C15  8282 82   
00008C18  8282 8282 13175          dc.b      130,130,130,130,130,130,160,160,160,160,160
00008C1C  8282 A0A0 
00008C20  A0A0 A0   
00008C23  A089 8989 13176          dc.b      160,137,137,137,137,137,137,129,129,129,129
00008C27  8989 8981 
00008C2B  8181 81   
00008C2E  8181 8181 13177          dc.b      129,129,129,129,129,129,129,129,129,129,129
00008C32  8181 8181 
00008C36  8181 81   
00008C39  8181 8181 13178          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00008C3D  81A0 A0A0 
00008C41  A040 0000 
00008C45  00        
00008C46  0000 0000 13179          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00008C4A  0000 0000 
00008C4E  0000 0000 
00008C52  0000 0000 
00008C56  0000 0000 
00008C5A  0000      
00008C5C  0000 0000 13180          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00008C60  0000 0000 
00008C64  0000 0000 
00008C68  0000 0000 
00008C6C  0000 0000 
00008C70  0000      
00008C72  0000 0000 13181          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00008C76  0000 0000 
00008C7A  0000 0000 
00008C7E  0000 0000 
00008C82  0000 0000 
00008C86  0000      
00008C88  0000 0000 13182          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00008C8C  0000 0000 
00008C90  0000 0000 
00008C94  0000 0000 
00008C98  0000 0000 
00008C9C  0000      
00008C9E  0000 0000 13183          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00008CA2  0000 0000 
00008CA6  0000 0000 
00008CAA  0000 0000 
00008CAE  0000 0000 
00008CB2  0000      
00008CB4  0000 0000 13184          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00008CB8  0000 0000 
00008CBC  0000 0000 
00008CC0  0000 00   
                    13185          section   bss
00008CC4            13186                   align
          0000 8CC4 13187   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    13188   
                    13189   *********************************************************************************************************
                    13190   * Section for Uninitialised Data held in ROM as constants
                    13191   *********************************************************************************************************
                    13192   
08030000            13193                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 012C 13194   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    13195   
                    13196   
08030000            13197   bss             org       bss
                    13198   
                    13199   *********************************************************************************************************
                    13200   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    13201   * install the exception handler using the C function InstallExceptionHandler()
                    13202   *********************************************************************************************************
                    13203   
                    13204   
                    13205   
08030000            13206   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            13207   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            13208   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            13209   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            13210   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            13211   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            13212   VCheck           ds.l    1      ditto
0803001C            13213   VTrapV           ds.l    1      ditto
08030020            13214   VPrivilege       ds.l    1      ditto
08030024            13215   VTrace           ds.l    1
08030028            13216   VLine1010emul    ds.l    1
0803002C            13217   VLine1111emul    ds.l    1
08030030            13218   VUnassigned1     ds.l    1
08030034            13219   VUnassigned2     ds.l    1
08030038            13220   VUnassigned3     ds.l    1
0803003C            13221   VUninit_IRQ      ds.l    1
08030040            13222   VUnassigned4     ds.l    1
08030044            13223   VUnassigned5     ds.l    1
08030048            13224   VUnassigned6     ds.l    1
0803004C            13225   VUnassigned7     ds.l    1
08030050            13226   VUnassigned8     ds.l    1
08030054            13227   VUnassigned9     ds.l    1
08030058            13228   VUnassigned10    ds.l    1
0803005C            13229   VUnassigned11    ds.l    1
08030060            13230   VSpuriousIRQ     ds.l    1
                    13231   
                    13232   * Interrupt handlers Vector 25-31
08030064            13233   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            13234   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            13235   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            13236   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            13237   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            13238   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            13239   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    13240   
                    13241   * Trap Handler vectors 32-47
08030080            13242   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            13243   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            13244   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            13245   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            13246   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            13247   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            13248   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            13249   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            13250   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            13251   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            13252   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            13253   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            13254   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            13255   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            13256   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            13257   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    13258   
                    13259   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    13260   
                    13261   ***********************************************************************************************************
                    13262   * Other Variables
                    13263   ***********************************************************************************************************
                    13264   *__DebugA5       ds.l    1
                    13265   *__UserA5        ds.l    1
                    13266   
                    13267   ***********************************************************************************************************
080300C0            13268   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            13269   __allocp:       ds.l    0       ; start of allocation units
080300C4            13270   __heap:         ds.l    0       ; pointers for malloc functions
                    13271   
                    13272   *__himem:       ds.l    himem            ; highest memory location + 1
                    13273   *__stklen:      ds.l    stklen           ; default stack size
                    13274   
                    13275   *********************************************************************************************************
                    13276   * Section for Heap
                    13277   *********************************************************************************************************
                    13278   
                    13279   _i:
080300C4            13280          ds.b      4
                    13281   _x:
080300C8            13282          ds.b      4
                    13283   _y:
080300CC            13284          ds.b      4
                    13285   _z:
080300D0            13286          ds.b      4
                    13287   _PortA_Count:
080300D4            13288          ds.b      4
                    13289   _Trace:
080300D8            13290          ds.b      4
                    13291   _GoFlag:
080300DC            13292          ds.b      4
                    13293   _Echo:
080300E0            13294          ds.b      4
                    13295   _d0:
080300E4            13296          ds.b      4
                    13297   _d1:
080300E8            13298          ds.b      4
                    13299   _d2:
080300EC            13300          ds.b      4
                    13301   _d3:
080300F0            13302          ds.b      4
                    13303   _d4:
080300F4            13304          ds.b      4
                    13305   _d5:
080300F8            13306          ds.b      4
                    13307   _d6:
080300FC            13308          ds.b      4
                    13309   _d7:
08030100            13310          ds.b      4
                    13311   _a0:
08030104            13312          ds.b      4
                    13313   _a1:
08030108            13314          ds.b      4
                    13315   _a2:
0803010C            13316          ds.b      4
                    13317   _a3:
08030110            13318          ds.b      4
                    13319   _a4:
08030114            13320          ds.b      4
                    13321   _a5:
08030118            13322          ds.b      4
                    13323   _a6:
0803011C            13324          ds.b      4
                    13325   _PC:
08030120            13326          ds.b      4
                    13327   _SSP:
08030124            13328          ds.b      4
                    13329   _USP:
08030128            13330          ds.b      4
                    13331   _SR:
0803012C            13332          ds.b      2
                    13333   _BreakPointAddress:
0803012E            13334          ds.b      32
                    13335   _BreakPointInstruction:
0803014E            13336          ds.b      16
                    13337   _BreakPointSetOrCleared:
0803015E            13338          ds.b      32
                    13339   _InstructionSize:
0803017E            13340          ds.b      4
                    13341   _WatchPointAddress:
08030182            13342          ds.b      32
                    13343   _WatchPointSetOrCleared:
080301A2            13344          ds.b      32
                    13345   _WatchPointString:
080301C2            13346          ds.b      800
                    13347   _Instruction:
080304E2            13348          ds.b      100
                    13349   _TempString:
08030546            13350          ds.b      100
                    13351   @vsscanf_buf:
080305AA            13352          ds.b      80
                    13353          section   heap
080305FA            13354                   align
          0803 05FA 13355   bssEnd          equ *                   end of storage space for unitialised variables
                    13356   *                                       we have to copy all initialised variable from rom to here at startup
          0803 05FA 13357   heap   equ       *
080305FA            13358                    align
          0000 0000

Assembly errors: 0
