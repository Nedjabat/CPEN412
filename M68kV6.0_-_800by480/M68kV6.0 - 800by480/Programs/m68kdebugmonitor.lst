680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 24 Mar 2023      Time: 14:05:21          Source: C:\M68KV6.0 - 800BY480\PROGRAMS\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0546 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2D82      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2056      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG-NO-DISASSEMBLER-WITH-NO-ADDRESS-LOGIC.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0, d1, d2, d3, d4, d5, d6, d7;
                     482   ; unsigned int a0, a1, a2, a3, a4, a5, a6;
                     483   ; unsigned int PC, SSP, USP;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8];           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8];
                     489   ; unsigned int InstructionSize;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8];
                     493   ; char WatchPointString[8][100];
                     494   ; char    TempString[100];
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i;
                     503   ; for (i = 0; i < 1000; i++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i;
                     523   ; for (i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms();
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c);
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms();
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38);
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms();
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms();
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char* theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c;
                     577   ; while ((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c);
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i;
                     604   ; for (i = 0; i < 24; i++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ');  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char* theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80);
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln();
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80);
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms();
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage);
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char* theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0);
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln();
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0);
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms();
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage);
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler(void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int* RamVectorAddress = (volatile long int*)(StartOfExceptionVectorTable);   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int*)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay;
                     686   ; unsigned char count = 0;
00000A54  4202       687          clr.b     D2
                     688   ; while (1) {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f));
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for (delay = 0; delay < 200000; delay++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  324C      
                     723   ; int i, switches = 0;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n");
00000AB0  4879 0000  726          pea       @m649d4~1_1.L
00000AB4  3B9C      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while (1) {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA);
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ");
00000AD8  4879 0000  740          pea       @m649d4~1_2.L
00000ADC  3BA0      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for (i = (int)(0x00000080); i > 0; i = i >> 1) {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if ((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0");
00000AF6  4879 0000  753          pea       @m649d4~1_3.L
00000AFA  3BB6      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1");
00000B02  4879 0000  760          pea       @m649d4~1_4.L
00000B06  3BB8      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15); //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1);      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if (((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch(int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while (((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch(void)
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c;
                     846   ; while (((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if (Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c;
                     880   ; while (1) {
                     881   FlushKeyboard_1:
                     882   ; if (((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f));
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if ((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char* CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if (CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char* CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char* CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char* CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  324C      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  313E      
                    1040   ; int i, j;
                    1041   ; unsigned char* RamPtr, c; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue");
00000CDC  4879 0000 1043          pea       @m649d4~1_5.L
00000CE0  3BBA      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ");
00000CE6  4879 0000 1047          pea       @m649d4~1_6.L
00000CEA  3BF4      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0);
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while (1) {
                    1056   DumpMemory_1:
                    1057   ; for (i = 0; i < 16; i++) {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr);
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m649d4~1_7.L
00000D0C  3C0C      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for (j = 0; j < 16; j++) {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X", RamPtr[j]);
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m649d4~1_8.L
00000D2E  3C14      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ');
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ");
00000D40  4879 0000 1090          pea       @m649d4~1_9.L
00000D44  3C1A      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for (j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f);
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if ((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.');
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]);
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n");
00000D9A  4879 0000 1135          pea       @m649d4~1_1.L
00000D9E  3B9C      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch();
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if (c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  324C      
                    1158   ; char* StartRamPtr, * EndRamPtr;
                    1159   ; unsigned char FillData;
                    1160   ; printf("\r\nFill Memory Block");
00000DC6  4879 0000 1161          pea       @m649d4~1_10.L
00000DCA  3C1E      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ");
00000DD0  4879 0000 1165          pea       @m649d4~1_6.L
00000DD4  3BF4      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0);
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ");
00000DE4  4879 0000 1174          pea       @m649d4~1_11.L
00000DE8  3C32      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0);
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ");
00000DF8  4879 0000 1183          pea       @m649d4~1_12.L
00000DFC  3C48      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0);
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData);
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m649d4~1_13.L
00000E1C  3C5C      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while (StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  324C      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType;
                    1225   ; char* RamPtr;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n");
00000E60  4879 0000 1233          pea       @m649d4~1_14.L
00000E64  3C8C      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while (1) {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch());
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  3220      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if (c == 0x1b)      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; } while (c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch();
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if (HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if (HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum);
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if (HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum);
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else {
                    1312   ; AddressSize = 4;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum);
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char*)(Address);                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for (i = 0; i < NumDataBytesToRead; i++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum);
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0);
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if ((~CheckSum & 0Xff) != (ReadCheckSum & 0Xff)) {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if (SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  3072      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.');
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  313E      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if (LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress);
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m649d4~1_15.L
00000F8C  3CBC      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal);
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m649d4~1_16.L
00000F9A  3CE2      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for (i = 0; i < 400000; i++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard();
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  324C      
                    1434   ; unsigned char* RamPtr, c; // pointer to memory
                    1435   ; int Data;
                    1436   ; printf("\r\nExamine and Change Memory");
00000FCE  4879 0000 1437          pea       @m649d4~1_17.L
00000FD2  3D04      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change");
00000FD8  4879 0000 1441          pea       @m649d4~1_18.L
00000FDC  3D20      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ");
00000FE2  4879 0000 1445          pea       @m649d4~1_19.L
00000FE6  3D66      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0);
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while (1) {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr);
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m649d4~1_20.L
00001008  3D78      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch());
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  31AA      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if (c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data);
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if (*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr);
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m649d4~1_21.L
000010A6  3D8A      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if (c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr++;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /*******************************************************************
                    1547   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1548   ; ********************************************************************/
                    1549   ; void ProgramFlashChip(void)
                    1550   ; {
                    1551   _ProgramFlashChip:
000010C4  48E7 3C20 1552          movem.l   D2/D3/D4/D5/A2,-(A7)
000010C8  45F9 0000 1553          lea       _printf.L,A2
000010CC  324C      
                    1554   ; int count;
                    1555   ; unsigned char *Memaddress;
                    1556   ; int check;
                    1557   ; unsigned char a;
                    1558   ; printf("\r\nProgramming SPI Flash....");
000010CE  4879 0000 1559          pea       @m649d4~1_22.L
000010D2  3DBE      
000010D4  4E92      1560          jsr       (A2)
000010D6  584F      1561          addq.w    #4,A7
                    1562   ; //
                    1563   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1564   ; // TODO : then verify by reading it back and comparing to memory
                    1565   ; //
                    1566   ; //Erase the flash memory first
                    1567   ; EraseSPIFlashChip();
                    1568          jsr       _EraseSPIFlashChip
********  **** ****  Error: Undefined or illegal symbol
                    1569   ; //Program from RAM to SPI flash chip
                    1570   ; WriteSPIFlashData(0, 0x08000000, 256 * 1000);
000010DE  4879 0003 1571          pea       256000
000010E2  E800      
000010E4  4879 0800 1572          pea       134217728
000010E8  0000      
000010EA  42A7      1573          clr.l     -(A7)
                    1574          jsr       _WriteSPIFlashData
********  **** ****  Error: Undefined or illegal symbol
000010F2  DEFC 000C 1575          add.w     #12,A7
                    1576   ; Memaddress = 0x08000000;
000010F6  263C 0800 1577          move.l    #134217728,D3
000010FA  0000      
                    1578   ; check = 0;
000010FC  4285      1579          clr.l     D5
                    1580   ; for(count=0;count<256000;count++){
000010FE  4282      1581          clr.l     D2
                    1582   ProgramFlashChip_1:
00001100  0C82 0003 1583          cmp.l     #256000,D2
00001104  E800      
00001106  6C00 0040 1584          bge       ProgramFlashChip_3
                    1585   ; a = ReadSPIFlashByte(count);
0000110A  2F02      1586          move.l    D2,-(A7)
                    1587          jsr       _ReadSPIFlashByte
********  **** ****  Error: Undefined or illegal symbol
00001112  584F      1588          addq.w    #4,A7
00001114  1800      1589          move.b    D0,D4
                    1590   ; if(*Memaddress != a){
00001116  2043      1591          move.l    D3,A0
00001118  B810      1592          cmp.b     (A0),D4
0000111A  6726      1593          beq.s     ProgramFlashChip_4
                    1594   ; printf("\r\nThe value %x at address %x in SDRAM is not equal to the value %x at Flash Address %x",*Memaddress,Memaddress,a,count);
0000111C  2F02      1595          move.l    D2,-(A7)
0000111E  C8BC 0000 1596          and.l     #255,D4
00001122  00FF      
00001124  2F04      1597          move.l    D4,-(A7)
00001126  2F03      1598          move.l    D3,-(A7)
00001128  2043      1599          move.l    D3,A0
0000112A  1210      1600          move.b    (A0),D1
0000112C  C2BC 0000 1601          and.l     #255,D1
00001130  00FF      
00001132  2F01      1602          move.l    D1,-(A7)
00001134  4879 0000 1603          pea       @m649d4~1_23.L
00001138  3DDA      
0000113A  4E92      1604          jsr       (A2)
0000113C  DEFC 0014 1605          add.w     #20,A7
                    1606   ; check++;
00001140  5285      1607          addq.l    #1,D5
                    1608   ProgramFlashChip_4:
                    1609   ; }
                    1610   ; Memaddress++;
00001142  5283      1611          addq.l    #1,D3
00001144  5282      1612          addq.l    #1,D2
00001146  60B8      1613          bra       ProgramFlashChip_1
                    1614   ProgramFlashChip_3:
                    1615   ; }
                    1616   ; if(check == 0){
00001148  4A85      1617          tst.l     D5
0000114A  660A      1618          bne.s     ProgramFlashChip_6
                    1619   ; printf("\r\nAll addresses have been copied into SPI Flash correctly");
0000114C  4879 0000 1620          pea       @m649d4~1_24.L
00001150  3E32      
00001152  4E92      1621          jsr       (A2)
00001154  584F      1622          addq.w    #4,A7
                    1623   ProgramFlashChip_6:
00001156  4CDF 043C 1624          movem.l   (A7)+,D2/D3/D4/D5/A2
0000115A  4E75      1625          rts
                    1626   ; }
                    1627   ; }
                    1628   ; /*************************************************************************
                    1629   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1630   ; **************************************************************************/
                    1631   ; void LoadFromFlashChip(void)
                    1632   ; {
                    1633   _LoadFromFlashChip:
0000115C  48E7 3000 1634          movem.l   D2/D3,-(A7)
                    1635   ; unsigned char *Memaddress;
                    1636   ; int count;
                    1637   ; Memaddress = 0x08000000;
00001160  263C 0800 1638          move.l    #134217728,D3
00001164  0000      
                    1639   ; printf("\r\nLoading Program From SPI Flash....");
00001166  4879 0000 1640          pea       @m649d4~1_25.L
0000116A  3E6C      
0000116C  4EB9 0000 1641          jsr       _printf
00001170  324C      
00001172  584F      1642          addq.w    #4,A7
                    1643   ; for (count=0;count<256000;count++){
00001174  4282      1644          clr.l     D2
                    1645   LoadFromFlashChip_1:
00001176  0C82 0003 1646          cmp.l     #256000,D2
0000117A  E800      
0000117C  6C14      1647          bge.s     LoadFromFlashChip_3
                    1648   ; *Memaddress = ReadSPIFlashByte(count);
0000117E  2F02      1649          move.l    D2,-(A7)
                    1650          jsr       _ReadSPIFlashByte
********  **** ****  Error: Undefined or illegal symbol
00001186  584F      1651          addq.w    #4,A7
00001188  2043      1652          move.l    D3,A0
0000118A  1080      1653          move.b    D0,(A0)
                    1654   ; Memaddress++;
0000118C  5283      1655          addq.l    #1,D3
0000118E  5282      1656          addq.l    #1,D2
00001190  60E4      1657          bra       LoadFromFlashChip_1
                    1658   LoadFromFlashChip_3:
                    1659   ; }
                    1660   ; printf("\r\nProgram done loading");
00001192  4879 0000 1661          pea       @m649d4~1_26.L
00001196  3E92      
00001198  4EB9 0000 1662          jsr       _printf
0000119C  324C      
0000119E  584F      1663          addq.w    #4,A7
000011A0  4CDF 000C 1664          movem.l   (A7)+,D2/D3
000011A4  4E75      1665          rts
                    1666   ; //
                    1667   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1668   ; //
                    1669   ; // ReadSPIFlashData(0, 0x08000000, 256 * 1000);
                    1670   ; }
                    1671   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1672   ; // IMPORTANT
                    1673   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1674   ; // has to be done with an interrupt (IRQ Level 6)
                    1675   ; //
                    1676   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1677   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1678   ; //
                    1679   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1680   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1681   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1682   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1683   ; // program area
                    1684   ; //
                    1685   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1686   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1687   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1688   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1689   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1690   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1691   ; void DumpRegisters()
                    1692   ; {
                    1693   _DumpRegisters:
000011A6  48E7 3F3C 1694          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000011AA  45F9 0000 1695          lea       _putch.L,A2
000011AE  313E      
000011B0  47F9 0000 1696          lea       _printf.L,A3
000011B4  324C      
000011B6  49F9 0B00 1697          lea       _SR.L,A4
000011BA  012C      
000011BC  4BF9 0B00 1698          lea       _WatchPointString.L,A5
000011C0  01C2      
                    1699   ; short i, x, j, k;
                    1700   ; unsigned char c, * BytePointer;
                    1701   ; // buld up strings for displaying watchpoints
                    1702   ; for (x = 0; x < (short)(8); x++)
000011C2  4242      1703          clr.w     D2
                    1704   DumpRegisters_1:
000011C4  0C42 0008 1705          cmp.w     #8,D2
000011C8  6C00 01C6 1706          bge       DumpRegisters_3
                    1707   ; {
                    1708   ; if (WatchPointSetOrCleared[x] == 1)
000011CC  48C2      1709          ext.l     D2
000011CE  2002      1710          move.l    D2,D0
000011D0  E588      1711          lsl.l     #2,D0
000011D2  41F9 0B00 1712          lea       _WatchPointSetOrCleared.L,A0
000011D6  01A2      
000011D8  2030 0800 1713          move.l    0(A0,D0.L),D0
000011DC  0C80 0000 1714          cmp.l     #1,D0
000011E0  0001      
000011E2  6600 0186 1715          bne       DumpRegisters_4
                    1716   ; {
                    1717   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]);
000011E6  48C2      1718          ext.l     D2
000011E8  2202      1719          move.l    D2,D1
000011EA  E589      1720          lsl.l     #2,D1
000011EC  41F9 0B00 1721          lea       _WatchPointAddress.L,A0
000011F0  0182      
000011F2  2F30 1800 1722          move.l    0(A0,D1.L),-(A7)
000011F6  4879 0000 1723          pea       @m649d4~1_27.L
000011FA  3EAA      
000011FC  220D      1724          move.l    A5,D1
000011FE  48C2      1725          ext.l     D2
00001200  2F00      1726          move.l    D0,-(A7)
00001202  2002      1727          move.l    D2,D0
00001204  C1FC 0064 1728          muls      #100,D0
00001208  D280      1729          add.l     D0,D1
0000120A  201F      1730          move.l    (A7)+,D0
0000120C  2F01      1731          move.l    D1,-(A7)
0000120E  4EB9 0000 1732          jsr       _sprintf
00001212  31D6      
00001214  DEFC 000C 1733          add.w     #12,A7
                    1734   ; BytePointer = (char*)(WatchPointAddress[x]);
00001218  48C2      1735          ext.l     D2
0000121A  2002      1736          move.l    D2,D0
0000121C  E588      1737          lsl.l     #2,D0
0000121E  41F9 0B00 1738          lea       _WatchPointAddress.L,A0
00001222  0182      
00001224  2A30 0800 1739          move.l    0(A0,D0.L),D5
                    1740   ; for (j = 0; j < (short)(16); j += 2)
00001228  4243      1741          clr.w     D3
                    1742   DumpRegisters_6:
0000122A  0C43 0010 1743          cmp.w     #16,D3
0000122E  6C00 0082 1744          bge       DumpRegisters_8
                    1745   ; {
                    1746   ; for (k = 0; k < (short)(2); k++)
00001232  4246      1747          clr.w     D6
                    1748   DumpRegisters_9:
00001234  0C46 0002 1749          cmp.w     #2,D6
00001238  6C00 0052 1750          bge       DumpRegisters_11
                    1751   ; {
                    1752   ; sprintf(TempString, "%02X", BytePointer[j + k]);
0000123C  2045      1753          move.l    D5,A0
0000123E  48C3      1754          ext.l     D3
00001240  2203      1755          move.l    D3,D1
00001242  48C6      1756          ext.l     D6
00001244  D286      1757          add.l     D6,D1
00001246  1230 1800 1758          move.b    0(A0,D1.L),D1
0000124A  C2BC 0000 1759          and.l     #255,D1
0000124E  00FF      
00001250  2F01      1760          move.l    D1,-(A7)
00001252  4879 0000 1761          pea       @m649d4~1_8.L
00001256  3C14      
00001258  4879 0B00 1762          pea       _TempString.L
0000125C  04E2      
0000125E  4EB9 0000 1763          jsr       _sprintf
00001262  31D6      
00001264  DEFC 000C 1764          add.w     #12,A7
                    1765   ; strcat(WatchPointString[x], TempString);
00001268  4879 0B00 1766          pea       _TempString.L
0000126C  04E2      
0000126E  220D      1767          move.l    A5,D1
00001270  48C2      1768          ext.l     D2
00001272  2F00      1769          move.l    D0,-(A7)
00001274  2002      1770          move.l    D2,D0
00001276  C1FC 0064 1771          muls      #100,D0
0000127A  D280      1772          add.l     D0,D1
0000127C  201F      1773          move.l    (A7)+,D0
0000127E  2F01      1774          move.l    D1,-(A7)
00001280  4EB9 0000 1775          jsr       _strcat
00001284  320A      
00001286  504F      1776          addq.w    #8,A7
00001288  5246      1777          addq.w    #1,D6
0000128A  60A8      1778          bra       DumpRegisters_9
                    1779   DumpRegisters_11:
                    1780   ; }
                    1781   ; strcat(WatchPointString[x], " ");
0000128C  4879 0000 1782          pea       @m649d4~1_28.L
00001290  3EB2      
00001292  220D      1783          move.l    A5,D1
00001294  48C2      1784          ext.l     D2
00001296  2F00      1785          move.l    D0,-(A7)
00001298  2002      1786          move.l    D2,D0
0000129A  C1FC 0064 1787          muls      #100,D0
0000129E  D280      1788          add.l     D0,D1
000012A0  201F      1789          move.l    (A7)+,D0
000012A2  2F01      1790          move.l    D1,-(A7)
000012A4  4EB9 0000 1791          jsr       _strcat
000012A8  320A      
000012AA  504F      1792          addq.w    #8,A7
000012AC  5443      1793          addq.w    #2,D3
000012AE  6000 FF7A 1794          bra       DumpRegisters_6
                    1795   DumpRegisters_8:
                    1796   ; }
                    1797   ; strcat(WatchPointString[x], "  ");
000012B2  4879 0000 1798          pea       @m649d4~1_9.L
000012B6  3C1A      
000012B8  220D      1799          move.l    A5,D1
000012BA  48C2      1800          ext.l     D2
000012BC  2F00      1801          move.l    D0,-(A7)
000012BE  2002      1802          move.l    D2,D0
000012C0  C1FC 0064 1803          muls      #100,D0
000012C4  D280      1804          add.l     D0,D1
000012C6  201F      1805          move.l    (A7)+,D0
000012C8  2F01      1806          move.l    D1,-(A7)
000012CA  4EB9 0000 1807          jsr       _strcat
000012CE  320A      
000012D0  504F      1808          addq.w    #8,A7
                    1809   ; BytePointer = (char*)(WatchPointAddress[x]);
000012D2  48C2      1810          ext.l     D2
000012D4  2002      1811          move.l    D2,D0
000012D6  E588      1812          lsl.l     #2,D0
000012D8  41F9 0B00 1813          lea       _WatchPointAddress.L,A0
000012DC  0182      
000012DE  2A30 0800 1814          move.l    0(A0,D0.L),D5
                    1815   ; for (j = 0; j < (short)(16); j++)
000012E2  4243      1816          clr.w     D3
                    1817   DumpRegisters_12:
000012E4  0C43 0010 1818          cmp.w     #16,D3
000012E8  6C00 007E 1819          bge       DumpRegisters_14
                    1820   ; {
                    1821   ; c = ((char)(BytePointer[j]) & 0x7f);
000012EC  2045      1822          move.l    D5,A0
000012EE  48C3      1823          ext.l     D3
000012F0  1030 3800 1824          move.b    0(A0,D3.L),D0
000012F4  C03C 007F 1825          and.b     #127,D0
000012F8  1E00      1826          move.b    D0,D7
                    1827   ; if ((c > (char)(0x7f)) || (c < (char)(' ')))
000012FA  0C07 007F 1828          cmp.b     #127,D7
000012FE  6206      1829          bhi.s     DumpRegisters_17
00001300  0C07 0020 1830          cmp.b     #32,D7
00001304  6416      1831          bhs.s     DumpRegisters_15
                    1832   DumpRegisters_17:
                    1833   ; sprintf(TempString, ".");
00001306  4879 0000 1834          pea       @m649d4~1_29.L
0000130A  3EB4      
0000130C  4879 0B00 1835          pea       _TempString.L
00001310  04E2      
00001312  4EB9 0000 1836          jsr       _sprintf
00001316  31D6      
00001318  504F      1837          addq.w    #8,A7
0000131A  6026      1838          bra.s     DumpRegisters_16
                    1839   DumpRegisters_15:
                    1840   ; else
                    1841   ; sprintf(TempString, "%c", BytePointer[j]);
0000131C  2045      1842          move.l    D5,A0
0000131E  48C3      1843          ext.l     D3
00001320  1230 3800 1844          move.b    0(A0,D3.L),D1
00001324  C2BC 0000 1845          and.l     #255,D1
00001328  00FF      
0000132A  2F01      1846          move.l    D1,-(A7)
0000132C  4879 0000 1847          pea       @m649d4~1_30.L
00001330  3EB6      
00001332  4879 0B00 1848          pea       _TempString.L
00001336  04E2      
00001338  4EB9 0000 1849          jsr       _sprintf
0000133C  31D6      
0000133E  DEFC 000C 1850          add.w     #12,A7
                    1851   DumpRegisters_16:
                    1852   ; strcat(WatchPointString[x], TempString);
00001342  4879 0B00 1853          pea       _TempString.L
00001346  04E2      
00001348  220D      1854          move.l    A5,D1
0000134A  48C2      1855          ext.l     D2
0000134C  2F00      1856          move.l    D0,-(A7)
0000134E  2002      1857          move.l    D2,D0
00001350  C1FC 0064 1858          muls      #100,D0
00001354  D280      1859          add.l     D0,D1
00001356  201F      1860          move.l    (A7)+,D0
00001358  2F01      1861          move.l    D1,-(A7)
0000135A  4EB9 0000 1862          jsr       _strcat
0000135E  320A      
00001360  504F      1863          addq.w    #8,A7
00001362  5243      1864          addq.w    #1,D3
00001364  6000 FF7E 1865          bra       DumpRegisters_12
                    1866   DumpRegisters_14:
00001368  6020      1867          bra.s     DumpRegisters_5
                    1868   DumpRegisters_4:
                    1869   ; }
                    1870   ; }
                    1871   ; else
                    1872   ; strcpy(WatchPointString[x], "");
0000136A  4879 0000 1873          pea       @m649d4~1_31.L
0000136E  3EBA      
00001370  220D      1874          move.l    A5,D1
00001372  48C2      1875          ext.l     D2
00001374  2F00      1876          move.l    D0,-(A7)
00001376  2002      1877          move.l    D2,D0
00001378  C1FC 0064 1878          muls      #100,D0
0000137C  D280      1879          add.l     D0,D1
0000137E  201F      1880          move.l    (A7)+,D0
00001380  2F01      1881          move.l    D1,-(A7)
00001382  4EB9 0000 1882          jsr       _strcpy
00001386  3050      
00001388  504F      1883          addq.w    #8,A7
                    1884   DumpRegisters_5:
0000138A  5242      1885          addq.w    #1,D2
0000138C  6000 FE36 1886          bra       DumpRegisters_1
                    1887   DumpRegisters_3:
                    1888   ; }
                    1889   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X", d0, a0);
00001390  2F39 0B00 1890          move.l    _a0.L,-(A7)
00001394  0104      
00001396  2F39 0B00 1891          move.l    _d0.L,-(A7)
0000139A  00E4      
0000139C  4879 0000 1892          pea       @m649d4~1_32.L
000013A0  3EBC      
000013A2  4E93      1893          jsr       (A3)
000013A4  DEFC 000C 1894          add.w     #12,A7
                    1895   ; printf("\r\n D1 = $%08X  A1 = $%08X", d1, a1);
000013A8  2F39 0B00 1896          move.l    _a1.L,-(A7)
000013AC  0108      
000013AE  2F39 0B00 1897          move.l    _d1.L,-(A7)
000013B2  00E8      
000013B4  4879 0000 1898          pea       @m649d4~1_33.L
000013B8  3ED8      
000013BA  4E93      1899          jsr       (A3)
000013BC  DEFC 000C 1900          add.w     #12,A7
                    1901   ; printf("\r\n D2 = $%08X  A2 = $%08X", d2, a2);
000013C0  2F39 0B00 1902          move.l    _a2.L,-(A7)
000013C4  010C      
000013C6  2F39 0B00 1903          move.l    _d2.L,-(A7)
000013CA  00EC      
000013CC  4879 0000 1904          pea       @m649d4~1_34.L
000013D0  3EF2      
000013D2  4E93      1905          jsr       (A3)
000013D4  DEFC 000C 1906          add.w     #12,A7
                    1907   ; printf("\r\n D3 = $%08X  A3 = $%08X", d3, a3);
000013D8  2F39 0B00 1908          move.l    _a3.L,-(A7)
000013DC  0110      
000013DE  2F39 0B00 1909          move.l    _d3.L,-(A7)
000013E2  00F0      
000013E4  4879 0000 1910          pea       @m649d4~1_35.L
000013E8  3F0C      
000013EA  4E93      1911          jsr       (A3)
000013EC  DEFC 000C 1912          add.w     #12,A7
                    1913   ; printf("\r\n D4 = $%08X  A4 = $%08X", d4, a4);
000013F0  2F39 0B00 1914          move.l    _a4.L,-(A7)
000013F4  0114      
000013F6  2F39 0B00 1915          move.l    _d4.L,-(A7)
000013FA  00F4      
000013FC  4879 0000 1916          pea       @m649d4~1_36.L
00001400  3F26      
00001402  4E93      1917          jsr       (A3)
00001404  DEFC 000C 1918          add.w     #12,A7
                    1919   ; printf("\r\n D5 = $%08X  A5 = $%08X", d5, a5);
00001408  2F39 0B00 1920          move.l    _a5.L,-(A7)
0000140C  0118      
0000140E  2F39 0B00 1921          move.l    _d5.L,-(A7)
00001412  00F8      
00001414  4879 0000 1922          pea       @m649d4~1_37.L
00001418  3F40      
0000141A  4E93      1923          jsr       (A3)
0000141C  DEFC 000C 1924          add.w     #12,A7
                    1925   ; printf("\r\n D6 = $%08X  A6 = $%08X", d6, a6);
00001420  2F39 0B00 1926          move.l    _a6.L,-(A7)
00001424  011C      
00001426  2F39 0B00 1927          move.l    _d6.L,-(A7)
0000142A  00FC      
0000142C  4879 0000 1928          pea       @m649d4~1_38.L
00001430  3F5A      
00001432  4E93      1929          jsr       (A3)
00001434  DEFC 000C 1930          add.w     #12,A7
                    1931   ; printf("\r\n D7 = $%08X  A7 = $%08X", d7, ((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP);
00001438  3214      1932          move.w    (A4),D1
0000143A  C27C 2000 1933          and.w     #8192,D1
0000143E  0C41 2000 1934          cmp.w     #8192,D1
00001442  6608      1935          bne.s     DumpRegisters_18
00001444  2239 0B00 1936          move.l    _SSP.L,D1
00001448  0124      
0000144A  6006      1937          bra.s     DumpRegisters_19
                    1938   DumpRegisters_18:
0000144C  2239 0B00 1939          move.l    _USP.L,D1
00001450  0128      
                    1940   DumpRegisters_19:
00001452  2F01      1941          move.l    D1,-(A7)
00001454  2F39 0B00 1942          move.l    _d7.L,-(A7)
00001458  0100      
0000145A  4879 0000 1943          pea       @m649d4~1_39.L
0000145E  3F74      
00001460  4E93      1944          jsr       (A3)
00001462  DEFC 000C 1945          add.w     #12,A7
                    1946   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP);
00001466  2F39 0B00 1947          move.l    _USP.L,-(A7)
0000146A  0128      
0000146C  4879 0000 1948          pea       @m649d4~1_40.L
00001470  3F8E      
00001472  4E93      1949          jsr       (A3)
00001474  504F      1950          addq.w    #8,A7
                    1951   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP);
00001476  2F39 0B00 1952          move.l    _SSP.L,-(A7)
0000147A  0124      
0000147C  4879 0000 1953          pea       @m649d4~1_41.L
00001480  3FAC      
00001482  4E93      1954          jsr       (A3)
00001484  504F      1955          addq.w    #8,A7
                    1956   ; printf("\r\n SR = $%04X   ", SR);
00001486  3214      1957          move.w    (A4),D1
00001488  C2BC 0000 1958          and.l     #65535,D1
0000148C  FFFF      
0000148E  2F01      1959          move.l    D1,-(A7)
00001490  4879 0000 1960          pea       @m649d4~1_42.L
00001494  3FCE      
00001496  4E93      1961          jsr       (A3)
00001498  504F      1962          addq.w    #8,A7
                    1963   ; // display the status word in characters etc.
                    1964   ; printf("   [");
0000149A  4879 0000 1965          pea       @m649d4~1_43.L
0000149E  3FE0      
000014A0  4E93      1966          jsr       (A3)
000014A2  584F      1967          addq.w    #4,A7
                    1968   ; if ((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T'); else putchar('-');      // Trace bit(bit 15)
000014A4  3014      1969          move.w    (A4),D0
000014A6  C07C 8000 1970          and.w     #32768,D0
000014AA  0C40 8000 1971          cmp.w     #32768,D0
000014AE  660A      1972          bne.s     DumpRegisters_20
000014B0  4878 0054 1973          pea       84
000014B4  4E92      1974          jsr       (A2)
000014B6  584F      1975          addq.w    #4,A7
000014B8  6008      1976          bra.s     DumpRegisters_21
                    1977   DumpRegisters_20:
000014BA  4878 002D 1978          pea       45
000014BE  4E92      1979          jsr       (A2)
000014C0  584F      1980          addq.w    #4,A7
                    1981   DumpRegisters_21:
                    1982   ; if ((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S'); else putchar('U');      // supervisor bit  (bit 13)
000014C2  3014      1983          move.w    (A4),D0
000014C4  C07C 2000 1984          and.w     #8192,D0
000014C8  0C40 2000 1985          cmp.w     #8192,D0
000014CC  660A      1986          bne.s     DumpRegisters_22
000014CE  4878 0053 1987          pea       83
000014D2  4E92      1988          jsr       (A2)
000014D4  584F      1989          addq.w    #4,A7
000014D6  6008      1990          bra.s     DumpRegisters_23
                    1991   DumpRegisters_22:
000014D8  4878 0055 1992          pea       85
000014DC  4E92      1993          jsr       (A2)
000014DE  584F      1994          addq.w    #4,A7
                    1995   DumpRegisters_23:
                    1996   ; if ((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1'); else putchar('0');      // IRQ2 Bit (bit 10)
000014E0  3014      1997          move.w    (A4),D0
000014E2  C07C 0400 1998          and.w     #1024,D0
000014E6  0C40 0400 1999          cmp.w     #1024,D0
000014EA  660A      2000          bne.s     DumpRegisters_24
000014EC  4878 0031 2001          pea       49
000014F0  4E92      2002          jsr       (A2)
000014F2  584F      2003          addq.w    #4,A7
000014F4  6008      2004          bra.s     DumpRegisters_25
                    2005   DumpRegisters_24:
000014F6  4878 0030 2006          pea       48
000014FA  4E92      2007          jsr       (A2)
000014FC  584F      2008          addq.w    #4,A7
                    2009   DumpRegisters_25:
                    2010   ; if ((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1'); else putchar('0');      // IRQ1 Bit (bit 9)
000014FE  3014      2011          move.w    (A4),D0
00001500  C07C 0200 2012          and.w     #512,D0
00001504  0C40 0200 2013          cmp.w     #512,D0
00001508  660A      2014          bne.s     DumpRegisters_26
0000150A  4878 0031 2015          pea       49
0000150E  4E92      2016          jsr       (A2)
00001510  584F      2017          addq.w    #4,A7
00001512  6008      2018          bra.s     DumpRegisters_27
                    2019   DumpRegisters_26:
00001514  4878 0030 2020          pea       48
00001518  4E92      2021          jsr       (A2)
0000151A  584F      2022          addq.w    #4,A7
                    2023   DumpRegisters_27:
                    2024   ; if ((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1'); else putchar('0');      // IRQ0 Bit (bit 8)
0000151C  3014      2025          move.w    (A4),D0
0000151E  C07C 0100 2026          and.w     #256,D0
00001522  0C40 0100 2027          cmp.w     #256,D0
00001526  660A      2028          bne.s     DumpRegisters_28
00001528  4878 0031 2029          pea       49
0000152C  4E92      2030          jsr       (A2)
0000152E  584F      2031          addq.w    #4,A7
00001530  6008      2032          bra.s     DumpRegisters_29
                    2033   DumpRegisters_28:
00001532  4878 0030 2034          pea       48
00001536  4E92      2035          jsr       (A2)
00001538  584F      2036          addq.w    #4,A7
                    2037   DumpRegisters_29:
                    2038   ; if ((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X'); else putchar('-');      // X Bit (bit 4)
0000153A  3014      2039          move.w    (A4),D0
0000153C  C07C 0010 2040          and.w     #16,D0
00001540  0C40 0010 2041          cmp.w     #16,D0
00001544  660A      2042          bne.s     DumpRegisters_30
00001546  4878 0058 2043          pea       88
0000154A  4E92      2044          jsr       (A2)
0000154C  584F      2045          addq.w    #4,A7
0000154E  6008      2046          bra.s     DumpRegisters_31
                    2047   DumpRegisters_30:
00001550  4878 002D 2048          pea       45
00001554  4E92      2049          jsr       (A2)
00001556  584F      2050          addq.w    #4,A7
                    2051   DumpRegisters_31:
                    2052   ; if ((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N'); else putchar('-');      // N Bit (bit 3)
00001558  3014      2053          move.w    (A4),D0
0000155A  C07C 0008 2054          and.w     #8,D0
0000155E  0C40 0008 2055          cmp.w     #8,D0
00001562  660A      2056          bne.s     DumpRegisters_32
00001564  4878 004E 2057          pea       78
00001568  4E92      2058          jsr       (A2)
0000156A  584F      2059          addq.w    #4,A7
0000156C  6008      2060          bra.s     DumpRegisters_33
                    2061   DumpRegisters_32:
0000156E  4878 002D 2062          pea       45
00001572  4E92      2063          jsr       (A2)
00001574  584F      2064          addq.w    #4,A7
                    2065   DumpRegisters_33:
                    2066   ; if ((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z'); else putchar('-');      // Z Bit (bit 2)
00001576  3014      2067          move.w    (A4),D0
00001578  C07C 0004 2068          and.w     #4,D0
0000157C  0C40 0004 2069          cmp.w     #4,D0
00001580  660A      2070          bne.s     DumpRegisters_34
00001582  4878 005A 2071          pea       90
00001586  4E92      2072          jsr       (A2)
00001588  584F      2073          addq.w    #4,A7
0000158A  6008      2074          bra.s     DumpRegisters_35
                    2075   DumpRegisters_34:
0000158C  4878 002D 2076          pea       45
00001590  4E92      2077          jsr       (A2)
00001592  584F      2078          addq.w    #4,A7
                    2079   DumpRegisters_35:
                    2080   ; if ((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V'); else putchar('-');      // V Bit (bit 1)
00001594  3014      2081          move.w    (A4),D0
00001596  C07C 0002 2082          and.w     #2,D0
0000159A  0C40 0002 2083          cmp.w     #2,D0
0000159E  660A      2084          bne.s     DumpRegisters_36
000015A0  4878 0056 2085          pea       86
000015A4  4E92      2086          jsr       (A2)
000015A6  584F      2087          addq.w    #4,A7
000015A8  6008      2088          bra.s     DumpRegisters_37
                    2089   DumpRegisters_36:
000015AA  4878 002D 2090          pea       45
000015AE  4E92      2091          jsr       (A2)
000015B0  584F      2092          addq.w    #4,A7
                    2093   DumpRegisters_37:
                    2094   ; if ((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C'); else putchar('-');      // C Bit (bit 0)
000015B2  3014      2095          move.w    (A4),D0
000015B4  C07C 0001 2096          and.w     #1,D0
000015B8  0C40 0001 2097          cmp.w     #1,D0
000015BC  660A      2098          bne.s     DumpRegisters_38
000015BE  4878 0043 2099          pea       67
000015C2  4E92      2100          jsr       (A2)
000015C4  584F      2101          addq.w    #4,A7
000015C6  6008      2102          bra.s     DumpRegisters_39
                    2103   DumpRegisters_38:
000015C8  4878 002D 2104          pea       45
000015CC  4E92      2105          jsr       (A2)
000015CE  584F      2106          addq.w    #4,A7
                    2107   DumpRegisters_39:
                    2108   ; putchar(']');
000015D0  4878 005D 2109          pea       93
000015D4  4E92      2110          jsr       (A2)
000015D6  584F      2111          addq.w    #4,A7
                    2112   ; printf("\r\n PC = $%08X  ", PC);
000015D8  2F39 0B00 2113          move.l    _PC.L,-(A7)
000015DC  0120      
000015DE  4879 0000 2114          pea       @m649d4~1_44.L
000015E2  3FE6      
000015E4  4E93      2115          jsr       (A3)
000015E6  504F      2116          addq.w    #8,A7
                    2117   ; if (*(unsigned short int*)(PC) == 0x4e4e)
000015E8  2039 0B00 2118          move.l    _PC.L,D0
000015EC  0120      
000015EE  2040      2119          move.l    D0,A0
000015F0  3010      2120          move.w    (A0),D0
000015F2  0C40 4E4E 2121          cmp.w     #20046,D0
000015F6  660A      2122          bne.s     DumpRegisters_40
                    2123   ; printf("[@ BREAKPOINT]");
000015F8  4879 0000 2124          pea       @m649d4~1_45.L
000015FC  3FF6      
000015FE  4E93      2125          jsr       (A3)
00001600  584F      2126          addq.w    #4,A7
                    2127   DumpRegisters_40:
                    2128   ; printf("\r\n");
00001602  4879 0000 2129          pea       @m649d4~1_1.L
00001606  3B9C      
00001608  4E93      2130          jsr       (A3)
0000160A  584F      2131          addq.w    #4,A7
                    2132   ; for (i = 0; i < 8; i++) {
0000160C  4244      2133          clr.w     D4
                    2134   DumpRegisters_42:
0000160E  0C44 0008 2135          cmp.w     #8,D4
00001612  6C00 0040 2136          bge       DumpRegisters_44
                    2137   ; if (WatchPointSetOrCleared[i] == 1)
00001616  48C4      2138          ext.l     D4
00001618  2004      2139          move.l    D4,D0
0000161A  E588      2140          lsl.l     #2,D0
0000161C  41F9 0B00 2141          lea       _WatchPointSetOrCleared.L,A0
00001620  01A2      
00001622  2030 0800 2142          move.l    0(A0,D0.L),D0
00001626  0C80 0000 2143          cmp.l     #1,D0
0000162A  0001      
0000162C  6622      2144          bne.s     DumpRegisters_45
                    2145   ; printf("\r\nWP%d = %s", i, WatchPointString[i]);
0000162E  220D      2146          move.l    A5,D1
00001630  48C4      2147          ext.l     D4
00001632  2F00      2148          move.l    D0,-(A7)
00001634  2004      2149          move.l    D4,D0
00001636  C1FC 0064 2150          muls      #100,D0
0000163A  D280      2151          add.l     D0,D1
0000163C  201F      2152          move.l    (A7)+,D0
0000163E  2F01      2153          move.l    D1,-(A7)
00001640  48C4      2154          ext.l     D4
00001642  2F04      2155          move.l    D4,-(A7)
00001644  4879 0000 2156          pea       @m649d4~1_46.L
00001648  4006      
0000164A  4E93      2157          jsr       (A3)
0000164C  DEFC 000C 2158          add.w     #12,A7
                    2159   DumpRegisters_45:
00001650  5244      2160          addq.w    #1,D4
00001652  60BA      2161          bra       DumpRegisters_42
                    2162   DumpRegisters_44:
00001654  4CDF 3CFC 2163          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001658  4E75      2164          rts
                    2165   ; }
                    2166   ; }
                    2167   ; // Trace Exception Handler
                    2168   ; void DumpRegistersandPause(void)
                    2169   ; {
                    2170   _DumpRegistersandPause:
0000165A  2F0A      2171          move.l    A2,-(A7)
0000165C  45F9 0000 2172          lea       _printf.L,A2
00001660  324C      
                    2173   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]");
00001662  4879 0000 2174          pea       @m649d4~1_47.L
00001666  4012      
00001668  4E92      2175          jsr       (A2)
0000166A  584F      2176          addq.w    #4,A7
                    2177   ; printf("\r\nBreak Points :[Disabled]");
0000166C  4879 0000 2178          pea       @m649d4~1_48.L
00001670  4032      
00001672  4E92      2179          jsr       (A2)
00001674  584F      2180          addq.w    #4,A7
                    2181   ; DumpRegisters();
00001676  4EB8 11A6 2182          jsr       _DumpRegisters
                    2183   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000167A  4879 0000 2184          pea       @m649d4~1_49.L
0000167E  404E      
00001680  4E92      2185          jsr       (A2)
00001682  584F      2186          addq.w    #4,A7
                    2187   ; printf("\r\nPress <ESC> to Resume Program");
00001684  4879 0000 2188          pea       @m649d4~1_50.L
00001688  407A      
0000168A  4E92      2189          jsr       (A2)
0000168C  584F      2190          addq.w    #4,A7
                    2191   ; menu();
0000168E  4EB9 0000 2192          jsr       _menu
00001692  223E      
00001694  245F      2193          move.l    (A7)+,A2
00001696  4E75      2194          rts
                    2195   ; }
                    2196   ; void ChangeRegisters(void)
                    2197   ; {
                    2198   _ChangeRegisters:
00001698  4E56 FFFC 2199          link      A6,#-4
0000169C  48E7 303C 2200          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000016A0  45F9 0000 2201          lea       _printf.L,A2
000016A4  324C      
000016A6  47EE FFFC 2202          lea       -4(A6),A3
000016AA  49F8 0CA4 2203          lea       _Get8HexDigits.L,A4
000016AE  4BF8 0B68 2204          lea       __getch.L,A5
                    2205   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2206   ; int reg_val;
                    2207   ; char c, reg[3];
                    2208   ; reg[0] = tolower(_getch());
000016B2  2F00      2209          move.l    D0,-(A7)
000016B4  4E95      2210          jsr       (A5)
000016B6  2200      2211          move.l    D0,D1
000016B8  201F      2212          move.l    (A7)+,D0
000016BA  2F01      2213          move.l    D1,-(A7)
000016BC  4EB9 0000 2214          jsr       _tolower
000016C0  31AA      
000016C2  584F      2215          addq.w    #4,A7
000016C4  1680      2216          move.b    D0,(A3)
                    2217   ; reg[1] = c = tolower(_getch());
000016C6  2F00      2218          move.l    D0,-(A7)
000016C8  4E95      2219          jsr       (A5)
000016CA  2200      2220          move.l    D0,D1
000016CC  201F      2221          move.l    (A7)+,D0
000016CE  2F01      2222          move.l    D1,-(A7)
000016D0  4EB9 0000 2223          jsr       _tolower
000016D4  31AA      
000016D6  584F      2224          addq.w    #4,A7
000016D8  1400      2225          move.b    D0,D2
000016DA  1740 0001 2226          move.b    D0,1(A3)
                    2227   ; if (reg[0] == (char)('d')) {    // change data register
000016DE  1013      2228          move.b    (A3),D0
000016E0  0C00 0064 2229          cmp.b     #100,D0
000016E4  6600 00AE 2230          bne       ChangeRegisters_1
                    2231   ; if ((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000016E8  102B 0001 2232          move.b    1(A3),D0
000016EC  0C00 0037 2233          cmp.b     #55,D0
000016F0  6E0A      2234          bgt.s     ChangeRegisters_5
000016F2  102B 0001 2235          move.b    1(A3),D0
000016F6  0C00 0030 2236          cmp.b     #48,D0
000016FA  6C0E      2237          bge.s     ChangeRegisters_3
                    2238   ChangeRegisters_5:
                    2239   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n");
000016FC  4879 0000 2240          pea       @m649d4~1_51.L
00001700  409A      
00001702  4E92      2241          jsr       (A2)
00001704  584F      2242          addq.w    #4,A7
                    2243   ; return;
00001706  6000 0244 2244          bra       ChangeRegisters_6
                    2245   ChangeRegisters_3:
                    2246   ; }
                    2247   ; else {
                    2248   ; printf("\r\nD%c = ", c);
0000170A  4882      2249          ext.w     D2
0000170C  48C2      2250          ext.l     D2
0000170E  2F02      2251          move.l    D2,-(A7)
00001710  4879 0000 2252          pea       @m649d4~1_52.L
00001714  40C6      
00001716  4E92      2253          jsr       (A2)
00001718  504F      2254          addq.w    #8,A7
                    2255   ; reg_val = Get8HexDigits(0);    // read 32 bit value from user keyboard
0000171A  42A7      2256          clr.l     -(A7)
0000171C  4E94      2257          jsr       (A4)
0000171E  584F      2258          addq.w    #4,A7
00001720  2600      2259          move.l    D0,D3
                    2260   ; }
                    2261   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2262   ; if (c == (char)('0'))
00001722  0C02 0030 2263          cmp.b     #48,D2
00001726  660A      2264          bne.s     ChangeRegisters_7
                    2265   ; d0 = reg_val;
00001728  23C3 0B00 2266          move.l    D3,_d0.L
0000172C  00E4      
0000172E  6000 0060 2267          bra       ChangeRegisters_20
                    2268   ChangeRegisters_7:
                    2269   ; else if (c == (char)('1'))
00001732  0C02 0031 2270          cmp.b     #49,D2
00001736  660A      2271          bne.s     ChangeRegisters_9
                    2272   ; d1 = reg_val;
00001738  23C3 0B00 2273          move.l    D3,_d1.L
0000173C  00E8      
0000173E  6000 0050 2274          bra       ChangeRegisters_20
                    2275   ChangeRegisters_9:
                    2276   ; else if (c == (char)('2'))
00001742  0C02 0032 2277          cmp.b     #50,D2
00001746  660A      2278          bne.s     ChangeRegisters_11
                    2279   ; d2 = reg_val;
00001748  23C3 0B00 2280          move.l    D3,_d2.L
0000174C  00EC      
0000174E  6000 0040 2281          bra       ChangeRegisters_20
                    2282   ChangeRegisters_11:
                    2283   ; else if (c == (char)('3'))
00001752  0C02 0033 2284          cmp.b     #51,D2
00001756  6608      2285          bne.s     ChangeRegisters_13
                    2286   ; d3 = reg_val;
00001758  23C3 0B00 2287          move.l    D3,_d3.L
0000175C  00F0      
0000175E  6030      2288          bra.s     ChangeRegisters_20
                    2289   ChangeRegisters_13:
                    2290   ; else if (c == (char)('4'))
00001760  0C02 0034 2291          cmp.b     #52,D2
00001764  6608      2292          bne.s     ChangeRegisters_15
                    2293   ; d4 = reg_val;
00001766  23C3 0B00 2294          move.l    D3,_d4.L
0000176A  00F4      
0000176C  6022      2295          bra.s     ChangeRegisters_20
                    2296   ChangeRegisters_15:
                    2297   ; else if (c == (char)('5'))
0000176E  0C02 0035 2298          cmp.b     #53,D2
00001772  6608      2299          bne.s     ChangeRegisters_17
                    2300   ; d5 = reg_val;
00001774  23C3 0B00 2301          move.l    D3,_d5.L
00001778  00F8      
0000177A  6014      2302          bra.s     ChangeRegisters_20
                    2303   ChangeRegisters_17:
                    2304   ; else if (c == (char)('6'))
0000177C  0C02 0036 2305          cmp.b     #54,D2
00001780  6608      2306          bne.s     ChangeRegisters_19
                    2307   ; d6 = reg_val;
00001782  23C3 0B00 2308          move.l    D3,_d6.L
00001786  00FC      
00001788  6006      2309          bra.s     ChangeRegisters_20
                    2310   ChangeRegisters_19:
                    2311   ; else
                    2312   ; d7 = reg_val;
0000178A  23C3 0B00 2313          move.l    D3,_d7.L
0000178E  0100      
                    2314   ChangeRegisters_20:
00001790  6000 01B6 2315          bra       ChangeRegisters_51
                    2316   ChangeRegisters_1:
                    2317   ; }
                    2318   ; else if (reg[0] == (char)('a')) {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001794  1013      2319          move.b    (A3),D0
00001796  0C00 0061 2320          cmp.b     #97,D0
0000179A  6600 00A6 2321          bne       ChangeRegisters_21
                    2322   ; if ((c > (char)('7')) || (c < (char)('0'))) {
0000179E  0C02 0037 2323          cmp.b     #55,D2
000017A2  6E06      2324          bgt.s     ChangeRegisters_25
000017A4  0C02 0030 2325          cmp.b     #48,D2
000017A8  6C0E      2326          bge.s     ChangeRegisters_23
                    2327   ChangeRegisters_25:
                    2328   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n");
000017AA  4879 0000 2329          pea       @m649d4~1_53.L
000017AE  40D0      
000017B0  4E92      2330          jsr       (A2)
000017B2  584F      2331          addq.w    #4,A7
                    2332   ; return;
000017B4  6000 0196 2333          bra       ChangeRegisters_6
                    2334   ChangeRegisters_23:
                    2335   ; }
                    2336   ; else {
                    2337   ; printf("\r\nA%c = ", c);
000017B8  4882      2338          ext.w     D2
000017BA  48C2      2339          ext.l     D2
000017BC  2F02      2340          move.l    D2,-(A7)
000017BE  4879 0000 2341          pea       @m649d4~1_54.L
000017C2  40FE      
000017C4  4E92      2342          jsr       (A2)
000017C6  504F      2343          addq.w    #8,A7
                    2344   ; reg_val = Get8HexDigits(0);    // read 32 bit value from user keyboard
000017C8  42A7      2345          clr.l     -(A7)
000017CA  4E94      2346          jsr       (A4)
000017CC  584F      2347          addq.w    #4,A7
000017CE  2600      2348          move.l    D0,D3
                    2349   ; }
                    2350   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2351   ; if (c == (char)('0'))
000017D0  0C02 0030 2352          cmp.b     #48,D2
000017D4  660A      2353          bne.s     ChangeRegisters_26
                    2354   ; a0 = reg_val;
000017D6  23C3 0B00 2355          move.l    D3,_a0.L
000017DA  0104      
000017DC  6000 0060 2356          bra       ChangeRegisters_39
                    2357   ChangeRegisters_26:
                    2358   ; else if (c == (char)('1'))
000017E0  0C02 0031 2359          cmp.b     #49,D2
000017E4  660A      2360          bne.s     ChangeRegisters_28
                    2361   ; a1 = reg_val;
000017E6  23C3 0B00 2362          move.l    D3,_a1.L
000017EA  0108      
000017EC  6000 0050 2363          bra       ChangeRegisters_39
                    2364   ChangeRegisters_28:
                    2365   ; else if (c == (char)('2'))
000017F0  0C02 0032 2366          cmp.b     #50,D2
000017F4  660A      2367          bne.s     ChangeRegisters_30
                    2368   ; a2 = reg_val;
000017F6  23C3 0B00 2369          move.l    D3,_a2.L
000017FA  010C      
000017FC  6000 0040 2370          bra       ChangeRegisters_39
                    2371   ChangeRegisters_30:
                    2372   ; else if (c == (char)('3'))
00001800  0C02 0033 2373          cmp.b     #51,D2
00001804  6608      2374          bne.s     ChangeRegisters_32
                    2375   ; a3 = reg_val;
00001806  23C3 0B00 2376          move.l    D3,_a3.L
0000180A  0110      
0000180C  6030      2377          bra.s     ChangeRegisters_39
                    2378   ChangeRegisters_32:
                    2379   ; else if (c == (char)('4'))
0000180E  0C02 0034 2380          cmp.b     #52,D2
00001812  6608      2381          bne.s     ChangeRegisters_34
                    2382   ; a4 = reg_val;
00001814  23C3 0B00 2383          move.l    D3,_a4.L
00001818  0114      
0000181A  6022      2384          bra.s     ChangeRegisters_39
                    2385   ChangeRegisters_34:
                    2386   ; else if (c == (char)('5'))
0000181C  0C02 0035 2387          cmp.b     #53,D2
00001820  6608      2388          bne.s     ChangeRegisters_36
                    2389   ; a5 = reg_val;
00001822  23C3 0B00 2390          move.l    D3,_a5.L
00001826  0118      
00001828  6014      2391          bra.s     ChangeRegisters_39
                    2392   ChangeRegisters_36:
                    2393   ; else if (c == (char)('6'))
0000182A  0C02 0036 2394          cmp.b     #54,D2
0000182E  6608      2395          bne.s     ChangeRegisters_38
                    2396   ; a6 = reg_val;
00001830  23C3 0B00 2397          move.l    D3,_a6.L
00001834  011C      
00001836  6006      2398          bra.s     ChangeRegisters_39
                    2399   ChangeRegisters_38:
                    2400   ; else
                    2401   ; USP = reg_val;
00001838  23C3 0B00 2402          move.l    D3,_USP.L
0000183C  0128      
                    2403   ChangeRegisters_39:
0000183E  6000 0108 2404          bra       ChangeRegisters_51
                    2405   ChangeRegisters_21:
                    2406   ; }
                    2407   ; else if ((reg[0] == (char)('u')) && (c == (char)('s'))) {
00001842  1013      2408          move.b    (A3),D0
00001844  0C00 0075 2409          cmp.b     #117,D0
00001848  6600 004E 2410          bne       ChangeRegisters_40
0000184C  0C02 0073 2411          cmp.b     #115,D2
00001850  6600 0046 2412          bne       ChangeRegisters_40
                    2413   ; if (tolower(_getch()) == 'p') {    // change user stack pointer
00001854  2F00      2414          move.l    D0,-(A7)
00001856  4E95      2415          jsr       (A5)
00001858  2200      2416          move.l    D0,D1
0000185A  201F      2417          move.l    (A7)+,D0
0000185C  2F01      2418          move.l    D1,-(A7)
0000185E  4EB9 0000 2419          jsr       _tolower
00001862  31AA      
00001864  584F      2420          addq.w    #4,A7
00001866  0C80 0000 2421          cmp.l     #112,D0
0000186A  0070      
0000186C  6618      2422          bne.s     ChangeRegisters_42
                    2423   ; printf("\r\nUser SP = ");
0000186E  4879 0000 2424          pea       @m649d4~1_55.L
00001872  4108      
00001874  4E92      2425          jsr       (A2)
00001876  584F      2426          addq.w    #4,A7
                    2427   ; USP = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001878  42A7      2428          clr.l     -(A7)
0000187A  4E94      2429          jsr       (A4)
0000187C  584F      2430          addq.w    #4,A7
0000187E  23C0 0B00 2431          move.l    D0,_USP.L
00001882  0128      
00001884  600E      2432          bra.s     ChangeRegisters_43
                    2433   ChangeRegisters_42:
                    2434   ; }
                    2435   ; else {
                    2436   ; printf("\r\nIllegal Register....");
00001886  4879 0000 2437          pea       @m649d4~1_56.L
0000188A  4116      
0000188C  4E92      2438          jsr       (A2)
0000188E  584F      2439          addq.w    #4,A7
                    2440   ; return;
00001890  6000 00BA 2441          bra       ChangeRegisters_6
                    2442   ChangeRegisters_43:
00001894  6000 00B2 2443          bra       ChangeRegisters_51
                    2444   ChangeRegisters_40:
                    2445   ; }
                    2446   ; }
                    2447   ; else if ((reg[0] == (char)('s')) && (c == (char)('s'))) {
00001898  1013      2448          move.b    (A3),D0
0000189A  0C00 0073 2449          cmp.b     #115,D0
0000189E  6600 004E 2450          bne       ChangeRegisters_44
000018A2  0C02 0073 2451          cmp.b     #115,D2
000018A6  6600 0046 2452          bne       ChangeRegisters_44
                    2453   ; if (tolower(_getch()) == 'p') {    // change system stack pointer
000018AA  2F00      2454          move.l    D0,-(A7)
000018AC  4E95      2455          jsr       (A5)
000018AE  2200      2456          move.l    D0,D1
000018B0  201F      2457          move.l    (A7)+,D0
000018B2  2F01      2458          move.l    D1,-(A7)
000018B4  4EB9 0000 2459          jsr       _tolower
000018B8  31AA      
000018BA  584F      2460          addq.w    #4,A7
000018BC  0C80 0000 2461          cmp.l     #112,D0
000018C0  0070      
000018C2  6618      2462          bne.s     ChangeRegisters_46
                    2463   ; printf("\r\nSystem SP = ");
000018C4  4879 0000 2464          pea       @m649d4~1_57.L
000018C8  412E      
000018CA  4E92      2465          jsr       (A2)
000018CC  584F      2466          addq.w    #4,A7
                    2467   ; SSP = Get8HexDigits(0);    // read 32 bit value from user keyboard
000018CE  42A7      2468          clr.l     -(A7)
000018D0  4E94      2469          jsr       (A4)
000018D2  584F      2470          addq.w    #4,A7
000018D4  23C0 0B00 2471          move.l    D0,_SSP.L
000018D8  0124      
000018DA  600E      2472          bra.s     ChangeRegisters_47
                    2473   ChangeRegisters_46:
                    2474   ; }
                    2475   ; else {
                    2476   ; printf("\r\nIllegal Register....");
000018DC  4879 0000 2477          pea       @m649d4~1_56.L
000018E0  4116      
000018E2  4E92      2478          jsr       (A2)
000018E4  584F      2479          addq.w    #4,A7
                    2480   ; return;
000018E6  6000 0064 2481          bra       ChangeRegisters_6
                    2482   ChangeRegisters_47:
000018EA  6000 005C 2483          bra       ChangeRegisters_51
                    2484   ChangeRegisters_44:
                    2485   ; }
                    2486   ; }
                    2487   ; else if ((reg[0] == (char)('p')) && (c == (char)('c'))) {    // change program counter
000018EE  1013      2488          move.b    (A3),D0
000018F0  0C00 0070 2489          cmp.b     #112,D0
000018F4  6620      2490          bne.s     ChangeRegisters_48
000018F6  0C02 0063 2491          cmp.b     #99,D2
000018FA  661A      2492          bne.s     ChangeRegisters_48
                    2493   ; printf("\r\nPC = ");
000018FC  4879 0000 2494          pea       @m649d4~1_58.L
00001900  413E      
00001902  4E92      2495          jsr       (A2)
00001904  584F      2496          addq.w    #4,A7
                    2497   ; PC = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001906  42A7      2498          clr.l     -(A7)
00001908  4E94      2499          jsr       (A4)
0000190A  584F      2500          addq.w    #4,A7
0000190C  23C0 0B00 2501          move.l    D0,_PC.L
00001910  0120      
00001912  6000 0034 2502          bra       ChangeRegisters_51
                    2503   ChangeRegisters_48:
                    2504   ; }
                    2505   ; else if ((reg[0] == (char)('s')) && (c == (char)('r'))) {    // change status register
00001916  1013      2506          move.b    (A3),D0
00001918  0C00 0073 2507          cmp.b     #115,D0
0000191C  6620      2508          bne.s     ChangeRegisters_50
0000191E  0C02 0072 2509          cmp.b     #114,D2
00001922  661A      2510          bne.s     ChangeRegisters_50
                    2511   ; printf("\r\nSR = ");
00001924  4879 0000 2512          pea       @m649d4~1_59.L
00001928  4146      
0000192A  4E92      2513          jsr       (A2)
0000192C  584F      2514          addq.w    #4,A7
                    2515   ; SR = Get4HexDigits(0);    // read 16 bit value from user keyboard
0000192E  42A7      2516          clr.l     -(A7)
00001930  4EB8 0C58 2517          jsr       _Get4HexDigits
00001934  584F      2518          addq.w    #4,A7
00001936  33C0 0B00 2519          move.w    D0,_SR.L
0000193A  012C      
0000193C  600A      2520          bra.s     ChangeRegisters_51
                    2521   ChangeRegisters_50:
                    2522   ; }
                    2523   ; else
                    2524   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n");
0000193E  4879 0000 2525          pea       @m649d4~1_60.L
00001942  414E      
00001944  4E92      2526          jsr       (A2)
00001946  584F      2527          addq.w    #4,A7
                    2528   ChangeRegisters_51:
                    2529   ; DumpRegisters();
00001948  4EB8 11A6 2530          jsr       _DumpRegisters
                    2531   ChangeRegisters_6:
0000194C  4CDF 3C0C 2532          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001950  4E5E      2533          unlk      A6
00001952  4E75      2534          rts
                    2535   ; }
                    2536   ; void BreakPointDisplay(void)
                    2537   ; {
                    2538   _BreakPointDisplay:
00001954  48E7 3030 2539          movem.l   D2/D3/A2/A3,-(A7)
00001958  45F9 0000 2540          lea       _printf.L,A2
0000195C  324C      
0000195E  47F9 0B00 2541          lea       _BreakPointAddress.L,A3
00001962  012E      
                    2542   ; int i, BreakPointsSet = 0;
00001964  4283      2543          clr.l     D3
                    2544   ; // any break points  set
                    2545   ; for (i = 0; i < 8; i++) {
00001966  4282      2546          clr.l     D2
                    2547   BreakPointDisplay_1:
00001968  0C82 0000 2548          cmp.l     #8,D2
0000196C  0008      
0000196E  6C1C      2549          bge.s     BreakPointDisplay_3
                    2550   ; if (BreakPointSetOrCleared[i] == 1)
00001970  2002      2551          move.l    D2,D0
00001972  E588      2552          lsl.l     #2,D0
00001974  41F9 0B00 2553          lea       _BreakPointSetOrCleared.L,A0
00001978  015E      
0000197A  2030 0800 2554          move.l    0(A0,D0.L),D0
0000197E  0C80 0000 2555          cmp.l     #1,D0
00001982  0001      
00001984  6602      2556          bne.s     BreakPointDisplay_4
                    2557   ; BreakPointsSet = 1;
00001986  7601      2558          moveq     #1,D3
                    2559   BreakPointDisplay_4:
00001988  5282      2560          addq.l    #1,D2
0000198A  60DC      2561          bra       BreakPointDisplay_1
                    2562   BreakPointDisplay_3:
                    2563   ; }
                    2564   ; if (BreakPointsSet == 1) {
0000198C  0C83 0000 2565          cmp.l     #1,D3
00001990  0001      
00001992  6616      2566          bne.s     BreakPointDisplay_6
                    2567   ; printf("\r\n\r\nNum     Address      Instruction");
00001994  4879 0000 2568          pea       @m649d4~1_61.L
00001998  418A      
0000199A  4E92      2569          jsr       (A2)
0000199C  584F      2570          addq.w    #4,A7
                    2571   ; printf("\r\n---     ---------    -----------");
0000199E  4879 0000 2572          pea       @m649d4~1_62.L
000019A2  41B0      
000019A4  4E92      2573          jsr       (A2)
000019A6  584F      2574          addq.w    #4,A7
000019A8  600A      2575          bra.s     BreakPointDisplay_7
                    2576   BreakPointDisplay_6:
                    2577   ; }
                    2578   ; else
                    2579   ; printf("\r\nNo BreakPoints Set");
000019AA  4879 0000 2580          pea       @m649d4~1_63.L
000019AE  41D4      
000019B0  4E92      2581          jsr       (A2)
000019B2  584F      2582          addq.w    #4,A7
                    2583   BreakPointDisplay_7:
                    2584   ; for (i = 0; i < 8; i++) {
000019B4  4282      2585          clr.l     D2
                    2586   BreakPointDisplay_8:
000019B6  0C82 0000 2587          cmp.l     #8,D2
000019BA  0008      
000019BC  6C00 005A 2588          bge       BreakPointDisplay_10
                    2589   ; // put opcode back, then put break point back
                    2590   ; if (BreakPointSetOrCleared[i] == 1) {
000019C0  2002      2591          move.l    D2,D0
000019C2  E588      2592          lsl.l     #2,D0
000019C4  41F9 0B00 2593          lea       _BreakPointSetOrCleared.L,A0
000019C8  015E      
000019CA  2030 0800 2594          move.l    0(A0,D0.L),D0
000019CE  0C80 0000 2595          cmp.l     #1,D0
000019D2  0001      
000019D4  6600 003E 2596          bne       BreakPointDisplay_11
                    2597   ; *(unsigned short int*)(BreakPointAddress[i]) = BreakPointInstruction[i];
000019D8  2002      2598          move.l    D2,D0
000019DA  E388      2599          lsl.l     #1,D0
000019DC  41F9 0B00 2600          lea       _BreakPointInstruction.L,A0
000019E0  014E      
000019E2  2202      2601          move.l    D2,D1
000019E4  E589      2602          lsl.l     #2,D1
000019E6  2233 1800 2603          move.l    0(A3,D1.L),D1
000019EA  2241      2604          move.l    D1,A1
000019EC  32B0 0800 2605          move.w    0(A0,D0.L),(A1)
                    2606   ; *(unsigned short int*)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e);
000019F0  2002      2607          move.l    D2,D0
000019F2  E588      2608          lsl.l     #2,D0
000019F4  2033 0800 2609          move.l    0(A3,D0.L),D0
000019F8  2040      2610          move.l    D0,A0
000019FA  30BC 4E4E 2611          move.w    #20046,(A0)
                    2612   ; printf("\r\n%3d     $%08x", i, BreakPointAddress[i]);
000019FE  2202      2613          move.l    D2,D1
00001A00  E589      2614          lsl.l     #2,D1
00001A02  2F33 1800 2615          move.l    0(A3,D1.L),-(A7)
00001A06  2F02      2616          move.l    D2,-(A7)
00001A08  4879 0000 2617          pea       @m649d4~1_64.L
00001A0C  41EA      
00001A0E  4E92      2618          jsr       (A2)
00001A10  DEFC 000C 2619          add.w     #12,A7
                    2620   BreakPointDisplay_11:
00001A14  5282      2621          addq.l    #1,D2
00001A16  609E      2622          bra       BreakPointDisplay_8
                    2623   BreakPointDisplay_10:
                    2624   ; }
                    2625   ; }
                    2626   ; printf("\r\n");
00001A18  4879 0000 2627          pea       @m649d4~1_1.L
00001A1C  3B9C      
00001A1E  4E92      2628          jsr       (A2)
00001A20  584F      2629          addq.w    #4,A7
00001A22  4CDF 0C0C 2630          movem.l   (A7)+,D2/D3/A2/A3
00001A26  4E75      2631          rts
                    2632   ; }
                    2633   ; void WatchPointDisplay(void)
                    2634   ; {
                    2635   _WatchPointDisplay:
00001A28  48E7 3020 2636          movem.l   D2/D3/A2,-(A7)
00001A2C  45F9 0000 2637          lea       _printf.L,A2
00001A30  324C      
                    2638   ; int i;
                    2639   ; int WatchPointsSet = 0;
00001A32  4283      2640          clr.l     D3
                    2641   ; // any watchpoints set
                    2642   ; for (i = 0; i < 8; i++) {
00001A34  4282      2643          clr.l     D2
                    2644   WatchPointDisplay_1:
00001A36  0C82 0000 2645          cmp.l     #8,D2
00001A3A  0008      
00001A3C  6C1C      2646          bge.s     WatchPointDisplay_3
                    2647   ; if (WatchPointSetOrCleared[i] == 1)
00001A3E  2002      2648          move.l    D2,D0
00001A40  E588      2649          lsl.l     #2,D0
00001A42  41F9 0B00 2650          lea       _WatchPointSetOrCleared.L,A0
00001A46  01A2      
00001A48  2030 0800 2651          move.l    0(A0,D0.L),D0
00001A4C  0C80 0000 2652          cmp.l     #1,D0
00001A50  0001      
00001A52  6602      2653          bne.s     WatchPointDisplay_4
                    2654   ; WatchPointsSet = 1;
00001A54  7601      2655          moveq     #1,D3
                    2656   WatchPointDisplay_4:
00001A56  5282      2657          addq.l    #1,D2
00001A58  60DC      2658          bra       WatchPointDisplay_1
                    2659   WatchPointDisplay_3:
                    2660   ; }
                    2661   ; if (WatchPointsSet == 1) {
00001A5A  0C83 0000 2662          cmp.l     #1,D3
00001A5E  0001      
00001A60  6616      2663          bne.s     WatchPointDisplay_6
                    2664   ; printf("\r\nNum     Address");
00001A62  4879 0000 2665          pea       @m649d4~1_65.L
00001A66  41FA      
00001A68  4E92      2666          jsr       (A2)
00001A6A  584F      2667          addq.w    #4,A7
                    2668   ; printf("\r\n---     ---------");
00001A6C  4879 0000 2669          pea       @m649d4~1_66.L
00001A70  420C      
00001A72  4E92      2670          jsr       (A2)
00001A74  584F      2671          addq.w    #4,A7
00001A76  600A      2672          bra.s     WatchPointDisplay_7
                    2673   WatchPointDisplay_6:
                    2674   ; }
                    2675   ; else
                    2676   ; printf("\r\nNo WatchPoints Set");
00001A78  4879 0000 2677          pea       @m649d4~1_67.L
00001A7C  4220      
00001A7E  4E92      2678          jsr       (A2)
00001A80  584F      2679          addq.w    #4,A7
                    2680   WatchPointDisplay_7:
                    2681   ; for (i = 0; i < 8; i++) {
00001A82  4282      2682          clr.l     D2
                    2683   WatchPointDisplay_8:
00001A84  0C82 0000 2684          cmp.l     #8,D2
00001A88  0008      
00001A8A  6C00 0038 2685          bge       WatchPointDisplay_10
                    2686   ; if (WatchPointSetOrCleared[i] == 1)
00001A8E  2002      2687          move.l    D2,D0
00001A90  E588      2688          lsl.l     #2,D0
00001A92  41F9 0B00 2689          lea       _WatchPointSetOrCleared.L,A0
00001A96  01A2      
00001A98  2030 0800 2690          move.l    0(A0,D0.L),D0
00001A9C  0C80 0000 2691          cmp.l     #1,D0
00001AA0  0001      
00001AA2  661C      2692          bne.s     WatchPointDisplay_11
                    2693   ; printf("\r\n%3d     $%08x", i, WatchPointAddress[i]);
00001AA4  2202      2694          move.l    D2,D1
00001AA6  E589      2695          lsl.l     #2,D1
00001AA8  41F9 0B00 2696          lea       _WatchPointAddress.L,A0
00001AAC  0182      
00001AAE  2F30 1800 2697          move.l    0(A0,D1.L),-(A7)
00001AB2  2F02      2698          move.l    D2,-(A7)
00001AB4  4879 0000 2699          pea       @m649d4~1_64.L
00001AB8  41EA      
00001ABA  4E92      2700          jsr       (A2)
00001ABC  DEFC 000C 2701          add.w     #12,A7
                    2702   WatchPointDisplay_11:
00001AC0  5282      2703          addq.l    #1,D2
00001AC2  60C0      2704          bra       WatchPointDisplay_8
                    2705   WatchPointDisplay_10:
                    2706   ; }
                    2707   ; printf("\r\n");
00001AC4  4879 0000 2708          pea       @m649d4~1_1.L
00001AC8  3B9C      
00001ACA  4E92      2709          jsr       (A2)
00001ACC  584F      2710          addq.w    #4,A7
00001ACE  4CDF 040C 2711          movem.l   (A7)+,D2/D3/A2
00001AD2  4E75      2712          rts
                    2713   ; }
                    2714   ; void BreakPointClear(void)
                    2715   ; {
                    2716   _BreakPointClear:
00001AD4  4E56 FFFC 2717          link      A6,#-4
00001AD8  48E7 2020 2718          movem.l   D2/A2,-(A7)
00001ADC  45F9 0000 2719          lea       _printf.L,A2
00001AE0  324C      
                    2720   ; unsigned int i;
                    2721   ; volatile unsigned short int* ProgramBreakPointAddress;
                    2722   ; BreakPointDisplay();
00001AE2  4EB8 1954 2723          jsr       _BreakPointDisplay
                    2724   ; printf("\r\nEnter Break Point Number: ");
00001AE6  4879 0000 2725          pea       @m649d4~1_68.L
00001AEA  4236      
00001AEC  4E92      2726          jsr       (A2)
00001AEE  584F      2727          addq.w    #4,A7
                    2728   ; i = xtod(_getch());           // get break pointer number
00001AF0  2F00      2729          move.l    D0,-(A7)
00001AF2  4EB8 0B68 2730          jsr       __getch
00001AF6  2200      2731          move.l    D0,D1
00001AF8  201F      2732          move.l    (A7)+,D0
00001AFA  2F01      2733          move.l    D1,-(A7)
00001AFC  4EB8 0BD2 2734          jsr       _xtod
00001B00  584F      2735          addq.w    #4,A7
00001B02  C0BC 0000 2736          and.l     #255,D0
00001B06  00FF      
00001B08  2400      2737          move.l    D0,D2
                    2738   ; if ((i < 0) || (i > 7)) {
00001B0A  0C82 0000 2739          cmp.l     #0,D2
00001B0E  0000      
00001B10  6508      2740          blo.s     BreakPointClear_3
00001B12  0C82 0000 2741          cmp.l     #7,D2
00001B16  0007      
00001B18  630E      2742          bls.s     BreakPointClear_1
                    2743   BreakPointClear_3:
                    2744   ; printf("\r\nIllegal Range : Use 0 - 7");
00001B1A  4879 0000 2745          pea       @m649d4~1_69.L
00001B1E  4254      
00001B20  4E92      2746          jsr       (A2)
00001B22  584F      2747          addq.w    #4,A7
                    2748   ; return;
00001B24  6000 0080 2749          bra       BreakPointClear_4
                    2750   BreakPointClear_1:
                    2751   ; }
                    2752   ; if (BreakPointSetOrCleared[i] == 1) {       // if break point set
00001B28  2002      2753          move.l    D2,D0
00001B2A  E588      2754          lsl.l     #2,D0
00001B2C  41F9 0B00 2755          lea       _BreakPointSetOrCleared.L,A0
00001B30  015E      
00001B32  2030 0800 2756          move.l    0(A0,D0.L),D0
00001B36  0C80 0000 2757          cmp.l     #1,D0
00001B3A  0001      
00001B3C  6600 005A 2758          bne       BreakPointClear_5
                    2759   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program we are about to change
00001B40  2002      2760          move.l    D2,D0
00001B42  E588      2761          lsl.l     #2,D0
00001B44  41F9 0B00 2762          lea       _BreakPointAddress.L,A0
00001B48  012E      
00001B4A  2D70 0800 2763          move.l    0(A0,D0.L),-4(A6)
00001B4E  FFFC      
                    2764   ; BreakPointAddress[i] = 0;
00001B50  2002      2765          move.l    D2,D0
00001B52  E588      2766          lsl.l     #2,D0
00001B54  41F9 0B00 2767          lea       _BreakPointAddress.L,A0
00001B58  012E      
00001B5A  42B0 0800 2768          clr.l     0(A0,D0.L)
                    2769   ; BreakPointSetOrCleared[i] = 0;
00001B5E  2002      2770          move.l    D2,D0
00001B60  E588      2771          lsl.l     #2,D0
00001B62  41F9 0B00 2772          lea       _BreakPointSetOrCleared.L,A0
00001B66  015E      
00001B68  42B0 0800 2773          clr.l     0(A0,D0.L)
                    2774   ; *ProgramBreakPointAddress = BreakPointInstruction[i];  // put original instruction back
00001B6C  2002      2775          move.l    D2,D0
00001B6E  E388      2776          lsl.l     #1,D0
00001B70  41F9 0B00 2777          lea       _BreakPointInstruction.L,A0
00001B74  014E      
00001B76  226E FFFC 2778          move.l    -4(A6),A1
00001B7A  32B0 0800 2779          move.w    0(A0,D0.L),(A1)
                    2780   ; BreakPointInstruction[i] = 0;
00001B7E  2002      2781          move.l    D2,D0
00001B80  E388      2782          lsl.l     #1,D0
00001B82  41F9 0B00 2783          lea       _BreakPointInstruction.L,A0
00001B86  014E      
00001B88  4270 0800 2784          clr.w     0(A0,D0.L)
                    2785   ; printf("\r\nBreak Point Cleared.....\r\n");
00001B8C  4879 0000 2786          pea       @m649d4~1_70.L
00001B90  4270      
00001B92  4E92      2787          jsr       (A2)
00001B94  584F      2788          addq.w    #4,A7
00001B96  600A      2789          bra.s     BreakPointClear_6
                    2790   BreakPointClear_5:
                    2791   ; }
                    2792   ; else
                    2793   ; printf("\r\nBreak Point wasn't Set.....");
00001B98  4879 0000 2794          pea       @m649d4~1_71.L
00001B9C  428E      
00001B9E  4E92      2795          jsr       (A2)
00001BA0  584F      2796          addq.w    #4,A7
                    2797   BreakPointClear_6:
                    2798   ; BreakPointDisplay();
00001BA2  4EB8 1954 2799          jsr       _BreakPointDisplay
                    2800   ; return;
                    2801   BreakPointClear_4:
00001BA6  4CDF 0404 2802          movem.l   (A7)+,D2/A2
00001BAA  4E5E      2803          unlk      A6
00001BAC  4E75      2804          rts
                    2805   ; }
                    2806   ; void WatchPointClear(void)
                    2807   ; {
                    2808   _WatchPointClear:
00001BAE  48E7 2020 2809          movem.l   D2/A2,-(A7)
00001BB2  45F9 0000 2810          lea       _printf.L,A2
00001BB6  324C      
                    2811   ; unsigned int i;
                    2812   ; WatchPointDisplay();
00001BB8  4EB8 1A28 2813          jsr       _WatchPointDisplay
                    2814   ; printf("\r\nEnter Watch Point Number: ");
00001BBC  4879 0000 2815          pea       @m649d4~1_72.L
00001BC0  42AC      
00001BC2  4E92      2816          jsr       (A2)
00001BC4  584F      2817          addq.w    #4,A7
                    2818   ; i = xtod(_getch());           // get watch pointer number
00001BC6  2F00      2819          move.l    D0,-(A7)
00001BC8  4EB8 0B68 2820          jsr       __getch
00001BCC  2200      2821          move.l    D0,D1
00001BCE  201F      2822          move.l    (A7)+,D0
00001BD0  2F01      2823          move.l    D1,-(A7)
00001BD2  4EB8 0BD2 2824          jsr       _xtod
00001BD6  584F      2825          addq.w    #4,A7
00001BD8  C0BC 0000 2826          and.l     #255,D0
00001BDC  00FF      
00001BDE  2400      2827          move.l    D0,D2
                    2828   ; if ((i < 0) || (i > 7)) {
00001BE0  0C82 0000 2829          cmp.l     #0,D2
00001BE4  0000      
00001BE6  6508      2830          blo.s     WatchPointClear_3
00001BE8  0C82 0000 2831          cmp.l     #7,D2
00001BEC  0007      
00001BEE  630E      2832          bls.s     WatchPointClear_1
                    2833   WatchPointClear_3:
                    2834   ; printf("\r\nIllegal Range : Use 0 - 7");
00001BF0  4879 0000 2835          pea       @m649d4~1_69.L
00001BF4  4254      
00001BF6  4E92      2836          jsr       (A2)
00001BF8  584F      2837          addq.w    #4,A7
                    2838   ; return;
00001BFA  6000 004E 2839          bra       WatchPointClear_4
                    2840   WatchPointClear_1:
                    2841   ; }
                    2842   ; if (WatchPointSetOrCleared[i] == 1) {       // if watch point set
00001BFE  2002      2843          move.l    D2,D0
00001C00  E588      2844          lsl.l     #2,D0
00001C02  41F9 0B00 2845          lea       _WatchPointSetOrCleared.L,A0
00001C06  01A2      
00001C08  2030 0800 2846          move.l    0(A0,D0.L),D0
00001C0C  0C80 0000 2847          cmp.l     #1,D0
00001C10  0001      
00001C12  6628      2848          bne.s     WatchPointClear_5
                    2849   ; WatchPointAddress[i] = 0;
00001C14  2002      2850          move.l    D2,D0
00001C16  E588      2851          lsl.l     #2,D0
00001C18  41F9 0B00 2852          lea       _WatchPointAddress.L,A0
00001C1C  0182      
00001C1E  42B0 0800 2853          clr.l     0(A0,D0.L)
                    2854   ; WatchPointSetOrCleared[i] = 0;
00001C22  2002      2855          move.l    D2,D0
00001C24  E588      2856          lsl.l     #2,D0
00001C26  41F9 0B00 2857          lea       _WatchPointSetOrCleared.L,A0
00001C2A  01A2      
00001C2C  42B0 0800 2858          clr.l     0(A0,D0.L)
                    2859   ; printf("\r\nWatch Point Cleared.....\r\n");
00001C30  4879 0000 2860          pea       @m649d4~1_73.L
00001C34  42CA      
00001C36  4E92      2861          jsr       (A2)
00001C38  584F      2862          addq.w    #4,A7
00001C3A  600A      2863          bra.s     WatchPointClear_6
                    2864   WatchPointClear_5:
                    2865   ; }
                    2866   ; else
                    2867   ; printf("\r\nWatch Point Was not Set.....");
00001C3C  4879 0000 2868          pea       @m649d4~1_74.L
00001C40  42E8      
00001C42  4E92      2869          jsr       (A2)
00001C44  584F      2870          addq.w    #4,A7
                    2871   WatchPointClear_6:
                    2872   ; WatchPointDisplay();
00001C46  4EB8 1A28 2873          jsr       _WatchPointDisplay
                    2874   ; return;
                    2875   WatchPointClear_4:
00001C4A  4CDF 0404 2876          movem.l   (A7)+,D2/A2
00001C4E  4E75      2877          rts
                    2878   ; }
                    2879   ; void DisableBreakPoints(void)
                    2880   ; {
                    2881   _DisableBreakPoints:
00001C50  4E56 FFFC 2882          link      A6,#-4
00001C54  2F02      2883          move.l    D2,-(A7)
                    2884   ; int i;
                    2885   ; volatile unsigned short int* ProgramBreakPointAddress;
                    2886   ; for (i = 0; i < 8; i++) {
00001C56  4282      2887          clr.l     D2
                    2888   DisableBreakPoints_1:
00001C58  0C82 0000 2889          cmp.l     #8,D2
00001C5C  0008      
00001C5E  6C00 003E 2890          bge       DisableBreakPoints_3
                    2891   ; if (BreakPointSetOrCleared[i] == 1) {                                                    // if break point set
00001C62  2002      2892          move.l    D2,D0
00001C64  E588      2893          lsl.l     #2,D0
00001C66  41F9 0B00 2894          lea       _BreakPointSetOrCleared.L,A0
00001C6A  015E      
00001C6C  2030 0800 2895          move.l    0(A0,D0.L),D0
00001C70  0C80 0000 2896          cmp.l     #1,D0
00001C74  0001      
00001C76  6622      2897          bne.s     DisableBreakPoints_4
                    2898   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
00001C78  2002      2899          move.l    D2,D0
00001C7A  E588      2900          lsl.l     #2,D0
00001C7C  41F9 0B00 2901          lea       _BreakPointAddress.L,A0
00001C80  012E      
00001C82  2D70 0800 2902          move.l    0(A0,D0.L),-4(A6)
00001C86  FFFC      
                    2903   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001C88  2002      2904          move.l    D2,D0
00001C8A  E388      2905          lsl.l     #1,D0
00001C8C  41F9 0B00 2906          lea       _BreakPointInstruction.L,A0
00001C90  014E      
00001C92  226E FFFC 2907          move.l    -4(A6),A1
00001C96  32B0 0800 2908          move.w    0(A0,D0.L),(A1)
                    2909   DisableBreakPoints_4:
00001C9A  5282      2910          addq.l    #1,D2
00001C9C  60BA      2911          bra       DisableBreakPoints_1
                    2912   DisableBreakPoints_3:
00001C9E  241F      2913          move.l    (A7)+,D2
00001CA0  4E5E      2914          unlk      A6
00001CA2  4E75      2915          rts
                    2916   ; }
                    2917   ; }
                    2918   ; }
                    2919   ; void EnableBreakPoints(void)
                    2920   ; {
                    2921   _EnableBreakPoints:
00001CA4  4E56 FFFC 2922          link      A6,#-4
00001CA8  2F02      2923          move.l    D2,-(A7)
                    2924   ; int i;
                    2925   ; volatile unsigned short int* ProgramBreakPointAddress;
                    2926   ; for (i = 0; i < 8; i++) {
00001CAA  4282      2927          clr.l     D2
                    2928   EnableBreakPoints_1:
00001CAC  0C82 0000 2929          cmp.l     #8,D2
00001CB0  0008      
00001CB2  6C32      2930          bge.s     EnableBreakPoints_3
                    2931   ; if (BreakPointSetOrCleared[i] == 1) {                                                     // if break point set
00001CB4  2002      2932          move.l    D2,D0
00001CB6  E588      2933          lsl.l     #2,D0
00001CB8  41F9 0B00 2934          lea       _BreakPointSetOrCleared.L,A0
00001CBC  015E      
00001CBE  2030 0800 2935          move.l    0(A0,D0.L),D0
00001CC2  0C80 0000 2936          cmp.l     #1,D0
00001CC6  0001      
00001CC8  6618      2937          bne.s     EnableBreakPoints_4
                    2938   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
00001CCA  2002      2939          move.l    D2,D0
00001CCC  E588      2940          lsl.l     #2,D0
00001CCE  41F9 0B00 2941          lea       _BreakPointAddress.L,A0
00001CD2  012E      
00001CD4  2D70 0800 2942          move.l    0(A0,D0.L),-4(A6)
00001CD8  FFFC      
                    2943   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001CDA  206E FFFC 2944          move.l    -4(A6),A0
00001CDE  30BC 4E4E 2945          move.w    #20046,(A0)
                    2946   EnableBreakPoints_4:
00001CE2  5282      2947          addq.l    #1,D2
00001CE4  60C6      2948          bra       EnableBreakPoints_1
                    2949   EnableBreakPoints_3:
00001CE6  241F      2950          move.l    (A7)+,D2
00001CE8  4E5E      2951          unlk      A6
00001CEA  4E75      2952          rts
                    2953   ; }
                    2954   ; }
                    2955   ; }
                    2956   ; void KillAllBreakPoints(void)
                    2957   ; {
                    2958   _KillAllBreakPoints:
00001CEC  4E56 FFFC 2959          link      A6,#-4
00001CF0  2F02      2960          move.l    D2,-(A7)
                    2961   ; int i;
                    2962   ; volatile unsigned short int* ProgramBreakPointAddress;
                    2963   ; for (i = 0; i < 8; i++) {
00001CF2  4282      2964          clr.l     D2
                    2965   KillAllBreakPoints_1:
00001CF4  0C82 0000 2966          cmp.l     #8,D2
00001CF8  0008      
00001CFA  6C00 0052 2967          bge       KillAllBreakPoints_3
                    2968   ; // clear BP
                    2969   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
00001CFE  2002      2970          move.l    D2,D0
00001D00  E588      2971          lsl.l     #2,D0
00001D02  41F9 0B00 2972          lea       _BreakPointAddress.L,A0
00001D06  012E      
00001D08  2D70 0800 2973          move.l    0(A0,D0.L),-4(A6)
00001D0C  FFFC      
                    2974   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001D0E  2002      2975          move.l    D2,D0
00001D10  E388      2976          lsl.l     #1,D0
00001D12  41F9 0B00 2977          lea       _BreakPointInstruction.L,A0
00001D16  014E      
00001D18  226E FFFC 2978          move.l    -4(A6),A1
00001D1C  32B0 0800 2979          move.w    0(A0,D0.L),(A1)
                    2980   ; BreakPointAddress[i] = 0;                                                             // set BP address to NULL
00001D20  2002      2981          move.l    D2,D0
00001D22  E588      2982          lsl.l     #2,D0
00001D24  41F9 0B00 2983          lea       _BreakPointAddress.L,A0
00001D28  012E      
00001D2A  42B0 0800 2984          clr.l     0(A0,D0.L)
                    2985   ; BreakPointInstruction[i] = 0;
00001D2E  2002      2986          move.l    D2,D0
00001D30  E388      2987          lsl.l     #1,D0
00001D32  41F9 0B00 2988          lea       _BreakPointInstruction.L,A0
00001D36  014E      
00001D38  4270 0800 2989          clr.w     0(A0,D0.L)
                    2990   ; BreakPointSetOrCleared[i] = 0;                                                        // mark break point as cleared for future setting
00001D3C  2002      2991          move.l    D2,D0
00001D3E  E588      2992          lsl.l     #2,D0
00001D40  41F9 0B00 2993          lea       _BreakPointSetOrCleared.L,A0
00001D44  015E      
00001D46  42B0 0800 2994          clr.l     0(A0,D0.L)
00001D4A  5282      2995          addq.l    #1,D2
00001D4C  60A6      2996          bra       KillAllBreakPoints_1
                    2997   KillAllBreakPoints_3:
00001D4E  241F      2998          move.l    (A7)+,D2
00001D50  4E5E      2999          unlk      A6
00001D52  4E75      3000          rts
                    3001   ; }
                    3002   ; //BreakPointDisplay() ;       // display the break points
                    3003   ; }
                    3004   ; void KillAllWatchPoints(void)
                    3005   ; {
                    3006   _KillAllWatchPoints:
00001D54  2F02      3007          move.l    D2,-(A7)
                    3008   ; int i;
                    3009   ; for (i = 0; i < 8; i++) {
00001D56  4282      3010          clr.l     D2
                    3011   KillAllWatchPoints_1:
00001D58  0C82 0000 3012          cmp.l     #8,D2
00001D5C  0008      
00001D5E  6C20      3013          bge.s     KillAllWatchPoints_3
                    3014   ; WatchPointAddress[i] = 0;                                                             // set BP address to NULL
00001D60  2002      3015          move.l    D2,D0
00001D62  E588      3016          lsl.l     #2,D0
00001D64  41F9 0B00 3017          lea       _WatchPointAddress.L,A0
00001D68  0182      
00001D6A  42B0 0800 3018          clr.l     0(A0,D0.L)
                    3019   ; WatchPointSetOrCleared[i] = 0;                                                        // mark break point as cleared for future setting
00001D6E  2002      3020          move.l    D2,D0
00001D70  E588      3021          lsl.l     #2,D0
00001D72  41F9 0B00 3022          lea       _WatchPointSetOrCleared.L,A0
00001D76  01A2      
00001D78  42B0 0800 3023          clr.l     0(A0,D0.L)
00001D7C  5282      3024          addq.l    #1,D2
00001D7E  60D8      3025          bra       KillAllWatchPoints_1
                    3026   KillAllWatchPoints_3:
00001D80  241F      3027          move.l    (A7)+,D2
00001D82  4E75      3028          rts
                    3029   ; }
                    3030   ; //WatchPointDisplay() ;       // display the break points
                    3031   ; }
                    3032   ; void SetBreakPoint(void)
                    3033   ; {
                    3034   _SetBreakPoint:
00001D84  4E56 FFFC 3035          link      A6,#-4
00001D88  48E7 3830 3036          movem.l   D2/D3/D4/A2/A3,-(A7)
00001D8C  45F9 0000 3037          lea       _printf.L,A2
00001D90  324C      
00001D92  47F9 0B00 3038          lea       _BreakPointSetOrCleared.L,A3
00001D96  015E      
                    3039   ; int i;
                    3040   ; int BPNumber;
                    3041   ; int BPAddress;
                    3042   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3043   ; // see if any free break points
                    3044   ; for (i = 0; i < 8; i++) {
00001D98  4282      3045          clr.l     D2
                    3046   SetBreakPoint_1:
00001D9A  0C82 0000 3047          cmp.l     #8,D2
00001D9E  0008      
00001DA0  6C10      3048          bge.s     SetBreakPoint_3
                    3049   ; if (BreakPointSetOrCleared[i] == 0)
00001DA2  2002      3050          move.l    D2,D0
00001DA4  E588      3051          lsl.l     #2,D0
00001DA6  2033 0800 3052          move.l    0(A3,D0.L),D0
00001DAA  6602      3053          bne.s     SetBreakPoint_4
                    3054   ; break;         // if spare BP found allow user to set it
00001DAC  6004      3055          bra.s     SetBreakPoint_3
                    3056   SetBreakPoint_4:
00001DAE  5282      3057          addq.l    #1,D2
00001DB0  60E8      3058          bra       SetBreakPoint_1
                    3059   SetBreakPoint_3:
                    3060   ; }
                    3061   ; if (i == 8) {
00001DB2  0C82 0000 3062          cmp.l     #8,D2
00001DB6  0008      
00001DB8  660E      3063          bne.s     SetBreakPoint_6
                    3064   ; printf("\r\nNo FREE Break Points.....");
00001DBA  4879 0000 3065          pea       @m649d4~1_75.L
00001DBE  4308      
00001DC0  4E92      3066          jsr       (A2)
00001DC2  584F      3067          addq.w    #4,A7
                    3068   ; return;
00001DC4  6000 00D6 3069          bra       SetBreakPoint_15
                    3070   SetBreakPoint_6:
                    3071   ; }
                    3072   ; printf("\r\nBreak Point Address: ");
00001DC8  4879 0000 3073          pea       @m649d4~1_76.L
00001DCC  4324      
00001DCE  4E92      3074          jsr       (A2)
00001DD0  584F      3075          addq.w    #4,A7
                    3076   ; BPAddress = Get8HexDigits(0);
00001DD2  42A7      3077          clr.l     -(A7)
00001DD4  4EB8 0CA4 3078          jsr       _Get8HexDigits
00001DD8  584F      3079          addq.w    #4,A7
00001DDA  2600      3080          move.l    D0,D3
                    3081   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BPAddress);     // point to the instruction in the user program we are about to change
00001DDC  2803      3082          move.l    D3,D4
                    3083   ; if ((BPAddress & 0x00000001) == 0x00000001) {   // cannot set BP at an odd address
00001DDE  2003      3084          move.l    D3,D0
00001DE0  C0BC 0000 3085          and.l     #1,D0
00001DE4  0001      
00001DE6  0C80 0000 3086          cmp.l     #1,D0
00001DEA  0001      
00001DEC  660E      3087          bne.s     SetBreakPoint_9
                    3088   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses");
00001DEE  4879 0000 3089          pea       @m649d4~1_77.L
00001DF2  433C      
00001DF4  4E92      3090          jsr       (A2)
00001DF6  584F      3091          addq.w    #4,A7
                    3092   ; return;
00001DF8  6000 00A2 3093          bra       SetBreakPoint_15
                    3094   SetBreakPoint_9:
                    3095   ; }
                    3096   ; if (BPAddress < 0x00008000) {   // cannot set BP in ROM
00001DFC  0C83 0000 3097          cmp.l     #32768,D3
00001E00  8000      
00001E02  640E      3098          bhs.s     SetBreakPoint_11
                    3099   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]");
00001E04  4879 0000 3100          pea       @m649d4~1_78.L
00001E08  4372      
00001E0A  4E92      3101          jsr       (A2)
00001E0C  584F      3102          addq.w    #4,A7
                    3103   ; return;
00001E0E  6000 008C 3104          bra       SetBreakPoint_15
                    3105   SetBreakPoint_11:
                    3106   ; }
                    3107   ; // search for first free bp or existing same BP
                    3108   ; for (i = 0; i < 8; i++) {
00001E12  4282      3109          clr.l     D2
                    3110   SetBreakPoint_13:
00001E14  0C82 0000 3111          cmp.l     #8,D2
00001E18  0008      
00001E1A  6C00 0080 3112          bge       SetBreakPoint_15
                    3113   ; if (BreakPointAddress[i] == BPAddress) {
00001E1E  2002      3114          move.l    D2,D0
00001E20  E588      3115          lsl.l     #2,D0
00001E22  41F9 0B00 3116          lea       _BreakPointAddress.L,A0
00001E26  012E      
00001E28  B6B0 0800 3117          cmp.l     0(A0,D0.L),D3
00001E2C  6610      3118          bne.s     SetBreakPoint_16
                    3119   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress);
00001E2E  2F03      3120          move.l    D3,-(A7)
00001E30  4879 0000 3121          pea       @m649d4~1_79.L
00001E34  43BA      
00001E36  4E92      3122          jsr       (A2)
00001E38  504F      3123          addq.w    #8,A7
                    3124   ; return;
00001E3A  6000 0060 3125          bra       SetBreakPoint_15
                    3126   SetBreakPoint_16:
                    3127   ; }
                    3128   ; if (BreakPointSetOrCleared[i] == 0) {
00001E3E  2002      3129          move.l    D2,D0
00001E40  E588      3130          lsl.l     #2,D0
00001E42  2033 0800 3131          move.l    0(A3,D0.L),D0
00001E46  6600 004E 3132          bne       SetBreakPoint_18
                    3133   ; // set BP here
                    3134   ; BreakPointSetOrCleared[i] = 1;                                 // mark this breakpoint as set
00001E4A  2002      3135          move.l    D2,D0
00001E4C  E588      3136          lsl.l     #2,D0
00001E4E  27BC 0000 3137          move.l    #1,0(A3,D0.L)
00001E52  0001 0800 
                    3138   ; BreakPointInstruction[i] = *ProgramBreakPointAddress;          // copy the user program instruction here so we can put it back afterwards
00001E56  2044      3139          move.l    D4,A0
00001E58  2002      3140          move.l    D2,D0
00001E5A  E388      3141          lsl.l     #1,D0
00001E5C  43F9 0B00 3142          lea       _BreakPointInstruction.L,A1
00001E60  014E      
00001E62  3390 0800 3143          move.w    (A0),0(A1,D0.L)
                    3144   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress);
00001E66  2F04      3145          move.l    D4,-(A7)
00001E68  4879 0000 3146          pea       @m649d4~1_80.L
00001E6C  43F2      
00001E6E  4E92      3147          jsr       (A2)
00001E70  504F      3148          addq.w    #8,A7
                    3149   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);   // put a Trap14 instruction at the user specified address
00001E72  2044      3150          move.l    D4,A0
00001E74  30BC 4E4E 3151          move.w    #20046,(A0)
                    3152   ; BreakPointAddress[i] = BPAddress;                              // record the address of this break point in the debugger
00001E78  2002      3153          move.l    D2,D0
00001E7A  E588      3154          lsl.l     #2,D0
00001E7C  41F9 0B00 3155          lea       _BreakPointAddress.L,A0
00001E80  012E      
00001E82  2183 0800 3156          move.l    D3,0(A0,D0.L)
                    3157   ; printf("\r\n");
00001E86  4879 0000 3158          pea       @m649d4~1_1.L
00001E8A  3B9C      
00001E8C  4E92      3159          jsr       (A2)
00001E8E  584F      3160          addq.w    #4,A7
                    3161   ; BreakPointDisplay();       // display the break points
00001E90  4EB8 1954 3162          jsr       _BreakPointDisplay
                    3163   ; return;
00001E94  6006      3164          bra.s     SetBreakPoint_15
                    3165   SetBreakPoint_18:
00001E96  5282      3166          addq.l    #1,D2
00001E98  6000 FF7A 3167          bra       SetBreakPoint_13
                    3168   SetBreakPoint_15:
00001E9C  4CDF 0C1C 3169          movem.l   (A7)+,D2/D3/D4/A2/A3
00001EA0  4E5E      3170          unlk      A6
00001EA2  4E75      3171          rts
                    3172   ; }
                    3173   ; }
                    3174   ; }
                    3175   ; void SetWatchPoint(void)
                    3176   ; {
                    3177   _SetWatchPoint:
00001EA4  4E56 FFF8 3178          link      A6,#-8
00001EA8  48E7 3030 3179          movem.l   D2/D3/A2/A3,-(A7)
00001EAC  45F9 0000 3180          lea       _printf.L,A2
00001EB0  324C      
00001EB2  47F9 0B00 3181          lea       _WatchPointSetOrCleared.L,A3
00001EB6  01A2      
                    3182   ; int i;
                    3183   ; int WPNumber;
                    3184   ; int WPAddress;
                    3185   ; volatile unsigned short int* ProgramWatchPointAddress;
                    3186   ; // see if any free break points
                    3187   ; for (i = 0; i < 8; i++) {
00001EB8  4282      3188          clr.l     D2
                    3189   SetWatchPoint_1:
00001EBA  0C82 0000 3190          cmp.l     #8,D2
00001EBE  0008      
00001EC0  6C10      3191          bge.s     SetWatchPoint_3
                    3192   ; if (WatchPointSetOrCleared[i] == 0)
00001EC2  2002      3193          move.l    D2,D0
00001EC4  E588      3194          lsl.l     #2,D0
00001EC6  2033 0800 3195          move.l    0(A3,D0.L),D0
00001ECA  6602      3196          bne.s     SetWatchPoint_4
                    3197   ; break;         // if spare WP found allow user to set it
00001ECC  6004      3198          bra.s     SetWatchPoint_3
                    3199   SetWatchPoint_4:
00001ECE  5282      3200          addq.l    #1,D2
00001ED0  60E8      3201          bra       SetWatchPoint_1
                    3202   SetWatchPoint_3:
                    3203   ; }
                    3204   ; if (i == 8) {
00001ED2  0C82 0000 3205          cmp.l     #8,D2
00001ED6  0008      
00001ED8  660E      3206          bne.s     SetWatchPoint_6
                    3207   ; printf("\r\nNo FREE Watch Points.....");
00001EDA  4879 0000 3208          pea       @m649d4~1_81.L
00001EDE  4418      
00001EE0  4E92      3209          jsr       (A2)
00001EE2  584F      3210          addq.w    #4,A7
                    3211   ; return;
00001EE4  6000 008C 3212          bra       SetWatchPoint_11
                    3213   SetWatchPoint_6:
                    3214   ; }
                    3215   ; printf("\r\nWatch Point Address: ");
00001EE8  4879 0000 3216          pea       @m649d4~1_82.L
00001EEC  4434      
00001EEE  4E92      3217          jsr       (A2)
00001EF0  584F      3218          addq.w    #4,A7
                    3219   ; WPAddress = Get8HexDigits(0);
00001EF2  42A7      3220          clr.l     -(A7)
00001EF4  4EB8 0CA4 3221          jsr       _Get8HexDigits
00001EF8  584F      3222          addq.w    #4,A7
00001EFA  2600      3223          move.l    D0,D3
                    3224   ; // search for first free wp or existing same wp
                    3225   ; for (i = 0; i < 8; i++) {
00001EFC  4282      3226          clr.l     D2
                    3227   SetWatchPoint_9:
00001EFE  0C82 0000 3228          cmp.l     #8,D2
00001F02  0008      
00001F04  6C00 006C 3229          bge       SetWatchPoint_11
                    3230   ; if (WatchPointAddress[i] == WPAddress && WPAddress != 0) {     //so we can set a wp at 0
00001F08  2002      3231          move.l    D2,D0
00001F0A  E588      3232          lsl.l     #2,D0
00001F0C  41F9 0B00 3233          lea       _WatchPointAddress.L,A0
00001F10  0182      
00001F12  B6B0 0800 3234          cmp.l     0(A0,D0.L),D3
00001F16  6614      3235          bne.s     SetWatchPoint_12
00001F18  4A83      3236          tst.l     D3
00001F1A  6710      3237          beq.s     SetWatchPoint_12
                    3238   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress);
00001F1C  2F03      3239          move.l    D3,-(A7)
00001F1E  4879 0000 3240          pea       @m649d4~1_83.L
00001F22  444C      
00001F24  4E92      3241          jsr       (A2)
00001F26  504F      3242          addq.w    #8,A7
                    3243   ; return;
00001F28  6000 0048 3244          bra       SetWatchPoint_11
                    3245   SetWatchPoint_12:
                    3246   ; }
                    3247   ; if (WatchPointSetOrCleared[i] == 0) {
00001F2C  2002      3248          move.l    D2,D0
00001F2E  E588      3249          lsl.l     #2,D0
00001F30  2033 0800 3250          move.l    0(A3,D0.L),D0
00001F34  6600 0038 3251          bne       SetWatchPoint_14
                    3252   ; WatchPointSetOrCleared[i] = 1;                                 // mark this watchpoint as set
00001F38  2002      3253          move.l    D2,D0
00001F3A  E588      3254          lsl.l     #2,D0
00001F3C  27BC 0000 3255          move.l    #1,0(A3,D0.L)
00001F40  0001 0800 
                    3256   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress);
00001F44  2F03      3257          move.l    D3,-(A7)
00001F46  4879 0000 3258          pea       @m649d4~1_84.L
00001F4A  4482      
00001F4C  4E92      3259          jsr       (A2)
00001F4E  504F      3260          addq.w    #8,A7
                    3261   ; WatchPointAddress[i] = WPAddress;                              // record the address of this watch point in the debugger
00001F50  2002      3262          move.l    D2,D0
00001F52  E588      3263          lsl.l     #2,D0
00001F54  41F9 0B00 3264          lea       _WatchPointAddress.L,A0
00001F58  0182      
00001F5A  2183 0800 3265          move.l    D3,0(A0,D0.L)
                    3266   ; printf("\r\n");
00001F5E  4879 0000 3267          pea       @m649d4~1_1.L
00001F62  3B9C      
00001F64  4E92      3268          jsr       (A2)
00001F66  584F      3269          addq.w    #4,A7
                    3270   ; WatchPointDisplay();       // display the break points
00001F68  4EB8 1A28 3271          jsr       _WatchPointDisplay
                    3272   ; return;
00001F6C  6004      3273          bra.s     SetWatchPoint_11
                    3274   SetWatchPoint_14:
00001F6E  5282      3275          addq.l    #1,D2
00001F70  608C      3276          bra       SetWatchPoint_9
                    3277   SetWatchPoint_11:
00001F72  4CDF 0C0C 3278          movem.l   (A7)+,D2/D3/A2/A3
00001F76  4E5E      3279          unlk      A6
00001F78  4E75      3280          rts
                    3281   ; }
                    3282   ; }
                    3283   ; }
                    3284   ; void HandleBreakPoint(void)
                    3285   ; {
                    3286   _HandleBreakPoint:
00001F7A  4E56 FFFC 3287          link      A6,#-4
00001F7E  48E7 0038 3288          movem.l   A2/A3/A4,-(A7)
00001F82  45F9 0B00 3289          lea       _i.L,A2
00001F86  00C4      
00001F88  47F9 0000 3290          lea       _printf.L,A3
00001F8C  324C      
00001F8E  49F9 0B00 3291          lea       _PC.L,A4
00001F92  0120      
                    3292   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3293   ; // now we have to put the break point back to run the instruction
                    3294   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3295   ; PC = PC - 2;  // ready for user to resume after reaching breakpoint
00001F94  5594      3296          subq.l    #2,(A4)
                    3297   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT");
00001F96  4879 0000 3298          pea       @m649d4~1_85.L
00001F9A  44A8      
00001F9C  4E93      3299          jsr       (A3)
00001F9E  584F      3300          addq.w    #4,A7
                    3301   ; printf("\r\nSingle Step : [ON]");
00001FA0  4879 0000 3302          pea       @m649d4~1_86.L
00001FA4  44BC      
00001FA6  4E93      3303          jsr       (A3)
00001FA8  584F      3304          addq.w    #4,A7
                    3305   ; printf("\r\nBreakPoints : [Enabled]");
00001FAA  4879 0000 3306          pea       @m649d4~1_87.L
00001FAE  44D2      
00001FB0  4E93      3307          jsr       (A3)
00001FB2  584F      3308          addq.w    #4,A7
                    3309   ; // now clear the break point (put original instruction back)
                    3310   ; ProgramBreakPointAddress = PC;
00001FB4  2D54 FFFC 3311          move.l    (A4),-4(A6)
                    3312   ; for (i = 0; i < 8; i++) {
00001FB8  4292      3313          clr.l     (A2)
                    3314   HandleBreakPoint_1:
00001FBA  2012      3315          move.l    (A2),D0
00001FBC  0C80 0000 3316          cmp.l     #8,D0
00001FC0  0008      
00001FC2  6400 0056 3317          bhs       HandleBreakPoint_3
                    3318   ; if (BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001FC6  2012      3319          move.l    (A2),D0
00001FC8  E588      3320          lsl.l     #2,D0
00001FCA  41F9 0B00 3321          lea       _BreakPointAddress.L,A0
00001FCE  012E      
00001FD0  2230 0800 3322          move.l    0(A0,D0.L),D1
00001FD4  B294      3323          cmp.l     (A4),D1
00001FD6  6600 003E 3324          bne       HandleBreakPoint_4
                    3325   ; BreakPointAddress[i] = 0;
00001FDA  2012      3326          move.l    (A2),D0
00001FDC  E588      3327          lsl.l     #2,D0
00001FDE  41F9 0B00 3328          lea       _BreakPointAddress.L,A0
00001FE2  012E      
00001FE4  42B0 0800 3329          clr.l     0(A0,D0.L)
                    3330   ; BreakPointSetOrCleared[i] = 0;
00001FE8  2012      3331          move.l    (A2),D0
00001FEA  E588      3332          lsl.l     #2,D0
00001FEC  41F9 0B00 3333          lea       _BreakPointSetOrCleared.L,A0
00001FF0  015E      
00001FF2  42B0 0800 3334          clr.l     0(A0,D0.L)
                    3335   ; *ProgramBreakPointAddress = BreakPointInstruction[i];  // put original instruction back
00001FF6  2012      3336          move.l    (A2),D0
00001FF8  E388      3337          lsl.l     #1,D0
00001FFA  41F9 0B00 3338          lea       _BreakPointInstruction.L,A0
00001FFE  014E      
00002000  226E FFFC 3339          move.l    -4(A6),A1
00002004  32B0 0800 3340          move.w    0(A0,D0.L),(A1)
                    3341   ; BreakPointInstruction[i] = 0;
00002008  2012      3342          move.l    (A2),D0
0000200A  E388      3343          lsl.l     #1,D0
0000200C  41F9 0B00 3344          lea       _BreakPointInstruction.L,A0
00002010  014E      
00002012  4270 0800 3345          clr.w     0(A0,D0.L)
                    3346   HandleBreakPoint_4:
00002016  5292      3347          addq.l    #1,(A2)
00002018  60A0      3348          bra       HandleBreakPoint_1
                    3349   HandleBreakPoint_3:
                    3350   ; }
                    3351   ; }
                    3352   ; DumpRegisters();
0000201A  4EB8 11A6 3353          jsr       _DumpRegisters
                    3354   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000201E  4879 0000 3355          pea       @m649d4~1_49.L
00002022  404E      
00002024  4E93      3356          jsr       (A3)
00002026  584F      3357          addq.w    #4,A7
                    3358   ; printf("\r\nPress <ESC> to Resume User Program\r\n");
00002028  4879 0000 3359          pea       @m649d4~1_88.L
0000202C  44EC      
0000202E  4E93      3360          jsr       (A3)
00002030  584F      3361          addq.w    #4,A7
                    3362   ; menu();
00002032  4EB9 0000 3363          jsr       _menu
00002036  223E      
00002038  4CDF 1C00 3364          movem.l   (A7)+,A2/A3/A4
0000203C  4E5E      3365          unlk      A6
0000203E  4E75      3366          rts
                    3367   ; }
                    3368   ; void UnknownCommand()
                    3369   ; {
                    3370   _UnknownCommand:
                    3371   ; printf("\r\nUnknown Command.....\r\n");
00002040  4879 0000 3372          pea       @m649d4~1_89.L
00002044  4514      
00002046  4EB9 0000 3373          jsr       _printf
0000204A  324C      
0000204C  584F      3374          addq.w    #4,A7
                    3375   ; Help();
0000204E  4EB9 0000 3376          jsr       _Help
00002052  2164      
00002054  4E75      3377          rts
                    3378   ; }
                    3379   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3380   ; void CallDebugMonitor(void)
                    3381   ; {
                    3382   _CallDebugMonitor:
                    3383   ; printf("\r\nProgram Ended (TRAP #15)....");
00002056  4879 0000 3384          pea       @m649d4~1_90.L
0000205A  452E      
0000205C  4EB9 0000 3385          jsr       _printf
00002060  324C      
00002062  584F      3386          addq.w    #4,A7
                    3387   ; menu();
00002064  4EB9 0000 3388          jsr       _menu
00002068  223E      
0000206A  4E75      3389          rts
                    3390   ; }
                    3391   ; void Breakpoint(void)
                    3392   ; {
                    3393   _Breakpoint:
0000206C  2F02      3394          move.l    D2,-(A7)
                    3395   ; char c;
                    3396   ; c = toupper(_getch());
0000206E  2F00      3397          move.l    D0,-(A7)
00002070  4EB8 0B68 3398          jsr       __getch
00002074  2200      3399          move.l    D0,D1
00002076  201F      3400          move.l    (A7)+,D0
00002078  2F01      3401          move.l    D1,-(A7)
0000207A  4EB9 0000 3402          jsr       _toupper
0000207E  3220      
00002080  584F      3403          addq.w    #4,A7
00002082  1400      3404          move.b    D0,D2
                    3405   ; if (c == (char)('D'))                                      // BreakPoint Display
00002084  0C02 0044 3406          cmp.b     #68,D2
00002088  6608      3407          bne.s     Breakpoint_1
                    3408   ; BreakPointDisplay();
0000208A  4EB8 1954 3409          jsr       _BreakPointDisplay
0000208E  6000 0054 3410          bra       Breakpoint_10
                    3411   Breakpoint_1:
                    3412   ; else if (c == (char)('K')) {                                 // breakpoint Kill
00002092  0C02 004B 3413          cmp.b     #75,D2
00002096  6630      3414          bne.s     Breakpoint_3
                    3415   ; printf("\r\nKill All Break Points...(y/n)?");
00002098  4879 0000 3416          pea       @m649d4~1_91.L
0000209C  454E      
0000209E  4EB9 0000 3417          jsr       _printf
000020A2  324C      
000020A4  584F      3418          addq.w    #4,A7
                    3419   ; c = toupper(_getch());
000020A6  2F00      3420          move.l    D0,-(A7)
000020A8  4EB8 0B68 3421          jsr       __getch
000020AC  2200      3422          move.l    D0,D1
000020AE  201F      3423          move.l    (A7)+,D0
000020B0  2F01      3424          move.l    D1,-(A7)
000020B2  4EB9 0000 3425          jsr       _toupper
000020B6  3220      
000020B8  584F      3426          addq.w    #4,A7
000020BA  1400      3427          move.b    D0,D2
                    3428   ; if (c == (char)('Y'))
000020BC  0C02 0059 3429          cmp.b     #89,D2
000020C0  6604      3430          bne.s     Breakpoint_5
                    3431   ; KillAllBreakPoints();
000020C2  4EB8 1CEC 3432          jsr       _KillAllBreakPoints
                    3433   Breakpoint_5:
000020C6  601C      3434          bra.s     Breakpoint_10
                    3435   Breakpoint_3:
                    3436   ; }
                    3437   ; else if (c == (char)('S')) {
000020C8  0C02 0053 3438          cmp.b     #83,D2
000020CC  6606      3439          bne.s     Breakpoint_7
                    3440   ; SetBreakPoint();
000020CE  4EB8 1D84 3441          jsr       _SetBreakPoint
000020D2  6010      3442          bra.s     Breakpoint_10
                    3443   Breakpoint_7:
                    3444   ; }
                    3445   ; else if (c == (char)('C')) {
000020D4  0C02 0043 3446          cmp.b     #67,D2
000020D8  6606      3447          bne.s     Breakpoint_9
                    3448   ; BreakPointClear();
000020DA  4EB8 1AD4 3449          jsr       _BreakPointClear
000020DE  6004      3450          bra.s     Breakpoint_10
                    3451   Breakpoint_9:
                    3452   ; }
                    3453   ; else
                    3454   ; UnknownCommand();
000020E0  4EB8 2040 3455          jsr       _UnknownCommand
                    3456   Breakpoint_10:
000020E4  241F      3457          move.l    (A7)+,D2
000020E6  4E75      3458          rts
                    3459   ; }
                    3460   ; void Watchpoint(void)
                    3461   ; {
                    3462   _Watchpoint:
000020E8  2F02      3463          move.l    D2,-(A7)
                    3464   ; char c;
                    3465   ; c = toupper(_getch());
000020EA  2F00      3466          move.l    D0,-(A7)
000020EC  4EB8 0B68 3467          jsr       __getch
000020F0  2200      3468          move.l    D0,D1
000020F2  201F      3469          move.l    (A7)+,D0
000020F4  2F01      3470          move.l    D1,-(A7)
000020F6  4EB9 0000 3471          jsr       _toupper
000020FA  3220      
000020FC  584F      3472          addq.w    #4,A7
000020FE  1400      3473          move.b    D0,D2
                    3474   ; if (c == (char)('D'))                                      // WatchPoint Display
00002100  0C02 0044 3475          cmp.b     #68,D2
00002104  6608      3476          bne.s     Watchpoint_1
                    3477   ; WatchPointDisplay();
00002106  4EB8 1A28 3478          jsr       _WatchPointDisplay
0000210A  6000 0054 3479          bra       Watchpoint_10
                    3480   Watchpoint_1:
                    3481   ; else if (c == (char)('K')) {                                 // wtahcpoint Kill
0000210E  0C02 004B 3482          cmp.b     #75,D2
00002112  6630      3483          bne.s     Watchpoint_3
                    3484   ; printf("\r\nKill All Watch Points...(y/n)?");
00002114  4879 0000 3485          pea       @m649d4~1_92.L
00002118  4570      
0000211A  4EB9 0000 3486          jsr       _printf
0000211E  324C      
00002120  584F      3487          addq.w    #4,A7
                    3488   ; c = toupper(_getch());
00002122  2F00      3489          move.l    D0,-(A7)
00002124  4EB8 0B68 3490          jsr       __getch
00002128  2200      3491          move.l    D0,D1
0000212A  201F      3492          move.l    (A7)+,D0
0000212C  2F01      3493          move.l    D1,-(A7)
0000212E  4EB9 0000 3494          jsr       _toupper
00002132  3220      
00002134  584F      3495          addq.w    #4,A7
00002136  1400      3496          move.b    D0,D2
                    3497   ; if (c == (char)('Y'))
00002138  0C02 0059 3498          cmp.b     #89,D2
0000213C  6604      3499          bne.s     Watchpoint_5
                    3500   ; KillAllWatchPoints();
0000213E  4EB8 1D54 3501          jsr       _KillAllWatchPoints
                    3502   Watchpoint_5:
00002142  601C      3503          bra.s     Watchpoint_10
                    3504   Watchpoint_3:
                    3505   ; }
                    3506   ; else if (c == (char)('S')) {
00002144  0C02 0053 3507          cmp.b     #83,D2
00002148  6606      3508          bne.s     Watchpoint_7
                    3509   ; SetWatchPoint();
0000214A  4EB8 1EA4 3510          jsr       _SetWatchPoint
0000214E  6010      3511          bra.s     Watchpoint_10
                    3512   Watchpoint_7:
                    3513   ; }
                    3514   ; else if (c == (char)('C')) {
00002150  0C02 0043 3515          cmp.b     #67,D2
00002154  6606      3516          bne.s     Watchpoint_9
                    3517   ; WatchPointClear();
00002156  4EB8 1BAE 3518          jsr       _WatchPointClear
0000215A  6004      3519          bra.s     Watchpoint_10
                    3520   Watchpoint_9:
                    3521   ; }
                    3522   ; else
                    3523   ; UnknownCommand();
0000215C  4EB8 2040 3524          jsr       _UnknownCommand
                    3525   Watchpoint_10:
00002160  241F      3526          move.l    (A7)+,D2
00002162  4E75      3527          rts
                    3528   ; }
                    3529   ; void Help(void)
                    3530   ; {
                    3531   _Help:
00002164  48E7 2020 3532          movem.l   D2/A2,-(A7)
00002168  45F9 0000 3533          lea       _printf.L,A2
0000216C  324C      
                    3534   ; char* banner = "\r\n----------------------------------------------------------------";
0000216E  41F9 0000 3535          lea       @m649d4~1_93.L,A0
00002172  4592      
00002174  2408      3536          move.l    A0,D2
                    3537   ; printf(banner);
00002176  2F02      3538          move.l    D2,-(A7)
00002178  4E92      3539          jsr       (A2)
0000217A  584F      3540          addq.w    #4,A7
                    3541   ; printf("\r\n  Debugger Command Summary");
0000217C  4879 0000 3542          pea       @m649d4~1_94.L
00002180  45D6      
00002182  4E92      3543          jsr       (A2)
00002184  584F      3544          addq.w    #4,A7
                    3545   ; printf(banner);
00002186  2F02      3546          move.l    D2,-(A7)
00002188  4E92      3547          jsr       (A2)
0000218A  584F      3548          addq.w    #4,A7
                    3549   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
0000218C  4879 0000 3550          pea       @m649d4~1_95.L
00002190  45F4      
00002192  4E92      3551          jsr       (A2)
00002194  584F      3552          addq.w    #4,A7
                    3553   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill");
00002196  4879 0000 3554          pea       @m649d4~1_96.L
0000219A  4638      
0000219C  4E92      3555          jsr       (A2)
0000219E  584F      3556          addq.w    #4,A7
                    3557   ; printf("\r\n  C            - Copy Program from Flash to Main Memory");
000021A0  4879 0000 3558          pea       @m649d4~1_97.L
000021A4  4670      
000021A6  4E92      3559          jsr       (A2)
000021A8  584F      3560          addq.w    #4,A7
                    3561   ; printf("\r\n  D            - Dump Memory Contents to Screen");
000021AA  4879 0000 3562          pea       @m649d4~1_98.L
000021AE  46AA      
000021B0  4E92      3563          jsr       (A2)
000021B2  584F      3564          addq.w    #4,A7
                    3565   ; printf("\r\n  E            - Enter String into Memory");
000021B4  4879 0000 3566          pea       @m649d4~1_99.L
000021B8  46DC      
000021BA  4E92      3567          jsr       (A2)
000021BC  584F      3568          addq.w    #4,A7
                    3569   ; printf("\r\n  F            - Fill Memory with Data");
000021BE  4879 0000 3570          pea       @m649d4~1_100.L
000021C2  4708      
000021C4  4E92      3571          jsr       (A2)
000021C6  584F      3572          addq.w    #4,A7
                    3573   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC);
000021C8  2F39 0B00 3574          move.l    _PC.L,-(A7)
000021CC  0120      
000021CE  4879 0000 3575          pea       @m649d4~1_101.L
000021D2  4732      
000021D4  4E92      3576          jsr       (A2)
000021D6  504F      3577          addq.w    #8,A7
                    3578   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop");
000021D8  4879 0000 3579          pea       @m649d4~1_102.L
000021DC  476C      
000021DE  4E92      3580          jsr       (A2)
000021E0  584F      3581          addq.w    #4,A7
                    3582   ; printf("\r\n  M            - Memory Examine and Change");
000021E2  4879 0000 3583          pea       @m649d4~1_103.L
000021E6  47A4      
000021E8  4E92      3584          jsr       (A2)
000021EA  584F      3585          addq.w    #4,A7
                    3586   ; printf("\r\n  P            - Program Flash Memory with User Program");
000021EC  4879 0000 3587          pea       @m649d4~1_104.L
000021F0  47D2      
000021F2  4E92      3588          jsr       (A2)
000021F4  584F      3589          addq.w    #4,A7
                    3590   ; printf("\r\n  R            - Display 68000 Registers");
000021F6  4879 0000 3591          pea       @m649d4~1_105.L
000021FA  480C      
000021FC  4E92      3592          jsr       (A2)
000021FE  584F      3593          addq.w    #4,A7
                    3594   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode");
00002200  4879 0000 3595          pea       @m649d4~1_106.L
00002204  4838      
00002206  4E92      3596          jsr       (A2)
00002208  584F      3597          addq.w    #4,A7
                    3598   ; printf("\r\n  TM           - Test Memory");
0000220A  4879 0000 3599          pea       @m649d4~1_107.L
0000220E  486A      
00002210  4E92      3600          jsr       (A2)
00002212  584F      3601          addq.w    #4,A7
                    3602   ; printf("\r\n  TS           - Test Switches: SW7-0");
00002214  4879 0000 3603          pea       @m649d4~1_108.L
00002218  488A      
0000221A  4E92      3604          jsr       (A2)
0000221C  584F      3605          addq.w    #4,A7
                    3606   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment");
0000221E  4879 0000 3607          pea       @m649d4~1_109.L
00002222  48B2      
00002224  4E92      3608          jsr       (A2)
00002226  584F      3609          addq.w    #4,A7
                    3610   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill");
00002228  4879 0000 3611          pea       @m649d4~1_110.L
0000222C  48E8      
0000222E  4E92      3612          jsr       (A2)
00002230  584F      3613          addq.w    #4,A7
                    3614   ; printf(banner);
00002232  2F02      3615          move.l    D2,-(A7)
00002234  4E92      3616          jsr       (A2)
00002236  584F      3617          addq.w    #4,A7
00002238  4CDF 0404 3618          movem.l   (A7)+,D2/A2
0000223C  4E75      3619          rts
                    3620   ; }
                    3621   ; void menu(void)
                    3622   ; {
                    3623   _menu:
0000223E  48E7 303C 3624          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002242  45F9 0000 3625          lea       _printf.L,A2
00002246  324C      
00002248  47F9 0B00 3626          lea       _Trace.L,A3
0000224C  00D8      
0000224E  49F9 0B00 3627          lea       _x.L,A4
00002252  00C8      
00002254  4BF9 0B00 3628          lea       _SR.L,A5
00002258  012C      
                    3629   ; char c, c1;
                    3630   ; while (1) {
                    3631   menu_1:
                    3632   ; FlushKeyboard();               // dump unread characters from keyboard
0000225A  4EB8 0BA6 3633          jsr       _FlushKeyboard
                    3634   ; printf("\r\n#");
0000225E  4879 0000 3635          pea       @m649d4~1_111.L
00002262  4920      
00002264  4E92      3636          jsr       (A2)
00002266  584F      3637          addq.w    #4,A7
                    3638   ; c = toupper(_getch());
00002268  2F00      3639          move.l    D0,-(A7)
0000226A  4EB8 0B68 3640          jsr       __getch
0000226E  2200      3641          move.l    D0,D1
00002270  201F      3642          move.l    (A7)+,D0
00002272  2F01      3643          move.l    D1,-(A7)
00002274  4EB9 0000 3644          jsr       _toupper
00002278  3220      
0000227A  584F      3645          addq.w    #4,A7
0000227C  1400      3646          move.b    D0,D2
                    3647   ; if (c == (char)('L'))                  // load s record file
0000227E  0C02 004C 3648          cmp.b     #76,D2
00002282  6608      3649          bne.s     menu_4
                    3650   ; Load_SRecordFile();
00002284  4EB8 0E36 3651          jsr       _Load_SRecordFile
00002288  6000 021E 3652          bra       menu_46
                    3653   menu_4:
                    3654   ; else if (c == (char)('D'))             // dump memory
0000228C  0C02 0044 3655          cmp.b     #68,D2
00002290  6608      3656          bne.s     menu_6
                    3657   ; DumpMemory();
00002292  4EB8 0CCC 3658          jsr       _DumpMemory
00002296  6000 0210 3659          bra       menu_46
                    3660   menu_6:
                    3661   ; else if (c == (char)('E'))             // Enter String into memory
0000229A  0C02 0045 3662          cmp.b     #69,D2
0000229E  660A      3663          bne.s     menu_8
                    3664   ; EnterString();
000022A0  4EB9 0000 3665          jsr       _EnterString
000022A4  25F0      
000022A6  6000 0200 3666          bra       menu_46
                    3667   menu_8:
                    3668   ; else if (c == (char)('F'))             // fill memory
000022AA  0C02 0046 3669          cmp.b     #70,D2
000022AE  6608      3670          bne.s     menu_10
                    3671   ; FillMemory();
000022B0  4EB8 0DBC 3672          jsr       _FillMemory
000022B4  6000 01F2 3673          bra       menu_46
                    3674   menu_10:
                    3675   ; else if (c == (char)('G')) {           // go user program
000022B8  0C02 0047 3676          cmp.b     #71,D2
000022BC  6626      3677          bne.s     menu_12
                    3678   ; printf("\r\nProgram Running.....");
000022BE  4879 0000 3679          pea       @m649d4~1_112.L
000022C2  4924      
000022C4  4E92      3680          jsr       (A2)
000022C6  584F      3681          addq.w    #4,A7
                    3682   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop");
000022C8  4879 0000 3683          pea       @m649d4~1_113.L
000022CC  493C      
000022CE  4E92      3684          jsr       (A2)
000022D0  584F      3685          addq.w    #4,A7
                    3686   ; GoFlag = 1;
000022D2  23FC 0000 3687          move.l    #1,_GoFlag.L
000022D6  0001 0B00 
000022DA  00DC      
                    3688   ; go();
000022DC  4EB8 08B8 3689          jsr       _go
000022E0  6000 01C6 3690          bra       menu_46
                    3691   menu_12:
                    3692   ; }
                    3693   ; else if (c == (char)('M'))           // memory examine and modify
000022E4  0C02 004D 3694          cmp.b     #77,D2
000022E8  6608      3695          bne.s     menu_14
                    3696   ; MemoryChange();
000022EA  4EB8 0FC4 3697          jsr       _MemoryChange
000022EE  6000 01B8 3698          bra       menu_46
                    3699   menu_14:
                    3700   ; else if (c == (char)('P'))            // Program Flash Chip
000022F2  0C02 0050 3701          cmp.b     #80,D2
000022F6  6608      3702          bne.s     menu_16
                    3703   ; ProgramFlashChip();
000022F8  4EB8 10C4 3704          jsr       _ProgramFlashChip
000022FC  6000 01AA 3705          bra       menu_46
                    3706   menu_16:
                    3707   ; else if (c == (char)('C'))             // copy flash chip to ram and go
00002300  0C02 0043 3708          cmp.b     #67,D2
00002304  6608      3709          bne.s     menu_18
                    3710   ; LoadFromFlashChip();
00002306  4EB8 115C 3711          jsr       _LoadFromFlashChip
0000230A  6000 019C 3712          bra       menu_46
                    3713   menu_18:
                    3714   ; else if (c == (char)('R'))             // dump registers
0000230E  0C02 0052 3715          cmp.b     #82,D2
00002312  6608      3716          bne.s     menu_20
                    3717   ; DumpRegisters();
00002314  4EB8 11A6 3718          jsr       _DumpRegisters
00002318  6000 018E 3719          bra       menu_46
                    3720   menu_20:
                    3721   ; else if (c == (char)('.'))           // change registers
0000231C  0C02 002E 3722          cmp.b     #46,D2
00002320  6608      3723          bne.s     menu_22
                    3724   ; ChangeRegisters();
00002322  4EB8 1698 3725          jsr       _ChangeRegisters
00002326  6000 0180 3726          bra       menu_46
                    3727   menu_22:
                    3728   ; else if (c == (char)('B'))              // breakpoint command
0000232A  0C02 0042 3729          cmp.b     #66,D2
0000232E  6608      3730          bne.s     menu_24
                    3731   ; Breakpoint();
00002330  4EB8 206C 3732          jsr       _Breakpoint
00002334  6000 0172 3733          bra       menu_46
                    3734   menu_24:
                    3735   ; else if (c == (char)('T')) {          // Test command
00002338  0C02 0054 3736          cmp.b     #84,D2
0000233C  6600 0046 3737          bne       menu_26
                    3738   ; c1 = toupper(_getch());
00002340  2F00      3739          move.l    D0,-(A7)
00002342  4EB8 0B68 3740          jsr       __getch
00002346  2200      3741          move.l    D0,D1
00002348  201F      3742          move.l    (A7)+,D0
0000234A  2F01      3743          move.l    D1,-(A7)
0000234C  4EB9 0000 3744          jsr       _toupper
00002350  3220      
00002352  584F      3745          addq.w    #4,A7
00002354  1600      3746          move.b    D0,D3
                    3747   ; if (c1 == (char)('M'))                    // memory test
00002356  0C03 004D 3748          cmp.b     #77,D3
0000235A  6608      3749          bne.s     menu_28
                    3750   ; MemoryTest();
0000235C  4EB9 0000 3751          jsr       _MemoryTest
00002360  2640      
00002362  601C      3752          bra.s     menu_33
                    3753   menu_28:
                    3754   ; else if (c1 == (char)('S'))              // Switch Test command
00002364  0C03 0053 3755          cmp.b     #83,D3
00002368  6606      3756          bne.s     menu_30
                    3757   ; SwitchTest();
0000236A  4EB8 0AA4 3758          jsr       _SwitchTest
0000236E  6010      3759          bra.s     menu_33
                    3760   menu_30:
                    3761   ; else if (c1 == (char)('D'))              // display Test command
00002370  0C03 0044 3762          cmp.b     #68,D3
00002374  6606      3763          bne.s     menu_32
                    3764   ; TestLEDS();
00002376  4EB8 0A50 3765          jsr       _TestLEDS
0000237A  6004      3766          bra.s     menu_33
                    3767   menu_32:
                    3768   ; else
                    3769   ; UnknownCommand();
0000237C  4EB8 2040 3770          jsr       _UnknownCommand
                    3771   menu_33:
00002380  6000 0126 3772          bra       menu_46
                    3773   menu_26:
                    3774   ; }
                    3775   ; else if (c == (char)(' ')) {             // Next instruction command
00002384  0C02 0020 3776          cmp.b     #32,D2
00002388  6636      3777          bne.s     menu_34
                    3778   ; DisableBreakPoints();
0000238A  4EB8 1C50 3779          jsr       _DisableBreakPoints
                    3780   ; if (Trace == 1 && GoFlag == 1) {    // if the program is running and trace mode on then 'N' is valid
0000238E  2013      3781          move.l    (A3),D0
00002390  0C80 0000 3782          cmp.l     #1,D0
00002394  0001      
00002396  661A      3783          bne.s     menu_36
00002398  2039 0B00 3784          move.l    _GoFlag.L,D0
0000239C  00DC      
0000239E  0C80 0000 3785          cmp.l     #1,D0
000023A2  0001      
000023A4  660C      3786          bne.s     menu_36
                    3787   ; TraceException = 1;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000023A6  13FC 0001 3788          move.b    #1,4194314
000023AA  0040 000A 
                    3789   ; return;
000023AE  6000 00FC 3790          bra       menu_38
                    3791   menu_36:
                    3792   ; }
                    3793   ; else
                    3794   ; printf("\r\nError: Press 'G' first to start program");
000023B2  4879 0000 3795          pea       @m649d4~1_114.L
000023B6  496A      
000023B8  4E92      3796          jsr       (A2)
000023BA  584F      3797          addq.w    #4,A7
000023BC  6000 00EA 3798          bra       menu_46
                    3799   menu_34:
                    3800   ; }
                    3801   ; else if (c == (char)('S')) {             // single step
000023C0  0C02 0053 3802          cmp.b     #83,D2
000023C4  6600 008C 3803          bne       menu_39
                    3804   ; if (Trace == 0) {
000023C8  2013      3805          move.l    (A3),D0
000023CA  6600 0050 3806          bne       menu_41
                    3807   ; DisableBreakPoints();
000023CE  4EB8 1C50 3808          jsr       _DisableBreakPoints
                    3809   ; printf("\r\nSingle Step  :[ON]");
000023D2  4879 0000 3810          pea       @m649d4~1_115.L
000023D6  4994      
000023D8  4E92      3811          jsr       (A2)
000023DA  584F      3812          addq.w    #4,A7
                    3813   ; printf("\r\nBreak Points :[Disabled]");
000023DC  4879 0000 3814          pea       @m649d4~1_48.L
000023E0  4032      
000023E2  4E92      3815          jsr       (A2)
000023E4  584F      3816          addq.w    #4,A7
                    3817   ; SR = SR | (unsigned short int)(0x8000);    // set T bit in status register
000023E6  0055 8000 3818          or.w      #32768,(A5)
                    3819   ; printf("\r\nPress 'G' to Trace Program from address $%X.....", PC);
000023EA  2F39 0B00 3820          move.l    _PC.L,-(A7)
000023EE  0120      
000023F0  4879 0000 3821          pea       @m649d4~1_116.L
000023F4  49AA      
000023F6  4E92      3822          jsr       (A2)
000023F8  504F      3823          addq.w    #8,A7
                    3824   ; printf("\r\nPush <RESET Button> to Stop.....");
000023FA  4879 0000 3825          pea       @m649d4~1_117.L
000023FE  49DE      
00002400  4E92      3826          jsr       (A2)
00002402  584F      3827          addq.w    #4,A7
                    3828   ; DumpRegisters();
00002404  4EB8 11A6 3829          jsr       _DumpRegisters
                    3830   ; Trace = 1;
00002408  26BC 0000 3831          move.l    #1,(A3)
0000240C  0001      
                    3832   ; TraceException = 1;
0000240E  13FC 0001 3833          move.b    #1,4194314
00002412  0040 000A 
                    3834   ; x = *(unsigned int*)(0x00000074);       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002416  28B8 0074 3835          move.l    116,(A4)
0000241A  6032      3836          bra.s     menu_42
                    3837   menu_41:
                    3838   ; }
                    3839   ; else {
                    3840   ; Trace = 0;
0000241C  4293      3841          clr.l     (A3)
                    3842   ; TraceException = 0;
0000241E  4239 0040 3843          clr.b     4194314
00002422  000A      
                    3844   ; x = *(unsigned int*)(0x00000074);       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002424  28B8 0074 3845          move.l    116,(A4)
                    3846   ; EnableBreakPoints();
00002428  4EB8 1CA4 3847          jsr       _EnableBreakPoints
                    3848   ; SR = SR & (unsigned short int)(0x7FFF);    // clear T bit in status register
0000242C  0255 7FFF 3849          and.w     #32767,(A5)
                    3850   ; printf("\r\nSingle Step : [OFF]");
00002430  4879 0000 3851          pea       @m649d4~1_118.L
00002434  4A02      
00002436  4E92      3852          jsr       (A2)
00002438  584F      3853          addq.w    #4,A7
                    3854   ; printf("\r\nBreak Points :[Enabled]");
0000243A  4879 0000 3855          pea       @m649d4~1_119.L
0000243E  4A18      
00002440  4E92      3856          jsr       (A2)
00002442  584F      3857          addq.w    #4,A7
                    3858   ; printf("\r\nPress <ESC> to Resume User Program.....");
00002444  4879 0000 3859          pea       @m649d4~1_120.L
00002448  4A32      
0000244A  4E92      3860          jsr       (A2)
0000244C  584F      3861          addq.w    #4,A7
                    3862   menu_42:
0000244E  6000 0058 3863          bra       menu_46
                    3864   menu_39:
                    3865   ; }
                    3866   ; }
                    3867   ; else if (c == (char)(0x1b)) {   // if user choses to end trace and run program
00002452  0C02 001B 3868          cmp.b     #27,D2
00002456  6600 0040 3869          bne       menu_43
                    3870   ; Trace = 0;
0000245A  4293      3871          clr.l     (A3)
                    3872   ; TraceException = 0;
0000245C  4239 0040 3873          clr.b     4194314
00002460  000A      
                    3874   ; x = *(unsigned int*)(0x00000074);   // read IRQ 5 vector to reset trace vector generator
00002462  28B8 0074 3875          move.l    116,(A4)
                    3876   ; EnableBreakPoints();
00002466  4EB8 1CA4 3877          jsr       _EnableBreakPoints
                    3878   ; SR = SR & (unsigned short int)(0x7FFF);    // clear T bit in status register
0000246A  0255 7FFF 3879          and.w     #32767,(A5)
                    3880   ; printf("\r\nSingle Step  :[OFF]");
0000246E  4879 0000 3881          pea       @m649d4~1_121.L
00002472  4A5C      
00002474  4E92      3882          jsr       (A2)
00002476  584F      3883          addq.w    #4,A7
                    3884   ; printf("\r\nBreak Points :[Enabled]");
00002478  4879 0000 3885          pea       @m649d4~1_119.L
0000247C  4A18      
0000247E  4E92      3886          jsr       (A2)
00002480  584F      3887          addq.w    #4,A7
                    3888   ; printf("\r\nProgram Running.....");
00002482  4879 0000 3889          pea       @m649d4~1_112.L
00002486  4924      
00002488  4E92      3890          jsr       (A2)
0000248A  584F      3891          addq.w    #4,A7
                    3892   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop");
0000248C  4879 0000 3893          pea       @m649d4~1_113.L
00002490  493C      
00002492  4E92      3894          jsr       (A2)
00002494  584F      3895          addq.w    #4,A7
                    3896   ; return;
00002496  6014      3897          bra.s     menu_38
                    3898   menu_43:
                    3899   ; }
                    3900   ; else if (c == (char)('W'))              // Watchpoint command
00002498  0C02 0057 3901          cmp.b     #87,D2
0000249C  6606      3902          bne.s     menu_45
                    3903   ; Watchpoint();
0000249E  4EB8 20E8 3904          jsr       _Watchpoint
000024A2  6004      3905          bra.s     menu_46
                    3906   menu_45:
                    3907   ; else
                    3908   ; UnknownCommand();
000024A4  4EB8 2040 3909          jsr       _UnknownCommand
                    3910   menu_46:
000024A8  6000 FDB0 3911          bra       menu_1
                    3912   menu_38:
000024AC  4CDF 3C0C 3913          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000024B0  4E75      3914          rts
                    3915   ; }
                    3916   ; }
                    3917   ; void PrintErrorMessageandAbort(char* string) {
                    3918   _PrintErrorMessageandAbort:
000024B2  4E56 0000 3919          link      A6,#0
                    3920   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n");
000024B6  4879 0000 3921          pea       @m649d4~1_122.L
000024BA  4A72      
000024BC  4EB9 0000 3922          jsr       _printf
000024C0  324C      
000024C2  584F      3923          addq.w    #4,A7
                    3924   ; printf("%s\r\n", string);
000024C4  2F2E 0008 3925          move.l    8(A6),-(A7)
000024C8  4879 0000 3926          pea       @m649d4~1_123.L
000024CC  4A8E      
000024CE  4EB9 0000 3927          jsr       _printf
000024D2  324C      
000024D4  504F      3928          addq.w    #8,A7
                    3929   ; menu();
000024D6  4EB8 223E 3930          jsr       _menu
000024DA  4E5E      3931          unlk      A6
000024DC  4E75      3932          rts
                    3933   ; }
                    3934   ; void IRQMessage(int level) {
                    3935   _IRQMessage:
000024DE  4E56 0000 3936          link      A6,#0
                    3937   ; printf("\r\n\r\nProgram ABORT !!!!!");
000024E2  4879 0000 3938          pea       @m649d4~1_124.L
000024E6  4A94      
000024E8  4EB9 0000 3939          jsr       _printf
000024EC  324C      
000024EE  584F      3940          addq.w    #4,A7
                    3941   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level);
000024F0  2F2E 0008 3942          move.l    8(A6),-(A7)
000024F4  4879 0000 3943          pea       @m649d4~1_125.L
000024F8  4AAC      
000024FA  4EB9 0000 3944          jsr       _printf
000024FE  324C      
00002500  504F      3945          addq.w    #8,A7
                    3946   ; menu();
00002502  4EB8 223E 3947          jsr       _menu
00002506  4E5E      3948          unlk      A6
00002508  4E75      3949          rts
                    3950   ; }
                    3951   ; void UnhandledIRQ1(void) {
                    3952   _UnhandledIRQ1:
                    3953   ; IRQMessage(1);
0000250A  4878 0001 3954          pea       1
0000250E  4EB8 24DE 3955          jsr       _IRQMessage
00002512  584F      3956          addq.w    #4,A7
00002514  4E75      3957          rts
                    3958   ; }
                    3959   ; void UnhandledIRQ2(void) {
                    3960   _UnhandledIRQ2:
                    3961   ; IRQMessage(2);
00002516  4878 0002 3962          pea       2
0000251A  4EB8 24DE 3963          jsr       _IRQMessage
0000251E  584F      3964          addq.w    #4,A7
00002520  4E75      3965          rts
                    3966   ; }
                    3967   ; void UnhandledIRQ3(void) {
                    3968   _UnhandledIRQ3:
                    3969   ; IRQMessage(3);
00002522  4878 0003 3970          pea       3
00002526  4EB8 24DE 3971          jsr       _IRQMessage
0000252A  584F      3972          addq.w    #4,A7
0000252C  4E75      3973          rts
                    3974   ; }
                    3975   ; void UnhandledIRQ4(void) {
                    3976   _UnhandledIRQ4:
                    3977   ; IRQMessage(4);
0000252E  4878 0004 3978          pea       4
00002532  4EB8 24DE 3979          jsr       _IRQMessage
00002536  584F      3980          addq.w    #4,A7
00002538  4E75      3981          rts
                    3982   ; }
                    3983   ; void UnhandledIRQ5(void) {
                    3984   _UnhandledIRQ5:
                    3985   ; IRQMessage(5);
0000253A  4878 0005 3986          pea       5
0000253E  4EB8 24DE 3987          jsr       _IRQMessage
00002542  584F      3988          addq.w    #4,A7
00002544  4E75      3989          rts
                    3990   ; }
                    3991   ; void UnhandledIRQ6(void) {
                    3992   _UnhandledIRQ6:
                    3993   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....");
00002546  4879 0000 3994          pea       @m649d4~1_126.L
0000254A  4AD0      
0000254C  4EB8 24B2 3995          jsr       _PrintErrorMessageandAbort
00002550  584F      3996          addq.w    #4,A7
                    3997   ; menu();
00002552  4EB8 223E 3998          jsr       _menu
00002556  4E75      3999          rts
                    4000   ; }
                    4001   ; void UnhandledIRQ7(void) {
                    4002   _UnhandledIRQ7:
                    4003   ; IRQMessage(7);
00002558  4878 0007 4004          pea       7
0000255C  4EB8 24DE 4005          jsr       _IRQMessage
00002560  584F      4006          addq.w    #4,A7
00002562  4E75      4007          rts
                    4008   ; }
                    4009   ; void UnhandledTrap(void) {
                    4010   _UnhandledTrap:
                    4011   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!");
00002564  4879 0000 4012          pea       @m649d4~1_127.L
00002568  4B10      
0000256A  4EB8 24B2 4013          jsr       _PrintErrorMessageandAbort
0000256E  584F      4014          addq.w    #4,A7
00002570  4E75      4015          rts
                    4016   ; }
                    4017   ; void BusError() {
                    4018   _BusError:
                    4019   ; PrintErrorMessageandAbort("BUS Error!");
00002572  4879 0000 4020          pea       @m649d4~1_128.L
00002576  4B26      
00002578  4EB8 24B2 4021          jsr       _PrintErrorMessageandAbort
0000257C  584F      4022          addq.w    #4,A7
0000257E  4E75      4023          rts
                    4024   ; }
                    4025   ; void AddressError() {
                    4026   _AddressError:
                    4027   ; PrintErrorMessageandAbort("ADDRESS Error!");
00002580  4879 0000 4028          pea       @m649d4~1_129.L
00002584  4B32      
00002586  4EB8 24B2 4029          jsr       _PrintErrorMessageandAbort
0000258A  584F      4030          addq.w    #4,A7
0000258C  4E75      4031          rts
                    4032   ; }
                    4033   ; void IllegalInstruction() {
                    4034   _IllegalInstruction:
                    4035   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION");
0000258E  4879 0000 4036          pea       @m649d4~1_130.L
00002592  4B42      
00002594  4EB8 24B2 4037          jsr       _PrintErrorMessageandAbort
00002598  584F      4038          addq.w    #4,A7
0000259A  4E75      4039          rts
                    4040   ; }
                    4041   ; void Dividebyzero() {
                    4042   _Dividebyzero:
                    4043   ; PrintErrorMessageandAbort("DIVIDE BY ZERO");
0000259C  4879 0000 4044          pea       @m649d4~1_131.L
000025A0  4B56      
000025A2  4EB8 24B2 4045          jsr       _PrintErrorMessageandAbort
000025A6  584F      4046          addq.w    #4,A7
000025A8  4E75      4047          rts
                    4048   ; }
                    4049   ; void Check() {
                    4050   _Check:
                    4051   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION");
000025AA  4879 0000 4052          pea       @m649d4~1_132.L
000025AE  4B66      
000025B0  4EB8 24B2 4053          jsr       _PrintErrorMessageandAbort
000025B4  584F      4054          addq.w    #4,A7
000025B6  4E75      4055          rts
                    4056   ; }
                    4057   ; void Trapv() {
                    4058   _Trapv:
                    4059   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION");
000025B8  4879 0000 4060          pea       @m649d4~1_133.L
000025BC  4B78      
000025BE  4EB8 24B2 4061          jsr       _PrintErrorMessageandAbort
000025C2  584F      4062          addq.w    #4,A7
000025C4  4E75      4063          rts
                    4064   ; }
                    4065   ; void PrivError() {
                    4066   _PrivError:
                    4067   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION");
000025C6  4879 0000 4068          pea       @m649d4~1_134.L
000025CA  4B8A      
000025CC  4EB8 24B2 4069          jsr       _PrintErrorMessageandAbort
000025D0  584F      4070          addq.w    #4,A7
000025D2  4E75      4071          rts
                    4072   ; }
                    4073   ; void UnitIRQ() {
                    4074   _UnitIRQ:
                    4075   ; PrintErrorMessageandAbort("UNINITIALISED IRQ");
000025D4  4879 0000 4076          pea       @m649d4~1_135.L
000025D8  4B9E      
000025DA  4EB8 24B2 4077          jsr       _PrintErrorMessageandAbort
000025DE  584F      4078          addq.w    #4,A7
000025E0  4E75      4079          rts
                    4080   ; }
                    4081   ; void Spurious() {
                    4082   _Spurious:
                    4083   ; PrintErrorMessageandAbort("SPURIOUS IRQ");
000025E2  4879 0000 4084          pea       @m649d4~1_136.L
000025E6  4BB0      
000025E8  4EB8 24B2 4085          jsr       _PrintErrorMessageandAbort
000025EC  584F      4086          addq.w    #4,A7
000025EE  4E75      4087          rts
                    4088   ; }
                    4089   ; void EnterString(void)
                    4090   ; {
                    4091   _EnterString:
000025F0  4E56 FFFC 4092          link      A6,#-4
000025F4  2F02      4093          move.l    D2,-(A7)
                    4094   ; unsigned char* Start;
                    4095   ; unsigned char c;
                    4096   ; printf("\r\nStart Address in Memory: ");
000025F6  4879 0000 4097          pea       @m649d4~1_137.L
000025FA  4BBE      
000025FC  4EB9 0000 4098          jsr       _printf
00002600  324C      
00002602  584F      4099          addq.w    #4,A7
                    4100   ; Start = Get8HexDigits(0);
00002604  42A7      4101          clr.l     -(A7)
00002606  4EB8 0CA4 4102          jsr       _Get8HexDigits
0000260A  584F      4103          addq.w    #4,A7
0000260C  2400      4104          move.l    D0,D2
                    4105   ; printf("\r\nEnter String (ESC to end) :");
0000260E  4879 0000 4106          pea       @m649d4~1_138.L
00002612  4BDA      
00002614  4EB9 0000 4107          jsr       _printf
00002618  324C      
0000261A  584F      4108          addq.w    #4,A7
                    4109   ; while ((c = getchar()) != 0x1b)
                    4110   EnterString_1:
0000261C  4EB9 0000 4111          jsr       _getch
00002620  316E      
00002622  1D40 FFFF 4112          move.b    D0,-1(A6)
00002626  0C00 001B 4113          cmp.b     #27,D0
0000262A  670A      4114          beq.s     EnterString_3
                    4115   ; *Start++ = c;
0000262C  2042      4116          move.l    D2,A0
0000262E  5282      4117          addq.l    #1,D2
00002630  10AE FFFF 4118          move.b    -1(A6),(A0)
00002634  60E6      4119          bra       EnterString_1
                    4120   EnterString_3:
                    4121   ; *Start = 0x00;  // terminate with a null
00002636  2042      4122          move.l    D2,A0
00002638  4210      4123          clr.b     (A0)
0000263A  241F      4124          move.l    (A7)+,D2
0000263C  4E5E      4125          unlk      A6
0000263E  4E75      4126          rts
                    4127   ; }
                    4128   ; void MemoryTest(void)
                    4129   ; {
                    4130   _MemoryTest:
00002640  4E56 FFBC 4131          link      A6,#-68
00002644  48E7 3F3C 4132          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002648  45F9 0000 4133          lea       _printf.L,A2
0000264C  324C      
0000264E  47F8 0CA4 4134          lea       _Get8HexDigits.L,A3
                    4135   ; char data_type_num;
                    4136   ; unsigned int test_data_num;
                    4137   ; unsigned char* StartPtrByte, * EndPtrByte, * TempPtrByte;
                    4138   ; unsigned short int* StartPtrWord, * EndPtrWord, * TempPtrWord;
                    4139   ; unsigned int* StartPtrLongWord, * EndPtrLongWord, * TempPtrLongWord;
                    4140   ; int StartPtrLongWordTruc, EndPtrLongWordTruc;
                    4141   ; unsigned char test_data_byte_list[] = { 0xAA, 0xAB, 0xCC, 0xCD };
00002652  41EE FFD8 4142          lea       -40(A6),A0
00002656  43F9 0000 4143          lea       MemoryTest_test_data_byte_list.L,A1
0000265A  56FC      
0000265C  20D9      4144          move.l    (A1)+,(A0)+
                    4145   ; unsigned char test_data_byte;
                    4146   ; unsigned char read_data_byte;
                    4147   ; unsigned  int test_data_word_list[] = { 0xAAAA, 0xBABA, 0xCCDD, 0xDDDD };
0000265E  41EE FFDE 4148          lea       -34(A6),A0
00002662  43F9 0000 4149          lea       MemoryTest_test_data_word_list.L,A1
00002666  5700      
00002668  7003      4150          moveq     #3,D0
0000266A  20D9      4151          move.l    (A1)+,(A0)+
0000266C  51C8 FFFC 4152          dbra      D0,*-2
                    4153   ; unsigned  int test_data_word;
                    4154   ; unsigned int test_data_long_word_list[] = { 0xAAAAAAAA, 0xABABABAB, 0xCCCCDDDD, 0xAABBCCDD };
00002670  41EE FFEE 4155          lea       -18(A6),A0
00002674  43F9 0000 4156          lea       MemoryTest_test_data_long_word_list.L,A1
00002678  5710      
0000267A  7003      4157          moveq     #3,D0
0000267C  20D9      4158          move.l    (A1)+,(A0)+
0000267E  51C8 FFFC 4159          dbra      D0,*-2
                    4160   ; unsigned int test_data_long_word;
                    4161   ; unsigned short truncated_data;
                    4162   ; printf("\r\nEnter the value below for the size of the test you would like to use?\n1 = bytes (8 bits)\n2 = words (16 bits)\n3 = long words (32 bits)\n");
00002682  4879 0000 4163          pea       @m649d4~1_139.L
00002686  4BF8      
00002688  4E92      4164          jsr       (A2)
0000268A  584F      4165          addq.w    #4,A7
                    4166   ; data_type_num = _getch();
0000268C  4EB8 0B68 4167          jsr       __getch
00002690  1D40 FFBF 4168          move.b    D0,-65(A6)
                    4169   ; switch (data_type_num) {
00002694  102E FFBF 4170          move.b    -65(A6),D0
00002698  4880      4171          ext.w     D0
0000269A  48C0      4172          ext.l     D0
0000269C  0C80 0000 4173          cmp.l     #50,D0
000026A0  0032      
000026A2  6700 0218 4174          beq       MemoryTest_4
000026A6  6E0C      4175          bgt.s     MemoryTest_7
000026A8  0C80 0000 4176          cmp.l     #49,D0
000026AC  0031      
000026AE  6712      4177          beq.s     MemoryTest_3
000026B0  6000 06BE 4178          bra       MemoryTest_1
                    4179   MemoryTest_7:
000026B4  0C80 0000 4180          cmp.l     #51,D0
000026B8  0033      
000026BA  6700 0422 4181          beq       MemoryTest_5
000026BE  6000 06B0 4182          bra       MemoryTest_1
                    4183   MemoryTest_3:
                    4184   ; case (char)('1') :
                    4185   ; printf("\nYou have selcted to use bytes size data to test your memory\n");
000026C2  4879 0000 4186          pea       @m649d4~1_140.L
000026C6  4C82      
000026C8  4E92      4187          jsr       (A2)
000026CA  584F      4188          addq.w    #4,A7
                    4189   ; printf("Out of the below example test data, please select one by entering the value associated to each example:\n");
000026CC  4879 0000 4190          pea       @m649d4~1_141.L
000026D0  4CC0      
000026D2  4E92      4191          jsr       (A2)
000026D4  584F      4192          addq.w    #4,A7
                    4193   ; printf("1 = \"AA\"\n2 = \"AB\"\n3 = \"CC\"\n4 = \"CD\"\n");
000026D6  4879 0000 4194          pea       @m649d4~1_142.L
000026DA  4D2A      
000026DC  4E92      4195          jsr       (A2)
000026DE  584F      4196          addq.w    #4,A7
                    4197   ; do {
                    4198   MemoryTest_8:
                    4199   ; test_data_num = (int)(_getch());
000026E0  4EB8 0B68 4200          jsr       __getch
000026E4  2400      4201          move.l    D0,D2
                    4202   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
000026E6  0C82 0000 4203          cmp.l     #49,D2
000026EA  0031      
000026EC  6722      4204          beq.s     MemoryTest_10
000026EE  0C82 0000 4205          cmp.l     #50,D2
000026F2  0032      
000026F4  671A      4206          beq.s     MemoryTest_10
000026F6  0C82 0000 4207          cmp.l     #51,D2
000026FA  0033      
000026FC  6712      4208          beq.s     MemoryTest_10
000026FE  0C82 0000 4209          cmp.l     #52,D2
00002702  0034      
00002704  670A      4210          beq.s     MemoryTest_10
                    4211   ; printf("\r\nERROR: You have entered a keyboard input that does not associated with an option above, please try again\r\n");
00002706  4879 0000 4212          pea       @m649d4~1_143.L
0000270A  4D50      
0000270C  4E92      4213          jsr       (A2)
0000270E  584F      4214          addq.w    #4,A7
                    4215   MemoryTest_10:
00002710  0C82 0000 4216          cmp.l     #49,D2
00002714  0031      
00002716  6718      4217          beq.s     MemoryTest_12
00002718  0C82 0000 4218          cmp.l     #50,D2
0000271C  0032      
0000271E  6710      4219          beq.s     MemoryTest_12
00002720  0C82 0000 4220          cmp.l     #51,D2
00002724  0033      
00002726  6708      4221          beq.s     MemoryTest_12
00002728  0C82 0000 4222          cmp.l     #52,D2
0000272C  0034      
0000272E  66B0      4223          bne       MemoryTest_8
                    4224   MemoryTest_12:
                    4225   ; }
                    4226   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    4227   ; if (test_data_num == (int)('1')) {
00002730  0C82 0000 4228          cmp.l     #49,D2
00002734  0031      
00002736  660A      4229          bne.s     MemoryTest_13
                    4230   ; test_data_byte = test_data_byte_list[0];
00002738  1D6E FFD8 4231          move.b    -40+0(A6),-36(A6)
0000273C  FFDC      
0000273E  6000 0040 4232          bra       MemoryTest_20
                    4233   MemoryTest_13:
                    4234   ; }
                    4235   ; else if (test_data_num == (int)('2')) {
00002742  0C82 0000 4236          cmp.l     #50,D2
00002746  0032      
00002748  6608      4237          bne.s     MemoryTest_15
                    4238   ; test_data_byte = test_data_byte_list[1];
0000274A  1D6E FFD9 4239          move.b    -40+1(A6),-36(A6)
0000274E  FFDC      
00002750  602E      4240          bra.s     MemoryTest_20
                    4241   MemoryTest_15:
                    4242   ; }
                    4243   ; else if (test_data_num == (int)('3')) {
00002752  0C82 0000 4244          cmp.l     #51,D2
00002756  0033      
00002758  6608      4245          bne.s     MemoryTest_17
                    4246   ; test_data_byte = test_data_byte_list[2];
0000275A  1D6E FFDA 4247          move.b    -40+2(A6),-36(A6)
0000275E  FFDC      
00002760  601E      4248          bra.s     MemoryTest_20
                    4249   MemoryTest_17:
                    4250   ; }
                    4251   ; else if (test_data_num == (int)('4')) {
00002762  0C82 0000 4252          cmp.l     #52,D2
00002766  0034      
00002768  6608      4253          bne.s     MemoryTest_19
                    4254   ; test_data_byte = test_data_byte_list[3];
0000276A  1D6E FFDB 4255          move.b    -40+3(A6),-36(A6)
0000276E  FFDC      
00002770  600E      4256          bra.s     MemoryTest_20
                    4257   MemoryTest_19:
                    4258   ; }
                    4259   ; else {
                    4260   ; printf("\r\nERROR: Option memory complication. Exiting memory test...\r\n");
00002772  4879 0000 4261          pea       @m649d4~1_144.L
00002776  4DBE      
00002778  4E92      4262          jsr       (A2)
0000277A  584F      4263          addq.w    #4,A7
                    4264   ; return;
0000277C  6000 05FC 4265          bra       MemoryTest_2
                    4266   MemoryTest_20:
                    4267   ; }
                    4268   ; printf("\r\nPlease enter the start address you would like to use for the test data into memory\r\n");
00002780  4879 0000 4269          pea       @m649d4~1_145.L
00002784  4DFC      
00002786  4E92      4270          jsr       (A2)
00002788  584F      4271          addq.w    #4,A7
                    4272   ; do{
                    4273   MemoryTest_22:
                    4274   ; StartPtrByte = (int)Get8HexDigits(0);
0000278A  42A7      4275          clr.l     -(A7)
0000278C  4E93      4276          jsr       (A3)
0000278E  584F      4277          addq.w    #4,A7
00002790  2A00      4278          move.l    D0,D5
                    4279   ; if(StartPtrByte < (int)(0x09000000) || StartPtrByte > (int)(0x09800000)){
00002792  0C85 0900 4280          cmp.l     #150994944,D5
00002796  0000      
00002798  6508      4281          blo.s     MemoryTest_26
0000279A  0C85 0980 4282          cmp.l     #159383552,D5
0000279E  0000      
000027A0  630A      4283          bls.s     MemoryTest_24
                    4284   MemoryTest_26:
                    4285   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Please try again and ensure the address is withn 0x08020000 - 0x097FFFFF\r\n");
000027A2  4879 0000 4286          pea       @m649d4~1_146.L
000027A6  4E54      
000027A8  4E92      4287          jsr       (A2)
000027AA  584F      4288          addq.w    #4,A7
                    4289   MemoryTest_24:
000027AC  0C85 0900 4290          cmp.l     #150994944,D5
000027B0  0000      
000027B2  65D6      4291          blo       MemoryTest_22
000027B4  0C85 0980 4292          cmp.l     #159383552,D5
000027B8  0000      
000027BA  62CE      4293          bhi       MemoryTest_22
                    4294   ; }
                    4295   ; } while(StartPtrByte < (int)(0x09000000) || StartPtrByte > (int)(0x09800000));
                    4296   ; printf("\r\nPlease enter the end address you would like to use for the test data in memory\r\n");
000027BC  4879 0000 4297          pea       @m649d4~1_147.L
000027C0  4EDA      
000027C2  4E92      4298          jsr       (A2)
000027C4  584F      4299          addq.w    #4,A7
                    4300   ; do{
                    4301   MemoryTest_27:
                    4302   ; EndPtrByte = (int)Get8HexDigits(0);
000027C6  42A7      4303          clr.l     -(A7)
000027C8  4E93      4304          jsr       (A3)
000027CA  584F      4305          addq.w    #4,A7
000027CC  2D40 FFC0 4306          move.l    D0,-64(A6)
                    4307   ; if(EndPtrByte < (int)(0x09000000) || EndPtrByte > (int)(0x09800000)){
000027D0  202E FFC0 4308          move.l    -64(A6),D0
000027D4  0C80 0900 4309          cmp.l     #150994944,D0
000027D8  0000      
000027DA  650C      4310          blo.s     MemoryTest_31
000027DC  202E FFC0 4311          move.l    -64(A6),D0
000027E0  0C80 0980 4312          cmp.l     #159383552,D0
000027E4  0000      
000027E6  630A      4313          bls.s     MemoryTest_29
                    4314   MemoryTest_31:
                    4315   ; printf("\r\nERROR: End Address is outside of 68K memory range. Please try again and ensure the address is withn 0x08020000 - 0x097FFFFF\r\n");
000027E8  4879 0000 4316          pea       @m649d4~1_148.L
000027EC  4F2E      
000027EE  4E92      4317          jsr       (A2)
000027F0  584F      4318          addq.w    #4,A7
                    4319   MemoryTest_29:
000027F2  202E FFC0 4320          move.l    -64(A6),D0
000027F6  0C80 0900 4321          cmp.l     #150994944,D0
000027FA  0000      
000027FC  65C8      4322          blo       MemoryTest_27
000027FE  202E FFC0 4323          move.l    -64(A6),D0
00002802  0C80 0980 4324          cmp.l     #159383552,D0
00002806  0000      
00002808  62BC      4325          bhi       MemoryTest_27
                    4326   ; }
                    4327   ; } while(EndPtrByte < (int)(0x09000000) || EndPtrByte > (int)(0x09800000));
                    4328   ; printf("\r\n\r\nWriting to memory");
0000280A  4879 0000 4329          pea       @m649d4~1_149.L
0000280E  4FAE      
00002810  4E92      4330          jsr       (A2)
00002812  584F      4331          addq.w    #4,A7
                    4332   ; TempPtrByte = StartPtrByte;
00002814  2D45 FFC4 4333          move.l    D5,-60(A6)
                    4334   ; while (StartPtrByte < EndPtrByte) {
                    4335   MemoryTest_32:
00002818  BAAE FFC0 4336          cmp.l     -64(A6),D5
0000281C  6424      4337          bhs.s     MemoryTest_34
                    4338   ; *StartPtrByte = test_data_byte;
0000281E  2045      4339          move.l    D5,A0
00002820  10AE FFDC 4340          move.b    -36(A6),(A0)
                    4341   ; printf("\r\nWRITE: [%02X to %08x]", test_data_byte, StartPtrByte);
00002824  2F05      4342          move.l    D5,-(A7)
00002826  122E FFDC 4343          move.b    -36(A6),D1
0000282A  C2BC 0000 4344          and.l     #255,D1
0000282E  00FF      
00002830  2F01      4345          move.l    D1,-(A7)
00002832  4879 0000 4346          pea       @m649d4~1_150.L
00002836  4FC4      
00002838  4E92      4347          jsr       (A2)
0000283A  DEFC 000C 4348          add.w     #12,A7
                    4349   ; StartPtrByte++;
0000283E  5285      4350          addq.l    #1,D5
00002840  60D6      4351          bra       MemoryTest_32
                    4352   MemoryTest_34:
                    4353   ; }
                    4354   ; printf("\r\n\r\nStarting memory validation test");
00002842  4879 0000 4355          pea       @m649d4~1_151.L
00002846  4FDC      
00002848  4E92      4356          jsr       (A2)
0000284A  584F      4357          addq.w    #4,A7
                    4358   ; StartPtrByte = TempPtrByte;
0000284C  2A2E FFC4 4359          move.l    -60(A6),D5
                    4360   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrByte, EndPtrByte, test_data_byte);
00002850  122E FFDC 4361          move.b    -36(A6),D1
00002854  C2BC 0000 4362          and.l     #255,D1
00002858  00FF      
0000285A  2F01      4363          move.l    D1,-(A7)
0000285C  2F2E FFC0 4364          move.l    -64(A6),-(A7)
00002860  2F05      4365          move.l    D5,-(A7)
00002862  4879 0000 4366          pea       @m649d4~1_152.L
00002866  5000      
00002868  4E92      4367          jsr       (A2)
0000286A  DEFC 0010 4368          add.w     #16,A7
                    4369   ; while (StartPtrByte < EndPtrByte) {
                    4370   MemoryTest_35:
0000286E  BAAE FFC0 4371          cmp.l     -64(A6),D5
00002872  6400 003A 4372          bhs       MemoryTest_37
                    4373   ; if (*StartPtrByte != test_data_byte) {
00002876  2045      4374          move.l    D5,A0
00002878  1010      4375          move.b    (A0),D0
0000287A  B02E FFDC 4376          cmp.b     -36(A6),D0
0000287E  672A      4377          beq.s     MemoryTest_38
                    4378   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %02X Expected Data: %02X] Exiting memory test...\r\n", StartPtrByte, *StartPtrByte, test_data_byte);
00002880  122E FFDC 4379          move.b    -36(A6),D1
00002884  C2BC 0000 4380          and.l     #255,D1
00002888  00FF      
0000288A  2F01      4381          move.l    D1,-(A7)
0000288C  2045      4382          move.l    D5,A0
0000288E  1210      4383          move.b    (A0),D1
00002890  C2BC 0000 4384          and.l     #255,D1
00002894  00FF      
00002896  2F01      4385          move.l    D1,-(A7)
00002898  2F05      4386          move.l    D5,-(A7)
0000289A  4879 0000 4387          pea       @m649d4~1_153.L
0000289E  5048      
000028A0  4E92      4388          jsr       (A2)
000028A2  DEFC 0010 4389          add.w     #16,A7
                    4390   ; return;
000028A6  6000 04D2 4391          bra       MemoryTest_2
                    4392   MemoryTest_38:
                    4393   ; }
                    4394   ; StartPtrByte++;
000028AA  5285      4395          addq.l    #1,D5
000028AC  60C0      4396          bra       MemoryTest_35
                    4397   MemoryTest_37:
                    4398   ; }
                    4399   ; printf("\r\nPASS: Memory Validation test has passed!\r\n");
000028AE  4879 0000 4400          pea       @m649d4~1_154.L
000028B2  50D6      
000028B4  4E92      4401          jsr       (A2)
000028B6  584F      4402          addq.w    #4,A7
                    4403   ; break;
000028B8  6000 04C0 4404          bra       MemoryTest_2
                    4405   MemoryTest_4:
                    4406   ; case (char)('2') :
                    4407   ; printf("\r\nYou have selcted to use word size data to test your memory");
000028BC  4879 0000 4408          pea       @m649d4~1_155.L
000028C0  5104      
000028C2  4E92      4409          jsr       (A2)
000028C4  584F      4410          addq.w    #4,A7
                    4411   ; printf("\r\nOut of the below example test data, please select one by entering the value associated to each example:");
000028C6  4879 0000 4412          pea       @m649d4~1_156.L
000028CA  5142      
000028CC  4E92      4413          jsr       (A2)
000028CE  584F      4414          addq.w    #4,A7
                    4415   ; printf("\r\n1 = \"AAAA\"\n2 = \"BABA\"\n3 = \"CCDD\"\n4 = \"DDDD\"\r\n");
000028D0  4879 0000 4416          pea       @m649d4~1_157.L
000028D4  51AC      
000028D6  4E92      4417          jsr       (A2)
000028D8  584F      4418          addq.w    #4,A7
                    4419   ; do {
                    4420   MemoryTest_40:
                    4421   ; test_data_num = (int)(_getch());
000028DA  4EB8 0B68 4422          jsr       __getch
000028DE  2400      4423          move.l    D0,D2
                    4424   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
000028E0  0C82 0000 4425          cmp.l     #49,D2
000028E4  0031      
000028E6  6722      4426          beq.s     MemoryTest_42
000028E8  0C82 0000 4427          cmp.l     #50,D2
000028EC  0032      
000028EE  671A      4428          beq.s     MemoryTest_42
000028F0  0C82 0000 4429          cmp.l     #51,D2
000028F4  0033      
000028F6  6712      4430          beq.s     MemoryTest_42
000028F8  0C82 0000 4431          cmp.l     #52,D2
000028FC  0034      
000028FE  670A      4432          beq.s     MemoryTest_42
                    4433   ; printf("\r\nERROR: You have entered a keyboard input that does not associated with an option above, please try again\r\n");
00002900  4879 0000 4434          pea       @m649d4~1_143.L
00002904  4D50      
00002906  4E92      4435          jsr       (A2)
00002908  584F      4436          addq.w    #4,A7
                    4437   MemoryTest_42:
0000290A  0C82 0000 4438          cmp.l     #49,D2
0000290E  0031      
00002910  6718      4439          beq.s     MemoryTest_44
00002912  0C82 0000 4440          cmp.l     #50,D2
00002916  0032      
00002918  6710      4441          beq.s     MemoryTest_44
0000291A  0C82 0000 4442          cmp.l     #51,D2
0000291E  0033      
00002920  6708      4443          beq.s     MemoryTest_44
00002922  0C82 0000 4444          cmp.l     #52,D2
00002926  0034      
00002928  66B0      4445          bne       MemoryTest_40
                    4446   MemoryTest_44:
                    4447   ; }
                    4448   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    4449   ; if (test_data_num == (int)('1')) {
0000292A  0C82 0000 4450          cmp.l     #49,D2
0000292E  0031      
00002930  6608      4451          bne.s     MemoryTest_45
                    4452   ; test_data_word = test_data_word_list[0];
00002932  2A6E FFDE 4453          move.l    -34+0(A6),A5
00002936  6000 003A 4454          bra       MemoryTest_52
                    4455   MemoryTest_45:
                    4456   ; }
                    4457   ; else if (test_data_num == (int)('2')) {
0000293A  0C82 0000 4458          cmp.l     #50,D2
0000293E  0032      
00002940  6606      4459          bne.s     MemoryTest_47
                    4460   ; test_data_word = test_data_word_list[1];
00002942  2A6E FFE2 4461          move.l    -34+4(A6),A5
00002946  602A      4462          bra.s     MemoryTest_52
                    4463   MemoryTest_47:
                    4464   ; }
                    4465   ; else if (test_data_num == (int)('3')) {
00002948  0C82 0000 4466          cmp.l     #51,D2
0000294C  0033      
0000294E  6606      4467          bne.s     MemoryTest_49
                    4468   ; test_data_word = test_data_word_list[2];
00002950  2A6E FFE6 4469          move.l    -34+8(A6),A5
00002954  601C      4470          bra.s     MemoryTest_52
                    4471   MemoryTest_49:
                    4472   ; }
                    4473   ; else if (test_data_num == (int)('4')) {
00002956  0C82 0000 4474          cmp.l     #52,D2
0000295A  0034      
0000295C  6606      4475          bne.s     MemoryTest_51
                    4476   ; test_data_word = test_data_word_list[3];
0000295E  2A6E FFEA 4477          move.l    -34+12(A6),A5
00002962  600E      4478          bra.s     MemoryTest_52
                    4479   MemoryTest_51:
                    4480   ; }
                    4481   ; else {
                    4482   ; printf("\r\nERROR: Option memory complication. Exiting memory test...\r\n");
00002964  4879 0000 4483          pea       @m649d4~1_144.L
00002968  4DBE      
0000296A  4E92      4484          jsr       (A2)
0000296C  584F      4485          addq.w    #4,A7
                    4486   ; return;
0000296E  6000 040A 4487          bra       MemoryTest_2
                    4488   MemoryTest_52:
                    4489   ; }
                    4490   ; do {
                    4491   MemoryTest_53:
                    4492   ; printf("\r\nPlease enter the start address you would like to use for the test data into memory (Ensure to enter an even number)\r\n");
00002972  4879 0000 4493          pea       @m649d4~1_158.L
00002976  51DC      
00002978  4E92      4494          jsr       (A2)
0000297A  584F      4495          addq.w    #4,A7
                    4496   ; StartPtrWord = Get8HexDigits(0);
0000297C  42A7      4497          clr.l     -(A7)
0000297E  4E93      4498          jsr       (A3)
00002980  584F      4499          addq.w    #4,A7
00002982  2800      4500          move.l    D0,D4
                    4501   ; while(StartPtrWord < (int)(0x09000000) || StartPtrWord > (int)(0x09800000)){
                    4502   MemoryTest_55:
00002984  0C84 0900 4503          cmp.l     #150994944,D4
00002988  0000      
0000298A  6508      4504          blo.s     MemoryTest_58
0000298C  0C84 0980 4505          cmp.l     #159383552,D4
00002990  0000      
00002992  6314      4506          bls.s     MemoryTest_57
                    4507   MemoryTest_58:
                    4508   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Please try again and ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002994  4879 0000 4509          pea       @m649d4~1_159.L
00002998  5254      
0000299A  4E92      4510          jsr       (A2)
0000299C  584F      4511          addq.w    #4,A7
                    4512   ; StartPtrWord = Get8HexDigits(0);
0000299E  42A7      4513          clr.l     -(A7)
000029A0  4E93      4514          jsr       (A3)
000029A2  584F      4515          addq.w    #4,A7
000029A4  2800      4516          move.l    D0,D4
000029A6  60DC      4517          bra       MemoryTest_55
                    4518   MemoryTest_57:
                    4519   ; }
                    4520   ; if (StartPtrWord % 2 != 0) {
000029A8  2F04      4521          move.l    D4,-(A7)
000029AA  4878 0002 4522          pea       2
000029AE  4EB9 0000 4523          jsr       ULDIV
000029B2  3060      
000029B4  202F 0004 4524          move.l    4(A7),D0
000029B8  504F      4525          addq.w    #8,A7
000029BA  4A80      4526          tst.l     D0
000029BC  670A      4527          beq.s     MemoryTest_59
                    4528   ; printf("\r\nERROR: The address you have entered is not even. Please try again\r\n");
000029BE  4879 0000 4529          pea       @m649d4~1_160.L
000029C2  52DA      
000029C4  4E92      4530          jsr       (A2)
000029C6  584F      4531          addq.w    #4,A7
                    4532   MemoryTest_59:
000029C8  2F04      4533          move.l    D4,-(A7)
000029CA  4878 0002 4534          pea       2
000029CE  4EB9 0000 4535          jsr       ULDIV
000029D2  3060      
000029D4  202F 0004 4536          move.l    4(A7),D0
000029D8  504F      4537          addq.w    #8,A7
000029DA  4A80      4538          tst.l     D0
000029DC  6694      4539          bne       MemoryTest_53
                    4540   ; }
                    4541   ; } while (StartPtrWord % 2 != 0);
                    4542   ; do {
                    4543   MemoryTest_61:
                    4544   ; printf("\r\nPlease enter the end address you would like to use for the test data in memory (Ensure to enter an even number)\r\n");
000029DE  4879 0000 4545          pea       @m649d4~1_161.L
000029E2  5320      
000029E4  4E92      4546          jsr       (A2)
000029E6  584F      4547          addq.w    #4,A7
                    4548   ; EndPtrWord = Get8HexDigits(0);
000029E8  42A7      4549          clr.l     -(A7)
000029EA  4E93      4550          jsr       (A3)
000029EC  584F      4551          addq.w    #4,A7
000029EE  2840      4552          move.l    D0,A4
                    4553   ; while(EndPtrWord < (int)(0x09000000) || EndPtrWord > (int)(0x09800000)){
                    4554   MemoryTest_63:
000029F0  200C      4555          move.l    A4,D0
000029F2  0C80 0900 4556          cmp.l     #150994944,D0
000029F6  0000      
000029F8  650A      4557          blo.s     MemoryTest_66
000029FA  200C      4558          move.l    A4,D0
000029FC  0C80 0980 4559          cmp.l     #159383552,D0
00002A00  0000      
00002A02  6314      4560          bls.s     MemoryTest_65
                    4561   MemoryTest_66:
                    4562   ; printf("\r\nERROR: End Address is outside of 68K memory range. Please try again and ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002A04  4879 0000 4563          pea       @m649d4~1_162.L
00002A08  5394      
00002A0A  4E92      4564          jsr       (A2)
00002A0C  584F      4565          addq.w    #4,A7
                    4566   ; EndPtrWord = Get8HexDigits(0);
00002A0E  42A7      4567          clr.l     -(A7)
00002A10  4E93      4568          jsr       (A3)
00002A12  584F      4569          addq.w    #4,A7
00002A14  2840      4570          move.l    D0,A4
00002A16  60D8      4571          bra       MemoryTest_63
                    4572   MemoryTest_65:
                    4573   ; }
                    4574   ; if (EndPtrWord % 2 != 0) {
00002A18  2F0C      4575          move.l    A4,-(A7)
00002A1A  4878 0002 4576          pea       2
00002A1E  4EB9 0000 4577          jsr       ULDIV
00002A22  3060      
00002A24  202F 0004 4578          move.l    4(A7),D0
00002A28  504F      4579          addq.w    #8,A7
00002A2A  4A80      4580          tst.l     D0
00002A2C  670A      4581          beq.s     MemoryTest_67
                    4582   ; printf("\r\nERROR: The address you have entered is not even. Please try again\r\n");
00002A2E  4879 0000 4583          pea       @m649d4~1_160.L
00002A32  52DA      
00002A34  4E92      4584          jsr       (A2)
00002A36  584F      4585          addq.w    #4,A7
                    4586   MemoryTest_67:
00002A38  2F0C      4587          move.l    A4,-(A7)
00002A3A  4878 0002 4588          pea       2
00002A3E  4EB9 0000 4589          jsr       ULDIV
00002A42  3060      
00002A44  202F 0004 4590          move.l    4(A7),D0
00002A48  504F      4591          addq.w    #8,A7
00002A4A  4A80      4592          tst.l     D0
00002A4C  6690      4593          bne       MemoryTest_61
                    4594   ; }
                    4595   ; } while (EndPtrWord % 2 != 0);
                    4596   ; printf("\r\n\r\nWriting to memory");
00002A4E  4879 0000 4597          pea       @m649d4~1_149.L
00002A52  4FAE      
00002A54  4E92      4598          jsr       (A2)
00002A56  584F      4599          addq.w    #4,A7
                    4600   ; TempPtrWord = StartPtrWord;
00002A58  2D44 FFC8 4601          move.l    D4,-56(A6)
                    4602   ; while (StartPtrWord < EndPtrWord) {
                    4603   MemoryTest_69:
00002A5C  B88C      4604          cmp.l     A4,D4
00002A5E  6418      4605          bhs.s     MemoryTest_71
                    4606   ; *StartPtrWord = test_data_word;
00002A60  2044      4607          move.l    D4,A0
00002A62  308D      4608          move.w    A5,(A0)
                    4609   ; printf("\r\nWRITE: [%04X to %08x]", test_data_word, StartPtrWord);
00002A64  2F04      4610          move.l    D4,-(A7)
00002A66  2F0D      4611          move.l    A5,-(A7)
00002A68  4879 0000 4612          pea       @m649d4~1_163.L
00002A6C  5414      
00002A6E  4E92      4613          jsr       (A2)
00002A70  DEFC 000C 4614          add.w     #12,A7
                    4615   ; StartPtrWord++;
00002A74  5484      4616          addq.l    #2,D4
00002A76  60E4      4617          bra       MemoryTest_69
                    4618   MemoryTest_71:
                    4619   ; }
                    4620   ; printf("\r\n\r\nStarting memory validation test");
00002A78  4879 0000 4621          pea       @m649d4~1_151.L
00002A7C  4FDC      
00002A7E  4E92      4622          jsr       (A2)
00002A80  584F      4623          addq.w    #4,A7
                    4624   ; StartPtrWord = TempPtrWord;
00002A82  282E FFC8 4625          move.l    -56(A6),D4
                    4626   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrWord, EndPtrWord, test_data_word);
00002A86  2F0D      4627          move.l    A5,-(A7)
00002A88  2F0C      4628          move.l    A4,-(A7)
00002A8A  2F04      4629          move.l    D4,-(A7)
00002A8C  4879 0000 4630          pea       @m649d4~1_152.L
00002A90  5000      
00002A92  4E92      4631          jsr       (A2)
00002A94  DEFC 0010 4632          add.w     #16,A7
                    4633   ; while (StartPtrWord < EndPtrWord) {
                    4634   MemoryTest_72:
00002A98  B88C      4635          cmp.l     A4,D4
00002A9A  6400 0034 4636          bhs       MemoryTest_74
                    4637   ; if (*StartPtrWord != test_data_word) {
00002A9E  2044      4638          move.l    D4,A0
00002AA0  3010      4639          move.w    (A0),D0
00002AA2  C0BC 0000 4640          and.l     #65535,D0
00002AA6  FFFF      
00002AA8  B08D      4641          cmp.l     A5,D0
00002AAA  6720      4642          beq.s     MemoryTest_75
                    4643   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %02X Expected Data: %02X] Exiting memory test...", StartPtrWord, *StartPtrWord, test_data_word);
00002AAC  2F0D      4644          move.l    A5,-(A7)
00002AAE  2044      4645          move.l    D4,A0
00002AB0  3210      4646          move.w    (A0),D1
00002AB2  C2BC 0000 4647          and.l     #65535,D1
00002AB6  FFFF      
00002AB8  2F01      4648          move.l    D1,-(A7)
00002ABA  2F04      4649          move.l    D4,-(A7)
00002ABC  4879 0000 4650          pea       @m649d4~1_164.L
00002AC0  542C      
00002AC2  4E92      4651          jsr       (A2)
00002AC4  DEFC 0010 4652          add.w     #16,A7
                    4653   ; return;
00002AC8  6000 02B0 4654          bra       MemoryTest_2
                    4655   MemoryTest_75:
                    4656   ; }
                    4657   ; StartPtrWord++;
00002ACC  5484      4658          addq.l    #2,D4
00002ACE  60C8      4659          bra       MemoryTest_72
                    4660   MemoryTest_74:
                    4661   ; }
                    4662   ; printf("\r\nPASS: Memory Validation test has passed!\r\n");
00002AD0  4879 0000 4663          pea       @m649d4~1_154.L
00002AD4  50D6      
00002AD6  4E92      4664          jsr       (A2)
00002AD8  584F      4665          addq.w    #4,A7
                    4666   ; break;
00002ADA  6000 029E 4667          bra       MemoryTest_2
                    4668   MemoryTest_5:
                    4669   ; case (char)('3') :
                    4670   ; printf("\r\nYou have selcted to use bytes size data to test your memory");
00002ADE  4879 0000 4671          pea       @m649d4~1_165.L
00002AE2  54B8      
00002AE4  4E92      4672          jsr       (A2)
00002AE6  584F      4673          addq.w    #4,A7
                    4674   ; printf("\r\nOut of the below example test data, please select one by entering the value associated to each example:");
00002AE8  4879 0000 4675          pea       @m649d4~1_156.L
00002AEC  5142      
00002AEE  4E92      4676          jsr       (A2)
00002AF0  584F      4677          addq.w    #4,A7
                    4678   ; printf("\r\n1 = \"AAAAAAAA\"\n2 = \"ABABABAB\"\n3 = \"CCCCDDDD\"\n4 = \"AABBCCDD\"\r\n");
00002AF2  4879 0000 4679          pea       @m649d4~1_166.L
00002AF6  54F6      
00002AF8  4E92      4680          jsr       (A2)
00002AFA  584F      4681          addq.w    #4,A7
                    4682   ; do {
                    4683   MemoryTest_77:
                    4684   ; test_data_num = (int)(_getch());
00002AFC  4EB8 0B68 4685          jsr       __getch
00002B00  2400      4686          move.l    D0,D2
                    4687   ; if (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4')) {
00002B02  0C82 0000 4688          cmp.l     #49,D2
00002B06  0031      
00002B08  6722      4689          beq.s     MemoryTest_79
00002B0A  0C82 0000 4690          cmp.l     #50,D2
00002B0E  0032      
00002B10  671A      4691          beq.s     MemoryTest_79
00002B12  0C82 0000 4692          cmp.l     #51,D2
00002B16  0033      
00002B18  6712      4693          beq.s     MemoryTest_79
00002B1A  0C82 0000 4694          cmp.l     #52,D2
00002B1E  0034      
00002B20  670A      4695          beq.s     MemoryTest_79
                    4696   ; printf("\r\nERROR: You have entered a keyboard input that does not associated with an option above, please try again\r\n");
00002B22  4879 0000 4697          pea       @m649d4~1_143.L
00002B26  4D50      
00002B28  4E92      4698          jsr       (A2)
00002B2A  584F      4699          addq.w    #4,A7
                    4700   MemoryTest_79:
00002B2C  0C82 0000 4701          cmp.l     #49,D2
00002B30  0031      
00002B32  6718      4702          beq.s     MemoryTest_81
00002B34  0C82 0000 4703          cmp.l     #50,D2
00002B38  0032      
00002B3A  6710      4704          beq.s     MemoryTest_81
00002B3C  0C82 0000 4705          cmp.l     #51,D2
00002B40  0033      
00002B42  6708      4706          beq.s     MemoryTest_81
00002B44  0C82 0000 4707          cmp.l     #52,D2
00002B48  0034      
00002B4A  66B0      4708          bne       MemoryTest_77
                    4709   MemoryTest_81:
                    4710   ; }
                    4711   ; } while (test_data_num != (int)('1') && test_data_num != (int)('2') && test_data_num != (int)('3') && test_data_num != (int)('4'));
                    4712   ; if (test_data_num == (int)('1')) {
00002B4C  0C82 0000 4713          cmp.l     #49,D2
00002B50  0031      
00002B52  6608      4714          bne.s     MemoryTest_82
                    4715   ; test_data_long_word = test_data_long_word_list[0];
00002B54  2C2E FFEE 4716          move.l    -18+0(A6),D6
00002B58  6000 003A 4717          bra       MemoryTest_89
                    4718   MemoryTest_82:
                    4719   ; }
                    4720   ; else if (test_data_num == (int)('2')) {
00002B5C  0C82 0000 4721          cmp.l     #50,D2
00002B60  0032      
00002B62  6606      4722          bne.s     MemoryTest_84
                    4723   ; test_data_long_word = test_data_long_word_list[1];
00002B64  2C2E FFF2 4724          move.l    -18+4(A6),D6
00002B68  602A      4725          bra.s     MemoryTest_89
                    4726   MemoryTest_84:
                    4727   ; }
                    4728   ; else if (test_data_num == (int)('3')) {
00002B6A  0C82 0000 4729          cmp.l     #51,D2
00002B6E  0033      
00002B70  6606      4730          bne.s     MemoryTest_86
                    4731   ; test_data_long_word = test_data_long_word_list[2];
00002B72  2C2E FFF6 4732          move.l    -18+8(A6),D6
00002B76  601C      4733          bra.s     MemoryTest_89
                    4734   MemoryTest_86:
                    4735   ; }
                    4736   ; else if (test_data_num == (int)('4')) {
00002B78  0C82 0000 4737          cmp.l     #52,D2
00002B7C  0034      
00002B7E  6606      4738          bne.s     MemoryTest_88
                    4739   ; test_data_long_word = test_data_long_word_list[3];
00002B80  2C2E FFFA 4740          move.l    -18+12(A6),D6
00002B84  600E      4741          bra.s     MemoryTest_89
                    4742   MemoryTest_88:
                    4743   ; }
                    4744   ; else {
                    4745   ; printf("\r\nERROR: Option memory complication. Exiting memory test...\r\n");
00002B86  4879 0000 4746          pea       @m649d4~1_144.L
00002B8A  4DBE      
00002B8C  4E92      4747          jsr       (A2)
00002B8E  584F      4748          addq.w    #4,A7
                    4749   ; return;
00002B90  6000 01E8 4750          bra       MemoryTest_2
                    4751   MemoryTest_89:
                    4752   ; }
                    4753   ; do {
                    4754   MemoryTest_90:
                    4755   ; printf("\r\nPlease enter the start address you would like to use for the test data into memory (Ensure to enter an even number)\r\n");
00002B94  4879 0000 4756          pea       @m649d4~1_158.L
00002B98  51DC      
00002B9A  4E92      4757          jsr       (A2)
00002B9C  584F      4758          addq.w    #4,A7
                    4759   ; StartPtrLongWord = Get8HexDigits(0);
00002B9E  42A7      4760          clr.l     -(A7)
00002BA0  4E93      4761          jsr       (A3)
00002BA2  584F      4762          addq.w    #4,A7
00002BA4  2600      4763          move.l    D0,D3
                    4764   ; while(StartPtrLongWord < (int)(0x09000000) || StartPtrLongWord > (int)(0x09800000)){
                    4765   MemoryTest_92:
00002BA6  0C83 0900 4766          cmp.l     #150994944,D3
00002BAA  0000      
00002BAC  6508      4767          blo.s     MemoryTest_95
00002BAE  0C83 0980 4768          cmp.l     #159383552,D3
00002BB2  0000      
00002BB4  6314      4769          bls.s     MemoryTest_94
                    4770   MemoryTest_95:
                    4771   ; printf("\r\nERROR: Starting Address is outside of 68K memory range. Please try again and ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002BB6  4879 0000 4772          pea       @m649d4~1_159.L
00002BBA  5254      
00002BBC  4E92      4773          jsr       (A2)
00002BBE  584F      4774          addq.w    #4,A7
                    4775   ; StartPtrLongWord = Get8HexDigits(0);
00002BC0  42A7      4776          clr.l     -(A7)
00002BC2  4E93      4777          jsr       (A3)
00002BC4  584F      4778          addq.w    #4,A7
00002BC6  2600      4779          move.l    D0,D3
00002BC8  60DC      4780          bra       MemoryTest_92
                    4781   MemoryTest_94:
                    4782   ; }
                    4783   ; if (StartPtrLongWord % 2 != 0) {
00002BCA  2F03      4784          move.l    D3,-(A7)
00002BCC  4878 0002 4785          pea       2
00002BD0  4EB9 0000 4786          jsr       ULDIV
00002BD4  3060      
00002BD6  202F 0004 4787          move.l    4(A7),D0
00002BDA  504F      4788          addq.w    #8,A7
00002BDC  4A80      4789          tst.l     D0
00002BDE  670A      4790          beq.s     MemoryTest_96
                    4791   ; printf("\r\nERROR: The address you have entered is not even. Please try again\r\n");
00002BE0  4879 0000 4792          pea       @m649d4~1_160.L
00002BE4  52DA      
00002BE6  4E92      4793          jsr       (A2)
00002BE8  584F      4794          addq.w    #4,A7
                    4795   MemoryTest_96:
00002BEA  2F03      4796          move.l    D3,-(A7)
00002BEC  4878 0002 4797          pea       2
00002BF0  4EB9 0000 4798          jsr       ULDIV
00002BF4  3060      
00002BF6  202F 0004 4799          move.l    4(A7),D0
00002BFA  504F      4800          addq.w    #8,A7
00002BFC  4A80      4801          tst.l     D0
00002BFE  6694      4802          bne       MemoryTest_90
                    4803   ; }
                    4804   ; } while (StartPtrLongWord % 2 != 0);
                    4805   ; do {
                    4806   MemoryTest_98:
                    4807   ; printf("\r\nPlease enter the end address you would like to use for the test data in memory (Ensure to enter an even number)\r\n");
00002C00  4879 0000 4808          pea       @m649d4~1_161.L
00002C04  5320      
00002C06  4E92      4809          jsr       (A2)
00002C08  584F      4810          addq.w    #4,A7
                    4811   ; EndPtrLongWord = Get8HexDigits(0);
00002C0A  42A7      4812          clr.l     -(A7)
00002C0C  4E93      4813          jsr       (A3)
00002C0E  584F      4814          addq.w    #4,A7
00002C10  2E00      4815          move.l    D0,D7
                    4816   ; while(EndPtrLongWord < (int)(0x09000000) || EndPtrLongWord > (int)(0x09800000)){
                    4817   MemoryTest_100:
00002C12  0C87 0900 4818          cmp.l     #150994944,D7
00002C16  0000      
00002C18  6508      4819          blo.s     MemoryTest_103
00002C1A  0C87 0980 4820          cmp.l     #159383552,D7
00002C1E  0000      
00002C20  6314      4821          bls.s     MemoryTest_102
                    4822   MemoryTest_103:
                    4823   ; printf("\r\nERROR: End Address is outside of 68K memory range. Please try again and ensure the address is withn 0x09000000 - 0x097FFFFF\r\n");
00002C22  4879 0000 4824          pea       @m649d4~1_162.L
00002C26  5394      
00002C28  4E92      4825          jsr       (A2)
00002C2A  584F      4826          addq.w    #4,A7
                    4827   ; EndPtrLongWord = Get8HexDigits(0);
00002C2C  42A7      4828          clr.l     -(A7)
00002C2E  4E93      4829          jsr       (A3)
00002C30  584F      4830          addq.w    #4,A7
00002C32  2E00      4831          move.l    D0,D7
00002C34  60DC      4832          bra       MemoryTest_100
                    4833   MemoryTest_102:
                    4834   ; }
                    4835   ; if (EndPtrLongWord % 2 != 0) {
00002C36  2F07      4836          move.l    D7,-(A7)
00002C38  4878 0002 4837          pea       2
00002C3C  4EB9 0000 4838          jsr       ULDIV
00002C40  3060      
00002C42  202F 0004 4839          move.l    4(A7),D0
00002C46  504F      4840          addq.w    #8,A7
00002C48  4A80      4841          tst.l     D0
00002C4A  670A      4842          beq.s     MemoryTest_104
                    4843   ; printf("\r\nERROR: The address you have entered is not even. Please try again\r\n");
00002C4C  4879 0000 4844          pea       @m649d4~1_160.L
00002C50  52DA      
00002C52  4E92      4845          jsr       (A2)
00002C54  584F      4846          addq.w    #4,A7
                    4847   MemoryTest_104:
00002C56  2F07      4848          move.l    D7,-(A7)
00002C58  4878 0002 4849          pea       2
00002C5C  4EB9 0000 4850          jsr       ULDIV
00002C60  3060      
00002C62  202F 0004 4851          move.l    4(A7),D0
00002C66  504F      4852          addq.w    #8,A7
00002C68  4A80      4853          tst.l     D0
00002C6A  6694      4854          bne       MemoryTest_98
                    4855   ; }
                    4856   ; } while (EndPtrLongWord % 2 != 0);
                    4857   ; printf("\r\n\r\nWriting to memory");
00002C6C  4879 0000 4858          pea       @m649d4~1_149.L
00002C70  4FAE      
00002C72  4E92      4859          jsr       (A2)
00002C74  584F      4860          addq.w    #4,A7
                    4861   ; StartPtrLongWordTruc = StartPtrLongWord;
00002C76  2D43 FFD0 4862          move.l    D3,-48(A6)
                    4863   ; EndPtrLongWordTruc = EndPtrLongWord;
00002C7A  2D47 FFD4 4864          move.l    D7,-44(A6)
                    4865   ; TempPtrLongWord = StartPtrLongWord;
00002C7E  2D43 FFCC 4866          move.l    D3,-52(A6)
                    4867   ; if((EndPtrLongWordTruc-StartPtrLongWordTruc) % 0x4 != 0){
00002C82  202E FFD4 4868          move.l    -44(A6),D0
00002C86  90AE FFD0 4869          sub.l     -48(A6),D0
00002C8A  2F00      4870          move.l    D0,-(A7)
00002C8C  4878 0004 4871          pea       4
00002C90  4EB9 0000 4872          jsr       LDIV
00002C94  3072      
00002C96  202F 0004 4873          move.l    4(A7),D0
00002C9A  504F      4874          addq.w    #8,A7
00002C9C  4A80      4875          tst.l     D0
00002C9E  670E      4876          beq.s     MemoryTest_106
                    4877   ; printf("\r\nWARNING: Memory will contain truncated data"); 
00002CA0  4879 0000 4878          pea       @m649d4~1_167.L
00002CA4  5536      
00002CA6  4E92      4879          jsr       (A2)
00002CA8  584F      4880          addq.w    #4,A7
                    4881   ; truncated_data = test_data_long_word;   
00002CAA  3D46 FFFE 4882          move.w    D6,-2(A6)
                    4883   MemoryTest_106:
                    4884   ; }
                    4885   ; while (StartPtrLongWord < EndPtrLongWord) {
                    4886   MemoryTest_108:
00002CAE  B687      4887          cmp.l     D7,D3
00002CB0  6400 0050 4888          bhs       MemoryTest_110
                    4889   ; if(EndPtrLongWordTruc - StartPtrLongWordTruc < 4){
00002CB4  202E FFD4 4890          move.l    -44(A6),D0
00002CB8  90AE FFD0 4891          sub.l     -48(A6),D0
00002CBC  0C80 0000 4892          cmp.l     #4,D0
00002CC0  0004      
00002CC2  6C22      4893          bge.s     MemoryTest_111
                    4894   ; StartPtrWord = StartPtrLongWord;
00002CC4  2803      4895          move.l    D3,D4
                    4896   ; *StartPtrWord = test_data_long_word;
00002CC6  2044      4897          move.l    D4,A0
00002CC8  3086      4898          move.w    D6,(A0)
                    4899   ; printf("\r\nWRITE: [%08X to %08x]", *StartPtrWord, StartPtrWord);
00002CCA  2F04      4900          move.l    D4,-(A7)
00002CCC  2044      4901          move.l    D4,A0
00002CCE  3210      4902          move.w    (A0),D1
00002CD0  C2BC 0000 4903          and.l     #65535,D1
00002CD4  FFFF      
00002CD6  2F01      4904          move.l    D1,-(A7)
00002CD8  4879 0000 4905          pea       @m649d4~1_168.L
00002CDC  5564      
00002CDE  4E92      4906          jsr       (A2)
00002CE0  DEFC 000C 4907          add.w     #12,A7
00002CE4  6014      4908          bra.s     MemoryTest_112
                    4909   MemoryTest_111:
                    4910   ; }else{
                    4911   ; *StartPtrLongWord = test_data_long_word;
00002CE6  2043      4912          move.l    D3,A0
00002CE8  2086      4913          move.l    D6,(A0)
                    4914   ; printf("\r\nWRITE: [%08X to %08x]", test_data_long_word, StartPtrLongWord);
00002CEA  2F03      4915          move.l    D3,-(A7)
00002CEC  2F06      4916          move.l    D6,-(A7)
00002CEE  4879 0000 4917          pea       @m649d4~1_168.L
00002CF2  5564      
00002CF4  4E92      4918          jsr       (A2)
00002CF6  DEFC 000C 4919          add.w     #12,A7
                    4920   MemoryTest_112:
                    4921   ; }
                    4922   ; StartPtrLongWord++;
00002CFA  5883      4923          addq.l    #4,D3
                    4924   ; StartPtrLongWordTruc = StartPtrLongWord;
00002CFC  2D43 FFD0 4925          move.l    D3,-48(A6)
00002D00  60AC      4926          bra       MemoryTest_108
                    4927   MemoryTest_110:
                    4928   ; }
                    4929   ; printf("\r\n\r\nStarting memory validation test");
00002D02  4879 0000 4930          pea       @m649d4~1_151.L
00002D06  4FDC      
00002D08  4E92      4931          jsr       (A2)
00002D0A  584F      4932          addq.w    #4,A7
                    4933   ; StartPtrLongWord = TempPtrLongWord;
00002D0C  262E FFCC 4934          move.l    -52(A6),D3
                    4935   ; truncated_data = test_data_long_word;
00002D10  3D46 FFFE 4936          move.w    D6,-2(A6)
                    4937   ; printf("\r\nVerifying the addresses [%08x to %08x] contains test data [%02X].....", StartPtrLongWord, EndPtrLongWord, test_data_long_word);
00002D14  2F06      4938          move.l    D6,-(A7)
00002D16  2F07      4939          move.l    D7,-(A7)
00002D18  2F03      4940          move.l    D3,-(A7)
00002D1A  4879 0000 4941          pea       @m649d4~1_152.L
00002D1E  5000      
00002D20  4E92      4942          jsr       (A2)
00002D22  DEFC 0010 4943          add.w     #16,A7
                    4944   ; while (StartPtrLongWord < EndPtrLongWord) {
                    4945   MemoryTest_113:
00002D26  B687      4946          cmp.l     D7,D3
00002D28  6400 003A 4947          bhs       MemoryTest_115
                    4948   ; if(EndPtrLongWordTruc - StartPtrLongWordTruc < 4){
00002D2C  202E FFD4 4949          move.l    -44(A6),D0
00002D30  90AE FFD0 4950          sub.l     -48(A6),D0
00002D34  0C80 0000 4951          cmp.l     #4,D0
00002D38  0004      
00002D3A  6C04      4952          bge.s     MemoryTest_116
                    4953   ; StartPtrWord = StartPtrLongWord;
00002D3C  2803      4954          move.l    D3,D4
00002D3E  601C      4955          bra.s     MemoryTest_118
                    4956   MemoryTest_116:
                    4957   ; }else{
                    4958   ; if (*StartPtrLongWord != test_data_long_word) {
00002D40  2043      4959          move.l    D3,A0
00002D42  BC90      4960          cmp.l     (A0),D6
00002D44  6716      4961          beq.s     MemoryTest_118
                    4962   ; printf("\r\nERROR: Data within memory does not match selected test data! [Address: %08x Exact Data: %08X Expected Data: %08X] Exiting memory test...\r\n", StartPtrLongWord, *StartPtrLongWord, test_data_long_word);
00002D46  2F06      4963          move.l    D6,-(A7)
00002D48  2043      4964          move.l    D3,A0
00002D4A  2F10      4965          move.l    (A0),-(A7)
00002D4C  2F03      4966          move.l    D3,-(A7)
00002D4E  4879 0000 4967          pea       @m649d4~1_169.L
00002D52  557C      
00002D54  4E92      4968          jsr       (A2)
00002D56  DEFC 0010 4969          add.w     #16,A7
                    4970   ; return;
00002D5A  601E      4971          bra.s     MemoryTest_2
                    4972   MemoryTest_118:
                    4973   ; }
                    4974   ; }
                    4975   ; StartPtrLongWord++;
00002D5C  5883      4976          addq.l    #4,D3
                    4977   ; StartPtrLongWordTruc = StartPtrLongWord;
00002D5E  2D43 FFD0 4978          move.l    D3,-48(A6)
00002D62  60C2      4979          bra       MemoryTest_113
                    4980   MemoryTest_115:
                    4981   ; }
                    4982   ; printf("\r\nPASS: Memory Validation test has passed!\r\n");
00002D64  4879 0000 4983          pea       @m649d4~1_154.L
00002D68  50D6      
00002D6A  4E92      4984          jsr       (A2)
00002D6C  584F      4985          addq.w    #4,A7
                    4986   ; break;
00002D6E  600A      4987          bra.s     MemoryTest_2
                    4988   MemoryTest_1:
                    4989   ; default:
                    4990   ; printf("\r\nYou failed to select a data type to use! Click open memory test again to try again.\r\n");
00002D70  4879 0000 4991          pea       @m649d4~1_170.L
00002D74  560A      
00002D76  4E92      4992          jsr       (A2)
00002D78  584F      4993          addq.w    #4,A7
                    4994   MemoryTest_2:
00002D7A  4CDF 3CFC 4995          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002D7E  4E5E      4996          unlk      A6
00002D80  4E75      4997          rts
                    4998   ; }
                    4999   ; }
                    5000   ; void main(void)
                    5001   ; {
                    5002   _main:
00002D82  4E56 FFF0 5003          link      A6,#-16
00002D86  48E7 3030 5004          movem.l   D2/D3/A2/A3,-(A7)
00002D8A  45F8 0A30 5005          lea       _InstallExceptionHandler.L,A2
00002D8E  47F9 0000 5006          lea       _printf.L,A3
00002D92  324C      
                    5007   ; char c;
                    5008   ; int i, j;
                    5009   ; char* BugMessage = "DE1-68k Bug V1.77";
00002D94  41F9 0000 5010          lea       @m649d4~1_171.L,A0
00002D98  5662      
00002D9A  2608      5011          move.l    A0,D3
                    5012   ; char* CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002D9C  41F9 0000 5013          lea       @m649d4~1_172.L,A0
00002DA0  5674      
00002DA2  2D48 FFF8 5014          move.l    A0,-8(A6)
                    5015   ; char* NameAndStudentNumber = "\r\n\r\nMatthew Tong - 59264408\r\nAyomibo Awosika - 96653845";
00002DA6  41F9 0000 5016          lea       @m649d4~1_173.L,A0
00002DAA  5692      
00002DAC  2D48 FFFC 5017          move.l    A0,-4(A6)
                    5018   ; KillAllBreakPoints();
00002DB0  4EB8 1CEC 5019          jsr       _KillAllBreakPoints
                    5020   ; i = x = y = z = PortA_Count = 0;
00002DB4  42B9 0B00 5021          clr.l     _PortA_Count.L
00002DB8  00D4      
00002DBA  42B9 0B00 5022          clr.l     _z.L
00002DBE  00D0      
00002DC0  42B9 0B00 5023          clr.l     _y.L
00002DC4  00CC      
00002DC6  42B9 0B00 5024          clr.l     _x.L
00002DCA  00C8      
00002DCC  4282      5025          clr.l     D2
                    5026   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002DCE  42B9 0B00 5027          clr.l     _GoFlag.L
00002DD2  00DC      
00002DD4  42B9 0B00 5028          clr.l     _Trace.L
00002DD8  00D8      
                    5029   ; Echo = 1;
00002DDA  23FC 0000 5030          move.l    #1,_Echo.L
00002DDE  0001 0B00 
00002DE2  00E0      
                    5031   ; d0 = d1 = d2 = d3 = d4 = d5 = d6 = d7 = 0;
00002DE4  42B9 0B00 5032          clr.l     _d7.L
00002DE8  0100      
00002DEA  42B9 0B00 5033          clr.l     _d6.L
00002DEE  00FC      
00002DF0  42B9 0B00 5034          clr.l     _d5.L
00002DF4  00F8      
00002DF6  42B9 0B00 5035          clr.l     _d4.L
00002DFA  00F4      
00002DFC  42B9 0B00 5036          clr.l     _d3.L
00002E00  00F0      
00002E02  42B9 0B00 5037          clr.l     _d2.L
00002E06  00EC      
00002E08  42B9 0B00 5038          clr.l     _d1.L
00002E0C  00E8      
00002E0E  42B9 0B00 5039          clr.l     _d0.L
00002E12  00E4      
                    5040   ; a0 = a1 = a2 = a3 = a4 = a5 = a6 = 0;
00002E14  42B9 0B00 5041          clr.l     _a6.L
00002E18  011C      
00002E1A  42B9 0B00 5042          clr.l     _a5.L
00002E1E  0118      
00002E20  42B9 0B00 5043          clr.l     _a4.L
00002E24  0114      
00002E26  42B9 0B00 5044          clr.l     _a3.L
00002E2A  0110      
00002E2C  42B9 0B00 5045          clr.l     _a2.L
00002E30  010C      
00002E32  42B9 0B00 5046          clr.l     _a1.L
00002E36  0108      
00002E38  42B9 0B00 5047          clr.l     _a0.L
00002E3C  0104      
                    5048   ; PC = ProgramStart, SSP = TopOfStack, USP = TopOfStack;
00002E3E  23FC 0800 5049          move.l    #134217728,_PC.L
00002E42  0000 0B00 
00002E46  0120      
00002E48  23FC 0C00 5050          move.l    #201326592,_SSP.L
00002E4C  0000 0B00 
00002E50  0124      
00002E52  23FC 0C00 5051          move.l    #201326592,_USP.L
00002E56  0000 0B00 
00002E5A  0128      
                    5052   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002E5C  33FC 2000 5053          move.w    #8192,_SR.L
00002E60  0B00 012C 
                    5054   ; // Initialise Breakpoint variables
                    5055   ; for (i = 0; i < 8; i++) {
00002E64  4282      5056          clr.l     D2
                    5057   main_1:
00002E66  0C82 0000 5058          cmp.l     #8,D2
00002E6A  0008      
00002E6C  6C00 004C 5059          bge       main_3
                    5060   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002E70  2002      5061          move.l    D2,D0
00002E72  E588      5062          lsl.l     #2,D0
00002E74  41F9 0B00 5063          lea       _BreakPointAddress.L,A0
00002E78  012E      
00002E7A  42B0 0800 5064          clr.l     0(A0,D0.L)
                    5065   ; WatchPointAddress[i] = 0;
00002E7E  2002      5066          move.l    D2,D0
00002E80  E588      5067          lsl.l     #2,D0
00002E82  41F9 0B00 5068          lea       _WatchPointAddress.L,A0
00002E86  0182      
00002E88  42B0 0800 5069          clr.l     0(A0,D0.L)
                    5070   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002E8C  2002      5071          move.l    D2,D0
00002E8E  E388      5072          lsl.l     #1,D0
00002E90  41F9 0B00 5073          lea       _BreakPointInstruction.L,A0
00002E94  014E      
00002E96  4270 0800 5074          clr.w     0(A0,D0.L)
                    5075   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002E9A  2002      5076          move.l    D2,D0
00002E9C  E588      5077          lsl.l     #2,D0
00002E9E  41F9 0B00 5078          lea       _BreakPointSetOrCleared.L,A0
00002EA2  015E      
00002EA4  42B0 0800 5079          clr.l     0(A0,D0.L)
                    5080   ; WatchPointSetOrCleared[i] = 0;
00002EA8  2002      5081          move.l    D2,D0
00002EAA  E588      5082          lsl.l     #2,D0
00002EAC  41F9 0B00 5083          lea       _WatchPointSetOrCleared.L,A0
00002EB0  01A2      
00002EB2  42B0 0800 5084          clr.l     0(A0,D0.L)
00002EB6  5282      5085          addq.l    #1,D2
00002EB8  60AC      5086          bra       main_1
                    5087   main_3:
                    5088   ; }
                    5089   ; Init_RS232();     // initialise the RS232 port
00002EBA  4EB8 0B12 5090          jsr       _Init_RS232
                    5091   ; Init_LCD();
00002EBE  4EB8 095E 5092          jsr       _Init_LCD
                    5093   ; for (i = 32; i < 48; i++)
00002EC2  7420      5094          moveq     #32,D2
                    5095   main_4:
00002EC4  0C82 0000 5096          cmp.l     #48,D2
00002EC8  0030      
00002ECA  6C0E      5097          bge.s     main_6
                    5098   ; InstallExceptionHandler(UnhandledTrap, i);		        // install Trap exception handler on vector 32-47
00002ECC  2F02      5099          move.l    D2,-(A7)
00002ECE  4878 2564 5100          pea       _UnhandledTrap.L
00002ED2  4E92      5101          jsr       (A2)
00002ED4  504F      5102          addq.w    #8,A7
00002ED6  5282      5103          addq.l    #1,D2
00002ED8  60EA      5104          bra       main_4
                    5105   main_6:
                    5106   ; InstallExceptionHandler(menu, 47);		                   // TRAP #15 call debug and end program
00002EDA  4878 002F 5107          pea       47
00002EDE  4878 223E 5108          pea       _menu.L
00002EE2  4E92      5109          jsr       (A2)
00002EE4  504F      5110          addq.w    #8,A7
                    5111   ; InstallExceptionHandler(UnhandledIRQ1, 25);		      // install handler for interrupts
00002EE6  4878 0019 5112          pea       25
00002EEA  4878 250A 5113          pea       _UnhandledIRQ1.L
00002EEE  4E92      5114          jsr       (A2)
00002EF0  504F      5115          addq.w    #8,A7
                    5116   ; InstallExceptionHandler(UnhandledIRQ2, 26);		      // install handler for interrupts
00002EF2  4878 001A 5117          pea       26
00002EF6  4878 2516 5118          pea       _UnhandledIRQ2.L
00002EFA  4E92      5119          jsr       (A2)
00002EFC  504F      5120          addq.w    #8,A7
                    5121   ; InstallExceptionHandler(UnhandledIRQ3, 27);		      // install handler for interrupts
00002EFE  4878 001B 5122          pea       27
00002F02  4878 2522 5123          pea       _UnhandledIRQ3.L
00002F06  4E92      5124          jsr       (A2)
00002F08  504F      5125          addq.w    #8,A7
                    5126   ; InstallExceptionHandler(UnhandledIRQ4, 28);		      // install handler for interrupts
00002F0A  4878 001C 5127          pea       28
00002F0E  4878 252E 5128          pea       _UnhandledIRQ4.L
00002F12  4E92      5129          jsr       (A2)
00002F14  504F      5130          addq.w    #8,A7
                    5131   ; InstallExceptionHandler(UnhandledIRQ5, 29);		      // install handler for interrupts
00002F16  4878 001D 5132          pea       29
00002F1A  4878 253A 5133          pea       _UnhandledIRQ5.L
00002F1E  4E92      5134          jsr       (A2)
00002F20  504F      5135          addq.w    #8,A7
                    5136   ; InstallExceptionHandler(UnhandledIRQ6, 30);		      // install handler for interrupts
00002F22  4878 001E 5137          pea       30
00002F26  4878 2546 5138          pea       _UnhandledIRQ6.L
00002F2A  4E92      5139          jsr       (A2)
00002F2C  504F      5140          addq.w    #8,A7
                    5141   ; InstallExceptionHandler(UnhandledIRQ7, 31);		      // install handler for interrupts
00002F2E  4878 001F 5142          pea       31
00002F32  4878 2558 5143          pea       _UnhandledIRQ7.L
00002F36  4E92      5144          jsr       (A2)
00002F38  504F      5145          addq.w    #8,A7
                    5146   ; InstallExceptionHandler(HandleBreakPoint, 46);		           // install Trap 14 Break Point exception handler on vector 46
00002F3A  4878 002E 5147          pea       46
00002F3E  4878 1F7A 5148          pea       _HandleBreakPoint.L
00002F42  4E92      5149          jsr       (A2)
00002F44  504F      5150          addq.w    #8,A7
                    5151   ; InstallExceptionHandler(DumpRegistersandPause, 29);		   // install TRACE handler for IRQ5 on vector 29
00002F46  4878 001D 5152          pea       29
00002F4A  4878 165A 5153          pea       _DumpRegistersandPause.L
00002F4E  4E92      5154          jsr       (A2)
00002F50  504F      5155          addq.w    #8,A7
                    5156   ; InstallExceptionHandler(BusError, 2);                          // install Bus error handler
00002F52  4878 0002 5157          pea       2
00002F56  4878 2572 5158          pea       _BusError.L
00002F5A  4E92      5159          jsr       (A2)
00002F5C  504F      5160          addq.w    #8,A7
                    5161   ; InstallExceptionHandler(AddressError, 3);                      // install address error handler (doesn't work on soft core 68k implementation)
00002F5E  4878 0003 5162          pea       3
00002F62  4878 2580 5163          pea       _AddressError.L
00002F66  4E92      5164          jsr       (A2)
00002F68  504F      5165          addq.w    #8,A7
                    5166   ; InstallExceptionHandler(IllegalInstruction, 4);                // install illegal instruction exception handler
00002F6A  4878 0004 5167          pea       4
00002F6E  4878 258E 5168          pea       _IllegalInstruction.L
00002F72  4E92      5169          jsr       (A2)
00002F74  504F      5170          addq.w    #8,A7
                    5171   ; InstallExceptionHandler(Dividebyzero, 5);                      // install /0 exception handler
00002F76  4878 0005 5172          pea       5
00002F7A  4878 259C 5173          pea       _Dividebyzero.L
00002F7E  4E92      5174          jsr       (A2)
00002F80  504F      5175          addq.w    #8,A7
                    5176   ; InstallExceptionHandler(Check, 6);                             // install check instruction exception handler
00002F82  4878 0006 5177          pea       6
00002F86  4878 25AA 5178          pea       _Check.L
00002F8A  4E92      5179          jsr       (A2)
00002F8C  504F      5180          addq.w    #8,A7
                    5181   ; InstallExceptionHandler(Trapv, 7);                             // install trapv instruction exception handler
00002F8E  4878 0007 5182          pea       7
00002F92  4878 25B8 5183          pea       _Trapv.L
00002F96  4E92      5184          jsr       (A2)
00002F98  504F      5185          addq.w    #8,A7
                    5186   ; InstallExceptionHandler(PrivError, 8);                         // install Priv Violation exception handler
00002F9A  4878 0008 5187          pea       8
00002F9E  4878 25C6 5188          pea       _PrivError.L
00002FA2  4E92      5189          jsr       (A2)
00002FA4  504F      5190          addq.w    #8,A7
                    5191   ; InstallExceptionHandler(UnitIRQ, 15);                          // install uninitialised IRQ exception handler
00002FA6  4878 000F 5192          pea       15
00002FAA  4878 25D4 5193          pea       _UnitIRQ.L
00002FAE  4E92      5194          jsr       (A2)
00002FB0  504F      5195          addq.w    #8,A7
                    5196   ; InstallExceptionHandler(Check, 24);                            // install spurious IRQ exception handler
00002FB2  4878 0018 5197          pea       24
00002FB6  4878 25AA 5198          pea       _Check.L
00002FBA  4E92      5199          jsr       (A2)
00002FBC  504F      5200          addq.w    #8,A7
                    5201   ; FlushKeyboard();                        // dump unread characters from keyboard
00002FBE  4EB8 0BA6 5202          jsr       _FlushKeyboard
                    5203   ; TraceException = 0;                     // clear trace exception port to remove any software generated single step/trace
00002FC2  4239 0040 5204          clr.b     4194314
00002FC6  000A      
                    5205   ; //Initialize SPI
                    5206   ; SPI_Init();
                    5207          jsr       _SPI_Init
********  **** ****  Error: Undefined or illegal symbol
                    5208   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5209   ; while (((char)(PortB & 0x02)) == (char)(0x02)) {
                    5210   main_7:
00002FCE  1039 0040 5211          move.b    4194306,D0
00002FD2  0002      
00002FD4  C03C 0002 5212          and.b     #2,D0
00002FD8  0C00 0002 5213          cmp.b     #2,D0
00002FDC  662A      5214          bne.s     main_9
                    5215   ; LoadFromFlashChip();
00002FDE  4EB8 115C 5216          jsr       _LoadFromFlashChip
                    5217   ; printf("\r\nRunning.....");
00002FE2  4879 0000 5218          pea       @m649d4~1_174.L
00002FE6  56CA      
00002FE8  4E93      5219          jsr       (A3)
00002FEA  584F      5220          addq.w    #4,A7
                    5221   ; Oline1("Running.....");
00002FEC  4879 0000 5222          pea       @m649d4~1_175.L
00002FF0  56DA      
00002FF2  4EB8 0A02 5223          jsr       _Oline1
00002FF6  584F      5224          addq.w    #4,A7
                    5225   ; GoFlag = 1;
00002FF8  23FC 0000 5226          move.l    #1,_GoFlag.L
00002FFC  0001 0B00 
00003000  00DC      
                    5227   ; go();
00003002  4EB8 08B8 5228          jsr       _go
00003006  60C6      5229          bra       main_7
                    5230   main_9:
                    5231   ; }
                    5232   ; // otherwise start the debug monitor
                    5233   ; Oline0(BugMessage);
00003008  2F03      5234          move.l    D3,-(A7)
0000300A  4EB8 09D4 5235          jsr       _Oline0
0000300E  584F      5236          addq.w    #4,A7
                    5237   ; Oline1("By: PJ Davies");
00003010  4879 0000 5238          pea       @m649d4~1_176.L
00003014  56E8      
00003016  4EB8 0A02 5239          jsr       _Oline1
0000301A  584F      5240          addq.w    #4,A7
                    5241   ; printf("\r\n%s", BugMessage);
0000301C  2F03      5242          move.l    D3,-(A7)
0000301E  4879 0000 5243          pea       @m649d4~1_177.L
00003022  56F6      
00003024  4E93      5244          jsr       (A3)
00003026  504F      5245          addq.w    #8,A7
                    5246   ; printf("\r\n%s", CopyrightMessage);
00003028  2F2E FFF8 5247          move.l    -8(A6),-(A7)
0000302C  4879 0000 5248          pea       @m649d4~1_177.L
00003030  56F6      
00003032  4E93      5249          jsr       (A3)
00003034  504F      5250          addq.w    #8,A7
                    5251   ; printf("\r\n%s", NameAndStudentNumber);
00003036  2F2E FFFC 5252          move.l    -4(A6),-(A7)
0000303A  4879 0000 5253          pea       @m649d4~1_177.L
0000303E  56F6      
00003040  4E93      5254          jsr       (A3)
00003042  504F      5255          addq.w    #8,A7
                    5256   ; menu();
00003044  4EB8 223E 5257          jsr       _menu
00003048  4CDF 0C0C 5258          movem.l   (A7)+,D2/D3/A2/A3
0000304C  4E5E      5259          unlk      A6
0000304E  4E75      5260          rts
                    5261   ; }
                    5262   _strcpy:
00003050  206F 0004 5263          move.l    (4,A7),A0
00003054  226F 0008 5264          move.l    (8,A7),A1
00003058  2008      5265          move.l    A0,D0
                    5266   strcpy_1:
0000305A  10D9      5267          move.b    (A1)+,(A0)+
0000305C  66FC      5268          bne       strcpy_1
0000305E  4E75      5269          rts
                    5270   ULDIV:
00003060  4E56 0000 5271          link    A6,#0
00003064  48E7 C000 5272          movem.l D0/D1,-(A7)
00003068  222E 0008 5273          move.l  8(A6),D1
0000306C  202E 000C 5274          move.l  12(A6),D0
00003070  6036      5275          bra.s   ldiv_3
                    5276   LDIV:
00003072  4E56 0000 5277          link    A6,#0
00003076  48E7 C000 5278          movem.l D0/D1,-(A7)
0000307A  222E 0008 5279          move.l  8(A6),D1
0000307E  202E 000C 5280          move.l  12(A6),D0
00003082  4A80      5281          tst.l   D0
00003084  6A0E      5282          bpl.s   ldiv_1
00003086  4480      5283          neg.l   D0
00003088  4A81      5284          tst.l   D1
0000308A  6A14      5285          bpl.s   ldiv_2
0000308C  4481      5286          neg.l   D1
0000308E  612A      5287          bsr.s   dodiv
00003090  4481      5288          neg.l   D1
00003092  6016      5289          bra.s   ldiv_4
                    5290   ldiv_1:
00003094  4A81      5291          tst.l   D1
00003096  6A10      5292          bpl.s   ldiv_3
00003098  4481      5293          neg.l   D1
0000309A  611E      5294          bsr.s   dodiv
0000309C  4480      5295          neg.l   D0
0000309E  600A      5296          bra.s   ldiv_4
                    5297   ldiv_2:
000030A0  6118      5298          bsr.s   dodiv
000030A2  4480      5299          neg.l   D0
000030A4  4481      5300          neg.l   D1
000030A6  6002      5301          bra.s   ldiv_4
                    5302   ldiv_3:
000030A8  6110      5303          bsr.s   dodiv
                    5304   ldiv_4:
000030AA  2D40 0008 5305          move.l  D0,8(A6)
000030AE  2D41 000C 5306          move.l  D1,12(A6)
000030B2  4CDF 0003 5307          movem.l (A7)+,D0/D1
000030B6  4E5E      5308          unlk    A6
000030B8  4E75      5309          rts
                    5310   dodiv:
000030BA  0C81 0000 5311          cmpi.l  #$FFFF,D1
000030BE  FFFF      
000030C0  6236      5312          bhi.s   dodiv_2
000030C2  0C80 0000 5313          cmpi.l  #$FFFF,D0
000030C6  FFFF      
000030C8  6210      5314          bhi.s   dodiv_1
000030CA  80C1      5315          divu    D1,D0
000030CC  2200      5316          move.l  D0,D1
000030CE  4241      5317          clr.w   D1
000030D0  4841      5318          swap    D1
000030D2  0280 0000 5319          andi.l  #$FFFF,D0
000030D6  FFFF      
000030D8  4E75      5320          rts
                    5321   dodiv_1:
000030DA  48A7 A000 5322          movem.w D0/D2,-(A7)
000030DE  4240      5323          clr.w   D0
000030E0  4840      5324          swap    D0
000030E2  80C1      5325          divu    D1,D0
000030E4  3400      5326          move.w  D0,D2
000030E6  301F      5327          move.w  (A7)+,D0
000030E8  80C1      5328          divu    D1,D0
000030EA  4840      5329          swap    D0
000030EC  4281      5330          clr.l   D1
000030EE  3200      5331          move.w  D0,D1
000030F0  3002      5332          move.w  D2,D0
000030F2  4840      5333          swap    D0
000030F4  341F      5334          move.w  (A7)+,D2
000030F6  4E75      5335          rts
                    5336   dodiv_2:
000030F8  48E7 3800 5337          movem.l D2/D3/D4,-(A7)
000030FC  2401      5338          move.l  D1,D2
000030FE  4242      5339          clr.w   D2
00003100  4842      5340          swap    D2
00003102  5282      5341          addq.l  #1,D2
00003104  2600      5342          move.l  D0,D3
00003106  2801      5343          move.l  D1,D4
00003108  2202      5344          move.l  D2,D1
0000310A  61CE      5345          bsr.s   dodiv_1
0000310C  2204      5346          move.l  D4,D1
0000310E  82C2      5347          divu    D2,D1
00003110  80C1      5348          divu    D1,D0
00003112  0280 0000 5349          andi.l  #$FFFF,D0
00003116  FFFF      
                    5350   dodiv_3:
00003118  2204      5351          move.l  D4,D1
0000311A  2404      5352          move.l  D4,D2
0000311C  4842      5353          swap    D2
0000311E  C2C0      5354          mulu    D0,D1
00003120  C4C0      5355          mulu    D0,D2
00003122  4842      5356          swap    D2
00003124  D282      5357          add.l   D2,D1
00003126  9283      5358          sub.l   D3,D1
00003128  620A      5359          bhi.s   dodiv_4
0000312A  4481      5360          neg.l   D1
0000312C  B881      5361          cmp.l   D1,D4
0000312E  6208      5362          bhi.s   dodiv_5
00003130  5280      5363          addq.l  #1,D0
00003132  60E4      5364          bra.s   dodiv_3
                    5365   dodiv_4:
00003134  5380      5366          subq.l  #1,D0
00003136  60E0      5367          bra.s   dodiv_3
                    5368   dodiv_5:
00003138  4CDF 001C 5369          movem.l (A7)+,D2/D3/D4
0000313C  4E75      5370          rts
                    5371   _putch:
0000313E  4E56 0000 5372          link      A6,#0
00003142  48E7 2000 5373          movem.l   D2,-(A7)
00003146  242E 0008 5374          move.l    8(A6),D2
0000314A  0C82 0000 5375          cmp.l     #10,D2
0000314E  000A      
00003150  660A      5376          bne.s     putch_1
00003152  4878 000D 5377          pea       13
00003156  6100 D9E4 5378          bsr       __putch
0000315A  584F      5379          addq.w    #4,A7
                    5380   putch_1:
0000315C  2F02      5381          move.l    D2,-(A7)
0000315E  6100 D9DC 5382          bsr       __putch
00003162  584F      5383          addq.w    #4,A7
00003164  2002      5384          move.l    D2,D0
00003166  4CDF 0004 5385          movem.l   (A7)+,D2
0000316A  4E5E      5386          unlk      A6
0000316C  4E75      5387          rts
                    5388   _getch:
0000316E  48E7 2000 5389          movem.l   D2,-(A7)
00003172  2439 0B00 5390          move.l    __ungetbuf,D2
00003176  00C0      
00003178  2039 0B00 5391          move.l    __ungetbuf,D0
0000317C  00C0      
0000317E  0C80 FFFF 5392          cmp.l     #-1,D0
00003182  FFFF      
00003184  670C      5393          beq.s     getch_1
00003186  23FC FFFF 5394          move.l    #-1,__ungetbuf
0000318A  FFFF 0B00 
0000318E  00C0      
00003190  6010      5395          bra.s     getch_3
                    5396   getch_1:
00003192  6100 D9D4 5397          bsr       __getch
00003196  2400      5398          move.l    D0,D2
00003198  0C80 0000 5399          cmp.l     #13,D0
0000319C  000D      
0000319E  6602      5400          bne.s     getch_3
000031A0  740A      5401          moveq     #10,D2
                    5402   getch_3:
000031A2  2002      5403          move.l    D2,D0
000031A4  4CDF 0004 5404          movem.l   (A7)+,D2
000031A8  4E75      5405          rts
                    5406   _tolower:
000031AA  4E56 0000 5407          link      A6,#0
000031AE  48E7 2000 5408          movem.l   D2,-(A7)
000031B2  242E 0008 5409          move.l    8(A6),D2
000031B6  0C82 0000 5410          cmp.l     #65,D2
000031BA  0041      
000031BC  6D0E      5411          blt.s     tolower_1
000031BE  0C82 0000 5412          cmp.l     #90,D2
000031C2  005A      
000031C4  6E06      5413          bgt.s     tolower_1
000031C6  84BC 0000 5414          or.l      #32,D2
000031CA  0020      
                    5415   tolower_1:
000031CC  2002      5416          move.l    D2,D0
000031CE  4CDF 0004 5417          movem.l   (A7)+,D2
000031D2  4E5E      5418          unlk      A6
000031D4  4E75      5419          rts
                    5420   _sprintf:
000031D6  4E56 FFFC 5421          link      A6,#-4
000031DA  48E7 2000 5422          movem.l   D2,-(A7)
000031DE  41EE 000C 5423          lea       12(A6),A0
000031E2  5848      5424          addq.w    #4,A0
000031E4  2408      5425          move.l    A0,D2
000031E6  2F02      5426          move.l    D2,-(A7)
000031E8  2F2E 000C 5427          move.l    12(A6),-(A7)
000031EC  2F2E 0008 5428          move.l    8(A6),-(A7)
000031F0  6100 013E 5429          bsr       _vsprintf
000031F4  DEFC 000C 5430          add.w     #12,A7
000031F8  2D40 FFFC 5431          move.l    D0,-4(A6)
000031FC  4282      5432          clr.l     D2
000031FE  202E FFFC 5433          move.l    -4(A6),D0
00003202  4CDF 0004 5434          movem.l   (A7)+,D2
00003206  4E5E      5435          unlk      A6
00003208  4E75      5436          rts
                    5437   _strcat:
0000320A  206F 0004 5438          move.l    (4,A7),A0	
0000320E  226F 0008 5439          move.l    (8,A7),A1	
00003212  2008      5440          move.l    A0,D0		
                    5441   strcat_0:
00003214  4A18      5442          tst.b     (A0)+
00003216  66FC      5443          bne       strcat_0
00003218  5348      5444          subq      #1,A0
                    5445   strcat_1:
0000321A  10D9      5446          move.b    (A1)+,(A0)+
0000321C  66FC      5447          bne       strcat_1
0000321E  4E75      5448          rts
                    5449   _toupper:
00003220  4E56 0000 5450          link      A6,#0
00003224  48E7 2000 5451          movem.l   D2,-(A7)
00003228  242E 0008 5452          move.l    8(A6),D2
0000322C  0C82 0000 5453          cmp.l     #97,D2
00003230  0061      
00003232  6D0E      5454          blt.s     toupper_1
00003234  0C82 0000 5455          cmp.l     #122,D2
00003238  007A      
0000323A  6E06      5456          bgt.s     toupper_1
0000323C  C4BC 0000 5457          and.l     #95,D2
00003240  005F      
                    5458   toupper_1:
00003242  2002      5459          move.l    D2,D0
00003244  4CDF 0004 5460          movem.l   (A7)+,D2
00003248  4E5E      5461          unlk      A6
0000324A  4E75      5462          rts
                    5463   _printf:
0000324C  4E56 FFFC 5464          link      A6,#-4
00003250  48E7 2000 5465          movem.l   D2,-(A7)
00003254  41EE 0008 5466          lea       8(A6),A0
00003258  5848      5467          addq.w    #4,A0
0000325A  2408      5468          move.l    A0,D2
0000325C  2F02      5469          move.l    D2,-(A7)
0000325E  2F2E 0008 5470          move.l    8(A6),-(A7)
00003262  42A7      5471          clr.l     -(A7)
00003264  6100 00CA 5472          bsr       _vsprintf
00003268  DEFC 000C 5473          add.w     #12,A7
0000326C  2D40 FFFC 5474          move.l    D0,-4(A6)
00003270  4282      5475          clr.l     D2
00003272  202E FFFC 5476          move.l    -4(A6),D0
00003276  4CDF 0004 5477          movem.l   (A7)+,D2
0000327A  4E5E      5478          unlk      A6
0000327C  4E75      5479          rts
                    5480   @vsprintf_copy:
0000327E  4E56 0000 5481          link      A6,#0
00003282  206E 0008 5482          move.l    8(A6),A0
00003286  4A90      5483          tst.l     (A0)
00003288  6710      5484          beq.s     @vsprintf_copy_1
0000328A  202E 000C 5485          move.l    12(A6),D0
0000328E  206E 0008 5486          move.l    8(A6),A0
00003292  2250      5487          move.l    (A0),A1
00003294  5290      5488          addq.l    #1,(A0)
00003296  1280      5489          move.b    D0,(A1)
00003298  600A      5490          bra.s     @vsprintf_copy_2
                    5491   @vsprintf_copy_1:
0000329A  2F2E 000C 5492          move.l    12(A6),-(A7)
0000329E  6100 FE9E 5493          bsr       _putch
000032A2  584F      5494          addq.w    #4,A7
                    5495   @vsprintf_copy_2:
000032A4  4E5E      5496          unlk      A6
000032A6  4E75      5497          rts
                    5498   @vsprintf_getval:
000032A8  4E56 0000 5499          link      A6,#0
000032AC  48E7 3000 5500          movem.l   D2/D3,-(A7)
000032B0  242E 0008 5501          move.l    8(A6),D2
000032B4  4283      5502          clr.l     D3
000032B6  2042      5503          move.l    D2,A0
000032B8  2050      5504          move.l    (A0),A0
000032BA  1010      5505          move.b    (A0),D0
000032BC  4880      5506          ext.w     D0
000032BE  48C0      5507          ext.l     D0
000032C0  0C80 0000 5508          cmp.l     #42,D0
000032C4  002A      
000032C6  6612      5509          bne.s     @vsprintf_getval_1
000032C8  206E 000C 5510          move.l    12(A6),A0
000032CC  2250      5511          move.l    (A0),A1
000032CE  5890      5512          addq.l    #4,(A0)
000032D0  2611      5513          move.l    (A1),D3
000032D2  2042      5514          move.l    D2,A0
000032D4  5290      5515          addq.l    #1,(A0)
000032D6  6000 004E 5516          bra       @vsprintf_getval_5
                    5517   @vsprintf_getval_1:
000032DA  2042      5518          move.l    D2,A0
000032DC  2050      5519          move.l    (A0),A0
000032DE  1010      5520          move.b    (A0),D0
000032E0  4880      5521          ext.w     D0
000032E2  48C0      5522          ext.l     D0
000032E4  0C80 0000 5523          cmp.l     #48,D0
000032E8  0030      
000032EA  6D00 003A 5524          blt       @vsprintf_getval_5
000032EE  2042      5525          move.l    D2,A0
000032F0  2050      5526          move.l    (A0),A0
000032F2  1010      5527          move.b    (A0),D0
000032F4  4880      5528          ext.w     D0
000032F6  48C0      5529          ext.l     D0
000032F8  0C80 0000 5530          cmp.l     #57,D0
000032FC  0039      
000032FE  6E26      5531          bgt.s     @vsprintf_getval_5
00003300  2F03      5532          move.l    D3,-(A7)
00003302  4878 000A 5533          pea       10
00003306  6100 07F4 5534          bsr       LMUL
0000330A  2017      5535          move.l    (A7),D0
0000330C  504F      5536          addq.w    #8,A7
0000330E  2042      5537          move.l    D2,A0
00003310  2250      5538          move.l    (A0),A1
00003312  5290      5539          addq.l    #1,(A0)
00003314  1211      5540          move.b    (A1),D1
00003316  4881      5541          ext.w     D1
00003318  48C1      5542          ext.l     D1
0000331A  D081      5543          add.l     D1,D0
0000331C  0480 0000 5544          sub.l     #48,D0
00003320  0030      
00003322  2600      5545          move.l    D0,D3
00003324  60B4      5546          bra       @vsprintf_getval_1
                    5547   @vsprintf_getval_5:
00003326  2003      5548          move.l    D3,D0
00003328  4CDF 000C 5549          movem.l   (A7)+,D2/D3
0000332C  4E5E      5550          unlk      A6
0000332E  4E75      5551          rts
                    5552   _vsprintf:
00003330  4E56 FFCC 5553          link      A6,#-52
00003334  48E7 3F3C 5554          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003338  45EE 0008 5555          lea       8(A6),A2
0000333C  47F8 327E 5556          lea       @vsprintf_copy,A3
00003340  49F9 0000 5557          lea       _ultoa,A4
00003344  3A88      
00003346  4286      5558          clr.l     D6
                    5559   vsprintf_1:
00003348  206E 000C 5560          move.l    12(A6),A0
0000334C  4A10      5561          tst.b     (A0)
0000334E  6700 0624 5562          beq       vsprintf_3
00003352  206E 000C 5563          move.l    12(A6),A0
00003356  1010      5564          move.b    (A0),D0
00003358  4880      5565          ext.w     D0
0000335A  48C0      5566          ext.l     D0
0000335C  0C80 0000 5567          cmp.l     #37,D0
00003360  0025      
00003362  671C      5568          beq.s     vsprintf_4
00003364  206E 000C 5569          move.l    12(A6),A0
00003368  52AE 000C 5570          addq.l    #1,12(A6)
0000336C  1210      5571          move.b    (A0),D1
0000336E  4881      5572          ext.w     D1
00003370  48C1      5573          ext.l     D1
00003372  2F01      5574          move.l    D1,-(A7)
00003374  2F0A      5575          move.l    A2,-(A7)
00003376  4E93      5576          jsr       (A3)
00003378  504F      5577          addq.w    #8,A7
0000337A  5286      5578          addq.l    #1,D6
0000337C  6000 05F2 5579          bra       vsprintf_2
                    5580   vsprintf_4:
00003380  52AE 000C 5581          addq.l    #1,12(A6)
00003384  422E FFD3 5582          clr.b     -45(A6)
00003388  422E FFD2 5583          clr.b     -46(A6)
0000338C  422E FFD0 5584          clr.b     -48(A6)
00003390  422E FFCF 5585          clr.b     -49(A6)
00003394  422E FFCE 5586          clr.b     -50(A6)
00003398  422E FFCD 5587          clr.b     -51(A6)
0000339C  42AE FFFC 5588          clr.l     -4(A6)
000033A0  7AFF      5589          moveq     #-1,D5
000033A2  41EE FFDC 5590          lea       -36(A6),A0
000033A6  2608      5591          move.l    A0,D3
000033A8  2408      5592          move.l    A0,D2
                    5593   vsprintf_6:
000033AA  206E 000C 5594          move.l    12(A6),A0
000033AE  1010      5595          move.b    (A0),D0
000033B0  4880      5596          ext.w     D0
000033B2  48C0      5597          ext.l     D0
000033B4  0C80 0000 5598          cmp.l     #43,D0
000033B8  002B      
000033BA  6730      5599          beq.s     vsprintf_12
000033BC  6E18      5600          bgt.s     vsprintf_15
000033BE  0C80 0000 5601          cmp.l     #35,D0
000033C2  0023      
000033C4  6700 003E 5602          beq       vsprintf_14
000033C8  6E00 0046 5603          bgt       vsprintf_9
000033CC  0C80 0000 5604          cmp.l     #32,D0
000033D0  0020      
000033D2  6724      5605          beq.s     vsprintf_13
000033D4  603A      5606          bra.s     vsprintf_9
                    5607   vsprintf_15:
000033D6  0C80 0000 5608          cmp.l     #45,D0
000033DA  002D      
000033DC  6702      5609          beq.s     vsprintf_11
000033DE  6030      5610          bra.s     vsprintf_9
                    5611   vsprintf_11:
000033E0  1D7C 0001 5612          move.b    #1,-51(A6)
000033E4  FFCD      
000033E6  52AE 000C 5613          addq.l    #1,12(A6)
000033EA  6026      5614          bra.s     vsprintf_7
                    5615   vsprintf_12:
000033EC  1D7C 0001 5616          move.b    #1,-50(A6)
000033F0  FFCE      
000033F2  52AE 000C 5617          addq.l    #1,12(A6)
000033F6  601A      5618          bra.s     vsprintf_7
                    5619   vsprintf_13:
000033F8  1D7C 0001 5620          move.b    #1,-49(A6)
000033FC  FFCF      
000033FE  52AE 000C 5621          addq.l    #1,12(A6)
00003402  600E      5622          bra.s     vsprintf_7
                    5623   vsprintf_14:
00003404  1D7C 0001 5624          move.b    #1,-48(A6)
00003408  FFD0      
0000340A  52AE 000C 5625          addq.l    #1,12(A6)
0000340E  6002      5626          bra.s     vsprintf_7
                    5627   vsprintf_9:
00003410  6002      5628          bra.s     vsprintf_8
                    5629   vsprintf_7:
00003412  6096      5630          bra       vsprintf_6
                    5631   vsprintf_8:
00003414  206E 000C 5632          move.l    12(A6),A0
00003418  1010      5633          move.b    (A0),D0
0000341A  4880      5634          ext.w     D0
0000341C  48C0      5635          ext.l     D0
0000341E  0C80 0000 5636          cmp.l     #48,D0
00003422  0030      
00003424  660A      5637          bne.s     vsprintf_16
00003426  52AE 000C 5638          addq.l    #1,12(A6)
0000342A  1D7C 0001 5639          move.b    #1,-46(A6)
0000342E  FFD2      
                    5640   vsprintf_16:
00003430  486E 0010 5641          pea       16(A6)
00003434  486E 000C 5642          pea       12(A6)
00003438  6100 FE6E 5643          bsr       @vsprintf_getval
0000343C  504F      5644          addq.w    #8,A7
0000343E  2A40      5645          move.l    D0,A5
00003440  206E 000C 5646          move.l    12(A6),A0
00003444  1010      5647          move.b    (A0),D0
00003446  4880      5648          ext.w     D0
00003448  48C0      5649          ext.l     D0
0000344A  0C80 0000 5650          cmp.l     #46,D0
0000344E  002E      
00003450  6614      5651          bne.s     vsprintf_18
00003452  52AE 000C 5652          addq.l    #1,12(A6)
00003456  486E 0010 5653          pea       16(A6)
0000345A  486E 000C 5654          pea       12(A6)
0000345E  6100 FE48 5655          bsr       @vsprintf_getval
00003462  504F      5656          addq.w    #8,A7
00003464  2A00      5657          move.l    D0,D5
                    5658   vsprintf_18:
00003466  206E 000C 5659          move.l    12(A6),A0
0000346A  1010      5660          move.b    (A0),D0
0000346C  4880      5661          ext.w     D0
0000346E  48C0      5662          ext.l     D0
00003470  0C80 0000 5663          cmp.l     #108,D0
00003474  006C      
00003476  660A      5664          bne.s     vsprintf_20
00003478  52AE 000C 5665          addq.l    #1,12(A6)
0000347C  1D7C 0001 5666          move.b    #1,-45(A6)
00003480  FFD3      
                    5667   vsprintf_20:
00003482  206E 000C 5668          move.l    12(A6),A0
00003486  1010      5669          move.b    (A0),D0
00003488  4880      5670          ext.w     D0
0000348A  48C0      5671          ext.l     D0
0000348C  0C80 0000 5672          cmp.l     #111,D0
00003490  006F      
00003492  6700 00D4 5673          beq       vsprintf_27
00003496  6E34      5674          bgt.s     vsprintf_33
00003498  0C80 0000 5675          cmp.l     #100,D0
0000349C  0064      
0000349E  6700 0054 5676          beq       vsprintf_24
000034A2  6E1C      5677          bgt.s     vsprintf_34
000034A4  0C80 0000 5678          cmp.l     #99,D0
000034A8  0063      
000034AA  6700 012C 5679          beq       vsprintf_30
000034AE  6E00 016A 5680          bgt       vsprintf_22
000034B2  0C80 0000 5681          cmp.l     #88,D0
000034B6  0058      
000034B8  6700 00E6 5682          beq       vsprintf_28
000034BC  6000 015C 5683          bra       vsprintf_22
                    5684   vsprintf_34:
000034C0  0C80 0000 5685          cmp.l     #105,D0
000034C4  0069      
000034C6  672C      5686          beq.s     vsprintf_24
000034C8  6000 0150 5687          bra       vsprintf_22
                    5688   vsprintf_33:
000034CC  0C80 0000 5689          cmp.l     #117,D0
000034D0  0075      
000034D2  6700 005C 5690          beq       vsprintf_26
000034D6  6E0E      5691          bgt.s     vsprintf_35
000034D8  0C80 0000 5692          cmp.l     #115,D0
000034DC  0073      
000034DE  6700 011C 5693          beq       vsprintf_31
000034E2  6000 0136 5694          bra       vsprintf_22
                    5695   vsprintf_35:
000034E6  0C80 0000 5696          cmp.l     #120,D0
000034EA  0078      
000034EC  6700 00B2 5697          beq       vsprintf_28
000034F0  6000 0128 5698          bra       vsprintf_22
                    5699   vsprintf_24:
000034F4  4A2E FFD3 5700          tst.b     -45(A6)
000034F8  671A      5701          beq.s     vsprintf_36
000034FA  4878 000A 5702          pea       10
000034FE  2F03      5703          move.l    D3,-(A7)
00003500  206E 0010 5704          move.l    16(A6),A0
00003504  58AE 0010 5705          addq.l    #4,16(A6)
00003508  2F10      5706          move.l    (A0),-(A7)
0000350A  6100 04F8 5707          bsr       _ltoa
0000350E  DEFC 000C 5708          add.w     #12,A7
00003512  6018      5709          bra.s     vsprintf_37
                    5710   vsprintf_36:
00003514  4878 000A 5711          pea       10
00003518  2F03      5712          move.l    D3,-(A7)
0000351A  206E 0010 5713          move.l    16(A6),A0
0000351E  58AE 0010 5714          addq.l    #4,16(A6)
00003522  2F10      5715          move.l    (A0),-(A7)
00003524  6100 04DE 5716          bsr       _ltoa
00003528  DEFC 000C 5717          add.w     #12,A7
                    5718   vsprintf_37:
0000352C  6000 00FA 5719          bra       vsprintf_23
                    5720   vsprintf_26:
00003530  4A2E FFD3 5721          tst.b     -45(A6)
00003534  6718      5722          beq.s     vsprintf_38
00003536  4878 000A 5723          pea       10
0000353A  2F03      5724          move.l    D3,-(A7)
0000353C  206E 0010 5725          move.l    16(A6),A0
00003540  58AE 0010 5726          addq.l    #4,16(A6)
00003544  2F10      5727          move.l    (A0),-(A7)
00003546  4E94      5728          jsr       (A4)
00003548  DEFC 000C 5729          add.w     #12,A7
0000354C  6016      5730          bra.s     vsprintf_39
                    5731   vsprintf_38:
0000354E  4878 000A 5732          pea       10
00003552  2F03      5733          move.l    D3,-(A7)
00003554  206E 0010 5734          move.l    16(A6),A0
00003558  58AE 0010 5735          addq.l    #4,16(A6)
0000355C  2F10      5736          move.l    (A0),-(A7)
0000355E  4E94      5737          jsr       (A4)
00003560  DEFC 000C 5738          add.w     #12,A7
                    5739   vsprintf_39:
00003564  6000 00C2 5740          bra       vsprintf_23
                    5741   vsprintf_27:
00003568  4A2E FFD3 5742          tst.b     -45(A6)
0000356C  6718      5743          beq.s     vsprintf_40
0000356E  4878 0008 5744          pea       8
00003572  2F03      5745          move.l    D3,-(A7)
00003574  206E 0010 5746          move.l    16(A6),A0
00003578  58AE 0010 5747          addq.l    #4,16(A6)
0000357C  2F10      5748          move.l    (A0),-(A7)
0000357E  4E94      5749          jsr       (A4)
00003580  DEFC 000C 5750          add.w     #12,A7
00003584  6016      5751          bra.s     vsprintf_41
                    5752   vsprintf_40:
00003586  4878 0008 5753          pea       8
0000358A  2F03      5754          move.l    D3,-(A7)
0000358C  206E 0010 5755          move.l    16(A6),A0
00003590  58AE 0010 5756          addq.l    #4,16(A6)
00003594  2F10      5757          move.l    (A0),-(A7)
00003596  4E94      5758          jsr       (A4)
00003598  DEFC 000C 5759          add.w     #12,A7
                    5760   vsprintf_41:
0000359C  6000 008A 5761          bra       vsprintf_23
                    5762   vsprintf_28:
000035A0  4A2E FFD3 5763          tst.b     -45(A6)
000035A4  6718      5764          beq.s     vsprintf_42
000035A6  4878 0010 5765          pea       16
000035AA  2F03      5766          move.l    D3,-(A7)
000035AC  206E 0010 5767          move.l    16(A6),A0
000035B0  58AE 0010 5768          addq.l    #4,16(A6)
000035B4  2F10      5769          move.l    (A0),-(A7)
000035B6  4E94      5770          jsr       (A4)
000035B8  DEFC 000C 5771          add.w     #12,A7
000035BC  6016      5772          bra.s     vsprintf_43
                    5773   vsprintf_42:
000035BE  4878 0010 5774          pea       16
000035C2  2F03      5775          move.l    D3,-(A7)
000035C4  206E 0010 5776          move.l    16(A6),A0
000035C8  58AE 0010 5777          addq.l    #4,16(A6)
000035CC  2F10      5778          move.l    (A0),-(A7)
000035CE  4E94      5779          jsr       (A4)
000035D0  DEFC 000C 5780          add.w     #12,A7
                    5781   vsprintf_43:
000035D4  6000 0052 5782          bra       vsprintf_23
                    5783   vsprintf_30:
000035D8  206E 0010 5784          move.l    16(A6),A0
000035DC  58AE 0010 5785          addq.l    #4,16(A6)
000035E0  2010      5786          move.l    (A0),D0
000035E2  2042      5787          move.l    D2,A0
000035E4  5282      5788          addq.l    #1,D2
000035E6  1080      5789          move.b    D0,(A0)
000035E8  2042      5790          move.l    D2,A0
000035EA  4210      5791          clr.b     (A0)
000035EC  200D      5792          move.l    A5,D0
000035EE  6704      5793          beq.s     vsprintf_44
000035F0  200D      5794          move.l    A5,D0
000035F2  6002      5795          bra.s     vsprintf_45
                    5796   vsprintf_44:
000035F4  7001      5797          moveq     #1,D0
                    5798   vsprintf_45:
000035F6  2A00      5799          move.l    D0,D5
000035F8  6000 002E 5800          bra       vsprintf_23
                    5801   vsprintf_31:
000035FC  206E 0010 5802          move.l    16(A6),A0
00003600  58AE 0010 5803          addq.l    #4,16(A6)
00003604  2610      5804          move.l    (A0),D3
00003606  0C85 FFFF 5805          cmp.l     #-1,D5
0000360A  FFFF      
0000360C  660A      5806          bne.s     vsprintf_46
0000360E  2F03      5807          move.l    D3,-(A7)
00003610  6100 0578 5808          bsr       _strlen
00003614  584F      5809          addq.w    #4,A7
00003616  2A00      5810          move.l    D0,D5
                    5811   vsprintf_46:
00003618  600E      5812          bra.s     vsprintf_23
                    5813   vsprintf_22:
0000361A  206E 000C 5814          move.l    12(A6),A0
0000361E  2242      5815          move.l    D2,A1
00003620  5282      5816          addq.l    #1,D2
00003622  1290      5817          move.b    (A0),(A1)
00003624  2042      5818          move.l    D2,A0
00003626  4210      5819          clr.b     (A0)
                    5820   vsprintf_23:
00003628  2F03      5821          move.l    D3,-(A7)
0000362A  6100 055E 5822          bsr       _strlen
0000362E  584F      5823          addq.w    #4,A7
00003630  1800      5824          move.b    D0,D4
00003632  206E 000C 5825          move.l    12(A6),A0
00003636  1010      5826          move.b    (A0),D0
00003638  4880      5827          ext.w     D0
0000363A  48C0      5828          ext.l     D0
0000363C  0C80 0000 5829          cmp.l     #115,D0
00003640  0073      
00003642  6618      5830          bne.s     vsprintf_48
00003644  0C85 0000 5831          cmp.l     #0,D5
00003648  0000      
0000364A  6D10      5832          blt.s     vsprintf_48
0000364C  4884      5833          ext.w     D4
0000364E  48C4      5834          ext.l     D4
00003650  B885      5835          cmp.l     D5,D4
00003652  6F04      5836          ble.s     vsprintf_50
00003654  1005      5837          move.b    D5,D0
00003656  6002      5838          bra.s     vsprintf_51
                    5839   vsprintf_50:
00003658  1004      5840          move.b    D4,D0
                    5841   vsprintf_51:
0000365A  1800      5842          move.b    D0,D4
                    5843   vsprintf_48:
0000365C  206E 000C 5844          move.l    12(A6),A0
00003660  1010      5845          move.b    (A0),D0
00003662  4880      5846          ext.w     D0
00003664  48C0      5847          ext.l     D0
00003666  0C80 0000 5848          cmp.l     #88,D0
0000366A  0058      
0000366C  6600 0026 5849          bne       vsprintf_56
00003670  41EE FFDC 5850          lea       -36(A6),A0
00003674  2408      5851          move.l    A0,D2
                    5852   vsprintf_54:
00003676  2042      5853          move.l    D2,A0
00003678  4A10      5854          tst.b     (A0)
0000367A  6718      5855          beq.s     vsprintf_56
0000367C  2042      5856          move.l    D2,A0
0000367E  1210      5857          move.b    (A0),D1
00003680  4881      5858          ext.w     D1
00003682  48C1      5859          ext.l     D1
00003684  2F01      5860          move.l    D1,-(A7)
00003686  6100 FB98 5861          bsr       _toupper
0000368A  584F      5862          addq.w    #4,A7
0000368C  2042      5863          move.l    D2,A0
0000368E  1080      5864          move.b    D0,(A0)
00003690  5282      5865          addq.l    #1,D2
00003692  60E2      5866          bra       vsprintf_54
                    5867   vsprintf_56:
00003694  7E00      5868          moveq     #0,D7
00003696  41EE FFD4 5869          lea       -44(A6),A0
0000369A  2408      5870          move.l    A0,D2
0000369C  206E 000C 5871          move.l    12(A6),A0
000036A0  1010      5872          move.b    (A0),D0
000036A2  4880      5873          ext.w     D0
000036A4  48C0      5874          ext.l     D0
000036A6  0C80 0000 5875          cmp.l     #100,D0
000036AA  0064      
000036AC  6714      5876          beq.s     vsprintf_59
000036AE  206E 000C 5877          move.l    12(A6),A0
000036B2  1010      5878          move.b    (A0),D0
000036B4  4880      5879          ext.w     D0
000036B6  48C0      5880          ext.l     D0
000036B8  0C80 0000 5881          cmp.l     #105,D0
000036BC  0069      
000036BE  6600 0076 5882          bne       vsprintf_65
                    5883   vsprintf_59:
000036C2  4A2E FFCE 5884          tst.b     -50(A6)
000036C6  6612      5885          bne.s     vsprintf_62
000036C8  2043      5886          move.l    D3,A0
000036CA  1010      5887          move.b    (A0),D0
000036CC  4880      5888          ext.w     D0
000036CE  48C0      5889          ext.l     D0
000036D0  0C80 0000 5890          cmp.l     #45,D0
000036D4  002D      
000036D6  6600 002E 5891          bne       vsprintf_60
                    5892   vsprintf_62:
000036DA  2043      5893          move.l    D3,A0
000036DC  1010      5894          move.b    (A0),D0
000036DE  4880      5895          ext.w     D0
000036E0  48C0      5896          ext.l     D0
000036E2  0C80 0000 5897          cmp.l     #45,D0
000036E6  002D      
000036E8  660E      5898          bne.s     vsprintf_63
000036EA  2043      5899          move.l    D3,A0
000036EC  5283      5900          addq.l    #1,D3
000036EE  2242      5901          move.l    D2,A1
000036F0  5282      5902          addq.l    #1,D2
000036F2  1290      5903          move.b    (A0),(A1)
000036F4  5304      5904          subq.b    #1,D4
000036F6  6008      5905          bra.s     vsprintf_64
                    5906   vsprintf_63:
000036F8  2042      5907          move.l    D2,A0
000036FA  5282      5908          addq.l    #1,D2
000036FC  10BC 002B 5909          move.b    #43,(A0)
                    5910   vsprintf_64:
00003700  5287      5911          addq.l    #1,D7
00003702  6000 0032 5912          bra       vsprintf_65
                    5913   vsprintf_60:
00003706  4A2E FFCF 5914          tst.b     -49(A6)
0000370A  6700 002A 5915          beq       vsprintf_65
0000370E  2043      5916          move.l    D3,A0
00003710  1010      5917          move.b    (A0),D0
00003712  4880      5918          ext.w     D0
00003714  48C0      5919          ext.l     D0
00003716  0C80 0000 5920          cmp.l     #45,D0
0000371A  002D      
0000371C  660E      5921          bne.s     vsprintf_67
0000371E  2043      5922          move.l    D3,A0
00003720  5283      5923          addq.l    #1,D3
00003722  2242      5924          move.l    D2,A1
00003724  5282      5925          addq.l    #1,D2
00003726  1290      5926          move.b    (A0),(A1)
00003728  5304      5927          subq.b    #1,D4
0000372A  6008      5928          bra.s     vsprintf_68
                    5929   vsprintf_67:
0000372C  2042      5930          move.l    D2,A0
0000372E  5282      5931          addq.l    #1,D2
00003730  10BC 0020 5932          move.b    #32,(A0)
                    5933   vsprintf_68:
00003734  5287      5934          addq.l    #1,D7
                    5935   vsprintf_65:
00003736  4A2E FFD0 5936          tst.b     -48(A6)
0000373A  6700 0066 5937          beq       vsprintf_77
0000373E  206E 000C 5938          move.l    12(A6),A0
00003742  1010      5939          move.b    (A0),D0
00003744  4880      5940          ext.w     D0
00003746  48C0      5941          ext.l     D0
00003748  0C80 0000 5942          cmp.l     #111,D0
0000374C  006F      
0000374E  671A      5943          beq.s     vsprintf_73
00003750  6E0C      5944          bgt.s     vsprintf_76
00003752  0C80 0000 5945          cmp.l     #88,D0
00003756  0058      
00003758  6710      5946          beq.s     vsprintf_73
0000375A  6000 0046 5947          bra       vsprintf_77
                    5948   vsprintf_76:
0000375E  0C80 0000 5949          cmp.l     #120,D0
00003762  0078      
00003764  6704      5950          beq.s     vsprintf_73
00003766  6000 003A 5951          bra       vsprintf_77
                    5952   vsprintf_73:
0000376A  2042      5953          move.l    D2,A0
0000376C  5282      5954          addq.l    #1,D2
0000376E  10BC 0030 5955          move.b    #48,(A0)
00003772  5287      5956          addq.l    #1,D7
00003774  206E 000C 5957          move.l    12(A6),A0
00003778  1010      5958          move.b    (A0),D0
0000377A  4880      5959          ext.w     D0
0000377C  48C0      5960          ext.l     D0
0000377E  0C80 0000 5961          cmp.l     #120,D0
00003782  0078      
00003784  6712      5962          beq.s     vsprintf_79
00003786  206E 000C 5963          move.l    12(A6),A0
0000378A  1010      5964          move.b    (A0),D0
0000378C  4880      5965          ext.w     D0
0000378E  48C0      5966          ext.l     D0
00003790  0C80 0000 5967          cmp.l     #88,D0
00003794  0058      
00003796  660A      5968          bne.s     vsprintf_77
                    5969   vsprintf_79:
00003798  2042      5970          move.l    D2,A0
0000379A  5282      5971          addq.l    #1,D2
0000379C  10BC 0078 5972          move.b    #120,(A0)
000037A0  5287      5973          addq.l    #1,D7
                    5974   vsprintf_77:
000037A2  2042      5975          move.l    D2,A0
000037A4  4210      5976          clr.b     (A0)
000037A6  206E 000C 5977          move.l    12(A6),A0
000037AA  1010      5978          move.b    (A0),D0
000037AC  4880      5979          ext.w     D0
000037AE  48C0      5980          ext.l     D0
000037B0  0C80 0000 5981          cmp.l     #105,D0
000037B4  0069      
000037B6  6700 0076 5982          beq       vsprintf_82
000037BA  6E42      5983          bgt.s     vsprintf_93
000037BC  0C80 0000 5984          cmp.l     #99,D0
000037C0  0063      
000037C2  6700 0084 5985          beq       vsprintf_96
000037C6  6E1C      5986          bgt.s     vsprintf_94
000037C8  0C80 0000 5987          cmp.l     #88,D0
000037CC  0058      
000037CE  6700 005E 5988          beq       vsprintf_82
000037D2  6E00 0184 5989          bgt       vsprintf_80
000037D6  0C80 0000 5990          cmp.l     #69,D0
000037DA  0045      
000037DC  6700 0050 5991          beq       vsprintf_82
000037E0  6000 0176 5992          bra       vsprintf_80
                    5993   vsprintf_94:
000037E4  0C80 0000 5994          cmp.l     #101,D0
000037E8  0065      
000037EA  6700 0042 5995          beq       vsprintf_82
000037EE  6E00 0168 5996          bgt       vsprintf_80
000037F2  0C80 0000 5997          cmp.l     #100,D0
000037F6  0064      
000037F8  6734      5998          beq.s     vsprintf_82
000037FA  6000 015C 5999          bra       vsprintf_80
                    6000   vsprintf_93:
000037FE  0C80 0000 6001          cmp.l     #117,D0
00003802  0075      
00003804  6728      6002          beq.s     vsprintf_82
00003806  6E1A      6003          bgt.s     vsprintf_95
00003808  0C80 0000 6004          cmp.l     #115,D0
0000380C  0073      
0000380E  6700 0038 6005          beq       vsprintf_96
00003812  6E00 0144 6006          bgt       vsprintf_80
00003816  0C80 0000 6007          cmp.l     #111,D0
0000381A  006F      
0000381C  6710      6008          beq.s     vsprintf_82
0000381E  6000 0138 6009          bra       vsprintf_80
                    6010   vsprintf_95:
00003822  0C80 0000 6011          cmp.l     #120,D0
00003826  0078      
00003828  6704      6012          beq.s     vsprintf_82
0000382A  6000 012C 6013          bra       vsprintf_80
                    6014   vsprintf_82:
0000382E  4A2E FFD2 6015          tst.b     -46(A6)
00003832  6714      6016          beq.s     vsprintf_96
00003834  4A2E FFCD 6017          tst.b     -51(A6)
00003838  660E      6018          bne.s     vsprintf_96
0000383A  200D      6019          move.l    A5,D0
0000383C  9087      6020          sub.l     D7,D0
0000383E  4884      6021          ext.w     D4
00003840  48C4      6022          ext.l     D4
00003842  9084      6023          sub.l     D4,D0
00003844  2D40 FFFC 6024          move.l    D0,-4(A6)
                    6025   vsprintf_96:
00003848  202E FFFC 6026          move.l    -4(A6),D0
0000384C  0C80 0000 6027          cmp.l     #0,D0
00003850  0000      
00003852  6C04      6028          bge.s     vsprintf_98
00003854  42AE FFFC 6029          clr.l     -4(A6)
                    6030   vsprintf_98:
00003858  4A2E FFCD 6031          tst.b     -51(A6)
0000385C  6600 0030 6032          bne       vsprintf_104
00003860  4884      6033          ext.w     D4
00003862  48C4      6034          ext.l     D4
00003864  2004      6035          move.l    D4,D0
00003866  D0AE FFFC 6036          add.l     -4(A6),D0
0000386A  D087      6037          add.l     D7,D0
0000386C  1D40 FFD1 6038          move.b    D0,-47(A6)
                    6039   vsprintf_102:
00003870  102E FFD1 6040          move.b    -47(A6),D0
00003874  4880      6041          ext.w     D0
00003876  48C0      6042          ext.l     D0
00003878  220D      6043          move.l    A5,D1
0000387A  534D      6044          subq.w    #1,A5
0000387C  B081      6045          cmp.l     D1,D0
0000387E  6C0E      6046          bge.s     vsprintf_104
00003880  4878 0020 6047          pea       32
00003884  2F0A      6048          move.l    A2,-(A7)
00003886  4E93      6049          jsr       (A3)
00003888  504F      6050          addq.w    #8,A7
0000388A  5286      6051          addq.l    #1,D6
0000388C  60E2      6052          bra       vsprintf_102
                    6053   vsprintf_104:
0000388E  41EE FFD4 6054          lea       -44(A6),A0
00003892  2408      6055          move.l    A0,D2
                    6056   vsprintf_105:
00003894  2042      6057          move.l    D2,A0
00003896  4A10      6058          tst.b     (A0)
00003898  6716      6059          beq.s     vsprintf_107
0000389A  2042      6060          move.l    D2,A0
0000389C  5282      6061          addq.l    #1,D2
0000389E  1210      6062          move.b    (A0),D1
000038A0  4881      6063          ext.w     D1
000038A2  48C1      6064          ext.l     D1
000038A4  2F01      6065          move.l    D1,-(A7)
000038A6  2F0A      6066          move.l    A2,-(A7)
000038A8  4E93      6067          jsr       (A3)
000038AA  504F      6068          addq.w    #8,A7
000038AC  5286      6069          addq.l    #1,D6
000038AE  60E4      6070          bra       vsprintf_105
                    6071   vsprintf_107:
000038B0  202E FFFC 6072          move.l    -4(A6),D0
000038B4  1D40 FFD1 6073          move.b    D0,-47(A6)
                    6074   vsprintf_108:
000038B8  102E FFD1 6075          move.b    -47(A6),D0
000038BC  532E FFD1 6076          subq.b    #1,-47(A6)
000038C0  4A00      6077          tst.b     D0
000038C2  670E      6078          beq.s     vsprintf_110
000038C4  4878 0030 6079          pea       48
000038C8  2F0A      6080          move.l    A2,-(A7)
000038CA  4E93      6081          jsr       (A3)
000038CC  504F      6082          addq.w    #8,A7
000038CE  5286      6083          addq.l    #1,D6
000038D0  60E6      6084          bra       vsprintf_108
                    6085   vsprintf_110:
000038D2  2043      6086          move.l    D3,A0
000038D4  4A10      6087          tst.b     (A0)
000038D6  6700 0048 6088          beq       vsprintf_113
000038DA  206E 000C 6089          move.l    12(A6),A0
000038DE  1010      6090          move.b    (A0),D0
000038E0  4880      6091          ext.w     D0
000038E2  48C0      6092          ext.l     D0
000038E4  0C80 0000 6093          cmp.l     #115,D0
000038E8  0073      
000038EA  670C      6094          beq.s     vsprintf_116
000038EC  6E18      6095          bgt.s     vsprintf_119
000038EE  0C80 0000 6096          cmp.l     #99,D0
000038F2  0063      
000038F4  6702      6097          beq.s     vsprintf_116
000038F6  600E      6098          bra.s     vsprintf_119
                    6099   vsprintf_116:
000038F8  2005      6100          move.l    D5,D0
000038FA  5385      6101          subq.l    #1,D5
000038FC  0C80 0000 6102          cmp.l     #0,D0
00003900  0000      
00003902  6E02      6103          bgt.s     vsprintf_119
00003904  6016      6104          bra.s     vsprintf_115
                    6105   vsprintf_119:
00003906  2043      6106          move.l    D3,A0
00003908  5283      6107          addq.l    #1,D3
0000390A  1210      6108          move.b    (A0),D1
0000390C  4881      6109          ext.w     D1
0000390E  48C1      6110          ext.l     D1
00003910  2F01      6111          move.l    D1,-(A7)
00003912  2F0A      6112          move.l    A2,-(A7)
00003914  4E93      6113          jsr       (A3)
00003916  504F      6114          addq.w    #8,A7
00003918  5286      6115          addq.l    #1,D6
0000391A  6002      6116          bra.s     vsprintf_112
                    6117   vsprintf_115:
0000391C  6002      6118          bra.s     vsprintf_113
                    6119   vsprintf_112:
0000391E  60B2      6120          bra       vsprintf_110
                    6121   vsprintf_113:
00003920  4A2E FFCD 6122          tst.b     -51(A6)
00003924  6700 0030 6123          beq       vsprintf_125
00003928  4884      6124          ext.w     D4
0000392A  48C4      6125          ext.l     D4
0000392C  2004      6126          move.l    D4,D0
0000392E  D0AE FFFC 6127          add.l     -4(A6),D0
00003932  D087      6128          add.l     D7,D0
00003934  1D40 FFD1 6129          move.b    D0,-47(A6)
                    6130   vsprintf_123:
00003938  102E FFD1 6131          move.b    -47(A6),D0
0000393C  4880      6132          ext.w     D0
0000393E  48C0      6133          ext.l     D0
00003940  220D      6134          move.l    A5,D1
00003942  534D      6135          subq.w    #1,A5
00003944  B081      6136          cmp.l     D1,D0
00003946  6C0E      6137          bge.s     vsprintf_125
00003948  4878 0020 6138          pea       32
0000394C  2F0A      6139          move.l    A2,-(A7)
0000394E  4E93      6140          jsr       (A3)
00003950  504F      6141          addq.w    #8,A7
00003952  5386      6142          subq.l    #1,D6
00003954  60E2      6143          bra       vsprintf_123
                    6144   vsprintf_125:
00003956  6014      6145          bra.s     vsprintf_81
                    6146   vsprintf_80:
00003958  206E 000C 6147          move.l    12(A6),A0
0000395C  1210      6148          move.b    (A0),D1
0000395E  4881      6149          ext.w     D1
00003960  48C1      6150          ext.l     D1
00003962  2F01      6151          move.l    D1,-(A7)
00003964  2F0A      6152          move.l    A2,-(A7)
00003966  4E93      6153          jsr       (A3)
00003968  504F      6154          addq.w    #8,A7
0000396A  5286      6155          addq.l    #1,D6
                    6156   vsprintf_81:
0000396C  52AE 000C 6157          addq.l    #1,12(A6)
                    6158   vsprintf_2:
00003970  6000 F9D6 6159          bra       vsprintf_1
                    6160   vsprintf_3:
00003974  4A92      6161          tst.l     (A2)
00003976  6710      6162          beq.s     vsprintf_126
00003978  4201      6163          clr.b     D1
0000397A  C2BC 0000 6164          and.l     #255,D1
0000397E  00FF      
00003980  2F01      6165          move.l    D1,-(A7)
00003982  2F0A      6166          move.l    A2,-(A7)
00003984  4E93      6167          jsr       (A3)
00003986  504F      6168          addq.w    #8,A7
                    6169   vsprintf_126:
00003988  2006      6170          move.l    D6,D0
0000398A  4CDF 3CFC 6171          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000398E  4E5E      6172          unlk      A6
00003990  4E75      6173          rts
                    6174   @itoa_convert:
00003992  4E56 0000 6175          link      A6,#0
00003996  48E7 3C00 6176          movem.l   D2/D3/D4/D5,-(A7)
0000399A  242E 0008 6177          move.l    8(A6),D2
0000399E  262E 0010 6178          move.l    16(A6),D3
000039A2  2A2E 000C 6179          move.l    12(A6),D5
000039A6  2F05      6180          move.l    D5,-(A7)
000039A8  2F03      6181          move.l    D3,-(A7)
000039AA  6100 F6B4 6182          bsr       ULDIV
000039AE  202F 0004 6183          move.l    4(A7),D0
000039B2  504F      6184          addq.w    #8,A7
000039B4  2800      6185          move.l    D0,D4
000039B6  BA83      6186          cmp.l     D3,D5
000039B8  651A      6187          blo.s     @itoa_convert_1
000039BA  2F03      6188          move.l    D3,-(A7)
000039BC  2F05      6189          move.l    D5,-(A7)
000039BE  2F03      6190          move.l    D3,-(A7)
000039C0  6100 F69E 6191          bsr       ULDIV
000039C4  2217      6192          move.l    (A7),D1
000039C6  504F      6193          addq.w    #8,A7
000039C8  2F01      6194          move.l    D1,-(A7)
000039CA  2F02      6195          move.l    D2,-(A7)
000039CC  61C4      6196          bsr       @itoa_convert
000039CE  DEFC 000C 6197          add.w     #12,A7
000039D2  2400      6198          move.l    D0,D2
                    6199   @itoa_convert_1:
000039D4  0C84 0000 6200          cmp.l     #9,D4
000039D8  0009      
000039DA  6E0A      6201          bgt.s     @itoa_convert_3
000039DC  2004      6202          move.l    D4,D0
000039DE  0680 0000 6203          add.l     #48,D0
000039E2  0030      
000039E4  600E      6204          bra.s     @itoa_convert_4
                    6205   @itoa_convert_3:
000039E6  2004      6206          move.l    D4,D0
000039E8  0680 0000 6207          add.l     #97,D0
000039EC  0061      
000039EE  0480 0000 6208          sub.l     #10,D0
000039F2  000A      
                    6209   @itoa_convert_4:
000039F4  2042      6210          move.l    D2,A0
000039F6  1080      6211          move.b    D0,(A0)
000039F8  2002      6212          move.l    D2,D0
000039FA  5280      6213          addq.l    #1,D0
000039FC  4CDF 003C 6214          movem.l   (A7)+,D2/D3/D4/D5
00003A00  4E5E      6215          unlk      A6
00003A02  4E75      6216          rts
                    6217   _ltoa:
00003A04  4E56 0000 6218          link      A6,#0
00003A08  48E7 3C00 6219          movem.l   D2/D3/D4/D5,-(A7)
00003A0C  242E 0008 6220          move.l    8(A6),D2
00003A10  262E 000C 6221          move.l    12(A6),D3
00003A14  2A2E 0010 6222          move.l    16(A6),D5
00003A18  2803      6223          move.l    D3,D4
00003A1A  0C85 0000 6224          cmp.l     #2,D5
00003A1E  0002      
00003A20  6D08      6225          blt.s     ltoa_3
00003A22  0C85 0000 6226          cmp.l     #36,D5
00003A26  0024      
00003A28  6F06      6227          ble.s     ltoa_1
                    6228   ltoa_3:
00003A2A  2003      6229          move.l    D3,D0
00003A2C  6000 0052 6230          bra       ltoa_4
                    6231   ltoa_1:
00003A30  0C85 0000 6232          cmp.l     #10,D5
00003A34  000A      
00003A36  6600 0032 6233          bne       ltoa_5
00003A3A  0C82 0000 6234          cmp.l     #0,D2
00003A3E  0000      
00003A40  6C28      6235          bge.s     ltoa_5
00003A42  2002      6236          move.l    D2,D0
00003A44  4480      6237          neg.l     D0
00003A46  2400      6238          move.l    D0,D2
00003A48  0C82 0000 6239          cmp.l     #0,D2
00003A4C  0000      
00003A4E  6C12      6240          bge.s     ltoa_7
00003A50  4879 0000 6241          pea       @itoa_1
00003A54  5720      
00003A56  2F03      6242          move.l    D3,-(A7)
00003A58  6100 F5F6 6243          bsr       _strcpy
00003A5C  504F      6244          addq.w    #8,A7
00003A5E  2003      6245          move.l    D3,D0
00003A60  601E      6246          bra.s     ltoa_4
                    6247   ltoa_7:
00003A62  2044      6248          move.l    D4,A0
00003A64  5284      6249          addq.l    #1,D4
00003A66  10BC 002D 6250          move.b    #45,(A0)
                    6251   ltoa_5:
00003A6A  2F05      6252          move.l    D5,-(A7)
00003A6C  2F02      6253          move.l    D2,-(A7)
00003A6E  2F04      6254          move.l    D4,-(A7)
00003A70  6100 FF20 6255          bsr       @itoa_convert
00003A74  DEFC 000C 6256          add.w     #12,A7
00003A78  2800      6257          move.l    D0,D4
00003A7A  2044      6258          move.l    D4,A0
00003A7C  4210      6259          clr.b     (A0)
00003A7E  2003      6260          move.l    D3,D0
                    6261   ltoa_4:
00003A80  4CDF 003C 6262          movem.l   (A7)+,D2/D3/D4/D5
00003A84  4E5E      6263          unlk      A6
00003A86  4E75      6264          rts
                    6265   _ultoa:
00003A88  4E56 0000 6266          link      A6,#0
00003A8C  48E7 3800 6267          movem.l   D2/D3/D4,-(A7)
00003A90  262E 0010 6268          move.l    16(A6),D3
00003A94  282E 000C 6269          move.l    12(A6),D4
00003A98  2404      6270          move.l    D4,D2
00003A9A  0C83 0000 6271          cmp.l     #2,D3
00003A9E  0002      
00003AA0  6D08      6272          blt.s     ultoa_3
00003AA2  0C83 0000 6273          cmp.l     #36,D3
00003AA6  0024      
00003AA8  6F04      6274          ble.s     ultoa_1
                    6275   ultoa_3:
00003AAA  2004      6276          move.l    D4,D0
00003AAC  6018      6277          bra.s     ultoa_4
                    6278   ultoa_1:
00003AAE  2F03      6279          move.l    D3,-(A7)
00003AB0  2F2E 0008 6280          move.l    8(A6),-(A7)
00003AB4  2F02      6281          move.l    D2,-(A7)
00003AB6  6100 FEDA 6282          bsr       @itoa_convert
00003ABA  DEFC 000C 6283          add.w     #12,A7
00003ABE  2400      6284          move.l    D0,D2
00003AC0  2042      6285          move.l    D2,A0
00003AC2  4210      6286          clr.b     (A0)
00003AC4  2004      6287          move.l    D4,D0
                    6288   ultoa_4:
00003AC6  4CDF 001C 6289          movem.l   (A7)+,D2/D3/D4
00003ACA  4E5E      6290          unlk      A6
00003ACC  4E75      6291          rts
                    6292   _itoa:
00003ACE  4E56 0000 6293          link      A6,#0
00003AD2  2F2E 0010 6294          move.l    16(A6),-(A7)
00003AD6  2F2E 000C 6295          move.l    12(A6),-(A7)
00003ADA  2F2E 0008 6296          move.l    8(A6),-(A7)
00003ADE  6100 FF24 6297          bsr       _ltoa
00003AE2  DEFC 000C 6298          add.w     #12,A7
00003AE6  4E5E      6299          unlk      A6
00003AE8  4E75      6300          rts
                    6301   ULMUL:
00003AEA  4E56 0000 6302          link    A6,#0
00003AEE  48E7 C000 6303          movem.l D0/D1,-(A7)
00003AF2  222E 0008 6304          move.l  8(A6),D1
00003AF6  202E 000C 6305          move.l  12(A6),D0
00003AFA  602C      6306          bra.s   lmul_3
                    6307   LMUL:
00003AFC  4E56 0000 6308          link    A6,#0
00003B00  48E7 C000 6309          movem.l D0/D1,-(A7)
00003B04  222E 0008 6310          move.l  8(A6),D1
00003B08  202E 000C 6311          move.l  12(A6),D0
00003B0C  4A80      6312          tst.l   D0
00003B0E  6A0A      6313          bpl.s   lmul_1
00003B10  4480      6314          neg.l   D0
00003B12  4A81      6315          tst.l   D1
00003B14  6A0A      6316          bpl.s   lmul_2
00003B16  4481      6317          neg.l   D1
00003B18  600E      6318          bra.s   lmul_3
                    6319   lmul_1:
00003B1A  4A81      6320          tst.l   D1
00003B1C  6A0A      6321          bpl.s   lmul_3
00003B1E  4481      6322          neg.l   D1
                    6323   lmul_2:
00003B20  6114      6324          bsr.s   domul
00003B22  4481      6325          neg.l   D1
00003B24  4080      6326          negx.l  D0
00003B26  6002      6327          bra.s   lmul_4
                    6328   lmul_3:
00003B28  610C      6329          bsr.s   domul
                    6330   lmul_4:
00003B2A  2D41 0008 6331          move.l  D1,8(A6)
00003B2E  4CDF 0003 6332          movem.l (A7)+,D0/D1
00003B32  4E5E      6333          unlk    A6
00003B34  4E75      6334          rts
                    6335   domul:
00003B36  0C81 0000 6336          cmpi.l  #$FFFF,D1
00003B3A  FFFF      
00003B3C  620C      6337          bhi.s   domul_1
00003B3E  0C80 0000 6338          cmpi.l  #$FFFF,D0
00003B42  FFFF      
00003B44  620E      6339          bhi.s   domul_2
00003B46  C2C0      6340          mulu    D0,D1
00003B48  4E75      6341          rts
                    6342   domul_1:
00003B4A  0C80 0000 6343          cmpi.l  #$FFFF,D0
00003B4E  FFFF      
00003B50  6218      6344          bhi.s   domul_4
00003B52  6002      6345          bra.s   domul_3
                    6346   domul_2
00003B54  C141      6347          exg     D0,D1
                    6348   domul_3:
00003B56  2F02      6349          move.l  D2,-(A7)
00003B58  2401      6350          move.l  D1,D2
00003B5A  4842      6351          swap    D2
00003B5C  C2C0      6352          mulu    D0,D1
00003B5E  C4C0      6353          mulu    D0,D2
00003B60  4842      6354          swap    D2
00003B62  4242      6355          clr.w   D2
00003B64  D282      6356          add.l   D2,D1
00003B66  241F      6357          move.l  (A7)+,D2
00003B68  4E75      6358          rts
                    6359   domul_4:
00003B6A  48E7 3000 6360          movem.l D2/D3,-(A7)
00003B6E  2401      6361          move.l  D1,D2
00003B70  2601      6362          move.l  D1,D3
00003B72  C2C0      6363          mulu    D0,D1
00003B74  4842      6364          swap    D2
00003B76  C4C0      6365          mulu    D0,D2
00003B78  4840      6366          swap    D0
00003B7A  C6C0      6367          mulu    D0,D3
00003B7C  D483      6368          add.l   D3,D2
00003B7E  4842      6369          swap    D2
00003B80  4242      6370          clr.w   D2
00003B82  D282      6371          add.l   D2,D1
00003B84  4CDF 000C 6372          movem.l (A7)+,D2/D3
00003B88  4E75      6373          rts
                    6374   _strlen:
00003B8A  206F 0004 6375          move.l    (4,A7),A0
00003B8E  2248      6376          move.l    A0,A1
                    6377   strlen_1:
00003B90  4A19      6378          tst.b     (A1)+
00003B92  66FC      6379          bne       strlen_1
00003B94  2009      6380          move.l    A1,D0
00003B96  9088      6381          sub.l     A0,D0
00003B98  5380      6382          subq.l    #1,D0
00003B9A  4E75      6383          rts
                    6384          section   const
                    6385   
                    6386   @m649d4~1_1:
00003B9C  0D0A 00   6387          dc.b      13,10,0
                    6388   @m649d4~1_2:
00003BA0  0D53 7769 6389          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00003BA4  7463 6865 
00003BA8  7320 5357 
00003BAC  5B        
00003BAD  372D 305D 6390          dc.b      55,45,48,93,32,61,32,0
00003BB1  203D 2000 
                    6391   @m649d4~1_3:
00003BB6  3000      6392          dc.b      48,0
                    6393   @m649d4~1_4:
00003BB8  3100      6394          dc.b      49,0
                    6395   @m649d4~1_5:
00003BBA  0D0A 4475 6396          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00003BBE  6D70 204D 
00003BC2  656D 6F72 
00003BC6  79        
00003BC7  2042 6C6F 6397          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00003BCB  636B 3A20 
00003BCF  3C45 5343 
00003BD3  3E20      
00003BD5  746F 2041 6398          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00003BD9  626F 7274 
00003BDD  2C20 3C53 
00003BE1  50        
00003BE2  4143 453E 6399          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00003BE6  2074 6F20 
00003BEA  436F 6E74 
00003BEE  69        
00003BEF  6E75 6500 6400          dc.b      110,117,101,0
                    6401   @m649d4~1_6:
00003BF4  0D0A 456E 6402          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00003BF8  7465 7220 
00003BFC  5374 6172 
00003C00  74        
00003C01  2041 6464 6403          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003C05  7265 7373 
00003C09  3A20 00   
                    6404   @m649d4~1_7:
00003C0C  0D0A 2530 6405          dc.b      13,10,37,48,56,120,32,0
00003C10  3878 2000 
                    6406   @m649d4~1_8:
00003C14  2530 3258 6407          dc.b      37,48,50,88,0
00003C18  00        
                    6408   @m649d4~1_9:
00003C1A  2020 00   6409          dc.b      32,32,0
                    6410   @m649d4~1_10:
00003C1E  0D0A 4669 6411          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00003C22  6C6C 204D 
00003C26  656D 6F72 
00003C2A  79        
00003C2B  2042 6C6F 6412          dc.b      32,66,108,111,99,107,0
00003C2F  636B 00   
                    6413   @m649d4~1_11:
00003C32  0D0A 456E 6414          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00003C36  7465 7220 
00003C3A  456E 6420 
00003C3E  41        
00003C3F  6464 7265 6415          dc.b      100,100,114,101,115,115,58,32,0
00003C43  7373 3A20 
00003C47  00        
                    6416   @m649d4~1_12:
00003C48  0D0A 456E 6417          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00003C4C  7465 7220 
00003C50  4669 6C6C 
00003C54  20        
00003C55  4461 7461 6418          dc.b      68,97,116,97,58,32,0
00003C59  3A20 00   
                    6419   @m649d4~1_13:
00003C5C  0D0A 4669 6420          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00003C60  6C6C 696E 
00003C64  6720 4164 
00003C68  64        
00003C69  7265 7373 6421          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00003C6D  6573 205B 
00003C71  2425 3038 
00003C75  58        
00003C76  202D 2024 6422          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00003C7A  2530 3858 
00003C7E  5D20 7769 
00003C82  7468      
00003C84  2024 2530 6423          dc.b      32,36,37,48,50,88,0
00003C88  3258 00   
                    6424   @m649d4~1_14:
00003C8C  0D0A 5573 6425          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00003C90  6520 4879 
00003C94  7065 7254 
00003C98  65        
00003C99  726D 696E 6426          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00003C9D  616C 2074 
00003CA1  6F20 5365 
00003CA5  6E64 2054 6427          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00003CA9  6578 7420 
00003CAD  4669 6C65 
00003CB1  2028 2E68 6428          dc.b      32,40,46,104,101,120,41,13,10,0
00003CB5  6578 290D 
00003CB9  0A00      
                    6429   @m649d4~1_15:
00003CBC  0D0A 4C6F 6430          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00003CC0  6164 2046 
00003CC4  6169 6C65 
00003CC8  64        
00003CC9  2061 7420 6431          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00003CCD  4164 6472 
00003CD1  6573 7320 
00003CD5  3D        
00003CD6  205B 2425 6432          dc.b      32,91,36,37,48,56,88,93,13,10,0
00003CDA  3038 585D 
00003CDE  0D0A 00   
                    6433   @m649d4~1_16:
00003CE2  0D0A 5375 6434          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00003CE6  6363 6573 
00003CEA  733A 2044 
00003CEE  6F        
00003CEF  776E 6C6F 6435          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00003CF3  6164 6564 
00003CF7  2025 6420 
00003CFB  6279 7465 6436          dc.b      98,121,116,101,115,13,10,0
00003CFF  730D 0A00 
                    6437   @m649d4~1_17:
00003D04  0D0A 4578 6438          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00003D08  616D 696E 
00003D0C  6520 616E 
00003D10  64        
00003D11  2043 6861 6439          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00003D15  6E67 6520 
00003D19  4D65 6D6F 
00003D1D  72        
00003D1E  7900      6440          dc.b      121,0
                    6441   @m649d4~1_18:
00003D20  0D0A 3C45 6442          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00003D24  5343 3E20 
00003D28  746F 2053 
00003D2C  746F      
00003D2E  702C 203C 6443          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00003D32  5350 4143 
00003D36  453E 2074 
00003D3A  6F20      
00003D3C  4164 7661 6444          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00003D40  6E63 652C 
00003D44  2027 2D27 
00003D48  2074      
00003D4A  6F20 476F 6445          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00003D4E  2042 6163 
00003D52  6B2C 203C 
00003D56  4441      
00003D58  5441 3E20 6446          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00003D5C  746F 2063 
00003D60  6861 6E67 
00003D64  65        
00003D65  00        6447          dc.b      0
                    6448   @m649d4~1_19:
00003D66  0D0A 456E 6449          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00003D6A  7465 7220 
00003D6E  4164 6472 
00003D72  65        
00003D73  7373 3A20 6450          dc.b      115,115,58,32,0
00003D77  00        
                    6451   @m649d4~1_20:
00003D78  0D0A 5B25 6452          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00003D7C  3038 785D 
00003D80  203A 2025 
00003D84  3032 78   
00003D87  2020 00   6453          dc.b      32,32,0
                    6454   @m649d4~1_21:
00003D8A  0D0A 5761 6455          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00003D8E  726E 696E 
00003D92  6720 4368 
00003D96  61        
00003D97  6E67 6520 6456          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00003D9B  4661 696C 
00003D9F  6564 3A20 
00003DA3  57        
00003DA4  726F 7465 6457          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00003DA8  205B 2530 
00003DAC  3278 5D2C 
00003DB0  20        
00003DB1  5265 6164 6458          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00003DB5  205B 2530 
00003DB9  3278 5D00 
                    6459   @m649d4~1_22:
00003DBE  0D0A 5072 6460          dc.b      13,10,80,114,111,103,114,97,109,109,105,110
00003DC2  6F67 7261 
00003DC6  6D6D 696E 
00003DCA  6720 5350 6461          dc.b      103,32,83,80,73,32,70,108,97,115,104,46,46,46
00003DCE  4920 466C 
00003DD2  6173 682E 
00003DD6  2E2E      
00003DD8  2E00      6462          dc.b      46,0
                    6463   @m649d4~1_23:
00003DDA  0D0A 5468 6464          dc.b      13,10,84,104,101,32,118,97,108,117,101,32,37
00003DDE  6520 7661 
00003DE2  6C75 6520 
00003DE6  25        
00003DE7  7820 6174 6465          dc.b      120,32,97,116,32,97,100,100,114,101,115,115
00003DEB  2061 6464 
00003DEF  7265 7373 
00003DF3  2025 7820 6466          dc.b      32,37,120,32,105,110,32,83,68,82,65,77,32,105
00003DF7  696E 2053 
00003DFB  4452 414D 
00003DFF  2069      
00003E01  7320 6E6F 6467          dc.b      115,32,110,111,116,32,101,113,117,97,108,32
00003E05  7420 6571 
00003E09  7561 6C20 
00003E0D  746F 2074 6468          dc.b      116,111,32,116,104,101,32,118,97,108,117,101
00003E11  6865 2076 
00003E15  616C 7565 
00003E19  2025 7820 6469          dc.b      32,37,120,32,97,116,32,70,108,97,115,104,32
00003E1D  6174 2046 
00003E21  6C61 7368 
00003E25  20        
00003E26  4164 6472 6470          dc.b      65,100,100,114,101,115,115,32,37,120,0
00003E2A  6573 7320 
00003E2E  2578 00   
                    6471   @m649d4~1_24:
00003E32  0D0A 416C 6472          dc.b      13,10,65,108,108,32,97,100,100,114,101,115,115
00003E36  6C20 6164 
00003E3A  6472 6573 
00003E3E  73        
00003E3F  6573 2068 6473          dc.b      101,115,32,104,97,118,101,32,98,101,101,110
00003E43  6176 6520 
00003E47  6265 656E 
00003E4B  2063 6F70 6474          dc.b      32,99,111,112,105,101,100,32,105,110,116,111
00003E4F  6965 6420 
00003E53  696E 746F 
00003E57  2053 5049 6475          dc.b      32,83,80,73,32,70,108,97,115,104,32,99,111,114
00003E5B  2046 6C61 
00003E5F  7368 2063 
00003E63  6F72      
00003E65  7265 6374 6476          dc.b      114,101,99,116,108,121,0
00003E69  6C79 00   
                    6477   @m649d4~1_25:
00003E6C  0D0A 4C6F 6478          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00003E70  6164 696E 
00003E74  6720 5072 
00003E78  6F        
00003E79  6772 616D 6479          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00003E7D  2046 726F 
00003E81  6D20 5350 
00003E85  49        
00003E86  2046 6C61 6480          dc.b      32,70,108,97,115,104,46,46,46,46,0
00003E8A  7368 2E2E 
00003E8E  2E2E 00   
                    6481   @m649d4~1_26:
00003E92  0D0A 5072 6482          dc.b      13,10,80,114,111,103,114,97,109,32,100,111,110
00003E96  6F67 7261 
00003E9A  6D20 646F 
00003E9E  6E        
00003E9F  6520 6C6F 6483          dc.b      101,32,108,111,97,100,105,110,103,0
00003EA3  6164 696E 
00003EA7  6700      
                    6484   @m649d4~1_27:
00003EAA  2425 3038 6485          dc.b      36,37,48,56,88,32,32,0
00003EAE  5820 2000 
                    6486   @m649d4~1_28:
00003EB2  2000      6487          dc.b      32,0
                    6488   @m649d4~1_29:
00003EB4  2E00      6489          dc.b      46,0
                    6490   @m649d4~1_30:
00003EB6  2563 00   6491          dc.b      37,99,0
                    6492   @m649d4~1_31:
00003EBA  00        6493          dc.b      0
                    6494   @m649d4~1_32:
00003EBC  0D0A 0D0A 6495          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00003EC0  2044 3020 
00003EC4  3D20 2425 
00003EC8  3038 58   
00003ECB  2020 4130 6496          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00003ECF  203D 2024 
00003ED3  2530 3858 
00003ED7  00        
                    6497   @m649d4~1_33:
00003ED8  0D0A 2044 6498          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00003EDC  3120 3D20 
00003EE0  2425 3038 
00003EE4  5820 20   
00003EE7  4131 203D 6499          dc.b      65,49,32,61,32,36,37,48,56,88,0
00003EEB  2024 2530 
00003EEF  3858 00   
                    6500   @m649d4~1_34:
00003EF2  0D0A 2044 6501          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00003EF6  3220 3D20 
00003EFA  2425 3038 
00003EFE  5820 20   
00003F01  4132 203D 6502          dc.b      65,50,32,61,32,36,37,48,56,88,0
00003F05  2024 2530 
00003F09  3858 00   
                    6503   @m649d4~1_35:
00003F0C  0D0A 2044 6504          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00003F10  3320 3D20 
00003F14  2425 3038 
00003F18  5820 20   
00003F1B  4133 203D 6505          dc.b      65,51,32,61,32,36,37,48,56,88,0
00003F1F  2024 2530 
00003F23  3858 00   
                    6506   @m649d4~1_36:
00003F26  0D0A 2044 6507          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00003F2A  3420 3D20 
00003F2E  2425 3038 
00003F32  5820 20   
00003F35  4134 203D 6508          dc.b      65,52,32,61,32,36,37,48,56,88,0
00003F39  2024 2530 
00003F3D  3858 00   
                    6509   @m649d4~1_37:
00003F40  0D0A 2044 6510          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00003F44  3520 3D20 
00003F48  2425 3038 
00003F4C  5820 20   
00003F4F  4135 203D 6511          dc.b      65,53,32,61,32,36,37,48,56,88,0
00003F53  2024 2530 
00003F57  3858 00   
                    6512   @m649d4~1_38:
00003F5A  0D0A 2044 6513          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00003F5E  3620 3D20 
00003F62  2425 3038 
00003F66  5820 20   
00003F69  4136 203D 6514          dc.b      65,54,32,61,32,36,37,48,56,88,0
00003F6D  2024 2530 
00003F71  3858 00   
                    6515   @m649d4~1_39:
00003F74  0D0A 2044 6516          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00003F78  3720 3D20 
00003F7C  2425 3038 
00003F80  5820 20   
00003F83  4137 203D 6517          dc.b      65,55,32,61,32,36,37,48,56,88,0
00003F87  2024 2530 
00003F8B  3858 00   
                    6518   @m649d4~1_40:
00003F8E  0D0A 0D0A 6519          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00003F92  5553 5020 
00003F96  3D20 2425 
00003F9A  3038 58   
00003F9D  2020 2841 6520          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00003FA1  3729 2055 
00003FA5  7365 7220 
00003FA9  5350      
00003FAB  00        6521          dc.b      0
                    6522   @m649d4~1_41:
00003FAC  0D0A 5353 6523          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00003FB0  5020 3D20 
00003FB4  2425 3038 
00003FB8  5820 20   
00003FBB  2841 3729 6524          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00003FBF  2053 7570 
00003FC3  6572 7669 
00003FC7  73        
00003FC8  6F72 2053 6525          dc.b      111,114,32,83,80,0
00003FCC  5000      
                    6526   @m649d4~1_42:
00003FCE  0D0A 2053 6527          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00003FD2  5220 3D20 
00003FD6  2425 3034 
00003FDA  5820 20   
00003FDD  2000      6528          dc.b      32,0
                    6529   @m649d4~1_43:
00003FE0  2020 205B 6530          dc.b      32,32,32,91,0
00003FE4  00        
                    6531   @m649d4~1_44:
00003FE6  0D0A 2050 6532          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00003FEA  4320 3D20 
00003FEE  2425 3038 
00003FF2  5820 20   
00003FF5  00        6533          dc.b      0
                    6534   @m649d4~1_45:
00003FF6  5B40 2042 6535          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00003FFA  5245 414B 
00003FFE  504F 494E 
00004002  545D 00   
                    6536   @m649d4~1_46:
00004006  0D0A 5750 6537          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
0000400A  2564 203D 
0000400E  2025 7300 
                    6538   @m649d4~1_47:
00004012  0D0A 0D0A 6539          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004016  0D0A 0D0A 
0000401A  0D0A 0D0A 
0000401E  5369 6E   
00004021  676C 6520 6540          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004025  5374 6570 
00004029  2020 3A5B 
0000402D  4F        
0000402E  4E5D 00   6541          dc.b      78,93,0
                    6542   @m649d4~1_48:
00004032  0D0A 4272 6543          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004036  6561 6B20 
0000403A  506F 696E 
0000403E  74        
0000403F  7320 3A5B 6544          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00004043  4469 7361 
00004047  626C 6564 
0000404B  5D        
0000404C  00        6545          dc.b      0
                    6546   @m649d4~1_49:
0000404E  0D0A 5072 6547          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00004052  6573 7320 
00004056  3C53 5041 
0000405A  4345      
0000405C  3E20 746F 6548          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004060  2045 7865 
00004064  6375 7465 
00004068  20        
00004069  4E65 7874 6549          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
0000406D  2049 6E73 
00004071  7472 7563 
00004075  7469 6F6E 6550          dc.b      116,105,111,110,0
00004079  00        
                    6551   @m649d4~1_50:
0000407A  0D0A 5072 6552          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000407E  6573 7320 
00004082  3C45 5343 
00004086  3E20      
00004088  746F 2052 6553          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
0000408C  6573 756D 
00004090  6520 5072 
00004094  6F67 7261 6554          dc.b      111,103,114,97,109,0
00004098  6D00      
                    6555   @m649d4~1_51:
0000409A  0D0A 496C 6556          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
0000409E  6C65 6761 
000040A2  6C20 4461 
000040A6  74        
000040A7  6120 5265 6557          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
000040AB  6769 7374 
000040AF  6572 203A 
000040B3  20        
000040B4  5573 6520 6558          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000040B8  4430 2D44 
000040BC  372E 2E2E 
000040C0  2E2E      
000040C2  0D0A 00   6559          dc.b      13,10,0
                    6560   @m649d4~1_52:
000040C6  0D0A 4425 6561          dc.b      13,10,68,37,99,32,61,32,0
000040CA  6320 3D20 
000040CE  00        
                    6562   @m649d4~1_53:
000040D0  0D0A 496C 6563          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000040D4  6C65 6761 
000040D8  6C20 4164 
000040DC  64        
000040DD  7265 7373 6564          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000040E1  2052 6567 
000040E5  6973 7465 
000040E9  7220 3A20 6565          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000040ED  5573 6520 
000040F1  4130 2D41 
000040F5  372E      
000040F7  2E2E 2E2E 6566          dc.b      46,46,46,46,13,10,0
000040FB  0D0A 00   
                    6567   @m649d4~1_54:
000040FE  0D0A 4125 6568          dc.b      13,10,65,37,99,32,61,32,0
00004102  6320 3D20 
00004106  00        
                    6569   @m649d4~1_55:
00004108  0D0A 5573 6570          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
0000410C  6572 2053 
00004110  5020 3D20 
00004114  00        
                    6571   @m649d4~1_56:
00004116  0D0A 496C 6572          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000411A  6C65 6761 
0000411E  6C20 5265 
00004122  67        
00004123  6973 7465 6573          dc.b      105,115,116,101,114,46,46,46,46,0
00004127  722E 2E2E 
0000412B  2E00      
                    6574   @m649d4~1_57:
0000412E  0D0A 5379 6575          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004132  7374 656D 
00004136  2053 5020 
0000413A  3D        
0000413B  2000      6576          dc.b      32,0
                    6577   @m649d4~1_58:
0000413E  0D0A 5043 6578          dc.b      13,10,80,67,32,61,32,0
00004142  203D 2000 
                    6579   @m649d4~1_59:
00004146  0D0A 5352 6580          dc.b      13,10,83,82,32,61,32,0
0000414A  203D 2000 
                    6581   @m649d4~1_60:
0000414E  0D0A 496C 6582          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004152  6C65 6761 
00004156  6C20 5265 
0000415A  67        
0000415B  6973 7465 6583          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
0000415F  723A 2055 
00004163  7365 2041 
00004167  30        
00004168  2D41 372C 6584          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
0000416C  2044 302D 
00004170  4437 2C20 
00004174  5353 50   
00004177  2C20 5553 6585          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
0000417B  502C 2050 
0000417F  4320 6F72 
00004183  2053      
00004185  520D 0A00 6586          dc.b      82,13,10,0
                    6587   @m649d4~1_61:
0000418A  0D0A 0D0A 6588          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
0000418E  4E75 6D20 
00004192  2020 2020 
00004196  4164      
00004198  6472 6573 6589          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
0000419C  7320 2020 
000041A0  2020 2049 
000041A4  6E        
000041A5  7374 7275 6590          dc.b      115,116,114,117,99,116,105,111,110,0
000041A9  6374 696F 
000041AD  6E00      
                    6591   @m649d4~1_62:
000041B0  0D0A 2D2D 6592          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000041B4  2D20 2020 
000041B8  2020 2D2D 
000041BC  2D2D 2D   
000041BF  2D2D 2D2D 6593          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000041C3  2020 2020 
000041C7  2D2D 2D2D 
000041CB  2D2D 2D   
000041CE  2D2D 2D2D 6594          dc.b      45,45,45,45,0
000041D2  00        
                    6595   @m649d4~1_63:
000041D4  0D0A 4E6F 6596          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000041D8  2042 7265 
000041DC  616B 506F 
000041E0  69        
000041E1  6E74 7320 6597          dc.b      110,116,115,32,83,101,116,0
000041E5  5365 7400 
                    6598   @m649d4~1_64:
000041EA  0D0A 2533 6599          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000041EE  6420 2020 
000041F2  2020 2425 
000041F6  3038 78   
000041F9  00        6600          dc.b      0
                    6601   @m649d4~1_65:
000041FA  0D0A 4E75 6602          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000041FE  6D20 2020 
00004202  2020 4164 
00004206  6472      
00004208  6573 7300 6603          dc.b      101,115,115,0
                    6604   @m649d4~1_66:
0000420C  0D0A 2D2D 6605          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004210  2D20 2020 
00004214  2020 2D2D 
00004218  2D2D 2D   
0000421B  2D2D 2D2D 6606          dc.b      45,45,45,45,0
0000421F  00        
                    6607   @m649d4~1_67:
00004220  0D0A 4E6F 6608          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004224  2057 6174 
00004228  6368 506F 
0000422C  69        
0000422D  6E74 7320 6609          dc.b      110,116,115,32,83,101,116,0
00004231  5365 7400 
                    6610   @m649d4~1_68:
00004236  0D0A 456E 6611          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000423A  7465 7220 
0000423E  4272 6561 
00004242  6B        
00004243  2050 6F69 6612          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004247  6E74 204E 
0000424B  756D 6265 
0000424F  72        
00004250  3A20 00   6613          dc.b      58,32,0
                    6614   @m649d4~1_69:
00004254  0D0A 496C 6615          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004258  6C65 6761 
0000425C  6C20 5261 
00004260  6E        
00004261  6765 203A 6616          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004265  2055 7365 
00004269  2030 202D 
0000426D  2037      
0000426F  00        6617          dc.b      0
                    6618   @m649d4~1_70:
00004270  0D0A 4272 6619          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004274  6561 6B20 
00004278  506F 696E 
0000427C  74        
0000427D  2043 6C65 6620          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004281  6172 6564 
00004285  2E2E 2E2E 
00004289  2E        
0000428A  0D0A 00   6621          dc.b      13,10,0
                    6622   @m649d4~1_71:
0000428E  0D0A 4272 6623          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004292  6561 6B20 
00004296  506F 696E 
0000429A  74        
0000429B  2077 6173 6624          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
0000429F  6E27 7420 
000042A3  5365 742E 
000042A7  2E        
000042A8  2E2E 2E00 6625          dc.b      46,46,46,0
                    6626   @m649d4~1_72:
000042AC  0D0A 456E 6627          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
000042B0  7465 7220 
000042B4  5761 7463 
000042B8  68        
000042B9  2050 6F69 6628          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000042BD  6E74 204E 
000042C1  756D 6265 
000042C5  72        
000042C6  3A20 00   6629          dc.b      58,32,0
                    6630   @m649d4~1_73:
000042CA  0D0A 5761 6631          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000042CE  7463 6820 
000042D2  506F 696E 
000042D6  74        
000042D7  2043 6C65 6632          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000042DB  6172 6564 
000042DF  2E2E 2E2E 
000042E3  2E        
000042E4  0D0A 00   6633          dc.b      13,10,0
                    6634   @m649d4~1_74:
000042E8  0D0A 5761 6635          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000042EC  7463 6820 
000042F0  506F 696E 
000042F4  74        
000042F5  2057 6173 6636          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000042F9  206E 6F74 
000042FD  2053 6574 
00004301  2E        
00004302  2E2E 2E2E 6637          dc.b      46,46,46,46,0
00004306  00        
                    6638   @m649d4~1_75:
00004308  0D0A 4E6F 6639          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
0000430C  2046 5245 
00004310  4520 4272 
00004314  6561      
00004316  6B20 506F 6640          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
0000431A  696E 7473 
0000431E  2E2E 2E2E 
00004322  2E        
00004323  00        6641          dc.b      0
                    6642   @m649d4~1_76:
00004324  0D0A 4272 6643          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004328  6561 6B20 
0000432C  506F 696E 
00004330  74        
00004331  2041 6464 6644          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004335  7265 7373 
00004339  3A20 00   
                    6645   @m649d4~1_77:
0000433C  0D0A 4572 6646          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004340  726F 7220 
00004344  3A20 4272 
00004348  65        
00004349  616B 2050 6647          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000434D  6F69 6E74 
00004351  7320 4341 
00004355  4E        
00004356  4E4F 5420 6648          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
0000435A  6265 2073 
0000435E  6574 2061 
00004362  74        
00004363  204F 4444 6649          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004367  2061 6464 
0000436B  7265 7373 
0000436F  65        
00004370  7300      6650          dc.b      115,0
                    6651   @m649d4~1_78:
00004372  0D0A 4572 6652          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004376  726F 7220 
0000437A  3A20 4272 
0000437E  65        
0000437F  616B 2050 6653          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004383  6F69 6E74 
00004387  7320 4341 
0000438B  4E        
0000438C  4E4F 5420 6654          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004390  6265 2073 
00004394  6574 2066 
00004398  6F        
00004399  7220 524F 6655          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
0000439D  4D20 696E 
000043A1  2052 616E 
000043A5  67        
000043A6  6520 3A20 6656          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
000043AA  5B24 302D 
000043AE  2430 3030 
000043B2  3037 46   
000043B5  4646 5D00 6657          dc.b      70,70,93,0
                    6658   @m649d4~1_79:
000043BA  0D0A 4572 6659          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
000043BE  726F 723A 
000043C2  2042 7265 
000043C6  61        
000043C7  6B20 506F 6660          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000043CB  696E 7420 
000043CF  416C 7265 
000043D3  6164 7920 6661          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000043D7  4578 6973 
000043DB  7473 2061 
000043DF  74        
000043E0  2041 6464 6662          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000043E4  7265 7373 
000043E8  203A 2025 
000043EC  30        
000043ED  3878 0D0A 6663          dc.b      56,120,13,10,0
000043F1  00        
                    6664   @m649d4~1_80:
000043F2  0D0A 4272 6665          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000043F6  6561 6B20 
000043FA  506F 696E 
000043FE  74        
000043FF  2053 6574 6666          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004403  2061 7420 
00004407  4164 6472 
0000440B  65        
0000440C  7373 3A20 6667          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004410  5B24 2530 
00004414  3878 5D00 
                    6668   @m649d4~1_81:
00004418  0D0A 4E6F 6669          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
0000441C  2046 5245 
00004420  4520 5761 
00004424  7463      
00004426  6820 506F 6670          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
0000442A  696E 7473 
0000442E  2E2E 2E2E 
00004432  2E        
00004433  00        6671          dc.b      0
                    6672   @m649d4~1_82:
00004434  0D0A 5761 6673          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004438  7463 6820 
0000443C  506F 696E 
00004440  74        
00004441  2041 6464 6674          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004445  7265 7373 
00004449  3A20 00   
                    6675   @m649d4~1_83:
0000444C  0D0A 4572 6676          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004450  726F 723A 
00004454  2057 6174 
00004458  63        
00004459  6820 506F 6677          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
0000445D  696E 7420 
00004461  416C 7265 
00004465  6164 7920 6678          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004469  5365 7420 
0000446D  6174 2041 
00004471  64        
00004472  6472 6573 6679          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004476  7320 3A20 
0000447A  2530 3878 
0000447E  0D        
0000447F  0A00      6680          dc.b      10,0
                    6681   @m649d4~1_84:
00004482  0D0A 5761 6682          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004486  7463 6820 
0000448A  506F 696E 
0000448E  74        
0000448F  2053 6574 6683          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004493  2061 7420 
00004497  4164 6472 
0000449B  65        
0000449C  7373 3A20 6684          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000044A0  5B24 2530 
000044A4  3878 5D00 
                    6685   @m649d4~1_85:
000044A8  0D0A 0D0A 6686          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
000044AC  0D0A 0D0A 
000044B0  4042 5245 
000044B4  414B 50   
000044B7  4F49 4E54 6687          dc.b      79,73,78,84,0
000044BB  00        
                    6688   @m649d4~1_86:
000044BC  0D0A 5369 6689          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000044C0  6E67 6C65 
000044C4  2053 7465 
000044C8  70        
000044C9  203A 205B 6690          dc.b      32,58,32,91,79,78,93,0
000044CD  4F4E 5D00 
                    6691   @m649d4~1_87:
000044D2  0D0A 4272 6692          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000044D6  6561 6B50 
000044DA  6F69 6E74 
000044DE  73        
000044DF  203A 205B 6693          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
000044E3  456E 6162 
000044E7  6C65 645D 
000044EB  00        
                    6694   @m649d4~1_88:
000044EC  0D0A 5072 6695          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000044F0  6573 7320 
000044F4  3C45 5343 
000044F8  3E20      
000044FA  746F 2052 6696          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000044FE  6573 756D 
00004502  6520 5573 
00004506  6572 2050 6697          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
0000450A  726F 6772 
0000450E  616D 0D0A 
00004512  00        
                    6698   @m649d4~1_89:
00004514  0D0A 556E 6699          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004518  6B6E 6F77 
0000451C  6E20 436F 
00004520  6D        
00004521  6D61 6E64 6700          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004525  2E2E 2E2E 
00004529  2E0D 0A00 
                    6701   @m649d4~1_90:
0000452E  0D0A 5072 6702          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004532  6F67 7261 
00004536  6D20 456E 
0000453A  64        
0000453B  6564 2028 6703          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
0000453F  5452 4150 
00004543  2023 3135 
00004547  292E      
00004549  2E2E 2E00 6704          dc.b      46,46,46,0
                    6705   @m649d4~1_91:
0000454E  0D0A 4B69 6706          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004552  6C6C 2041 
00004556  6C6C 2042 
0000455A  72        
0000455B  6561 6B20 6707          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
0000455F  506F 696E 
00004563  7473 2E2E 
00004567  2E        
00004568  2879 2F6E 6708          dc.b      40,121,47,110,41,63,0
0000456C  293F 00   
                    6709   @m649d4~1_92:
00004570  0D0A 4B69 6710          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004574  6C6C 2041 
00004578  6C6C 2057 
0000457C  61        
0000457D  7463 6820 6711          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004581  506F 696E 
00004585  7473 2E2E 
00004589  2E        
0000458A  2879 2F6E 6712          dc.b      40,121,47,110,41,63,0
0000458E  293F 00   
                    6713   @m649d4~1_93:
00004592  0D0A 2D2D 6714          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004596  2D2D 2D2D 
0000459A  2D2D 2D2D 
0000459E  2D2D 2D   
000045A1  2D2D 2D2D 6715          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000045A5  2D2D 2D2D 
000045A9  2D2D 2D2D 
000045AD  2D2D 2D   
000045B0  2D2D 2D2D 6716          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000045B4  2D2D 2D2D 
000045B8  2D2D 2D2D 
000045BC  2D2D 2D   
000045BF  2D2D 2D2D 6717          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000045C3  2D2D 2D2D 
000045C7  2D2D 2D2D 
000045CB  2D2D 2D   
000045CE  2D2D 2D2D 6718          dc.b      45,45,45,45,45,45,0
000045D2  2D2D 00   
                    6719   @m649d4~1_94:
000045D6  0D0A 2020 6720          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
000045DA  4465 6275 
000045DE  6767 6572 
000045E2  20        
000045E3  436F 6D6D 6721          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
000045E7  616E 6420 
000045EB  5375 6D6D 
000045EF  6172 7900 6722          dc.b      97,114,121,0
                    6723   @m649d4~1_95:
000045F4  0D0A 2020 6724          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
000045F8  2E28 7265 
000045FC  6729 2020 
00004600  2020      
00004602  2020 202D 6725          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004606  2043 6861 
0000460A  6E67 6520 
0000460E  5265      
00004610  6769 7374 6726          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004614  6572 733A 
00004618  2065 2E67 
0000461C  2041 302D 6727          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00004620  4137 2C44 
00004624  302D 4437 
00004628  2C50 43   
0000462B  2C53 5350 6728          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
0000462F  2C55 5350 
00004633  2C53 5200 
                    6729   @m649d4~1_96:
00004638  0D0A 2020 6730          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
0000463C  4244 2F42 
00004640  532F 4243 
00004644  2F42 4B   
00004647  2020 2D20 6731          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
0000464B  4272 6561 
0000464F  6B20 506F 
00004653  69        
00004654  6E74 3A20 6732          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004658  4469 7370 
0000465C  6C61 792F 
00004660  53        
00004661  6574 2F43 6733          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00004665  6C65 6172 
00004669  2F4B 696C 
0000466D  6C        
0000466E  00        6734          dc.b      0
                    6735   @m649d4~1_97:
00004670  0D0A 2020 6736          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00004674  4320 2020 
00004678  2020 2020 
0000467C  2020 20   
0000467F  2020 2D20 6737          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004683  436F 7079 
00004687  2050 726F 
0000468B  67        
0000468C  7261 6D20 6738          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004690  6672 6F6D 
00004694  2046 6C61 
00004698  73        
00004699  6820 746F 6739          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
0000469D  204D 6169 
000046A1  6E20 4D65 
000046A5  6D        
000046A6  6F72 7900 6740          dc.b      111,114,121,0
                    6741   @m649d4~1_98:
000046AA  0D0A 2020 6742          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
000046AE  4420 2020 
000046B2  2020 2020 
000046B6  2020 20   
000046B9  2020 2D20 6743          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
000046BD  4475 6D70 
000046C1  204D 656D 
000046C5  6F        
000046C6  7279 2043 6744          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
000046CA  6F6E 7465 
000046CE  6E74 7320 
000046D2  746F 2053 6745          dc.b      116,111,32,83,99,114,101,101,110,0
000046D6  6372 6565 
000046DA  6E00      
                    6746   @m649d4~1_99:
000046DC  0D0A 2020 6747          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
000046E0  4520 2020 
000046E4  2020 2020 
000046E8  2020 20   
000046EB  2020 2D20 6748          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
000046EF  456E 7465 
000046F3  7220 5374 
000046F7  72        
000046F8  696E 6720 6749          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
000046FC  696E 746F 
00004700  204D 656D 
00004704  6F72 7900 6750          dc.b      111,114,121,0
                    6751   @m649d4~1_100:
00004708  0D0A 2020 6752          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
0000470C  4620 2020 
00004710  2020 2020 
00004714  2020 20   
00004717  2020 2D20 6753          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
0000471B  4669 6C6C 
0000471F  204D 656D 
00004723  6F        
00004724  7279 2077 6754          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00004728  6974 6820 
0000472C  4461 7461 
00004730  00        
                    6755   @m649d4~1_101:
00004732  0D0A 2020 6756          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00004736  4720 2020 
0000473A  2020 2020 
0000473E  2020 20   
00004741  2020 2D20 6757          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00004745  476F 2050 
00004749  726F 6772 
0000474D  61        
0000474E  6D20 5374 6758          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00004752  6172 7469 
00004756  6E67 2061 
0000475A  74        
0000475B  2041 6464 6759          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
0000475F  7265 7373 
00004763  3A20 2425 
00004767  30        
00004768  3858 00   6760          dc.b      56,88,0
                    6761   @m649d4~1_102:
0000476C  0D0A 2020 6762          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004770  4C20 2020 
00004774  2020 2020 
00004778  2020 20   
0000477B  2020 2D20 6763          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
0000477F  4C6F 6164 
00004783  2050 726F 
00004787  67        
00004788  7261 6D20 6764          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
0000478C  282E 4845 
00004790  5820 6669 
00004794  6C        
00004795  6529 2066 6765          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004799  726F 6D20 
0000479D  4C61 7074 
000047A1  6F        
000047A2  7000      6766          dc.b      112,0
                    6767   @m649d4~1_103:
000047A4  0D0A 2020 6768          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
000047A8  4D20 2020 
000047AC  2020 2020 
000047B0  2020 20   
000047B3  2020 2D20 6769          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
000047B7  4D65 6D6F 
000047BB  7279 2045 
000047BF  78        
000047C0  616D 696E 6770          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
000047C4  6520 616E 
000047C8  6420 4368 
000047CC  61        
000047CD  6E67 6500 6771          dc.b      110,103,101,0
                    6772   @m649d4~1_104:
000047D2  0D0A 2020 6773          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
000047D6  5020 2020 
000047DA  2020 2020 
000047DE  2020 20   
000047E1  2020 2D20 6774          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
000047E5  5072 6F67 
000047E9  7261 6D20 
000047ED  46        
000047EE  6C61 7368 6775          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
000047F2  204D 656D 
000047F6  6F72 7920 
000047FA  7769 7468 6776          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
000047FE  2055 7365 
00004802  7220 5072 
00004806  6F67 7261 6777          dc.b      111,103,114,97,109,0
0000480A  6D00      
                    6778   @m649d4~1_105:
0000480C  0D0A 2020 6779          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004810  5220 2020 
00004814  2020 2020 
00004818  2020 20   
0000481B  2020 2D20 6780          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
0000481F  4469 7370 
00004823  6C61 7920 
00004827  36        
00004828  3830 3030 6781          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
0000482C  2052 6567 
00004830  6973 7465 
00004834  72        
00004835  7300      6782          dc.b      115,0
                    6783   @m649d4~1_106:
00004838  0D0A 2020 6784          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
0000483C  5320 2020 
00004840  2020 2020 
00004844  2020 20   
00004847  2020 2D20 6785          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
0000484B  546F 6767 
0000484F  6C65 204F 
00004853  4E        
00004854  2F4F 4646 6786          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004858  2053 696E 
0000485C  676C 6520 
00004860  53        
00004861  7465 7020 6787          dc.b      116,101,112,32,77,111,100,101,0
00004865  4D6F 6465 
00004869  00        
                    6788   @m649d4~1_107:
0000486A  0D0A 2020 6789          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
0000486E  544D 2020 
00004872  2020 2020 
00004876  2020 20   
00004879  2020 2D20 6790          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
0000487D  5465 7374 
00004881  204D 656D 
00004885  6F        
00004886  7279 00   6791          dc.b      114,121,0
                    6792   @m649d4~1_108:
0000488A  0D0A 2020 6793          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
0000488E  5453 2020 
00004892  2020 2020 
00004896  2020 20   
00004899  2020 2D20 6794          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
0000489D  5465 7374 
000048A1  2053 7769 
000048A5  74        
000048A6  6368 6573 6795          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
000048AA  3A20 5357 
000048AE  372D 3000 
                    6796   @m649d4~1_109:
000048B2  0D0A 2020 6797          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
000048B6  5444 2020 
000048BA  2020 2020 
000048BE  2020 20   
000048C1  2020 2D20 6798          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
000048C5  5465 7374 
000048C9  2044 6973 
000048CD  70        
000048CE  6C61 7973 6799          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
000048D2  3A20 4C45 
000048D6  4473 2061 
000048DA  6E        
000048DB  6420 372D 6800          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
000048DF  5365 676D 
000048E3  656E 7400 
                    6801   @m649d4~1_110:
000048E8  0D0A 2020 6802          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
000048EC  5744 2F57 
000048F0  532F 5743 
000048F4  2F57 4B   
000048F7  2020 2D20 6803          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
000048FB  5761 7463 
000048FF  6820 506F 
00004903  696E      
00004905  743A 2044 6804          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00004909  6973 706C 
0000490D  6179 2F53 
00004911  65        
00004912  742F 436C 6805          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00004916  6561 722F 
0000491A  4B69 6C6C 
0000491E  00        
                    6806   @m649d4~1_111:
00004920  0D0A 2300 6807          dc.b      13,10,35,0
                    6808   @m649d4~1_112:
00004924  0D0A 5072 6809          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00004928  6F67 7261 
0000492C  6D20 5275 
00004930  6E        
00004931  6E69 6E67 6810          dc.b      110,105,110,103,46,46,46,46,46,0
00004935  2E2E 2E2E 
00004939  2E00      
                    6811   @m649d4~1_113:
0000493C  0D0A 5072 6812          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00004940  6573 7320 
00004944  3C52 4553 
00004948  4554      
0000494A  3E20 6275 6813          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
0000494E  7474 6F6E 
00004952  203C 4B65 
00004956  79        
00004957  303E 206F 6814          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
0000495B  6E20 4445 
0000495F  3120 746F 
00004963  2073      
00004965  746F 7000 6815          dc.b      116,111,112,0
                    6816   @m649d4~1_114:
0000496A  0D0A 4572 6817          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
0000496E  726F 723A 
00004972  2050 7265 
00004976  73        
00004977  7320 2747 6818          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
0000497B  2720 6669 
0000497F  7273 7420 
00004983  74        
00004984  6F20 7374 6819          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00004988  6172 7420 
0000498C  7072 6F67 
00004990  7261 6D00 6820          dc.b      114,97,109,0
                    6821   @m649d4~1_115:
00004994  0D0A 5369 6822          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004998  6E67 6C65 
0000499C  2053 7465 
000049A0  70        
000049A1  2020 3A5B 6823          dc.b      32,32,58,91,79,78,93,0
000049A5  4F4E 5D00 
                    6824   @m649d4~1_116:
000049AA  0D0A 5072 6825          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
000049AE  6573 7320 
000049B2  2747 2720 
000049B6  74        
000049B7  6F20 5472 6826          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
000049BB  6163 6520 
000049BF  5072 6F67 
000049C3  72        
000049C4  616D 2066 6827          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
000049C8  726F 6D20 
000049CC  6164 6472 
000049D0  6573 7320 6828          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
000049D4  2425 582E 
000049D8  2E2E 2E2E 
000049DC  00        
                    6829   @m649d4~1_117:
000049DE  0D0A 5075 6830          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
000049E2  7368 203C 
000049E6  5245 5345 
000049EA  5420      
000049EC  4275 7474 6831          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
000049F0  6F6E 3E20 
000049F4  746F 2053 
000049F8  74        
000049F9  6F70 2E2E 6832          dc.b      111,112,46,46,46,46,46,0
000049FD  2E2E 2E00 
                    6833   @m649d4~1_118:
00004A02  0D0A 5369 6834          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004A06  6E67 6C65 
00004A0A  2053 7465 
00004A0E  70        
00004A0F  203A 205B 6835          dc.b      32,58,32,91,79,70,70,93,0
00004A13  4F46 465D 
00004A17  00        
                    6836   @m649d4~1_119:
00004A18  0D0A 4272 6837          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004A1C  6561 6B20 
00004A20  506F 696E 
00004A24  74        
00004A25  7320 3A5B 6838          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00004A29  456E 6162 
00004A2D  6C65 645D 
00004A31  00        
                    6839   @m649d4~1_120:
00004A32  0D0A 5072 6840          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004A36  6573 7320 
00004A3A  3C45 5343 
00004A3E  3E20      
00004A40  746F 2052 6841          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004A44  6573 756D 
00004A48  6520 5573 
00004A4C  6572 2050 6842          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00004A50  726F 6772 
00004A54  616D 2E2E 
00004A58  2E        
00004A59  2E2E 00   6843          dc.b      46,46,0
                    6844   @m649d4~1_121:
00004A5C  0D0A 5369 6845          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004A60  6E67 6C65 
00004A64  2053 7465 
00004A68  70        
00004A69  2020 3A5B 6846          dc.b      32,32,58,91,79,70,70,93,0
00004A6D  4F46 465D 
00004A71  00        
                    6847   @m649d4~1_122:
00004A72  0D0A 0D0A 6848          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004A76  5072 6F67 
00004A7A  7261 6D20 
00004A7E  41        
00004A7F  424F 5254 6849          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004A83  2021 2121 
00004A87  2121 210D 
00004A8B  0A00      
                    6850   @m649d4~1_123:
00004A8E  2573 0D0A 6851          dc.b      37,115,13,10,0
00004A92  00        
                    6852   @m649d4~1_124:
00004A94  0D0A 0D0A 6853          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004A98  5072 6F67 
00004A9C  7261 6D20 
00004AA0  41        
00004AA1  424F 5254 6854          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004AA5  2021 2121 
00004AA9  2121 00   
                    6855   @m649d4~1_125:
00004AAC  0D0A 556E 6856          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004AB0  6861 6E64 
00004AB4  6C65 6420 
00004AB8  49        
00004AB9  6E74 6572 6857          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004ABD  7275 7074 
00004AC1  3A20 4952 
00004AC5  5125 6420 6858          dc.b      81,37,100,32,33,33,33,33,33,0
00004AC9  2121 2121 
00004ACD  2100      
                    6859   @m649d4~1_126:
00004AD0  4144 4452 6860          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004AD4  4553 5320 
00004AD8  4552 524F 
00004ADC  523A 20   
00004ADF  3136 206F 6861          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004AE3  7220 3332 
00004AE7  2042 6974 
00004AEB  2054      
00004AED  7261 6E73 6862          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004AF1  6665 7220 
00004AF5  746F 2F66 
00004AF9  726F 6D20 6863          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004AFD  616E 204F 
00004B01  4444 2041 
00004B05  64        
00004B06  6472 6573 6864          dc.b      100,114,101,115,115,46,46,46,46,0
00004B0A  732E 2E2E 
00004B0E  2E00      
                    6865   @m649d4~1_127:
00004B10  556E 6861 6866          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004B14  6E64 6C65 
00004B18  6420 5472 
00004B1C  6170 2021 6867          dc.b      97,112,32,33,33,33,33,33,0
00004B20  2121 2121 
00004B24  00        
                    6868   @m649d4~1_128:
00004B26  4255 5320 6869          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004B2A  4572 726F 
00004B2E  7221 00   
                    6870   @m649d4~1_129:
00004B32  4144 4452 6871          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004B36  4553 5320 
00004B3A  4572 726F 
00004B3E  7221      
00004B40  00        6872          dc.b      0
                    6873   @m649d4~1_130:
00004B42  494C 4C45 6874          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004B46  4741 4C20 
00004B4A  494E 5354 
00004B4E  5255 43   
00004B51  5449 4F4E 6875          dc.b      84,73,79,78,0
00004B55  00        
                    6876   @m649d4~1_131:
00004B56  4449 5649 6877          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004B5A  4445 2042 
00004B5E  5920 5A45 
00004B62  524F 00   
                    6878   @m649d4~1_132:
00004B66  2743 484B 6879          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004B6A  2720 494E 
00004B6E  5354 5255 
00004B72  4354 49   
00004B75  4F4E 00   6880          dc.b      79,78,0
                    6881   @m649d4~1_133:
00004B78  5452 4150 6882          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004B7C  5620 494E 
00004B80  5354 5255 
00004B84  4354 49   
00004B87  4F4E 00   6883          dc.b      79,78,0
                    6884   @m649d4~1_134:
00004B8A  5052 4956 6885          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004B8E  494C 4547 
00004B92  4520 5649 
00004B96  4F4C 41   
00004B99  5449 4F4E 6886          dc.b      84,73,79,78,0
00004B9D  00        
                    6887   @m649d4~1_135:
00004B9E  554E 494E 6888          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004BA2  4954 4941 
00004BA6  4C49 5345 
00004BAA  4420 49   
00004BAD  5251 00   6889          dc.b      82,81,0
                    6890   @m649d4~1_136:
00004BB0  5350 5552 6891          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004BB4  494F 5553 
00004BB8  2049 5251 
00004BBC  00        
                    6892   @m649d4~1_137:
00004BBE  0D0A 5374 6893          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004BC2  6172 7420 
00004BC6  4164 6472 
00004BCA  65        
00004BCB  7373 2069 6894          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00004BCF  6E20 4D65 
00004BD3  6D6F 7279 
00004BD7  3A20 00   6895          dc.b      58,32,0
                    6896   @m649d4~1_138:
00004BDA  0D0A 456E 6897          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00004BDE  7465 7220 
00004BE2  5374 7269 
00004BE6  6E        
00004BE7  6720 2845 6898          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00004BEB  5343 2074 
00004BEF  6F20 656E 
00004BF3  64        
00004BF4  2920 3A00 6899          dc.b      41,32,58,0
                    6900   @m649d4~1_139:
00004BF8  0D0A 456E 6901          dc.b      13,10,69,110,116,101,114,32,116,104,101,32,118
00004BFC  7465 7220 
00004C00  7468 6520 
00004C04  76        
00004C05  616C 7565 6902          dc.b      97,108,117,101,32,98,101,108,111,119,32,102
00004C09  2062 656C 
00004C0D  6F77 2066 
00004C11  6F72 2074 6903          dc.b      111,114,32,116,104,101,32,115,105,122,101,32
00004C15  6865 2073 
00004C19  697A 6520 
00004C1D  6F66 2074 6904          dc.b      111,102,32,116,104,101,32,116,101,115,116,32
00004C21  6865 2074 
00004C25  6573 7420 
00004C29  796F 7520 6905          dc.b      121,111,117,32,119,111,117,108,100,32,108,105
00004C2D  776F 756C 
00004C31  6420 6C69 
00004C35  6B65 2074 6906          dc.b      107,101,32,116,111,32,117,115,101,63,10,49,32
00004C39  6F20 7573 
00004C3D  653F 0A31 
00004C41  20        
00004C42  3D20 6279 6907          dc.b      61,32,98,121,116,101,115,32,40,56,32,98,105
00004C46  7465 7320 
00004C4A  2838 2062 
00004C4E  69        
00004C4F  7473 290A 6908          dc.b      116,115,41,10,50,32,61,32,119,111,114,100,115
00004C53  3220 3D20 
00004C57  776F 7264 
00004C5B  73        
00004C5C  2028 3136 6909          dc.b      32,40,49,54,32,98,105,116,115,41,10,51,32,61
00004C60  2062 6974 
00004C64  7329 0A33 
00004C68  203D      
00004C6A  206C 6F6E 6910          dc.b      32,108,111,110,103,32,119,111,114,100,115,32
00004C6E  6720 776F 
00004C72  7264 7320 
00004C76  2833 3220 6911          dc.b      40,51,50,32,98,105,116,115,41,10,0
00004C7A  6269 7473 
00004C7E  290A 00   
                    6912   @m649d4~1_140:
00004C82  0A59 6F75 6913          dc.b      10,89,111,117,32,104,97,118,101,32,115,101,108
00004C86  2068 6176 
00004C8A  6520 7365 
00004C8E  6C        
00004C8F  6374 6564 6914          dc.b      99,116,101,100,32,116,111,32,117,115,101,32
00004C93  2074 6F20 
00004C97  7573 6520 
00004C9B  6279 7465 6915          dc.b      98,121,116,101,115,32,115,105,122,101,32,100
00004C9F  7320 7369 
00004CA3  7A65 2064 
00004CA7  6174 6120 6916          dc.b      97,116,97,32,116,111,32,116,101,115,116,32,121
00004CAB  746F 2074 
00004CAF  6573 7420 
00004CB3  79        
00004CB4  6F75 7220 6917          dc.b      111,117,114,32,109,101,109,111,114,121,10,0
00004CB8  6D65 6D6F 
00004CBC  7279 0A00 
                    6918   @m649d4~1_141:
00004CC0  4F75 7420 6919          dc.b      79,117,116,32,111,102,32,116,104,101,32,98,101
00004CC4  6F66 2074 
00004CC8  6865 2062 
00004CCC  65        
00004CCD  6C6F 7720 6920          dc.b      108,111,119,32,101,120,97,109,112,108,101,32
00004CD1  6578 616D 
00004CD5  706C 6520 
00004CD9  7465 7374 6921          dc.b      116,101,115,116,32,100,97,116,97,44,32,112,108
00004CDD  2064 6174 
00004CE1  612C 2070 
00004CE5  6C        
00004CE6  6561 7365 6922          dc.b      101,97,115,101,32,115,101,108,101,99,116,32
00004CEA  2073 656C 
00004CEE  6563 7420 
00004CF2  6F6E 6520 6923          dc.b      111,110,101,32,98,121,32,101,110,116,101,114
00004CF6  6279 2065 
00004CFA  6E74 6572 
00004CFE  696E 6720 6924          dc.b      105,110,103,32,116,104,101,32,118,97,108,117
00004D02  7468 6520 
00004D06  7661 6C75 
00004D0A  6520 6173 6925          dc.b      101,32,97,115,115,111,99,105,97,116,101,100
00004D0E  736F 6369 
00004D12  6174 6564 
00004D16  2074 6F20 6926          dc.b      32,116,111,32,101,97,99,104,32,101,120,97,109
00004D1A  6561 6368 
00004D1E  2065 7861 
00004D22  6D        
00004D23  706C 653A 6927          dc.b      112,108,101,58,10,0
00004D27  0A00      
                    6928   @m649d4~1_142:
00004D2A  3120 3D20 6929          dc.b      49,32,61,32,34,65,65,34,10,50,32,61,32,34,65
00004D2E  2241 4122 
00004D32  0A32 203D 
00004D36  2022 41   
00004D39  4222 0A33 6930          dc.b      66,34,10,51,32,61,32,34,67,67,34,10,52,32,61
00004D3D  203D 2022 
00004D41  4343 220A 
00004D45  3420 3D   
00004D48  2022 4344 6931          dc.b      32,34,67,68,34,10,0
00004D4C  220A 00   
                    6932   @m649d4~1_143:
00004D50  0D0A 4552 6933          dc.b      13,10,69,82,82,79,82,58,32,89,111,117,32,104
00004D54  524F 523A 
00004D58  2059 6F75 
00004D5C  2068      
00004D5E  6176 6520 6934          dc.b      97,118,101,32,101,110,116,101,114,101,100,32
00004D62  656E 7465 
00004D66  7265 6420 
00004D6A  6120 6B65 6935          dc.b      97,32,107,101,121,98,111,97,114,100,32,105,110
00004D6E  7962 6F61 
00004D72  7264 2069 
00004D76  6E        
00004D77  7075 7420 6936          dc.b      112,117,116,32,116,104,97,116,32,100,111,101
00004D7B  7468 6174 
00004D7F  2064 6F65 
00004D83  7320 6E6F 6937          dc.b      115,32,110,111,116,32,97,115,115,111,99,105
00004D87  7420 6173 
00004D8B  736F 6369 
00004D8F  6174 6564 6938          dc.b      97,116,101,100,32,119,105,116,104,32,97,110
00004D93  2077 6974 
00004D97  6820 616E 
00004D9B  206F 7074 6939          dc.b      32,111,112,116,105,111,110,32,97,98,111,118
00004D9F  696F 6E20 
00004DA3  6162 6F76 
00004DA7  652C 2070 6940          dc.b      101,44,32,112,108,101,97,115,101,32,116,114
00004DAB  6C65 6173 
00004DAF  6520 7472 
00004DB3  7920 6167 6941          dc.b      121,32,97,103,97,105,110,13,10,0
00004DB7  6169 6E0D 
00004DBB  0A00      
                    6942   @m649d4~1_144:
00004DBE  0D0A 4552 6943          dc.b      13,10,69,82,82,79,82,58,32,79,112,116,105,111
00004DC2  524F 523A 
00004DC6  204F 7074 
00004DCA  696F      
00004DCC  6E20 6D65 6944          dc.b      110,32,109,101,109,111,114,121,32,99,111,109
00004DD0  6D6F 7279 
00004DD4  2063 6F6D 
00004DD8  706C 6963 6945          dc.b      112,108,105,99,97,116,105,111,110,46,32,69,120
00004DDC  6174 696F 
00004DE0  6E2E 2045 
00004DE4  78        
00004DE5  6974 696E 6946          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
00004DE9  6720 6D65 
00004DED  6D6F 7279 
00004DF1  2074 6573 6947          dc.b      32,116,101,115,116,46,46,46,13,10,0
00004DF5  742E 2E2E 
00004DF9  0D0A 00   
                    6948   @m649d4~1_145:
00004DFC  0D0A 506C 6949          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00004E00  6561 7365 
00004E04  2065 6E74 
00004E08  65        
00004E09  7220 7468 6950          dc.b      114,32,116,104,101,32,115,116,97,114,116,32
00004E0D  6520 7374 
00004E11  6172 7420 
00004E15  6164 6472 6951          dc.b      97,100,100,114,101,115,115,32,121,111,117,32
00004E19  6573 7320 
00004E1D  796F 7520 
00004E21  776F 756C 6952          dc.b      119,111,117,108,100,32,108,105,107,101,32,116
00004E25  6420 6C69 
00004E29  6B65 2074 
00004E2D  6F20 7573 6953          dc.b      111,32,117,115,101,32,102,111,114,32,116,104
00004E31  6520 666F 
00004E35  7220 7468 
00004E39  6520 7465 6954          dc.b      101,32,116,101,115,116,32,100,97,116,97,32,105
00004E3D  7374 2064 
00004E41  6174 6120 
00004E45  69        
00004E46  6E74 6F20 6955          dc.b      110,116,111,32,109,101,109,111,114,121,13,10
00004E4A  6D65 6D6F 
00004E4E  7279 0D0A 
00004E52  00        6956          dc.b      0
                    6957   @m649d4~1_146:
00004E54  0D0A 4552 6958          dc.b      13,10,69,82,82,79,82,58,32,83,116,97,114,116
00004E58  524F 523A 
00004E5C  2053 7461 
00004E60  7274      
00004E62  696E 6720 6959          dc.b      105,110,103,32,65,100,100,114,101,115,115,32
00004E66  4164 6472 
00004E6A  6573 7320 
00004E6E  6973 206F 6960          dc.b      105,115,32,111,117,116,115,105,100,101,32,111
00004E72  7574 7369 
00004E76  6465 206F 
00004E7A  6620 3638 6961          dc.b      102,32,54,56,75,32,109,101,109,111,114,121,32
00004E7E  4B20 6D65 
00004E82  6D6F 7279 
00004E86  20        
00004E87  7261 6E67 6962          dc.b      114,97,110,103,101,46,32,80,108,101,97,115,101
00004E8B  652E 2050 
00004E8F  6C65 6173 
00004E93  65        
00004E94  2074 7279 6963          dc.b      32,116,114,121,32,97,103,97,105,110,32,97,110
00004E98  2061 6761 
00004E9C  696E 2061 
00004EA0  6E        
00004EA1  6420 656E 6964          dc.b      100,32,101,110,115,117,114,101,32,116,104,101
00004EA5  7375 7265 
00004EA9  2074 6865 
00004EAD  2061 6464 6965          dc.b      32,97,100,100,114,101,115,115,32,105,115,32
00004EB1  7265 7373 
00004EB5  2069 7320 
00004EB9  7769 7468 6966          dc.b      119,105,116,104,110,32,48,120,48,56,48,50,48
00004EBD  6E20 3078 
00004EC1  3038 3032 
00004EC5  30        
00004EC6  3030 3020 6967          dc.b      48,48,48,32,45,32,48,120,48,57,55,70,70,70,70
00004ECA  2D20 3078 
00004ECE  3039 3746 
00004ED2  4646 46   
00004ED5  460D 0A00 6968          dc.b      70,13,10,0
                    6969   @m649d4~1_147:
00004EDA  0D0A 506C 6970          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00004EDE  6561 7365 
00004EE2  2065 6E74 
00004EE6  65        
00004EE7  7220 7468 6971          dc.b      114,32,116,104,101,32,101,110,100,32,97,100
00004EEB  6520 656E 
00004EEF  6420 6164 
00004EF3  6472 6573 6972          dc.b      100,114,101,115,115,32,121,111,117,32,119,111
00004EF7  7320 796F 
00004EFB  7520 776F 
00004EFF  756C 6420 6973          dc.b      117,108,100,32,108,105,107,101,32,116,111,32
00004F03  6C69 6B65 
00004F07  2074 6F20 
00004F0B  7573 6520 6974          dc.b      117,115,101,32,102,111,114,32,116,104,101,32
00004F0F  666F 7220 
00004F13  7468 6520 
00004F17  7465 7374 6975          dc.b      116,101,115,116,32,100,97,116,97,32,105,110
00004F1B  2064 6174 
00004F1F  6120 696E 
00004F23  206D 656D 6976          dc.b      32,109,101,109,111,114,121,13,10,0
00004F27  6F72 790D 
00004F2B  0A00      
                    6977   @m649d4~1_148:
00004F2E  0D0A 4552 6978          dc.b      13,10,69,82,82,79,82,58,32,69,110,100,32,65
00004F32  524F 523A 
00004F36  2045 6E64 
00004F3A  2041      
00004F3C  6464 7265 6979          dc.b      100,100,114,101,115,115,32,105,115,32,111,117
00004F40  7373 2069 
00004F44  7320 6F75 
00004F48  7473 6964 6980          dc.b      116,115,105,100,101,32,111,102,32,54,56,75,32
00004F4C  6520 6F66 
00004F50  2036 384B 
00004F54  20        
00004F55  6D65 6D6F 6981          dc.b      109,101,109,111,114,121,32,114,97,110,103,101
00004F59  7279 2072 
00004F5D  616E 6765 
00004F61  2E20 506C 6982          dc.b      46,32,80,108,101,97,115,101,32,116,114,121,32
00004F65  6561 7365 
00004F69  2074 7279 
00004F6D  20        
00004F6E  6167 6169 6983          dc.b      97,103,97,105,110,32,97,110,100,32,101,110,115
00004F72  6E20 616E 
00004F76  6420 656E 
00004F7A  73        
00004F7B  7572 6520 6984          dc.b      117,114,101,32,116,104,101,32,97,100,100,114
00004F7F  7468 6520 
00004F83  6164 6472 
00004F87  6573 7320 6985          dc.b      101,115,115,32,105,115,32,119,105,116,104,110
00004F8B  6973 2077 
00004F8F  6974 686E 
00004F93  2030 7830 6986          dc.b      32,48,120,48,56,48,50,48,48,48,48,32,45,32,48
00004F97  3830 3230 
00004F9B  3030 3020 
00004F9F  2D20 30   
00004FA2  7830 3937 6987          dc.b      120,48,57,55,70,70,70,70,70,13,10,0
00004FA6  4646 4646 
00004FAA  460D 0A00 
                    6988   @m649d4~1_149:
00004FAE  0D0A 0D0A 6989          dc.b      13,10,13,10,87,114,105,116,105,110,103,32,116
00004FB2  5772 6974 
00004FB6  696E 6720 
00004FBA  74        
00004FBB  6F20 6D65 6990          dc.b      111,32,109,101,109,111,114,121,0
00004FBF  6D6F 7279 
00004FC3  00        
                    6991   @m649d4~1_150:
00004FC4  0D0A 5752 6992          dc.b      13,10,87,82,73,84,69,58,32,91,37,48,50,88,32
00004FC8  4954 453A 
00004FCC  205B 2530 
00004FD0  3258 20   
00004FD3  746F 2025 6993          dc.b      116,111,32,37,48,56,120,93,0
00004FD7  3038 785D 
00004FDB  00        
                    6994   @m649d4~1_151:
00004FDC  0D0A 0D0A 6995          dc.b      13,10,13,10,83,116,97,114,116,105,110,103,32
00004FE0  5374 6172 
00004FE4  7469 6E67 
00004FE8  20        
00004FE9  6D65 6D6F 6996          dc.b      109,101,109,111,114,121,32,118,97,108,105,100
00004FED  7279 2076 
00004FF1  616C 6964 
00004FF5  6174 696F 6997          dc.b      97,116,105,111,110,32,116,101,115,116,0
00004FF9  6E20 7465 
00004FFD  7374 00   
                    6998   @m649d4~1_152:
00005000  0D0A 5665 6999          dc.b      13,10,86,101,114,105,102,121,105,110,103,32
00005004  7269 6679 
00005008  696E 6720 
0000500C  7468 6520 7000          dc.b      116,104,101,32,97,100,100,114,101,115,115,101
00005010  6164 6472 
00005014  6573 7365 
00005018  7320 5B25 7001          dc.b      115,32,91,37,48,56,120,32,116,111,32,37,48,56
0000501C  3038 7820 
00005020  746F 2025 
00005024  3038      
00005026  785D 2063 7002          dc.b      120,93,32,99,111,110,116,97,105,110,115,32,116
0000502A  6F6E 7461 
0000502E  696E 7320 
00005032  74        
00005033  6573 7420 7003          dc.b      101,115,116,32,100,97,116,97,32,91,37,48,50
00005037  6461 7461 
0000503B  205B 2530 
0000503F  32        
00005040  585D 2E2E 7004          dc.b      88,93,46,46,46,46,46,0
00005044  2E2E 2E00 
                    7005   @m649d4~1_153:
00005048  0D0A 4552 7006          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
0000504C  524F 523A 
00005050  2044 6174 
00005054  6120 77   
00005057  6974 6869 7007          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
0000505B  6E20 6D65 
0000505F  6D6F 7279 
00005063  2064 6F65 7008          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
00005067  7320 6E6F 
0000506B  7420 6D61 
0000506F  7463 6820 7009          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
00005073  7365 6C65 
00005077  6374 6564 
0000507B  2074 6573 7010          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
0000507F  7420 6461 
00005083  7461 2120 
00005087  5B        
00005088  4164 6472 7011          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
0000508C  6573 733A 
00005090  2025 3038 
00005094  78        
00005095  2045 7861 7012          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
00005099  6374 2044 
0000509D  6174 613A 
000050A1  2025      
000050A3  3032 5820 7013          dc.b      48,50,88,32,69,120,112,101,99,116,101,100,32
000050A7  4578 7065 
000050AB  6374 6564 
000050AF  20        
000050B0  4461 7461 7014          dc.b      68,97,116,97,58,32,37,48,50,88,93,32,69,120
000050B4  3A20 2530 
000050B8  3258 5D20 
000050BC  4578      
000050BE  6974 696E 7015          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
000050C2  6720 6D65 
000050C6  6D6F 7279 
000050CA  2074 6573 7016          dc.b      32,116,101,115,116,46,46,46,13,10,0
000050CE  742E 2E2E 
000050D2  0D0A 00   
                    7017   @m649d4~1_154:
000050D6  0D0A 5041 7018          dc.b      13,10,80,65,83,83,58,32,77,101,109,111,114,121
000050DA  5353 3A20 
000050DE  4D65 6D6F 
000050E2  7279      
000050E4  2056 616C 7019          dc.b      32,86,97,108,105,100,97,116,105,111,110,32,116
000050E8  6964 6174 
000050EC  696F 6E20 
000050F0  74        
000050F1  6573 7420 7020          dc.b      101,115,116,32,104,97,115,32,112,97,115,115
000050F5  6861 7320 
000050F9  7061 7373 
000050FD  6564 210D 7021          dc.b      101,100,33,13,10,0
00005101  0A00      
                    7022   @m649d4~1_155:
00005104  0D0A 596F 7023          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00005108  7520 6861 
0000510C  7665 2073 
00005110  65        
00005111  6C63 7465 7024          dc.b      108,99,116,101,100,32,116,111,32,117,115,101
00005115  6420 746F 
00005119  2075 7365 
0000511D  2077 6F72 7025          dc.b      32,119,111,114,100,32,115,105,122,101,32,100
00005121  6420 7369 
00005125  7A65 2064 
00005129  6174 6120 7026          dc.b      97,116,97,32,116,111,32,116,101,115,116,32,121
0000512D  746F 2074 
00005131  6573 7420 
00005135  79        
00005136  6F75 7220 7027          dc.b      111,117,114,32,109,101,109,111,114,121,0
0000513A  6D65 6D6F 
0000513E  7279 00   
                    7028   @m649d4~1_156:
00005142  0D0A 4F75 7029          dc.b      13,10,79,117,116,32,111,102,32,116,104,101,32
00005146  7420 6F66 
0000514A  2074 6865 
0000514E  20        
0000514F  6265 6C6F 7030          dc.b      98,101,108,111,119,32,101,120,97,109,112,108
00005153  7720 6578 
00005157  616D 706C 
0000515B  6520 7465 7031          dc.b      101,32,116,101,115,116,32,100,97,116,97,44,32
0000515F  7374 2064 
00005163  6174 612C 
00005167  20        
00005168  706C 6561 7032          dc.b      112,108,101,97,115,101,32,115,101,108,101,99
0000516C  7365 2073 
00005170  656C 6563 
00005174  7420 6F6E 7033          dc.b      116,32,111,110,101,32,98,121,32,101,110,116
00005178  6520 6279 
0000517C  2065 6E74 
00005180  6572 696E 7034          dc.b      101,114,105,110,103,32,116,104,101,32,118,97
00005184  6720 7468 
00005188  6520 7661 
0000518C  6C75 6520 7035          dc.b      108,117,101,32,97,115,115,111,99,105,97,116
00005190  6173 736F 
00005194  6369 6174 
00005198  6564 2074 7036          dc.b      101,100,32,116,111,32,101,97,99,104,32,101,120
0000519C  6F20 6561 
000051A0  6368 2065 
000051A4  78        
000051A5  616D 706C 7037          dc.b      97,109,112,108,101,58,0
000051A9  653A 00   
                    7038   @m649d4~1_157:
000051AC  0D0A 3120 7039          dc.b      13,10,49,32,61,32,34,65,65,65,65,34,10,50,32
000051B0  3D20 2241 
000051B4  4141 4122 
000051B8  0A32 20   
000051BB  3D20 2242 7040          dc.b      61,32,34,66,65,66,65,34,10,51,32,61,32,34,67
000051BF  4142 4122 
000051C3  0A33 203D 
000051C7  2022 43   
000051CA  4344 4422 7041          dc.b      67,68,68,34,10,52,32,61,32,34,68,68,68,68,34
000051CE  0A34 203D 
000051D2  2022 4444 
000051D6  4444 22   
000051D9  0D0A 00   7042          dc.b      13,10,0
                    7043   @m649d4~1_158:
000051DC  0D0A 506C 7044          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
000051E0  6561 7365 
000051E4  2065 6E74 
000051E8  65        
000051E9  7220 7468 7045          dc.b      114,32,116,104,101,32,115,116,97,114,116,32
000051ED  6520 7374 
000051F1  6172 7420 
000051F5  6164 6472 7046          dc.b      97,100,100,114,101,115,115,32,121,111,117,32
000051F9  6573 7320 
000051FD  796F 7520 
00005201  776F 756C 7047          dc.b      119,111,117,108,100,32,108,105,107,101,32,116
00005205  6420 6C69 
00005209  6B65 2074 
0000520D  6F20 7573 7048          dc.b      111,32,117,115,101,32,102,111,114,32,116,104
00005211  6520 666F 
00005215  7220 7468 
00005219  6520 7465 7049          dc.b      101,32,116,101,115,116,32,100,97,116,97,32,105
0000521D  7374 2064 
00005221  6174 6120 
00005225  69        
00005226  6E74 6F20 7050          dc.b      110,116,111,32,109,101,109,111,114,121,32,40
0000522A  6D65 6D6F 
0000522E  7279 2028 
00005232  456E 7375 7051          dc.b      69,110,115,117,114,101,32,116,111,32,101,110
00005236  7265 2074 
0000523A  6F20 656E 
0000523E  7465 7220 7052          dc.b      116,101,114,32,97,110,32,101,118,101,110,32
00005242  616E 2065 
00005246  7665 6E20 
0000524A  6E75 6D62 7053          dc.b      110,117,109,98,101,114,41,13,10,0
0000524E  6572 290D 
00005252  0A00      
                    7054   @m649d4~1_159:
00005254  0D0A 4552 7055          dc.b      13,10,69,82,82,79,82,58,32,83,116,97,114,116
00005258  524F 523A 
0000525C  2053 7461 
00005260  7274      
00005262  696E 6720 7056          dc.b      105,110,103,32,65,100,100,114,101,115,115,32
00005266  4164 6472 
0000526A  6573 7320 
0000526E  6973 206F 7057          dc.b      105,115,32,111,117,116,115,105,100,101,32,111
00005272  7574 7369 
00005276  6465 206F 
0000527A  6620 3638 7058          dc.b      102,32,54,56,75,32,109,101,109,111,114,121,32
0000527E  4B20 6D65 
00005282  6D6F 7279 
00005286  20        
00005287  7261 6E67 7059          dc.b      114,97,110,103,101,46,32,80,108,101,97,115,101
0000528B  652E 2050 
0000528F  6C65 6173 
00005293  65        
00005294  2074 7279 7060          dc.b      32,116,114,121,32,97,103,97,105,110,32,97,110
00005298  2061 6761 
0000529C  696E 2061 
000052A0  6E        
000052A1  6420 656E 7061          dc.b      100,32,101,110,115,117,114,101,32,116,104,101
000052A5  7375 7265 
000052A9  2074 6865 
000052AD  2061 6464 7062          dc.b      32,97,100,100,114,101,115,115,32,105,115,32
000052B1  7265 7373 
000052B5  2069 7320 
000052B9  7769 7468 7063          dc.b      119,105,116,104,110,32,48,120,48,57,48,48,48
000052BD  6E20 3078 
000052C1  3039 3030 
000052C5  30        
000052C6  3030 3020 7064          dc.b      48,48,48,32,45,32,48,120,48,57,55,70,70,70,70
000052CA  2D20 3078 
000052CE  3039 3746 
000052D2  4646 46   
000052D5  460D 0A00 7065          dc.b      70,13,10,0
                    7066   @m649d4~1_160:
000052DA  0D0A 4552 7067          dc.b      13,10,69,82,82,79,82,58,32,84,104,101,32,97
000052DE  524F 523A 
000052E2  2054 6865 
000052E6  2061      
000052E8  6464 7265 7068          dc.b      100,100,114,101,115,115,32,121,111,117,32,104
000052EC  7373 2079 
000052F0  6F75 2068 
000052F4  6176 6520 7069          dc.b      97,118,101,32,101,110,116,101,114,101,100,32
000052F8  656E 7465 
000052FC  7265 6420 
00005300  6973 206E 7070          dc.b      105,115,32,110,111,116,32,101,118,101,110,46
00005304  6F74 2065 
00005308  7665 6E2E 
0000530C  2050 6C65 7071          dc.b      32,80,108,101,97,115,101,32,116,114,121,32,97
00005310  6173 6520 
00005314  7472 7920 
00005318  61        
00005319  6761 696E 7072          dc.b      103,97,105,110,13,10,0
0000531D  0D0A 00   
                    7073   @m649d4~1_161:
00005320  0D0A 506C 7074          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00005324  6561 7365 
00005328  2065 6E74 
0000532C  65        
0000532D  7220 7468 7075          dc.b      114,32,116,104,101,32,101,110,100,32,97,100
00005331  6520 656E 
00005335  6420 6164 
00005339  6472 6573 7076          dc.b      100,114,101,115,115,32,121,111,117,32,119,111
0000533D  7320 796F 
00005341  7520 776F 
00005345  756C 6420 7077          dc.b      117,108,100,32,108,105,107,101,32,116,111,32
00005349  6C69 6B65 
0000534D  2074 6F20 
00005351  7573 6520 7078          dc.b      117,115,101,32,102,111,114,32,116,104,101,32
00005355  666F 7220 
00005359  7468 6520 
0000535D  7465 7374 7079          dc.b      116,101,115,116,32,100,97,116,97,32,105,110
00005361  2064 6174 
00005365  6120 696E 
00005369  206D 656D 7080          dc.b      32,109,101,109,111,114,121,32,40,69,110,115
0000536D  6F72 7920 
00005371  2845 6E73 
00005375  7572 6520 7081          dc.b      117,114,101,32,116,111,32,101,110,116,101,114
00005379  746F 2065 
0000537D  6E74 6572 
00005381  2061 6E20 7082          dc.b      32,97,110,32,101,118,101,110,32,110,117,109
00005385  6576 656E 
00005389  206E 756D 
0000538D  6265 7229 7083          dc.b      98,101,114,41,13,10,0
00005391  0D0A 00   
                    7084   @m649d4~1_162:
00005394  0D0A 4552 7085          dc.b      13,10,69,82,82,79,82,58,32,69,110,100,32,65
00005398  524F 523A 
0000539C  2045 6E64 
000053A0  2041      
000053A2  6464 7265 7086          dc.b      100,100,114,101,115,115,32,105,115,32,111,117
000053A6  7373 2069 
000053AA  7320 6F75 
000053AE  7473 6964 7087          dc.b      116,115,105,100,101,32,111,102,32,54,56,75,32
000053B2  6520 6F66 
000053B6  2036 384B 
000053BA  20        
000053BB  6D65 6D6F 7088          dc.b      109,101,109,111,114,121,32,114,97,110,103,101
000053BF  7279 2072 
000053C3  616E 6765 
000053C7  2E20 506C 7089          dc.b      46,32,80,108,101,97,115,101,32,116,114,121,32
000053CB  6561 7365 
000053CF  2074 7279 
000053D3  20        
000053D4  6167 6169 7090          dc.b      97,103,97,105,110,32,97,110,100,32,101,110,115
000053D8  6E20 616E 
000053DC  6420 656E 
000053E0  73        
000053E1  7572 6520 7091          dc.b      117,114,101,32,116,104,101,32,97,100,100,114
000053E5  7468 6520 
000053E9  6164 6472 
000053ED  6573 7320 7092          dc.b      101,115,115,32,105,115,32,119,105,116,104,110
000053F1  6973 2077 
000053F5  6974 686E 
000053F9  2030 7830 7093          dc.b      32,48,120,48,57,48,48,48,48,48,48,32,45,32,48
000053FD  3930 3030 
00005401  3030 3020 
00005405  2D20 30   
00005408  7830 3937 7094          dc.b      120,48,57,55,70,70,70,70,70,13,10,0
0000540C  4646 4646 
00005410  460D 0A00 
                    7095   @m649d4~1_163:
00005414  0D0A 5752 7096          dc.b      13,10,87,82,73,84,69,58,32,91,37,48,52,88,32
00005418  4954 453A 
0000541C  205B 2530 
00005420  3458 20   
00005423  746F 2025 7097          dc.b      116,111,32,37,48,56,120,93,0
00005427  3038 785D 
0000542B  00        
                    7098   @m649d4~1_164:
0000542C  0D0A 4552 7099          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
00005430  524F 523A 
00005434  2044 6174 
00005438  6120 77   
0000543B  6974 6869 7100          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
0000543F  6E20 6D65 
00005443  6D6F 7279 
00005447  2064 6F65 7101          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
0000544B  7320 6E6F 
0000544F  7420 6D61 
00005453  7463 6820 7102          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
00005457  7365 6C65 
0000545B  6374 6564 
0000545F  2074 6573 7103          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
00005463  7420 6461 
00005467  7461 2120 
0000546B  5B        
0000546C  4164 6472 7104          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
00005470  6573 733A 
00005474  2025 3038 
00005478  78        
00005479  2045 7861 7105          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
0000547D  6374 2044 
00005481  6174 613A 
00005485  2025      
00005487  3032 5820 7106          dc.b      48,50,88,32,69,120,112,101,99,116,101,100,32
0000548B  4578 7065 
0000548F  6374 6564 
00005493  20        
00005494  4461 7461 7107          dc.b      68,97,116,97,58,32,37,48,50,88,93,32,69,120
00005498  3A20 2530 
0000549C  3258 5D20 
000054A0  4578      
000054A2  6974 696E 7108          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
000054A6  6720 6D65 
000054AA  6D6F 7279 
000054AE  2074 6573 7109          dc.b      32,116,101,115,116,46,46,46,0
000054B2  742E 2E2E 
000054B6  00        
                    7110   @m649d4~1_165:
000054B8  0D0A 596F 7111          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
000054BC  7520 6861 
000054C0  7665 2073 
000054C4  65        
000054C5  6C63 7465 7112          dc.b      108,99,116,101,100,32,116,111,32,117,115,101
000054C9  6420 746F 
000054CD  2075 7365 
000054D1  2062 7974 7113          dc.b      32,98,121,116,101,115,32,115,105,122,101,32
000054D5  6573 2073 
000054D9  697A 6520 
000054DD  6461 7461 7114          dc.b      100,97,116,97,32,116,111,32,116,101,115,116
000054E1  2074 6F20 
000054E5  7465 7374 
000054E9  2079 6F75 7115          dc.b      32,121,111,117,114,32,109,101,109,111,114,121
000054ED  7220 6D65 
000054F1  6D6F 7279 
000054F5  00        7116          dc.b      0
                    7117   @m649d4~1_166:
000054F6  0D0A 3120 7118          dc.b      13,10,49,32,61,32,34,65,65,65,65,65,65,65,65
000054FA  3D20 2241 
000054FE  4141 4141 
00005502  4141 41   
00005505  220A 3220 7119          dc.b      34,10,50,32,61,32,34,65,66,65,66,65,66,65,66
00005509  3D20 2241 
0000550D  4241 4241 
00005511  4241 42   
00005514  220A 3320 7120          dc.b      34,10,51,32,61,32,34,67,67,67,67,68,68,68,68
00005518  3D20 2243 
0000551C  4343 4344 
00005520  4444 44   
00005523  220A 3420 7121          dc.b      34,10,52,32,61,32,34,65,65,66,66,67,67,68,68
00005527  3D20 2241 
0000552B  4142 4243 
0000552F  4344 44   
00005532  220D 0A00 7122          dc.b      34,13,10,0
                    7123   @m649d4~1_167:
00005536  0D0A 5741 7124          dc.b      13,10,87,65,82,78,73,78,71,58,32,77,101,109
0000553A  524E 494E 
0000553E  473A 204D 
00005542  656D      
00005544  6F72 7920 7125          dc.b      111,114,121,32,119,105,108,108,32,99,111,110
00005548  7769 6C6C 
0000554C  2063 6F6E 
00005550  7461 696E 7126          dc.b      116,97,105,110,32,116,114,117,110,99,97,116
00005554  2074 7275 
00005558  6E63 6174 
0000555C  6564 2064 7127          dc.b      101,100,32,100,97,116,97,0
00005560  6174 6100 
                    7128   @m649d4~1_168:
00005564  0D0A 5752 7129          dc.b      13,10,87,82,73,84,69,58,32,91,37,48,56,88,32
00005568  4954 453A 
0000556C  205B 2530 
00005570  3858 20   
00005573  746F 2025 7130          dc.b      116,111,32,37,48,56,120,93,0
00005577  3038 785D 
0000557B  00        
                    7131   @m649d4~1_169:
0000557C  0D0A 4552 7132          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,119
00005580  524F 523A 
00005584  2044 6174 
00005588  6120 77   
0000558B  6974 6869 7133          dc.b      105,116,104,105,110,32,109,101,109,111,114,121
0000558F  6E20 6D65 
00005593  6D6F 7279 
00005597  2064 6F65 7134          dc.b      32,100,111,101,115,32,110,111,116,32,109,97
0000559B  7320 6E6F 
0000559F  7420 6D61 
000055A3  7463 6820 7135          dc.b      116,99,104,32,115,101,108,101,99,116,101,100
000055A7  7365 6C65 
000055AB  6374 6564 
000055AF  2074 6573 7136          dc.b      32,116,101,115,116,32,100,97,116,97,33,32,91
000055B3  7420 6461 
000055B7  7461 2120 
000055BB  5B        
000055BC  4164 6472 7137          dc.b      65,100,100,114,101,115,115,58,32,37,48,56,120
000055C0  6573 733A 
000055C4  2025 3038 
000055C8  78        
000055C9  2045 7861 7138          dc.b      32,69,120,97,99,116,32,68,97,116,97,58,32,37
000055CD  6374 2044 
000055D1  6174 613A 
000055D5  2025      
000055D7  3038 5820 7139          dc.b      48,56,88,32,69,120,112,101,99,116,101,100,32
000055DB  4578 7065 
000055DF  6374 6564 
000055E3  20        
000055E4  4461 7461 7140          dc.b      68,97,116,97,58,32,37,48,56,88,93,32,69,120
000055E8  3A20 2530 
000055EC  3858 5D20 
000055F0  4578      
000055F2  6974 696E 7141          dc.b      105,116,105,110,103,32,109,101,109,111,114,121
000055F6  6720 6D65 
000055FA  6D6F 7279 
000055FE  2074 6573 7142          dc.b      32,116,101,115,116,46,46,46,13,10,0
00005602  742E 2E2E 
00005606  0D0A 00   
                    7143   @m649d4~1_170:
0000560A  0D0A 596F 7144          dc.b      13,10,89,111,117,32,102,97,105,108,101,100,32
0000560E  7520 6661 
00005612  696C 6564 
00005616  20        
00005617  746F 2073 7145          dc.b      116,111,32,115,101,108,101,99,116,32,97,32,100
0000561B  656C 6563 
0000561F  7420 6120 
00005623  64        
00005624  6174 6120 7146          dc.b      97,116,97,32,116,121,112,101,32,116,111,32,117
00005628  7479 7065 
0000562C  2074 6F20 
00005630  75        
00005631  7365 2120 7147          dc.b      115,101,33,32,67,108,105,99,107,32,111,112,101
00005635  436C 6963 
00005639  6B20 6F70 
0000563D  65        
0000563E  6E20 6D65 7148          dc.b      110,32,109,101,109,111,114,121,32,116,101,115
00005642  6D6F 7279 
00005646  2074 6573 
0000564A  7420 6167 7149          dc.b      116,32,97,103,97,105,110,32,116,111,32,116,114
0000564E  6169 6E20 
00005652  746F 2074 
00005656  72        
00005657  7920 6167 7150          dc.b      121,32,97,103,97,105,110,46,13,10,0
0000565B  6169 6E2E 
0000565F  0D0A 00   
                    7151   @m649d4~1_171:
00005662  4445 312D 7152          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00005666  3638 6B20 
0000566A  4275 6720 
0000566E  5631      
00005670  2E37 3700 7153          dc.b      46,55,55,0
                    7154   @m649d4~1_172:
00005674  436F 7079 7155          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00005678  7269 6768 
0000567C  7420 2843 
00005680  2920 504A 7156          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00005684  2044 6176 
00005688  6965 7320 
0000568C  3230      
0000568E  3136 00   7157          dc.b      49,54,0
                    7158   @m649d4~1_173:
00005692  0D0A 0D0A 7159          dc.b      13,10,13,10,77,97,116,116,104,101,119,32,84
00005696  4D61 7474 
0000569A  6865 7720 
0000569E  54        
0000569F  6F6E 6720 7160          dc.b      111,110,103,32,45,32,53,57,50,54,52,52,48,56
000056A3  2D20 3539 
000056A7  3236 3434 
000056AB  3038      
000056AD  0D0A 4179 7161          dc.b      13,10,65,121,111,109,105,98,111,32,65,119,111
000056B1  6F6D 6962 
000056B5  6F20 4177 
000056B9  6F        
000056BA  7369 6B61 7162          dc.b      115,105,107,97,32,45,32,57,54,54,53,51,56,52
000056BE  202D 2039 
000056C2  3636 3533 
000056C6  3834      
000056C8  3500      7163          dc.b      53,0
                    7164   @m649d4~1_174:
000056CA  0D0A 5275 7165          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000056CE  6E6E 696E 
000056D2  672E 2E2E 
000056D6  2E        
000056D7  2E00      7166          dc.b      46,0
                    7167   @m649d4~1_175:
000056DA  5275 6E6E 7168          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000056DE  696E 672E 
000056E2  2E2E 2E2E 
000056E6  00        
                    7169   @m649d4~1_176:
000056E8  4279 3A20 7170          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
000056EC  504A 2044 
000056F0  6176 6965 
000056F4  73        
000056F5  00        7171          dc.b      0
                    7172   @m649d4~1_177:
000056F6  0D0A 2573 7173          dc.b      13,10,37,115,0
000056FA  00        
                    7174          section   data
000056FC            7175                   align
          0000 56FC 7176   DataStart       equ       *
                    7177   
                    7178   *********************************************************************************************************
                    7179   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7180   * to ram as part of the CStart routine in this file
                    7181   *********************************************************************************************************
                    7182   
                    7183   MemoryTest_test_data_byte_list:
000056FC  AAAB CCCD 7184          dc.b      170,171,204,205
                    7185   MemoryTest_test_data_word_list:
00005700  0000 AAAA 7186          dc.l      43690,47802,52445,56797
00005704  0000 BABA 
00005708  0000 CCDD 
0000570C  0000 DDDD 
                    7187   MemoryTest_test_data_long_word_list:
00005710  AAAA AAAA 7188          dc.l      -1431655766,-1414812757,-858989091,-1430532899
00005714  ABAB ABAB 
00005718  CCCC DDDD 
0000571C  AABB CCDD 
                    7189   @itoa_1:
00005720  2D32 3134 7190          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005724  3734 3833 
00005728  3634 3800 
                    7191          section   bss
0000572C            7192                   align
          0000 572C 7193   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7194   
                    7195   *********************************************************************************************************
                    7196   * Section for Uninitialised Data held in ROM as constants
                    7197   *********************************************************************************************************
                    7198   
0B000000            7199                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0030 7200   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7201   
                    7202   
0B000000            7203   bss             org       bss
                    7204   
                    7205   *********************************************************************************************************
                    7206   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7207   * install the exception handler using the C function InstallExceptionHandler()
                    7208   *********************************************************************************************************
                    7209   
                    7210   
                    7211   
0B000000            7212   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            7213   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            7214   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            7215   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            7216   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            7217   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            7218   VCheck           ds.l    1      ditto
0B00001C            7219   VTrapV           ds.l    1      ditto
0B000020            7220   VPrivilege       ds.l    1      ditto
0B000024            7221   VTrace           ds.l    1
0B000028            7222   VLine1010emul    ds.l    1
0B00002C            7223   VLine1111emul    ds.l    1
0B000030            7224   VUnassigned1     ds.l    1
0B000034            7225   VUnassigned2     ds.l    1
0B000038            7226   VUnassigned3     ds.l    1
0B00003C            7227   VUninit_IRQ      ds.l    1
0B000040            7228   VUnassigned4     ds.l    1
0B000044            7229   VUnassigned5     ds.l    1
0B000048            7230   VUnassigned6     ds.l    1
0B00004C            7231   VUnassigned7     ds.l    1
0B000050            7232   VUnassigned8     ds.l    1
0B000054            7233   VUnassigned9     ds.l    1
0B000058            7234   VUnassigned10    ds.l    1
0B00005C            7235   VUnassigned11    ds.l    1
0B000060            7236   VSpuriousIRQ     ds.l    1
                    7237   
                    7238   * Interrupt handlers Vector 25-31
0B000064            7239   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            7240   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            7241   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            7242   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            7243   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            7244   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            7245   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7246   
                    7247   * Trap Handler vectors 32-47
0B000080            7248   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            7249   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            7250   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            7251   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            7252   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            7253   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            7254   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            7255   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7256   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7257   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7258   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7259   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7260   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7261   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7262   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7263   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7264   
                    7265   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7266   
                    7267   ***********************************************************************************************************
                    7268   * Other Variables
                    7269   ***********************************************************************************************************
                    7270   *__DebugA5       ds.l    1
                    7271   *__UserA5        ds.l    1
                    7272   
                    7273   ***********************************************************************************************************
0B0000C0            7274   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7275   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7276   __heap:         ds.l    0       ; pointers for malloc functions
                    7277   
                    7278   *__himem:       ds.l    himem            ; highest memory location + 1
                    7279   *__stklen:      ds.l    stklen           ; default stack size
                    7280   
                    7281   *********************************************************************************************************
                    7282   * Section for Heap
                    7283   *********************************************************************************************************
                    7284   
                    7285   _i:
0B0000C4            7286          ds.b      4
                    7287   _x:
0B0000C8            7288          ds.b      4
                    7289   _y:
0B0000CC            7290          ds.b      4
                    7291   _z:
0B0000D0            7292          ds.b      4
                    7293   _PortA_Count:
0B0000D4            7294          ds.b      4
                    7295   _Trace:
0B0000D8            7296          ds.b      4
                    7297   _GoFlag:
0B0000DC            7298          ds.b      4
                    7299   _Echo:
0B0000E0            7300          ds.b      4
                    7301   _d0:
0B0000E4            7302          ds.b      4
                    7303   _d1:
0B0000E8            7304          ds.b      4
                    7305   _d2:
0B0000EC            7306          ds.b      4
                    7307   _d3:
0B0000F0            7308          ds.b      4
                    7309   _d4:
0B0000F4            7310          ds.b      4
                    7311   _d5:
0B0000F8            7312          ds.b      4
                    7313   _d6:
0B0000FC            7314          ds.b      4
                    7315   _d7:
0B000100            7316          ds.b      4
                    7317   _a0:
0B000104            7318          ds.b      4
                    7319   _a1:
0B000108            7320          ds.b      4
                    7321   _a2:
0B00010C            7322          ds.b      4
                    7323   _a3:
0B000110            7324          ds.b      4
                    7325   _a4:
0B000114            7326          ds.b      4
                    7327   _a5:
0B000118            7328          ds.b      4
                    7329   _a6:
0B00011C            7330          ds.b      4
                    7331   _PC:
0B000120            7332          ds.b      4
                    7333   _SSP:
0B000124            7334          ds.b      4
                    7335   _USP:
0B000128            7336          ds.b      4
                    7337   _SR:
0B00012C            7338          ds.b      2
                    7339   _BreakPointAddress:
0B00012E            7340          ds.b      32
                    7341   _BreakPointInstruction:
0B00014E            7342          ds.b      16
                    7343   _BreakPointSetOrCleared:
0B00015E            7344          ds.b      32
                    7345   _InstructionSize:
0B00017E            7346          ds.b      4
                    7347   _WatchPointAddress:
0B000182            7348          ds.b      32
                    7349   _WatchPointSetOrCleared:
0B0001A2            7350          ds.b      32
                    7351   _WatchPointString:
0B0001C2            7352          ds.b      800
                    7353   _TempString:
0B0004E2            7354          ds.b      100
                    7355          section   heap
0B000546            7356                   align
          0B00 0546 7357   bssEnd          equ *                   end of storage space for unitialised variables
                    7358   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0546 7359   heap   equ       *
0B000546            7360                    align
          0000 0000

Assembly errors: 5
