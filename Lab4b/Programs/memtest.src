       section   code
; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space

StackPointerVal     equ $08040000      when using sram
;StackPointerVal     equ $0C000000      when using dram

; define RamVectorTable as $0803000 if your system uses SRAM for main memory
; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)

RamVectorTable      equ $08030000      when using sram
;RamVectorTable      equ $0B000000      when using dram



; CSTART.ASM  -  C startup-code for Debug Monitor
                align

                org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0

InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
InitialPC       dc.l start             ;address of 1st instruction of program after a reset
BusError        dc.l E_BErro           ;bus error - stop program
AddressError    dc.l E_AErro           ;address error - stop program
IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
Check           dc.l E_Check           ;Check instruction - stop program
TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
Privilege       dc.l E_Priv            ;privilige violation - stop program
Trace           dc.l E_Trace           ;stop on trace
Line1010emul    dc.l E_1010            ;1010 instructions stop
Line1111emul    dc.l E_1111            ;1111 instructions stop
Unassigned1     dc.l E_Unnas1           ;unassigned vector
Unassigned2     dc.l E_Unnas2           ;unassigned vector
Unassigned3     dc.l E_Unnas3           ;unassigned vector
Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
Unassigned4     dc.l E_Unnas4           ;unassigned vector
Unassigned5     dc.l E_Unnas5           ;unassigned vector
Unassigned6     dc.l E_Unnas6           ;unassigned vector
Unassigned7     dc.l E_Unnas7           ;unassigned vector
Unassigned8     dc.l E_Unnas8           ;unassigned vector
Unassigned9     dc.l E_Unnas9           ;unassigned vector
Unassigned10    dc.l E_Unnas10           ;unassigned vector
Unassigned11    dc.l E_Unnas11           ;unassigned vector
SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
*
*
Level1IRQ       dc.l Level1RamISR
Level2IRQ       dc.l Level2RamISR
Level3IRQ       dc.l Level3RamISR
Level4IRQ       dc.l Level4RamISR
Level5IRQ       dc.l Level5RamISR
Level6IRQ       dc.l Level6RamISR
Level7IRQ       dc.l Level7RamISR
*
*
Trap0           dc.l Trap0RamISR        ; User installed trap handler
Trap1           dc.l Trap1RamISR        ; User installed trap handler
Trap2           dc.l Trap2RamISR        ; User installed trap handler
Trap3           dc.l Trap3RamISR        ; User installed trap handler
Trap4           dc.l Trap4RamISR        ; User installed trap handler
Trap5           dc.l Trap5RamISR        ; User installed trap handler
Trap6           dc.l Trap6RamISR        ; User installed trap handler
Trap7           dc.l Trap7RamISR        ; User installed trap handler
Trap8           dc.l Trap8RamISR        ; User installed trap handler
Trap9           dc.l Trap9RamISR        ; User installed trap handler
Trap10          dc.l Trap10RamISR       ; User installed trap handler
Trap11          dc.l Trap11RamISR       ; User installed trap handler
Trap12          dc.l Trap12RamISR       ; User installed trap handler
Trap13          dc.l Trap13RamISR       ; User installed trap handler
Trap14          dc.l Trap14RamISR       ; User installed trap handler
Trap15          dc.l Trap15RamISR       ; User installed trap handler

*
* Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
*

                org       $00000400

start:          move.w     #$2700,SR             set interrupts to disable until later

*************************************************************************************
** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
** important, it just creates read and write bus cycles to specific addresses which
** help with debugging hardware in Quartus simulations
**************************************************************************************

                ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation

                move.l     #$11223344,$08060000 write 32 bits, to memory
                move.l     $08060000,d0         read 32 bits back
                move.b     #$00,$00400000         write to the output ports
                move.b     #$00,$00400002         write to the output ports
                move.b     #$00,$00400004         write to the output ports
                move.b     #$00,$00400006         write to the output ports
                move.b     #$00,$00400008         write to the output ports
                move.b     #$00,$00400010         write to the hex display ports
                move.b     #$00,$00400012         write to the hex display ports
                move.b     #$00,$00400014         write to the hex display ports
                move.b     #0,$00400020         write to the LCD
                move.b     #0,$00400022         write to the LCD
                move.b     #0,$00400030         write to the Timer1 Data
                move.b     #0,$00400032         write to the Timer1 Control

                ; some important initialisation do not modify
                move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
                move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
                move.l    #heap,__heap    ; pointer to free memory


mainloop        jsr       _main
                bra       mainloop

*********************************************************************************************************
* Code to call Ram Based Interrupt handler and other exeception handler code
*********************************************************************************************************
Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VL1IRQ,a0               get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte
Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VL2IRQ,a0               get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte
Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VL3IRQ,a0               get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte
Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VL4IRQ,a0               get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

* Trace trap Handler

Level5RamISR
*
**         Copy 68000 registers from debug monitor Variables,
*
*
                move.l    #1,_Trace              switch on Trace Mode
                move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
                move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
                move.l    (sp)+,_PC              get at the users program counter and copy
*
                move.l    SP,_SSP                copy system stack pointer to debug monitor variable
                move.l    d0,_d0
                move.l    d1,_d1
                move.l    d2,_d2
                move.l    d3,_d3
                move.l    d4,_d4
                move.l    d5,_d5
                move.l    d6,_d6
                move.l    d7,_d7
*
                move.l    a0,_a0
                move.l    a1,_a1
                move.l    a2,_a2
                move.l    a3,_a3
                move.l    a4,_a4
                move.l    a5,_a5
                move.l    a6,_a6
                move.l    usp,a0
                move.l    a0,_USP
*
                move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
                jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address

** After trace, reload 68000 registers with new values before continuing

                move.l   _d0,d0
                move.l   _d1,d1
                move.l   _d2,d2
                move.l   _d3,d3
                move.l   _d4,d4
                move.l   _d5,d5
                move.l   _d6,d6
                move.l   _d7,d7

                move.l   _USP,a0
                move.l   a0,USP                     load user stack pointer
                move.l   _a0,a0
                move.l   _a1,a1
                move.l   _a2,a2
                move.l   _a3,a3
                move.l   _a4,a4
                move.l   _a5,a5
                move.l   _a6,a6

                move.l   _SSP,sp
                move.l   _PC,-(sp)
                move.w   _SR,-(sp)
                move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
                rte

* address trap handler

Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VL6IRQ,a0               get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VL7IRQ,a0               get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte


********************************************************************************************************
* Ram based Trap handler and other exeception handler code
*********************************************************************************************************

Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrap0,a0                get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrap1,a0                get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrap2,a0                get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrap3,a0                get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrap4,a0                get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrap5,a0                get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrap6,a0                get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrap7,a0                get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrap8,a0                get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrap9,a0                get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrap10,a0                get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrap11,a0                get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrap12,a0                get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrap13,a0                get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte

Trap14RamISR    ;Break Point Handler
*
**         Copy 68000 registers from debug monitor Variables
*
                move.l    #1,_Trace      switch on Trace Mode
                move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
                move.l    (sp)+,_PC      get at the users program counter and copy
*
                move.l    d0,_d0
                move.l    d1,_d1
                move.l    d2,_d2
                move.l    d3,_d3
                move.l    d4,_d4
                move.l    d5,_d5
                move.l    d6,_d6
                move.l    d7,_d7
*
                move.l    a0,_a0
                move.l    a1,_a1
                move.l    a2,_a2
                move.l    a3,_a3
                move.l    a4,_a4
                move.l    a5,_a5
                move.l    a6,_a6
                move.l    USP,a0
                move.l    a0,_USP
*
                move.l    VTrap14,a0             get ram based address into a0
                jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address

** After breakpoint reload 68000 registers with new values before continuing

*                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
                move.l   _d0,d0
                move.l   _d1,d1
                move.l   _d2,d2
                move.l   _d3,d3
                move.l   _d4,d4
                move.l   _d5,d5
                move.l   _d6,d6
                move.l   _d7,d7

                move.l   _USP,a0
                move.l   a0,USP        load user stack pointer A7
                move.l   _a0,a0
                move.l   _a1,a1
                move.l   _a2,a2
                move.l   _a3,a3
                move.l   _a4,a4
                move.l   _a5,a5
                move.l   _a6,a6

                move.l   _PC,-(sp)
                move.w   _SR,-(sp)
                rte

Trap15RamISR    jmp     _CallDebugMonitor
*                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
*                move.l    VTrap15,a0                get ram based address into a0
*                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
*                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
*                rte

*********************************************************************************************************
*Default exception handler for everything without a specific handler
*********************************************************************************************************

*
**              Jump here for each unhandled exception
**              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
*

E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VBusError,a0            get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte
E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VAddressError,a0        get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte
E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VIllegalInstr,a0        get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte
E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VDividebyZero,a0        get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte
E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VCheck,a0               get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte
E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrapV,a0               get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte
E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VPrivilege,a0           get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte
E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VTrace,a0               get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte
E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VLine1010emul,a0        get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte
E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                move.l    VLine1111emul,a0        get ram based address into a0
                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                rte
E_Unnas1
E_Unnas2
E_Unnas3
E_UnitI
E_Unnas4
E_Unnas5
E_Unnas6
E_Unnas7
E_Unnas8
E_Unnas9
E_Unnas10
E_Unnas11
E_Spuri
_stop            bra _stop                         stop
***************************************************************************************************
* Go() function in debug monitor
***************************************************************************************************
_go
                move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
                move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
                move.w   _SR,-(sp)      copy debug monitor status reg to the stack

                move.b   $00000078,d0  remove any spurious address exception arising after power on
                move.l   _d0,d0
                move.l   _d1,d1
                move.l   _d2,d2
                move.l   _d3,d3
                move.l   _d4,d4
                move.l   _d5,d5
                move.l   _d6,d6
                move.l   _d7,d7

                move.l   _USP,a0
                move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
                move.l   _a0,a0
                move.l   _a1,a1
                move.l   _a2,a2
                move.l   _a3,a3
                move.l   _a4,a4
                move.l   _a5,a5
                move.l   _a6,a6
                rte                    load the status reg and PC from the stack and commence running
                                       *used to be rte but this didn't load the status byte

; C:\M68K\PARTB-MYPROGRAM\MEMTEST.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
; #include <stdio.h>
; void main(void)
; {
_main:
       link      A6,#-16
       movem.l   D2/D3/D4/D5/D6/A2/A3,-(A7)
       lea       _printf.L,A2
       lea       _scanf.L,A3
; unsigned int test_option = 0;
       clr.l     -16(A6)
; unsigned int bit_num = 0;
       clr.l     D6
; unsigned int test_pattern = 0;
       clr.l     D3
; unsigned int select_pattern = 0;
       clr.l     -12(A6)
; unsigned int write_data = 0;
       clr.l     D5
; unsigned int start_addr = 0;
       clr.l     -8(A6)
; unsigned int end_addr = 0;
       clr.l     -4(A6)
; unsigned int *addr_point = NULL;
       clr.l     D2
; unsigned int counter = 10000;
       move.l    #10000,D4
; //prompting user for test option BYTES, WORDS, or LONG WORDS
; while(!test_option){
main_1:
       tst.l     -16(A6)
       bne       main_3
; printf("\r\nPlease enter a number to choose one of the following test options:"
       pea       @memtest_1.L
       jsr       (A2)
       addq.w    #4,A7
; "\r\n1 - Bytes"
; "\r\n2 - Words"
; "\r\n3 - Long Words\r\n");
; scanf("%d", &test_option);
       pea       -16(A6)
       pea       @memtest_2.L
       jsr       (A3)
       addq.w    #8,A7
; if((test_option != 1 && test_option != 2 && test_option != 3) || test_option == 0){
       move.l    -16(A6),D0
       cmp.l     #1,D0
       beq.s     main_7
       move.l    -16(A6),D0
       cmp.l     #2,D0
       beq.s     main_7
       move.l    -16(A6),D0
       cmp.l     #3,D0
       bne.s     main_6
main_7:
       move.l    -16(A6),D0
       bne.s     main_4
main_6:
; printf("\r\nInvalid Selection\r\n");
       pea       @memtest_3.L
       jsr       (A2)
       addq.w    #4,A7
; test_option = 0;
       clr.l     -16(A6)
main_4:
       bra       main_1
main_3:
; }
; }
; //assigning bit_num based on test_option
; switch(test_option){
       move.l    -16(A6),D0
       cmp.l     #2,D0
       beq.s     main_11
       bhi.s     main_14
       cmp.l     #1,D0
       beq.s     main_10
       bra       main_8
main_14:
       cmp.l     #3,D0
       beq.s     main_12
       bra.s     main_8
main_10:
; case 1:
; printf("\r\nYou have selected test option BYTES\r\n");
       pea       @memtest_4.L
       jsr       (A2)
       addq.w    #4,A7
; bit_num = 8;
       moveq     #8,D6
; break;
       bra.s     main_9
main_11:
; case 2:
; printf("\r\nYou have selected test option WORDS\r\n");
       pea       @memtest_5.L
       jsr       (A2)
       addq.w    #4,A7
; bit_num = 16;
       moveq     #16,D6
; break;
       bra.s     main_9
main_12:
; case 3:
; printf("\r\nYou have selected test option LONG WORDS\r\n");
       pea       @memtest_6.L
       jsr       (A2)
       addq.w    #4,A7
; bit_num = 32;
       moveq     #32,D6
; break;
       bra.s     main_9
main_8:
; default:
; printf("\r\nException - invalid test option\r\n");
       pea       @memtest_7.L
       jsr       (A2)
       addq.w    #4,A7
; break;
main_9:
; }
; //prompting user to enter test pattern
; while(!select_pattern){
main_15:
       tst.l     -12(A6)
       bne       main_17
; printf("\r\nPlease enter a number to choose one of the following test patterns:"
       pea       @memtest_8.L
       jsr       (A2)
       addq.w    #4,A7
; "\r\n1 - 55"
; "\r\n2 - AA"
; "\r\n3 - FF"
; "\r\n4 - 00\r\n");
; scanf("%d", &select_pattern);
       pea       -12(A6)
       pea       @memtest_9.L
       jsr       (A3)
       addq.w    #8,A7
; if((select_pattern != 1 && select_pattern != 2 && select_pattern != 3 && select_pattern != 4) || select_pattern == 0){
       move.l    -12(A6),D0
       cmp.l     #1,D0
       beq.s     main_21
       move.l    -12(A6),D0
       cmp.l     #2,D0
       beq.s     main_21
       move.l    -12(A6),D0
       cmp.l     #3,D0
       beq.s     main_21
       move.l    -12(A6),D0
       cmp.l     #4,D0
       bne.s     main_20
main_21:
       move.l    -12(A6),D0
       bne.s     main_18
main_20:
; printf("\r\nInvalid Selection\r\n");
       pea       @memtest_10.L
       jsr       (A2)
       addq.w    #4,A7
; select_pattern = 0;
       clr.l     -12(A6)
main_18:
       bra       main_15
main_17:
; }
; }
; //assigning write_data based on test_pattern
; switch(select_pattern){
       move.l    -12(A6),D0
       subq.l    #1,D0
       blo       main_22
       cmp.l     #4,D0
       bhs       main_22
       asl.l     #1,D0
       move.w    main_24(PC,D0.L),D0
       jmp       main_24(PC,D0.W)
main_24:
       dc.w      main_25-main_24
       dc.w      main_26-main_24
       dc.w      main_27-main_24
       dc.w      main_28-main_24
main_25:
; case 1:
; printf("\r\nYou have selected test pattern 55\r\n");
       pea       @memtest_11.L
       jsr       (A2)
       addq.w    #4,A7
; test_pattern = 0x55;
       moveq     #85,D3
; break;
       bra       main_23
main_26:
; case 2:
; printf("\r\nYou have selected test pattern AA\r\n");
       pea       @memtest_12.L
       jsr       (A2)
       addq.w    #4,A7
; test_pattern = 0xAA;
       move.l    #170,D3
; break;
       bra.s     main_23
main_27:
; case 3:
; printf("\r\nYou have selected test pattern FF\r\n");
       pea       @memtest_13.L
       jsr       (A2)
       addq.w    #4,A7
; test_pattern = 0xFF;
       move.l    #255,D3
; break;
       bra.s     main_23
main_28:
; case 4:
; printf("\r\nYou have selected test pattern 00\r\n");
       pea       @memtest_14.L
       jsr       (A2)
       addq.w    #4,A7
; test_pattern = 0x00;
       clr.l     D3
main_22:
; default:
; printf("\r\nException - invalid test pattern\r\n");
       pea       @memtest_15.L
       jsr       (A2)
       addq.w    #4,A7
; break;
main_23:
; }
; //create appropriate data set based on select_pattern and test_option
; // ie, if select_pattern is AA and test_option is BYTES, write_data must be AAAA
; switch(test_option){
       move.l    -16(A6),D0
       cmp.l     #2,D0
       beq.s     main_33
       bhi.s     main_36
       cmp.l     #1,D0
       beq.s     main_32
       bra       main_30
main_36:
       cmp.l     #3,D0
       beq.s     main_34
       bra       main_30
main_32:
; case 1:
; write_data = test_pattern;
       move.l    D3,D5
; break;
       bra       main_31
main_33:
; case 2:
; write_data = test_pattern | test_pattern << 8;
       move.l    D3,D0
       move.l    D3,D1
       lsl.l     #8,D1
       or.l      D1,D0
       move.l    D0,D5
; break;
       bra       main_31
main_34:
; case 3:
; write_data = test_pattern | test_pattern << 8 | test_pattern << 16 | test_pattern << 24;
       move.l    D3,D0
       move.l    D3,D1
       lsl.l     #8,D1
       or.l      D1,D0
       move.l    D3,D1
       lsl.l     #8,D1
       lsl.l     #8,D1
       or.l      D1,D0
       move.l    D3,D1
       lsl.l     #8,D1
       lsl.l     #8,D1
       lsl.l     #8,D1
       or.l      D1,D0
       move.l    D0,D5
; break;
       bra.s     main_31
main_30:
; default:
; printf("\r\nException - could not generate write_data\r\n");
       pea       @memtest_16.L
       jsr       (A2)
       addq.w    #4,A7
; break;
main_31:
; }
; //prompting user to enter start address
; while(!start_addr){
main_37:
       tst.l     -8(A6)
       bne       main_39
; printf("\r\nPlease enter a starting address from 08020000 to 08030000\r\n");
       pea       @memtest_17.L
       jsr       (A2)
       addq.w    #4,A7
; scanf("%d", &start_addr);
       pea       -8(A6)
       pea       @memtest_18.L
       jsr       (A3)
       addq.w    #8,A7
; if(start_addr<0x08020000 || start_addr>0x08030000){
       move.l    -8(A6),D0
       cmp.l     #134348800,D0
       blo.s     main_42
       move.l    -8(A6),D0
       cmp.l     #134414336,D0
       bls.s     main_40
main_42:
; printf("\r\nStart address is invalid\r\n");
       pea       @memtest_19.L
       jsr       (A2)
       addq.w    #4,A7
; start_addr = 0;
       clr.l     -8(A6)
       bra       main_44
main_40:
; } else if(bit_num>8 && start_addr % 2 != 0){
       cmp.l     #8,D6
       bls.s     main_43
       move.l    -8(A6),-(A7)
       pea       2
       jsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       tst.l     D0
       beq.s     main_43
; printf("\r\nFor words or long words, please enter an even numbered address\r\n");
       pea       @memtest_20.L
       jsr       (A2)
       addq.w    #4,A7
; end_addr = 0;
       clr.l     -4(A6)
       bra.s     main_44
main_43:
; } else{
; printf("\r\nThe chosen starting address is: %x", start_addr);
       move.l    -8(A6),-(A7)
       pea       @memtest_21.L
       jsr       (A2)
       addq.w    #8,A7
main_44:
       bra       main_37
main_39:
; }
; }
; //prompting user to enter end address
; while(!end_addr){
main_45:
       tst.l     -4(A6)
       bne       main_47
; printf("\r\nPlease enter an end address from %x to 08030000\r\n", start_addr);
       move.l    -8(A6),-(A7)
       pea       @memtest_22.L
       jsr       (A2)
       addq.w    #8,A7
; scanf("%d", &end_addr);
       pea       -4(A6)
       pea       @memtest_23.L
       jsr       (A3)
       addq.w    #8,A7
; if(end_addr<start_addr || end_addr>0x08030000){
       move.l    -4(A6),D0
       cmp.l     -8(A6),D0
       blo.s     main_50
       move.l    -4(A6),D0
       cmp.l     #134414336,D0
       bls.s     main_48
main_50:
; printf("\r\nEnd address is invalid\r\n");
       pea       @memtest_24.L
       jsr       (A2)
       addq.w    #4,A7
; end_addr = 0;
       clr.l     -4(A6)
       bra       main_52
main_48:
; } else if(bit_num>8 && end_addr % 2 != 0){
       cmp.l     #8,D6
       bls.s     main_51
       move.l    -4(A6),-(A7)
       pea       2
       jsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       tst.l     D0
       beq.s     main_51
; printf("\r\nFor words or long words, please enter an even numbered address\r\n");
       pea       @memtest_25.L
       jsr       (A2)
       addq.w    #4,A7
; end_addr = 0;
       clr.l     -4(A6)
       bra.s     main_52
main_51:
; } else{
; printf("\r\nThe chosen ending address is: %x", end_addr);
       move.l    -4(A6),-(A7)
       pea       @memtest_26.L
       jsr       (A2)
       addq.w    #8,A7
main_52:
       bra       main_45
main_47:
; }
; }
; //set address pointer to start pointer
; addr_point = start_addr;
       move.l    -8(A6),D2
; //writing data
; while(addr_point<end_addr){
main_53:
       cmp.l     -4(A6),D2
       bhs       main_55
; *addr_point = write_data;
       move.l    D2,A0
       move.l    D5,(A0)
; counter++;
       addq.l    #1,D4
; if(counter >= 10000){
       cmp.l     #10000,D4
       blo.s     main_56
; printf("\r\nWriting %x into address %x\r\n", *addr_point, addr_point);
       move.l    D2,-(A7)
       move.l    D2,A0
       move.l    (A0),-(A7)
       pea       @memtest_27.L
       jsr       (A2)
       add.w     #12,A7
; counter = 1;
       moveq     #1,D4
main_56:
; }
; //need to increment address pointer according to test option chosen (bytes, words, long words)
; if(test_option == 1){
       move.l    -16(A6),D0
       cmp.l     #1,D0
       bne.s     main_58
; addr_point = addr_point+1;
       addq.l    #4,D2
       bra.s     main_62
main_58:
; } else if(test_option == 2){
       move.l    -16(A6),D0
       cmp.l     #2,D0
       bne.s     main_60
; addr_point = addr_point+2;
       addq.l    #8,D2
       bra.s     main_62
main_60:
; }else if(test_option == 3){
       move.l    -16(A6),D0
       cmp.l     #3,D0
       bne.s     main_62
; addr_point = addr_point+4;
       add.l     #16,D2
main_62:
       bra       main_53
main_55:
; }
; }
; printf("\r\nWriting completed. Will now start reading.\r\n");
       pea       @memtest_28.L
       jsr       (A2)
       addq.w    #4,A7
; addr_point = start_addr;
       move.l    -8(A6),D2
; counter = 10000;
       move.l    #10000,D4
; //reading data
; while(addr_point<end_addr){
main_64:
       cmp.l     -4(A6),D2
       bhs       main_66
; if(*addr_point != write_data){
       move.l    D2,A0
       cmp.l     (A0),D5
       beq.s     main_67
; printf("\r\nAn Error has occurred: data at address %x expected to be %x, instead is reading %x", addr_point, write_data, *addr_point);
       move.l    D2,A0
       move.l    (A0),-(A7)
       move.l    D5,-(A7)
       move.l    D2,-(A7)
       pea       @memtest_29.L
       jsr       (A2)
       add.w     #16,A7
; printf("\r\nMemory test failed.\r\n");
       pea       @memtest_30.L
       jsr       (A2)
       addq.w    #4,A7
; break;
       bra       main_66
main_67:
; }
; counter++;
       addq.l    #1,D4
; if(counter >= 10000){
       cmp.l     #10000,D4
       blo.s     main_69
; printf("\r\nReading data value %x from address %x\r\n", *addr_point, addr_point);
       move.l    D2,-(A7)
       move.l    D2,A0
       move.l    (A0),-(A7)
       pea       @memtest_31.L
       jsr       (A2)
       add.w     #12,A7
; counter = 1;
       moveq     #1,D4
main_69:
; }
; //need to increment address pointer according to test option chosen (bytes, words, long words)
; if(test_option == 1){
       move.l    -16(A6),D0
       cmp.l     #1,D0
       bne.s     main_71
; addr_point = addr_point+1;
       addq.l    #4,D2
       bra.s     main_75
main_71:
; } else if(test_option == 2){
       move.l    -16(A6),D0
       cmp.l     #2,D0
       bne.s     main_73
; addr_point = addr_point+2;
       addq.l    #8,D2
       bra.s     main_75
main_73:
; }else if(test_option == 3){
       move.l    -16(A6),D0
       cmp.l     #3,D0
       bne.s     main_75
; addr_point = addr_point+4;
       add.l     #16,D2
main_75:
       bra       main_64
main_66:
       movem.l   (A7)+,D2/D3/D4/D5/D6/A2/A3
       unlk      A6
       rts
; }
; }
; }
_scanf:
       link      A6,#-4
       move.l    D2,-(A7)
       lea       8(A6),A0
       addq.w    #4,A0
       move.l    A0,D2
       move.l    D2,-(A7)
       move.l    8(A6),-(A7)
       clr.l     -(A7)
       jsr       _doscan
       add.w     #12,A7
       move.l    D0,-4(A6)
       clr.l     D2
       move.l    -4(A6),D0
       move.l    (A7)+,D2
       unlk      A6
       rts
ULDIV:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       bra.s   ldiv_3
LDIV:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       tst.l   D0
       bpl.s   ldiv_1
       neg.l   D0
       tst.l   D1
       bpl.s   ldiv_2
       neg.l   D1
       bsr.s   dodiv
       neg.l   D1
       bra.s   ldiv_4
ldiv_1:
       tst.l   D1
       bpl.s   ldiv_3
       neg.l   D1
       bsr.s   dodiv
       neg.l   D0
       bra.s   ldiv_4
ldiv_2:
       bsr.s   dodiv
       neg.l   D0
       neg.l   D1
       bra.s   ldiv_4
ldiv_3:
       bsr.s   dodiv
ldiv_4:
       move.l  D0,8(A6)
       move.l  D1,12(A6)
       movem.l (A7)+,D0/D1
       unlk    A6
       rts
dodiv:
       cmpi.l  #$FFFF,D1
       bhi.s   dodiv_2
       cmpi.l  #$FFFF,D0
       bhi.s   dodiv_1
       divu    D1,D0
       move.l  D0,D1
       clr.w   D1
       swap    D1
       andi.l  #$FFFF,D0
       rts
dodiv_1:
       movem.w D0/D2,-(A7)
       clr.w   D0
       swap    D0
       divu    D1,D0
       move.w  D0,D2
       move.w  (A7)+,D0
       divu    D1,D0
       swap    D0
       clr.l   D1
       move.w  D0,D1
       move.w  D2,D0
       swap    D0
       move.w  (A7)+,D2
       rts
dodiv_2:
       movem.l D2/D3/D4,-(A7)
       move.l  D1,D2
       clr.w   D2
       swap    D2
       addq.l  #1,D2
       move.l  D0,D3
       move.l  D1,D4
       move.l  D2,D1
       bsr.s   dodiv_1
       move.l  D4,D1
       divu    D2,D1
       divu    D1,D0
       andi.l  #$FFFF,D0
dodiv_3:
       move.l  D4,D1
       move.l  D4,D2
       swap    D2
       mulu    D0,D1
       mulu    D0,D2
       swap    D2
       add.l   D2,D1
       sub.l   D3,D1
       bhi.s   dodiv_4
       neg.l   D1
       cmp.l   D1,D4
       bhi.s   dodiv_5
       addq.l  #1,D0
       bra.s   dodiv_3
dodiv_4:
       subq.l  #1,D0
       bra.s   dodiv_3
dodiv_5:
       movem.l (A7)+,D2/D3/D4
       rts
_printf:
       link      A6,#-4
       move.l    D2,-(A7)
       lea       8(A6),A0
       addq.w    #4,A0
       move.l    A0,D2
       move.l    D2,-(A7)
       move.l    8(A6),-(A7)
       clr.l     -(A7)
       jsr       _doprint
       add.w     #12,A7
       move.l    D0,-4(A6)
       clr.l     D2
       move.l    -4(A6),D0
       move.l    (A7)+,D2
       unlk      A6
       rts
@doscan_read:
       link      A6,#-4
       move.l    A2,-(A7)
       lea       @doscan_lpbuf.L,A2
       tst.l     8(A6)
       beq       @doscan_read_1
       move.l    8(A6),A0
       addq.l    #4,8(A6)
       move.l    (A0),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,-4(A6)
       clr.b     D1
       and.l     #255,D1
       cmp.l     D1,D0
       beq.s     @doscan_read_3
       move.l    -4(A6),D0
       bra.s     @doscan_read_4
@doscan_read_3:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
@doscan_read_4:
       bra       @doscan_read_5
@doscan_read_1:
       move.l    (A2),A0
       move.b    (A0),D0
       bne.s     @doscan_read_6
       pea       @doscan_buf.L
       jsr       _gets
       addq.w    #4,A7
       move.l    D0,(A2)
       pea       @doscan_1.L
       pea       @doscan_buf.L
       jsr       _strcat
       addq.w    #8,A7
@doscan_read_6:
       move.l    (A2),A0
       addq.l    #1,(A2)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
@doscan_read_5:
       move.l    (A7)+,A2
       unlk      A6
       rts
@doscan_putback:
       link      A6,#0
       movem.l   D2/D3,-(A7)
       move.l    12(A6),D2
       move.l    8(A6),D3
       beq.s     @doscan_putback_1
       cmp.l     #-1,D2
       beq.s     @doscan_putback_3
       subq.l    #4,D3
       move.l    D3,A0
       move.l    (A0),A0
       move.b    D2,(A0)
       bra.s     @doscan_putback_4
@doscan_putback_3:
       move.l    D3,A0
       subq.l    #1,(A0)
@doscan_putback_4:
       bra.s     @doscan_putback_6
@doscan_putback_1:
       lea       @doscan_buf.L,A0
       move.l    A0,D0
       cmp.l     @doscan_lpbuf.L,D0
       bne.s     @doscan_putback_5
       clr.b     @doscan_buf.L
       move.l    D2,-(A7)
       jsr       _ungetch
       addq.w    #4,A7
       bra.s     @doscan_putback_6
@doscan_putback_5:
       subq.l    #1,@doscan_lpbuf.L
       move.l    @doscan_lpbuf.L,A0
       move.b    D2,(A0)
@doscan_putback_6:
       move.l    D2,D0
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
@doscan_space:
       link      A6,#0
       move.l    D2,-(A7)
@doscan_space_1:
       move.l    8(A6),-(A7)
       jsr       @doscan_read
       addq.w    #4,A7
       move.l    D0,D2
       move.l    12(A6),A0
       addq.l    #1,(A0)
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #16,D0
       bne       @doscan_space_1
       move.l    D2,D0
       move.l    (A7)+,D2
       unlk      A6
       rts
@doscan_select:
       link      A6,#0
       movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
       move.l    12(A6),D3
       move.l    24(A6),D6
       move.l    20(A6),D7
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #94,D0
       bne.s     @doscan_select_1
       move.w    #1,A2
       addq.l    #1,D3
       bra.s     @doscan_select_2
@doscan_select_1:
       move.w    #0,A2
@doscan_select_2:
       move.l    16(A6),D0
       subq.l    #1,16(A6)
       tst.l     D0
       beq       @doscan_select_5
       move.l    8(A6),-(A7)
       jsr       @doscan_read
       addq.w    #4,A7
       move.l    D0,D4
       cmp.l     #-1,D4
       bne.s     @doscan_select_6
       bra       @doscan_select_5
@doscan_select_6:
       move.l    28(A6),A0
       addq.l    #1,(A0)
       clr.l     D5
       clr.l     D2
@doscan_select_8:
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       cmp.b     #93,D0
       beq       @doscan_select_10
       tst.l     D2
       beq.s     @doscan_select_11
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       cmp.b     #93,D0
       bne.s     @doscan_select_11
       bra       @doscan_select_10
@doscan_select_11:
       tst.l     D2
       beq       @doscan_select_15
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       cmp.b     #45,D0
       bne       @doscan_select_15
       move.l    D3,A0
       move.l    D2,D0
       subq.l    #1,D0
       move.l    D3,A1
       move.l    D2,D1
       addq.l    #1,D1
       move.l    D0,-(A7)
       move.b    0(A0,D0.L),D0
       cmp.b     0(A1,D1.L),D0
       bge       @doscan_select_15
       move.l    (A7)+,D0
       move.l    D3,A0
       move.l    D2,D0
       subq.l    #1,D0
       move.b    0(A0,D0.L),D0
       ext.w     D0
       ext.l     D0
       cmp.l     D0,D4
       blt.s     @doscan_select_17
       move.l    D3,A0
       move.l    D2,D0
       addq.l    #1,D0
       move.b    0(A0,D0.L),D0
       ext.w     D0
       ext.l     D0
       cmp.l     D0,D4
       bgt.s     @doscan_select_17
       bra.s     @doscan_select_10
@doscan_select_17:
       addq.l    #1,D2
       bra.s     @doscan_select_19
@doscan_select_15:
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       ext.w     D0
       ext.l     D0
       cmp.l     D0,D4
       bne.s     @doscan_select_19
       bra.s     @doscan_select_10
@doscan_select_19:
       addq.l    #1,D2
       bra       @doscan_select_8
@doscan_select_10:
       tst.l     D2
       beq.s     @doscan_select_23
       move.l    D3,A0
       move.b    0(A0,D2.L),D0
       cmp.b     #93,D0
       beq.s     @doscan_select_21
@doscan_select_23:
       moveq     #1,D5
@doscan_select_21:
       move.l    A2,D0
       beq.s     @doscan_select_24
       tst.l     D5
       bne.s     @doscan_select_26
       tst.l     D7
       bne.s     @doscan_select_28
       move.l    D6,A0
       addq.l    #1,D6
       move.b    D4,(A0)
@doscan_select_28:
       bra.s     @doscan_select_4
@doscan_select_26:
       bra.s     @doscan_select_5
@doscan_select_24:
       tst.l     D5
       beq.s     @doscan_select_30
       tst.l     D7
       bne.s     @doscan_select_32
       move.l    D6,A0
       addq.l    #1,D6
       move.b    D4,(A0)
@doscan_select_32:
       bra.s     @doscan_select_4
@doscan_select_30:
       bra.s     @doscan_select_5
@doscan_select_4:
       bra       @doscan_select_2
@doscan_select_5:
       cmp.l     #-1,D4
       beq.s     @doscan_select_34
       move.l    D4,-(A7)
       move.l    8(A6),-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       move.l    28(A6),A0
       subq.l    #1,(A0)
@doscan_select_34:
       tst.l     D7
       bne.s     @doscan_select_36
       move.l    D6,A0
       clr.b     (A0)
@doscan_select_36:
       addq.l    #1,D3
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #93,D0
       beq.s     @doscan_select_40
       bra       @doscan_select_36
@doscan_select_40:
       addq.l    #1,D3
       move.l    D3,D0
       movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
       unlk      A6
       rts
_scanflush:
       lea       @doscan_buf.L,A0
       move.l    A0,@doscan_lpbuf.L
       clr.b     @doscan_buf.L
       pea       -1
       jsr       _ungetch
       addq.w    #4,A7
       rts
_doscan:
       link      A6,#-120
       movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
       lea       @doscan_read.L,A3
       tst.l     8(A6)
       beq.s     doscan_1
       lea       8(A6),A0
       bra.s     doscan_2
doscan_1:
       clr.b     D0
       ext.w     D0
       ext.l     D0
       move.l    D0,A0
doscan_2:
       move.l    A0,D5
       clr.l     -28(A6)
       clr.l     D4
doscan_3:
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
       clr.b     D1
       and.l     #255,D1
       cmp.l     D1,D0
       beq       doscan_5
       clr.l     D6
       move.w    #0,A4
       cmp.l     #32,D3
       beq.s     doscan_8
       cmp.l     #9,D3
       beq.s     doscan_8
       cmp.l     #10,D3
       bne       doscan_6
doscan_8:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       cmp.l     #-1,D2
       bne.s     doscan_11
       tst.l     D4
       beq.s     doscan_13
       move.l    D4,D0
       bra.s     doscan_14
doscan_13:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_14:
       bra       doscan_15
doscan_11:
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #16,D0
       bne       doscan_8
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       bra       doscan_141
doscan_6:
       cmp.l     #37,D3
       bne       doscan_129
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
       clr.l     -20(A6)
       clr.l     D6
       clr.l     -24(A6)
       move.w    #32767,A2
       cmp.l     #42,D3
       bne.s     doscan_18
       moveq     #1,D6
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
doscan_18:
       move.l    D3,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       beq       doscan_24
       move.l    D3,D0
       sub.l     #48,D0
       move.l    D0,A2
doscan_22:
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       beq.s     doscan_24
       move.l    A2,-(A7)
       pea       10
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       move.l    D3,D1
       sub.l     #48,D1
       add.l     D1,D0
       move.l    D0,A2
       bra       doscan_22
doscan_24:
       cmp.l     #108,D3
       beq.s     doscan_27
       cmp.l     #76,D3
       bne.s     doscan_25
doscan_27:
       move.l    #1,-24(A6)
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
       bra.s     doscan_28
doscan_25:
       cmp.l     #104,D3
       bne.s     doscan_28
       move.l    #1,-20(A6)
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       move.l    D0,D3
doscan_28:
       cmp.l     #91,D3
       bne       doscan_30
       tst.l     D6
       bne.s     doscan_32
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
doscan_32:
       pea       -28(A6)
       move.l    D7,-(A7)
       move.l    D6,-(A7)
       move.l    A2,-(A7)
       move.l    12(A6),-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_select
       add.w     #24,A7
       move.l    D0,12(A6)
       tst.l     D6
       bne.s     doscan_34
       addq.l    #1,D4
doscan_34:
       bra       doscan_141
doscan_30:
       cmp.l     #110,D3
       bne.s     doscan_36
       tst.l     D6
       bne.s     doscan_38
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
       move.l    D7,A0
       move.l    -28(A6),(A0)
       addq.l    #1,D4
doscan_38:
       bra       doscan_141
doscan_36:
       cmp.l     #115,D3
       bne       doscan_40
       pea       -28(A6)
       move.l    D5,-(A7)
       jsr       @doscan_space
       addq.w    #8,A7
       move.l    D0,D2
       tst.l     D6
       bne.s     doscan_42
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
doscan_42:
       addq.l    #1,-28(A6)
doscan_44:
       move.l    A2,D0
       subq.w    #1,A2
       tst.l     D0
       beq       doscan_46
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #16,D0
       bne.s     doscan_47
       moveq     #1,D0
       bra.s     doscan_48
doscan_47:
       clr.l     D0
doscan_48:
       and.l     #255,D0
       beq.s     doscan_46
       cmp.l     #-1,D2
       beq.s     doscan_46
       move.w    #1,A4
       tst.l     D6
       bne.s     doscan_49
       move.l    D7,A0
       addq.l    #1,D7
       move.b    D2,(A0)
doscan_49:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       bra       doscan_44
doscan_46:
       tst.l     D6
       bne.s     doscan_53
       move.l    D7,A0
       clr.b     (A0)
       move.l    A4,D0
       beq.s     doscan_53
       addq.l    #1,D4
doscan_53:
       cmp.l     #-1,D2
       beq.s     doscan_57
       tst.l     D6
       bne.s     doscan_55
       move.l    A4,D0
       bne.s     doscan_55
doscan_57:
       tst.l     D4
       beq.s     doscan_58
       move.l    D4,D0
       bra.s     doscan_61
doscan_58:
       cmp.l     #-1,D2
       bne.s     doscan_60
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
       bra.s     doscan_61
doscan_60:
       move.l    D4,D0
doscan_61:
       bra       doscan_15
doscan_55:
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       bra       doscan_141
doscan_40:
       cmp.l     #99,D3
       bne       doscan_62
       tst.l     D6
       bne.s     doscan_64
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
doscan_64:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       move.l    A2,D0
       cmp.l     #32767,D0
       bne.s     doscan_66
       move.w    #1,A2
doscan_66:
       cmp.l     #-1,D2
       bne.s     doscan_68
       tst.l     D6
       bne.s     doscan_68
       subq.l    #1,D4
doscan_68:
       move.l    A2,D0
       subq.w    #1,A2
       tst.l     D0
       beq.s     doscan_72
       cmp.l     #-1,D2
       beq.s     doscan_72
       tst.l     D6
       bne.s     doscan_73
       move.l    D7,A0
       addq.l    #1,D7
       move.b    D2,(A0)
doscan_73:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       bra       doscan_68
doscan_72:
       cmp.l     #-1,D2
       bne.s     doscan_75
       tst.l     D4
       beq.s     doscan_77
       move.l    D4,D0
       bra.s     doscan_78
doscan_77:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_78:
       bra       doscan_15
doscan_75:
       tst.l     D6
       bne.s     doscan_79
       addq.l    #1,D4
doscan_79:
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       bra       doscan_141
doscan_62:
       cmp.l     #105,D3
       bne       doscan_84
       pea       -28(A6)
       move.l    D5,-(A7)
       jsr       @doscan_space
       addq.w    #8,A7
       move.l    D0,D2
       cmp.l     #48,D2
       bne       doscan_83
       move.w    #1,A4
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       move.l    D2,-(A7)
       jsr       _tolower
       addq.w    #4,A7
       cmp.l     #120,D0
       bne.s     doscan_85
       moveq     #120,D3
       bra.s     doscan_86
doscan_85:
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       moveq     #111,D3
doscan_86:
       addq.l    #1,-28(A6)
       bra.s     doscan_84
doscan_83:
       subq.l    #1,-28(A6)
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       moveq     #100,D3
doscan_84:
       cmp.l     #100,D3
       beq.s     doscan_89
       cmp.l     #117,D3
       beq.s     doscan_89
       cmp.l     #120,D3
       beq.s     doscan_89
       cmp.l     #111,D3
       bne       doscan_87
doscan_89:
       pea       -28(A6)
       move.l    D5,-(A7)
       jsr       @doscan_space
       addq.w    #8,A7
       move.l    D0,D2
       move.l    #10,-4(A6)
       cmp.l     #120,D3
       bne.s     doscan_90
       move.l    #16,-4(A6)
doscan_90:
       cmp.l     #111,D3
       bne.s     doscan_92
       move.l    #8,-4(A6)
doscan_92:
       tst.l     D6
       bne.s     doscan_94
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D7
doscan_94:
       clr.l     -32(A6)
       addq.l    #1,-28(A6)
       cmp.l     #117,D3
       beq.s     doscan_96
       cmp.l     #45,D2
       bne.s     doscan_96
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       move.l    #1,-32(A6)
       move.w    #1,A4
doscan_96:
       move.w    #0,A5
       cmp.l     #-1,D2
       bne.s     doscan_98
       tst.l     D4
       beq.s     doscan_100
       move.l    D4,D0
       bra.s     doscan_101
doscan_100:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_101:
       bra       doscan_15
doscan_98:
       move.l    A2,D0
       subq.w    #1,A2
       tst.l     D0
       beq       doscan_104
       cmp.l     #120,D3
       bne.s     doscan_106
       move.l    D2,-(A7)
       jsr       _toupper
       addq.w    #4,A7
       cmp.l     #65,D0
       blt.s     doscan_106
       move.l    D2,-(A7)
       jsr       _toupper
       addq.w    #4,A7
       cmp.l     #70,D0
       ble.s     doscan_105
doscan_106:
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       and.l     #255,D0
       beq       doscan_104
doscan_105:
       move.l    D2,D0
       addq.l    #1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       bne.s     doscan_107
       move.l    D2,-(A7)
       jsr       _toupper
       addq.w    #4,A7
       sub.l     #65,D0
       add.l     #10,D0
       add.l     #48,D0
       move.l    D0,D2
doscan_107:
       move.l    A5,-(A7)
       move.l    -4(A6),-(A7)
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       add.l     D2,D0
       sub.l     #48,D0
       move.l    D0,A5
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       move.w    #1,A4
       bra       doscan_98
doscan_104:
       cmp.l     #-1,D2
       beq.s     doscan_109
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       subq.l    #1,-28(A6)
       move.l    A4,D0
       bne.s     doscan_111
       move.l    D4,D0
       bra       doscan_15
doscan_111:
       bra.s     doscan_113
doscan_109:
       move.l    A4,D0
       bne.s     doscan_113
       tst.l     D4
       beq.s     doscan_115
       move.l    D4,D0
       bra.s     doscan_116
doscan_115:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_116:
       bra       doscan_15
doscan_113:
       tst.l     -32(A6)
       beq.s     doscan_117
       move.l    A5,D0
       neg.l     D0
       move.l    D0,A5
doscan_117:
       tst.l     D6
       bne.s     doscan_119
       tst.l     -24(A6)
       beq.s     doscan_121
       move.l    D7,A0
       move.l    A5,(A0)
       bra.s     doscan_124
doscan_121:
       tst.l     -20(A6)
       beq.s     doscan_123
       move.l    D7,A0
       move.w    A5,(A0)
       bra.s     doscan_124
doscan_123:
       move.l    D7,A0
       move.l    A5,(A0)
doscan_124:
       addq.l    #1,D4
doscan_119:
       cmp.l     #-1,D2
       bne.s     doscan_125
       tst.l     D4
       beq.s     doscan_127
       move.l    D4,D0
       bra.s     doscan_128
doscan_127:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_128:
       bra       doscan_15
doscan_125:
       bra       doscan_141
doscan_87:
       cmp.l     #37,D3
       bne       doscan_129
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       cmp.l     #-1,D2
       bne.s     doscan_131
       tst.l     D4
       beq.s     doscan_133
       move.l    D4,D0
       bra.s     doscan_134
doscan_133:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_134:
       bra       doscan_15
doscan_131:
       addq.l    #1,-28(A6)
       cmp.l     D3,D2
       beq.s     doscan_135
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       subq.l    #1,-28(A6)
       move.l    D4,D0
       bra       doscan_15
doscan_135:
       bra       doscan_141
doscan_129:
       move.l    D5,-(A7)
       jsr       (A3)
       addq.w    #4,A7
       move.l    D0,D2
       addq.l    #1,-28(A6)
       cmp.l     #-1,D2
       bne.s     doscan_137
       tst.l     D4
       beq.s     doscan_139
       move.l    D4,D0
       bra.s     doscan_140
doscan_139:
       moveq     #-1,D0
       ext.w     D0
       ext.l     D0
doscan_140:
       bra.s     doscan_15
doscan_137:
       cmp.l     D3,D2
       beq.s     doscan_141
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       jsr       @doscan_putback
       addq.w    #8,A7
       subq.l    #1,-28(A6)
       move.l    D4,D0
       bra.s     doscan_15
doscan_141:
       bra       doscan_3
doscan_5:
       move.l    D4,D0
doscan_15:
       movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
       unlk      A6
       rts
@doprint_copy:
       link      A6,#0
       move.l    8(A6),A0
       tst.l     (A0)
       beq.s     @doprint_copy_1
       move.l    12(A6),D0
       move.l    8(A6),A0
       move.l    (A0),A1
       addq.l    #1,(A0)
       move.b    D0,(A1)
       bra.s     @doprint_copy_2
@doprint_copy_1:
       move.l    12(A6),-(A7)
       jsr       _putch
       addq.w    #4,A7
@doprint_copy_2:
       unlk      A6
       rts
@doprint_getval:
       link      A6,#0
       movem.l   D2/D3,-(A7)
       move.l    8(A6),D3
       clr.l     D2
       move.l    D3,A0
       move.l    (A0),A0
       move.b    (A0),D0
       cmp.b     #42,D0
       bne.s     @doprint_getval_1
       move.l    12(A6),A0
       move.l    (A0),A1
       addq.l    #4,(A0)
       move.l    (A1),D2
       move.l    D3,A0
       addq.l    #1,(A0)
       bra       @doprint_getval_5
@doprint_getval_1:
       moveq     #1,D0
       move.l    D3,A0
       move.l    (A0),A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       add.l     D1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       beq.s     @doprint_getval_5
       move.l    D2,-(A7)
       pea       10
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       move.l    D3,A0
       move.l    (A0),A1
       addq.l    #1,(A0)
       move.b    (A1),D1
       ext.w     D1
       ext.l     D1
       add.l     D1,D0
       sub.l     #48,D0
       move.l    D0,D2
       bra       @doprint_getval_1
@doprint_getval_5:
       move.l    D2,D0
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
_doprint:
       link      A6,#-52
       movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
       lea       8(A6),A2
       lea       @doprint_copy.L,A3
       lea       _ultoa.L,A4
       clr.l     D6
doprint_1:
       move.l    12(A6),A0
       tst.b     (A0)
       beq       doprint_3
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #37,D0
       beq.s     doprint_4
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_2
doprint_4:
       addq.l    #1,12(A6)
       clr.b     -45(A6)
       clr.b     -46(A6)
       clr.b     -48(A6)
       clr.b     -49(A6)
       clr.b     -50(A6)
       clr.b     -51(A6)
       clr.l     -4(A6)
       moveq     #-1,D5
       lea       -36(A6),A0
       move.l    A0,D3
       move.l    A0,D2
doprint_6:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #43,D0
       beq.s     doprint_12
       bgt.s     doprint_15
       cmp.l     #35,D0
       beq       doprint_14
       bgt       doprint_9
       cmp.l     #32,D0
       beq.s     doprint_13
       bra.s     doprint_9
doprint_15:
       cmp.l     #45,D0
       beq.s     doprint_11
       bra.s     doprint_9
doprint_11:
       move.b    #1,-51(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_12:
       move.b    #1,-50(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_13:
       move.b    #1,-49(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_14:
       move.b    #1,-48(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_9:
       bra.s     doprint_8
doprint_7:
       bra       doprint_6
doprint_8:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #48,D0
       bne.s     doprint_16
       addq.l    #1,12(A6)
       move.b    #1,-46(A6)
doprint_16:
       pea       16(A6)
       pea       12(A6)
       jsr       @doprint_getval
       addq.w    #8,A7
       move.l    D0,A5
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #46,D0
       bne.s     doprint_18
       addq.l    #1,12(A6)
       pea       16(A6)
       pea       12(A6)
       jsr       @doprint_getval
       addq.w    #8,A7
       move.l    D0,D5
doprint_18:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #108,D0
       bne.s     doprint_20
       addq.l    #1,12(A6)
       move.b    #1,-45(A6)
doprint_20:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #111,D0
       beq       doprint_27
       bgt.s     doprint_33
       cmp.l     #100,D0
       beq       doprint_24
       bgt.s     doprint_34
       cmp.l     #99,D0
       beq       doprint_30
       bgt       doprint_22
       cmp.l     #88,D0
       beq       doprint_28
       bra       doprint_22
doprint_34:
       cmp.l     #105,D0
       beq.s     doprint_24
       bra       doprint_22
doprint_33:
       cmp.l     #117,D0
       beq       doprint_26
       bgt.s     doprint_35
       cmp.l     #115,D0
       beq       doprint_31
       bra       doprint_22
doprint_35:
       cmp.l     #120,D0
       beq       doprint_28
       bra       doprint_22
doprint_24:
       tst.b     -45(A6)
       beq.s     doprint_36
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       _ltoa
       add.w     #12,A7
       bra.s     doprint_37
doprint_36:
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       _ltoa
       add.w     #12,A7
doprint_37:
       bra       doprint_23
doprint_26:
       tst.b     -45(A6)
       beq.s     doprint_38
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_39
doprint_38:
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_39:
       bra       doprint_23
doprint_27:
       tst.b     -45(A6)
       beq.s     doprint_40
       pea       8
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_41
doprint_40:
       pea       8
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_41:
       bra       doprint_23
doprint_28:
       tst.b     -45(A6)
       beq.s     doprint_42
       pea       16
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_43
doprint_42:
       pea       16
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_43:
       bra       doprint_23
doprint_30:
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D0
       move.l    D2,A0
       addq.l    #1,D2
       move.b    D0,(A0)
       move.l    D2,A0
       clr.b     (A0)
       move.l    A5,D0
       beq.s     doprint_44
       move.l    A5,D0
       bra.s     doprint_45
doprint_44:
       moveq     #1,D0
       ext.w     D0
       ext.l     D0
doprint_45:
       move.l    D0,D5
       bra       doprint_23
doprint_31:
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D3
       cmp.l     #-1,D5
       bne.s     doprint_46
       move.l    D3,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.l    D0,D5
doprint_46:
       bra.s     doprint_23
doprint_22:
       move.l    12(A6),A0
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       move.l    D2,A0
       clr.b     (A0)
doprint_23:
       move.l    D3,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.b    D0,D4
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #115,D0
       bne.s     doprint_48
       cmp.l     #0,D5
       blt.s     doprint_48
       ext.w     D4
       ext.l     D4
       cmp.l     D5,D4
       ble.s     doprint_50
       move.l    D5,D0
       bra.s     doprint_51
doprint_50:
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
doprint_51:
       move.b    D0,D4
doprint_48:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #88,D0
       bne       doprint_56
       lea       -36(A6),A0
       move.l    A0,D2
doprint_54:
       move.l    D2,A0
       tst.b     (A0)
       beq.s     doprint_56
       move.l    D2,A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       jsr       _toupper
       addq.w    #4,A7
       move.l    D2,A0
       move.b    D0,(A0)
       addq.l    #1,D2
       bra       doprint_54
doprint_56:
       moveq     #0,D7
       lea       -44(A6),A0
       move.l    A0,D2
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #100,D0
       beq.s     doprint_59
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #105,D0
       bne       doprint_65
doprint_59:
       move.b    -50(A6),D0
       ext.w     D0
       ext.l     D0
       tst.l     D0
       bne.s     doprint_62
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne       doprint_60
doprint_62:
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne.s     doprint_63
       move.l    D3,A0
       addq.l    #1,D3
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       subq.b    #1,D4
       bra.s     doprint_64
doprint_63:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #43,(A0)
doprint_64:
       addq.l    #1,D7
       bra       doprint_65
doprint_60:
       tst.b     -49(A6)
       beq.s     doprint_65
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne.s     doprint_67
       move.l    D3,A0
       addq.l    #1,D3
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       subq.b    #1,D4
       bra.s     doprint_68
doprint_67:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #32,(A0)
doprint_68:
       addq.l    #1,D7
doprint_65:
       tst.b     -48(A6)
       beq       doprint_77
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #111,D0
       beq.s     doprint_73
       bgt.s     doprint_76
       cmp.l     #88,D0
       beq.s     doprint_73
       bra       doprint_77
doprint_76:
       cmp.l     #120,D0
       beq.s     doprint_73
       bra       doprint_77
doprint_73:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #48,(A0)
       addq.l    #1,D7
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #120,D0
       beq.s     doprint_79
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #88,D0
       bne.s     doprint_77
doprint_79:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #120,(A0)
       addq.l    #1,D7
doprint_77:
       move.l    D2,A0
       clr.b     (A0)
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #105,D0
       beq       doprint_82
       bgt.s     doprint_93
       cmp.l     #99,D0
       beq       doprint_96
       bgt.s     doprint_94
       cmp.l     #88,D0
       beq       doprint_82
       bgt       doprint_80
       cmp.l     #69,D0
       beq       doprint_82
       bra       doprint_80
doprint_94:
       cmp.l     #101,D0
       beq       doprint_82
       bgt       doprint_80
       cmp.l     #100,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_93:
       cmp.l     #117,D0
       beq.s     doprint_82
       bgt.s     doprint_95
       cmp.l     #115,D0
       beq       doprint_96
       bgt       doprint_80
       cmp.l     #111,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_95:
       cmp.l     #120,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_82:
       tst.b     -46(A6)
       beq.s     doprint_96
       tst.b     -51(A6)
       bne.s     doprint_96
       move.l    A5,D0
       sub.l     D7,D0
       ext.w     D4
       ext.l     D4
       sub.l     D4,D0
       move.l    D0,-4(A6)
doprint_96:
       move.l    -4(A6),D0
       cmp.l     #0,D0
       bge.s     doprint_98
       clr.l     -4(A6)
doprint_98:
       tst.b     -51(A6)
       bne       doprint_104
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
       add.l     -4(A6),D0
       add.l     D7,D0
       move.b    D0,-47(A6)
doprint_102:
       move.b    -47(A6),D0
       ext.w     D0
       ext.l     D0
       move.l    A5,D1
       subq.w    #1,A5
       cmp.l     D1,D0
       bge.s     doprint_104
       pea       32
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_102
doprint_104:
       lea       -44(A6),A0
       move.l    A0,D2
doprint_105:
       move.l    D2,A0
       tst.b     (A0)
       beq.s     doprint_107
       move.l    D2,A0
       addq.l    #1,D2
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_105
doprint_107:
       move.l    -4(A6),D0
       move.b    D0,-47(A6)
doprint_108:
       move.b    -47(A6),D0
       subq.b    #1,-47(A6)
       tst.b     D0
       beq.s     doprint_110
       pea       48
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_108
doprint_110:
       move.l    D3,A0
       tst.b     (A0)
       beq       doprint_113
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #115,D0
       beq.s     doprint_116
       bgt.s     doprint_119
       cmp.l     #99,D0
       beq.s     doprint_116
       bra.s     doprint_119
doprint_116:
       move.l    D5,D0
       subq.l    #1,D5
       cmp.l     #0,D0
       bgt.s     doprint_119
       bra.s     doprint_115
doprint_119:
       move.l    D3,A0
       addq.l    #1,D3
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra.s     doprint_112
doprint_115:
       bra.s     doprint_113
doprint_112:
       bra       doprint_110
doprint_113:
       tst.b     -51(A6)
       beq       doprint_125
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
       add.l     -4(A6),D0
       add.l     D7,D0
       move.b    D0,-47(A6)
doprint_123:
       move.b    -47(A6),D0
       ext.w     D0
       ext.l     D0
       move.l    A5,D1
       subq.w    #1,A5
       cmp.l     D1,D0
       bge.s     doprint_125
       pea       32
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       subq.l    #1,D6
       bra       doprint_123
doprint_125:
       bra.s     doprint_81
doprint_80:
       move.l    12(A6),A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
doprint_81:
       addq.l    #1,12(A6)
doprint_2:
       bra       doprint_1
doprint_3:
       tst.l     (A2)
       beq.s     doprint_126
       clr.b     D1
       and.l     #255,D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
doprint_126:
       move.l    D6,D0
       movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
       unlk      A6
       rts
ULMUL:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       bra.s   lmul_3
LMUL:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       tst.l   D0
       bpl.s   lmul_1
       neg.l   D0
       tst.l   D1
       bpl.s   lmul_2
       neg.l   D1
       bra.s   lmul_3
lmul_1:
       tst.l   D1
       bpl.s   lmul_3
       neg.l   D1
lmul_2:
       bsr.s   domul
       neg.l   D1
       negx.l  D0
       bra.s   lmul_4
lmul_3:
       bsr.s   domul
lmul_4:
       move.l  D1,8(A6)
       movem.l (A7)+,D0/D1
       unlk    A6
       rts
domul:
       cmpi.l  #$FFFF,D1
       bhi.s   domul_1
       cmpi.l  #$FFFF,D0
       bhi.s   domul_2
       mulu    D0,D1
       rts
domul_1:
       cmpi.l  #$FFFF,D0
       bhi.s   domul_4
       bra.s   domul_3
domul_2
       exg     D0,D1
domul_3:
       move.l  D2,-(A7)
       move.l  D1,D2
       swap    D2
       mulu    D0,D1
       mulu    D0,D2
       swap    D2
       clr.w   D2
       add.l   D2,D1
       move.l  (A7)+,D2
       rts
domul_4:
       movem.l D2/D3,-(A7)
       move.l  D1,D2
       move.l  D1,D3
       mulu    D0,D1
       swap    D2
       mulu    D0,D2
       swap    D0
       mulu    D0,D3
       add.l   D3,D2
       swap    D2
       clr.w   D2
       add.l   D2,D1
       movem.l (A7)+,D2/D3
       rts
_gets:
       link      A6,#0
       movem.l   D2/D3/D4/A2,-(A7)
       lea       _putch.L,A2
       move.l    8(A6),D4
       move.l    D4,D2
gets_1:
       jsr       _getch
       move.l    D0,D3
       cmp.l     #10,D0
       beq       gets_3
       cmp.l     #8,D3
       beq.s     gets_4
       move.l    D2,A0
       addq.l    #1,D2
       move.b    D3,(A0)
       ext.w     D3
       ext.l     D3
       move.l    D3,-(A7)
       jsr       (A2)
       addq.w    #4,A7
       bra.s     gets_6
gets_4:
       cmp.l     D4,D2
       bls.s     gets_6
       pea       8
       jsr       (A2)
       addq.w    #4,A7
       pea       32
       jsr       (A2)
       addq.w    #4,A7
       pea       8
       jsr       (A2)
       addq.w    #4,A7
       subq.l    #1,D2
gets_6:
       bra       gets_1
gets_3:
       pea       10
       jsr       (A2)
       addq.w    #4,A7
       move.l    D2,A0
       clr.b     (A0)
       move.l    D4,D0
       movem.l   (A7)+,D2/D3/D4/A2
       unlk      A6
       rts
_tolower:
       move.l    4(A7),D0
       cmp.l     #'A',D0
       blt.s     tolower_1
       cmp.l     #'Z',D0
       bgt.s     tolower_1
       add.l     #$20,D0
tolower_1:
       rts
_strcat:
       move.l    (4,A7),A0
       move.l    (8,A7),A1
       move.l    A0,D0
strcat_1:
       tst.b     (A0)+
       bne.s     strcat_1
       subq.l    #1,A0
strcat_2:
       move.b    (A1)+,(A0)+
       bne.s     strcat_2
       rts
_toupper:
       move.l    4(A7),D0
       cmp.l     #'a',D0
       blt.s     toupper_1
       cmp.l     #'z',D0
       bgt.s     toupper_1
       sub.l     #$20,D0
toupper_1:
       rts
_ungetch:
       link      A6,#0
       move.l    8(A6),__ungetbuf.L
       move.l    8(A6),D0
       unlk      A6
       rts
@itoa_convert:
       link      A6,#0
       movem.l   D2/D3/D4/D5,-(A7)
       move.l    8(A6),D2
       move.l    16(A6),D3
       move.l    12(A6),D5
       move.l    D5,-(A7)
       move.l    D3,-(A7)
       jsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,D4
       cmp.l     D3,D5
       blo.s     @itoa_convert_1
       move.l    D3,-(A7)
       move.l    D5,-(A7)
       move.l    D3,-(A7)
       jsr       ULDIV
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    D1,-(A7)
       move.l    D2,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D2
@itoa_convert_1:
       cmp.l     #9,D4
       bgt.s     @itoa_convert_3
       move.l    D4,D0
       moveq     #48,D1
       and.l     #255,D1
       add.l     D1,D0
       bra.s     @itoa_convert_4
@itoa_convert_3:
       move.l    D4,D0
       moveq     #97,D1
       and.l     #255,D1
       add.l     D1,D0
       sub.l     #10,D0
@itoa_convert_4:
       move.l    D2,A0
       move.b    D0,(A0)
       move.l    D2,D0
       addq.l    #1,D0
       movem.l   (A7)+,D2/D3/D4/D5
       unlk      A6
       rts
_ltoa:
       link      A6,#0
       movem.l   D2/D3/D4/D5,-(A7)
       move.l    8(A6),D2
       move.l    12(A6),D3
       move.l    16(A6),D5
       move.l    D3,D4
       cmp.l     #2,D5
       blt.s     ltoa_3
       cmp.l     #36,D5
       ble.s     ltoa_1
ltoa_3:
       move.l    D3,D0
       bra       ltoa_4
ltoa_1:
       cmp.l     #10,D5
       bne       ltoa_5
       cmp.l     #0,D2
       bge.s     ltoa_5
       move.l    D2,D0
       neg.l     D0
       move.l    D0,D2
       cmp.l     #0,D2
       bge.s     ltoa_7
       pea       @itoa_1.L
       move.l    D3,-(A7)
       jsr       _strcpy
       addq.w    #8,A7
       move.l    D3,D0
       bra.s     ltoa_4
ltoa_7:
       move.l    D4,A0
       addq.l    #1,D4
       move.b    #45,(A0)
ltoa_5:
       move.l    D5,-(A7)
       move.l    D2,-(A7)
       move.l    D4,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D4
       move.l    D4,A0
       clr.b     (A0)
       move.l    D3,D0
ltoa_4:
       movem.l   (A7)+,D2/D3/D4/D5
       unlk      A6
       rts
_ultoa:
       link      A6,#0
       movem.l   D2/D3/D4,-(A7)
       move.l    16(A6),D3
       move.l    12(A6),D4
       move.l    D4,D2
       cmp.l     #2,D3
       blt.s     ultoa_3
       cmp.l     #36,D3
       ble.s     ultoa_1
ultoa_3:
       move.l    D4,D0
       bra.s     ultoa_4
ultoa_1:
       move.l    D3,-(A7)
       move.l    8(A6),-(A7)
       move.l    D2,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D2
       move.l    D2,A0
       clr.b     (A0)
       move.l    D4,D0
ultoa_4:
       movem.l   (A7)+,D2/D3/D4
       unlk      A6
       rts
_itoa:
       link      A6,#0
       move.l    16(A6),-(A7)
       move.l    12(A6),-(A7)
       move.l    8(A6),-(A7)
       jsr       _ltoa
       add.w     #12,A7
       unlk      A6
       rts
_strlen:
       move.l    (4,A7),A0
       move.l    A0,A1
strlen_1:
       tst.b     (A1)+
       bne       strlen_1
       move.l    A1,D0
       sub.l     A0,D0
       subq.l    #1,D0
       rts
_putch:
       link      A6,#0
       move.l    D2,-(A7)
       move.l    8(A6),D2
       cmp.l     #10,D2
       bne.s     putch_1
       pea       13
       jsr       __putch
       addq.w    #4,A7
putch_1:
       move.l    D2,-(A7)
       jsr       __putch
       addq.w    #4,A7
       move.l    D2,D0
       move.l    (A7)+,D2
       unlk      A6
       rts
_getch:
       move.l    D2,-(A7)
       move.l    __ungetbuf.L,D2
       move.l    __ungetbuf.L,D0
       cmp.l     #-1,D0
       beq.s     getch_1
       move.l    #-1,__ungetbuf.L
       bra.s     getch_3
getch_1:
       jsr       __getch
       move.l    D0,D2
       cmp.l     #13,D0
       bne.s     getch_3
       moveq     #10,D2
getch_3:
       move.l    D2,D0
       move.l    (A7)+,D2
       rts
_strcpy:
       move.l    (4,A7),A0
       move.l    (8,A7),A1
       move.l    A0,D0
strcpy_1:
       move.b    (A1)+,(A0)+
       bne.s     strcpy_1
       rts
       section   const

@memtest_1:
       dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
       dc.b      114,32,97,32,110,117,109,98,101,114,32,116,111
       dc.b      32,99,104,111,111,115,101,32,111,110,101,32
       dc.b      111,102,32,116,104,101,32,102,111,108,108,111
       dc.b      119,105,110,103,32,116,101,115,116,32,111,112
       dc.b      116,105,111,110,115,58,13,10,49,32,45,32,66
       dc.b      121,116,101,115,13,10,50,32,45,32,87,111,114
       dc.b      100,115,13,10,51,32,45,32,76,111,110,103,32
       dc.b      87,111,114,100,115,13,10,0
@memtest_2:
       dc.b      37,100,0
@memtest_3:
       dc.b      13,10,73,110,118,97,108,105,100,32,83,101,108
       dc.b      101,99,116,105,111,110,13,10,0
@memtest_4:
       dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
       dc.b      108,101,99,116,101,100,32,116,101,115,116,32
       dc.b      111,112,116,105,111,110,32,66,89,84,69,83,13
       dc.b      10,0
@memtest_5:
       dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
       dc.b      108,101,99,116,101,100,32,116,101,115,116,32
       dc.b      111,112,116,105,111,110,32,87,79,82,68,83,13
       dc.b      10,0
@memtest_6:
       dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
       dc.b      108,101,99,116,101,100,32,116,101,115,116,32
       dc.b      111,112,116,105,111,110,32,76,79,78,71,32,87
       dc.b      79,82,68,83,13,10,0
@memtest_7:
       dc.b      13,10,69,120,99,101,112,116,105,111,110,32,45
       dc.b      32,105,110,118,97,108,105,100,32,116,101,115
       dc.b      116,32,111,112,116,105,111,110,13,10,0
@memtest_8:
       dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
       dc.b      114,32,97,32,110,117,109,98,101,114,32,116,111
       dc.b      32,99,104,111,111,115,101,32,111,110,101,32
       dc.b      111,102,32,116,104,101,32,102,111,108,108,111
       dc.b      119,105,110,103,32,116,101,115,116,32,112,97
       dc.b      116,116,101,114,110,115,58,13,10,49,32,45,32
       dc.b      53,53,13,10,50,32,45,32,65,65,13,10,51,32,45
       dc.b      32,70,70,13,10,52,32,45,32,48,48,13,10,0
@memtest_9:
       dc.b      37,100,0
@memtest_10:
       dc.b      13,10,73,110,118,97,108,105,100,32,83,101,108
       dc.b      101,99,116,105,111,110,13,10,0
@memtest_11:
       dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
       dc.b      108,101,99,116,101,100,32,116,101,115,116,32
       dc.b      112,97,116,116,101,114,110,32,53,53,13,10,0
@memtest_12:
       dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
       dc.b      108,101,99,116,101,100,32,116,101,115,116,32
       dc.b      112,97,116,116,101,114,110,32,65,65,13,10,0
@memtest_13:
       dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
       dc.b      108,101,99,116,101,100,32,116,101,115,116,32
       dc.b      112,97,116,116,101,114,110,32,70,70,13,10,0
@memtest_14:
       dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
       dc.b      108,101,99,116,101,100,32,116,101,115,116,32
       dc.b      112,97,116,116,101,114,110,32,48,48,13,10,0
@memtest_15:
       dc.b      13,10,69,120,99,101,112,116,105,111,110,32,45
       dc.b      32,105,110,118,97,108,105,100,32,116,101,115
       dc.b      116,32,112,97,116,116,101,114,110,13,10,0
@memtest_16:
       dc.b      13,10,69,120,99,101,112,116,105,111,110,32,45
       dc.b      32,99,111,117,108,100,32,110,111,116,32,103
       dc.b      101,110,101,114,97,116,101,32,119,114,105,116
       dc.b      101,95,100,97,116,97,13,10,0
@memtest_17:
       dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
       dc.b      114,32,97,32,115,116,97,114,116,105,110,103
       dc.b      32,97,100,100,114,101,115,115,32,102,114,111
       dc.b      109,32,48,56,48,50,48,48,48,48,32,116,111,32
       dc.b      48,56,48,51,48,48,48,48,13,10,0
@memtest_18:
       dc.b      37,100,0
@memtest_19:
       dc.b      13,10,83,116,97,114,116,32,97,100,100,114,101
       dc.b      115,115,32,105,115,32,105,110,118,97,108,105
       dc.b      100,13,10,0
@memtest_20:
       dc.b      13,10,70,111,114,32,119,111,114,100,115,32,111
       dc.b      114,32,108,111,110,103,32,119,111,114,100,115
       dc.b      44,32,112,108,101,97,115,101,32,101,110,116
       dc.b      101,114,32,97,110,32,101,118,101,110,32,110
       dc.b      117,109,98,101,114,101,100,32,97,100,100,114
       dc.b      101,115,115,13,10,0
@memtest_21:
       dc.b      13,10,84,104,101,32,99,104,111,115,101,110,32
       dc.b      115,116,97,114,116,105,110,103,32,97,100,100
       dc.b      114,101,115,115,32,105,115,58,32,37,120,0
@memtest_22:
       dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
       dc.b      114,32,97,110,32,101,110,100,32,97,100,100,114
       dc.b      101,115,115,32,102,114,111,109,32,37,120,32
       dc.b      116,111,32,48,56,48,51,48,48,48,48,13,10,0
@memtest_23:
       dc.b      37,100,0
@memtest_24:
       dc.b      13,10,69,110,100,32,97,100,100,114,101,115,115
       dc.b      32,105,115,32,105,110,118,97,108,105,100,13
       dc.b      10,0
@memtest_25:
       dc.b      13,10,70,111,114,32,119,111,114,100,115,32,111
       dc.b      114,32,108,111,110,103,32,119,111,114,100,115
       dc.b      44,32,112,108,101,97,115,101,32,101,110,116
       dc.b      101,114,32,97,110,32,101,118,101,110,32,110
       dc.b      117,109,98,101,114,101,100,32,97,100,100,114
       dc.b      101,115,115,13,10,0
@memtest_26:
       dc.b      13,10,84,104,101,32,99,104,111,115,101,110,32
       dc.b      101,110,100,105,110,103,32,97,100,100,114,101
       dc.b      115,115,32,105,115,58,32,37,120,0
@memtest_27:
       dc.b      13,10,87,114,105,116,105,110,103,32,37,120,32
       dc.b      105,110,116,111,32,97,100,100,114,101,115,115
       dc.b      32,37,120,13,10,0
@memtest_28:
       dc.b      13,10,87,114,105,116,105,110,103,32,99,111,109
       dc.b      112,108,101,116,101,100,46,32,87,105,108,108
       dc.b      32,110,111,119,32,115,116,97,114,116,32,114
       dc.b      101,97,100,105,110,103,46,13,10,0
@memtest_29:
       dc.b      13,10,65,110,32,69,114,114,111,114,32,104,97
       dc.b      115,32,111,99,99,117,114,114,101,100,58,32,100
       dc.b      97,116,97,32,97,116,32,97,100,100,114,101,115
       dc.b      115,32,37,120,32,101,120,112,101,99,116,101
       dc.b      100,32,116,111,32,98,101,32,37,120,44,32,105
       dc.b      110,115,116,101,97,100,32,105,115,32,114,101
       dc.b      97,100,105,110,103,32,37,120,0
@memtest_30:
       dc.b      13,10,77,101,109,111,114,121,32,116,101,115
       dc.b      116,32,102,97,105,108,101,100,46,13,10,0
@memtest_31:
       dc.b      13,10,82,101,97,100,105,110,103,32,100,97,116
       dc.b      97,32,118,97,108,117,101,32,37,120,32,102,114
       dc.b      111,109,32,97,100,100,114,101,115,115,32,37
       dc.b      120,13,10,0
@doscan_1:
       dc.b      10,0
__ctype:
       dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
       dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
       dc.b      64,64,64,208,160,160,160,160,160,160,160,160
       dc.b      160,160,160,160,160,160,160,140,140,140,140
       dc.b      140,140,140,140,140,140,160,160,160,160,160
       dc.b      160,160,138,138,138,138,138,138,130,130,130
       dc.b      130,130,130,130,130,130,130,130,130,130,130
       dc.b      130,130,130,130,130,130,160,160,160,160,160
       dc.b      160,137,137,137,137,137,137,129,129,129,129
       dc.b      129,129,129,129,129,129,129,129,129,129,129
       dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
@itoa_1:
       dc.b      45,50,49,52,55,52,56,51,54,52,56,0
       section   data
                align
DataStart       equ       *

*********************************************************************************************************
* Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
* to ram as part of the CStart routine in this file
*********************************************************************************************************

@doscan_lpbuf:
       dc.l      @doscan_buf
       section   bss
                align
DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it

*********************************************************************************************************
* Section for Uninitialised Data held in ROM as constants
*********************************************************************************************************

                org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup


bss             org       bss

*********************************************************************************************************
* Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
* install the exception handler using the C function InstallExceptionHandler()
*********************************************************************************************************



VInitialSP       ds.l    1      dummy as we can't really install a handler for this
VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
VBusError        ds.l    1      storage for address of Bus Error Handler
VAddressError    ds.l    1      storage for address of Address Error Handler
VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
VDividebyZero    ds.l    1      storage for address of divide by zero handler
VCheck           ds.l    1      ditto
VTrapV           ds.l    1      ditto
VPrivilege       ds.l    1      ditto
VTrace           ds.l    1
VLine1010emul    ds.l    1
VLine1111emul    ds.l    1
VUnassigned1     ds.l    1
VUnassigned2     ds.l    1
VUnassigned3     ds.l    1
VUninit_IRQ      ds.l    1
VUnassigned4     ds.l    1
VUnassigned5     ds.l    1
VUnassigned6     ds.l    1
VUnassigned7     ds.l    1
VUnassigned8     ds.l    1
VUnassigned9     ds.l    1
VUnassigned10    ds.l    1
VUnassigned11    ds.l    1
VSpuriousIRQ     ds.l    1

* Interrupt handlers Vector 25-31
VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()

* Trap Handler vectors 32-47
VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()

* the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here

***********************************************************************************************************
* Other Variables
***********************************************************************************************************
*__DebugA5       ds.l    1
*__UserA5        ds.l    1

***********************************************************************************************************
__ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
__allocp:       ds.l    0       ; start of allocation units
__heap:         ds.l    0       ; pointers for malloc functions

*__himem:       ds.l    himem            ; highest memory location + 1
*__stklen:      ds.l    stklen           ; default stack size

*********************************************************************************************************
* Section for Heap
*********************************************************************************************************

@doscan_buf:
       ds.b      80
       section   heap
                align
bssEnd          equ *                   end of storage space for unitialised variables
*                                       we have to copy all initialised variable from rom to here at startup
heap   equ       *
                 align
