680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 29 Feb 2024      Time: 19:27:04          Source: C:\M68K\M68KDEBUG_PROJECT_LAB1\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0546 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2CF0      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  236C      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68K\PROGRAMS\DEBUGMONITORCODE\M68KDEBUGND.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; #define   Enable_SPI_CS()             SPI_CS = 0xFE
                     478   ; #define   Disable_SPI_CS()            SPI_CS = 0xFF
                     479   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     480   ; unsigned int i, x, y, z, PortA_Count;
                     481   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     482   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     483   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     484   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     485   ; unsigned int PC, SSP, USP ;
                     486   ; unsigned short int SR;
                     487   ; // Breakpoint variables
                     488   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     489   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     490   ; unsigned int BreakPointSetOrCleared[8] ;
                     491   ; unsigned int InstructionSize ;
                     492   ; // watchpoint variables
                     493   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     494   ; unsigned int WatchPointSetOrCleared[8] ;
                     495   ; char WatchPointString[8][100] ;
                     496   ; char    TempString[100] ;
                     497   ; /************************************************************************************
                     498   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     499   ; ************************************************************************************/
                     500   ; void Wait1ms(void)
                     501   ; {
                     502   _Wait1ms:
00000932  2F02       503          move.l    D2,-(A7)
                     504   ; long int  i ;
                     505   ; for(i = 0; i < 1000; i ++)
00000934  4282       506          clr.l     D2
                     507   Wait1ms_1:
00000936  0C82 0000  508          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       509          bge.s     Wait1ms_3
0000093E  5282       510          addq.l    #1,D2
00000940  60F4       511          bra       Wait1ms_1
                     512   Wait1ms_3:
00000942  241F       513          move.l    (A7)+,D2
00000944  4E75       514          rts
                     515   ; ;
                     516   ; }
                     517   ; /************************************************************************************
                     518   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     519   ; **************************************************************************************/
                     520   ; void Wait3ms(void)
                     521   ; {
                     522   _Wait3ms:
00000946  2F02       523          move.l    D2,-(A7)
                     524   ; int i ;
                     525   ; for(i = 0; i < 3; i++)
00000948  4282       526          clr.l     D2
                     527   Wait3ms_1:
0000094A  0C82 0000  528          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       529          bge.s     Wait3ms_3
                     530   ; Wait1ms() ;
00000952  4EB8 0932  531          jsr       _Wait1ms
00000956  5282       532          addq.l    #1,D2
00000958  60F0       533          bra       Wait3ms_1
                     534   Wait3ms_3:
0000095A  241F       535          move.l    (A7)+,D2
0000095C  4E75       536          rts
                     537   ; }
                     538   ; /*********************************************************************************************
                     539   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     540   ; *********************************************************************************************/
                     541   ; void Init_LCD(void)
                     542   ; {
                     543   _Init_LCD:
                     544   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  545          move.b    #12,4194336
00000962  0040 0020 
                     546   ; Wait3ms() ;
00000966  4EB8 0946  547          jsr       _Wait3ms
                     548   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  549          move.b    #56,4194336
0000096E  0040 0020 
                     550   ; Wait3ms() ;
00000972  4EB8 0946  551          jsr       _Wait3ms
00000976  4E75       552          rts
                     553   ; }
                     554   ; /******************************************************************************
                     555   ; *subroutine to output a single character held in d1 to the LCD display
                     556   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     557   ; *current cursor position
                     558   ; *******************************************************************************/
                     559   ; void Outchar(int c)
                     560   ; {
                     561   _Outchar:
00000978  4E56 0000  562          link      A6,#0
                     563   ; LCDdata = (char)(c);
0000097C  202E 0008  564          move.l    8(A6),D0
00000980  13C0 0040  565          move.b    D0,4194338
00000984  0022      
                     566   ; Wait1ms() ;
00000986  4EB8 0932  567          jsr       _Wait1ms
0000098A  4E5E       568          unlk      A6
0000098C  4E75       569          rts
                     570   ; }
                     571   ; /**********************************************************************************
                     572   ; *subroutine to output a message at the current cursor position of the LCD display
                     573   ; ************************************************************************************/
                     574   ; void OutMess(char *theMessage)
                     575   ; {
                     576   _OutMess:
0000098E  4E56 FFFC  577          link      A6,#-4
                     578   ; char c ;
                     579   ; while((c = *theMessage++) != (char)(0))
                     580   OutMess_1:
00000992  206E 0008  581          move.l    8(A6),A0
00000996  52AE 0008  582          addq.l    #1,8(A6)
0000099A  1D50 FFFF  583          move.b    (A0),-1(A6)
0000099E  1010       584          move.b    (A0),D0
000009A0  6712       585          beq.s     OutMess_3
                     586   ; Outchar(c) ;
000009A2  122E FFFF  587          move.b    -1(A6),D1
000009A6  4881       588          ext.w     D1
000009A8  48C1       589          ext.l     D1
000009AA  2F01       590          move.l    D1,-(A7)
000009AC  4EB8 0978  591          jsr       _Outchar
000009B0  584F       592          addq.w    #4,A7
000009B2  60DE       593          bra       OutMess_1
                     594   OutMess_3:
000009B4  4E5E       595          unlk      A6
000009B6  4E75       596          rts
                     597   ; }
                     598   ; /******************************************************************************
                     599   ; *subroutine to clear the line by issuing 24 space characters
                     600   ; *******************************************************************************/
                     601   ; void Clearln(void)
                     602   ; {
                     603   _Clearln:
000009B8  2F02       604          move.l    D2,-(A7)
                     605   ; unsigned char i ;
                     606   ; for(i = 0; i < 24; i ++)
000009BA  4202       607          clr.b     D2
                     608   Clearln_1:
000009BC  0C02 0018  609          cmp.b     #24,D2
000009C0  640E       610          bhs.s     Clearln_3
                     611   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  612          pea       32
000009C6  4EB8 0978  613          jsr       _Outchar
000009CA  584F       614          addq.w    #4,A7
000009CC  5202       615          addq.b    #1,D2
000009CE  60EC       616          bra       Clearln_1
                     617   Clearln_3:
000009D0  241F       618          move.l    (A7)+,D2
000009D2  4E75       619          rts
                     620   ; }
                     621   ; /******************************************************************************
                     622   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     623   ; *******************************************************************************/
                     624   ; void Oline0(char *theMessage)
                     625   ; {
                     626   _Oline0:
000009D4  4E56 0000  627          link      A6,#0
                     628   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  629          move.b    #128,4194336
000009DC  0040 0020 
                     630   ; Wait3ms();
000009E0  4EB8 0946  631          jsr       _Wait3ms
                     632   ; Clearln() ;
000009E4  4EB8 09B8  633          jsr       _Clearln
                     634   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  635          move.b    #128,4194336
000009EC  0040 0020 
                     636   ; Wait3ms() ;
000009F0  4EB8 0946  637          jsr       _Wait3ms
                     638   ; OutMess(theMessage) ;
000009F4  2F2E 0008  639          move.l    8(A6),-(A7)
000009F8  4EB8 098E  640          jsr       _OutMess
000009FC  584F       641          addq.w    #4,A7
000009FE  4E5E       642          unlk      A6
00000A00  4E75       643          rts
                     644   ; }
                     645   ; /******************************************************************************
                     646   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     647   ; *******************************************************************************/
                     648   ; void Oline1(char *theMessage)
                     649   ; {
                     650   _Oline1:
00000A02  4E56 0000  651          link      A6,#0
                     652   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  653          move.b    #192,4194336
00000A0A  0040 0020 
                     654   ; Wait3ms();
00000A0E  4EB8 0946  655          jsr       _Wait3ms
                     656   ; Clearln() ;
00000A12  4EB8 09B8  657          jsr       _Clearln
                     658   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  659          move.b    #192,4194336
00000A1A  0040 0020 
                     660   ; Wait3ms() ;
00000A1E  4EB8 0946  661          jsr       _Wait3ms
                     662   ; OutMess(theMessage) ;
00000A22  2F2E 0008  663          move.l    8(A6),-(A7)
00000A26  4EB8 098E  664          jsr       _OutMess
00000A2A  584F       665          addq.w    #4,A7
00000A2C  4E5E       666          unlk      A6
00000A2E  4E75       667          rts
                     668   ; }
                     669   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     670   ; {
                     671   _InstallExceptionHandler:
00000A30  4E56 FFFC  672          link      A6,#-4
                     673   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  674          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     675   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  676          move.l    -4(A6),A0
00000A40  202E 000C  677          move.l    12(A6),D0
00000A44  E588       678          lsl.l     #2,D0
00000A46  21AE 0008  679          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       680          unlk      A6
00000A4E  4E75       681          rts
                     682   ; }
                     683   ; void TestLEDS(void)
                     684   ; {
                     685   _TestLEDS:
00000A50  48E7 3000  686          movem.l   D2/D3,-(A7)
                     687   ; int delay ;
                     688   ; unsigned char count = 0 ;
00000A54  4202       689          clr.b     D2
                     690   ; while(1)    {
                     691   TestLEDS_1:
                     692   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       693          move.b    D2,D0
00000A58  E908       694          lsl.b     #4,D0
00000A5A  1202       695          move.b    D2,D1
00000A5C  C23C 000F  696          and.b     #15,D1
00000A60  D001       697          add.b     D1,D0
00000A62  13C0 0040  698          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  699          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  700          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  701          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  702          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  703          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  704          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  705          move.b    D0,4194304
00000A90  0000      
                     706   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       707          clr.l     D3
                     708   TestLEDS_4:
00000A94  0C83 0003  709          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       710          bge.s     TestLEDS_6
00000A9C  5283       711          addq.l    #1,D3
00000A9E  60F4       712          bra       TestLEDS_4
                     713   TestLEDS_6:
                     714   ; ;
                     715   ; count ++;
00000AA0  5202       716          addq.b    #1,D2
00000AA2  60B2       717          bra       TestLEDS_1
                     718   ; }
                     719   ; }
                     720   ; void SwitchTest(void)
                     721   ; {
                     722   _SwitchTest:
00000AA4  48E7 3020  723          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  724          lea       _printf.L,A2
00000AAC  3176      
                     725   ; int i, switches = 0 ;
00000AAE  4283       726          clr.l     D3
                     727   ; printf("\r\n") ;
00000AB0  4879 0000  728          pea       @m68kde~1_1.L
00000AB4  3A88      
00000AB6  4E92       729          jsr       (A2)
00000AB8  584F       730          addq.w    #4,A7
                     731   ; while(1)    {
                     732   SwitchTest_1:
                     733   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  734          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  735          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       736          lsl.l     #8,D0
00000AC8  1239 0040  737          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  738          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       739          or.l      D1,D0
00000AD6  2600       740          move.l    D0,D3
                     741   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  742          pea       @m68kde~1_2.L
00000ADC  3A8C      
00000ADE  4E92       743          jsr       (A2)
00000AE0  584F       744          addq.w    #4,A7
                     745   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  746          move.l    #128,D2
00000AE6  0080      
                     747   SwitchTest_4:
00000AE8  0C82 0000  748          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       749          ble.s     SwitchTest_6
                     750   ; if((switches & i) == 0)
00000AF0  2003       751          move.l    D3,D0
00000AF2  C082       752          and.l     D2,D0
00000AF4  660C       753          bne.s     SwitchTest_7
                     754   ; printf("0") ;
00000AF6  4879 0000  755          pea       @m68kde~1_3.L
00000AFA  3AA2      
00000AFC  4E92       756          jsr       (A2)
00000AFE  584F       757          addq.w    #4,A7
00000B00  600A       758          bra.s     SwitchTest_8
                     759   SwitchTest_7:
                     760   ; else
                     761   ; printf("1") ;
00000B02  4879 0000  762          pea       @m68kde~1_4.L
00000B06  3AA4      
00000B08  4E92       763          jsr       (A2)
00000B0A  584F       764          addq.w    #4,A7
                     765   SwitchTest_8:
00000B0C  E282       766          asr.l     #1,D2
00000B0E  60D8       767          bra       SwitchTest_4
                     768   SwitchTest_6:
00000B10  60A8       769          bra       SwitchTest_1
                     770   ; }
                     771   ; }
                     772   ; }
                     773   ; /*********************************************************************************************
                     774   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     775   ; *********************************************************************************************/
                     776   ; void Init_RS232(void)
                     777   ; {
                     778   _Init_RS232:
                     779   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  780          move.b    #21,4194368
00000B16  0040 0040 
                     781   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  782          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       783          rts
                     784   ; }
                     785   ; int kbhit(void)
                     786   ; {
                     787   _kbhit:
                     788   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  789          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  790          and.b     #1,D0
00000B2E  0C00 0001  791          cmp.b     #1,D0
00000B32  6604       792          bne.s     kbhit_1
                     793   ; return 1 ;
00000B34  7001       794          moveq     #1,D0
00000B36  6002       795          bra.s     kbhit_3
                     796   kbhit_1:
                     797   ; else
                     798   ; return 0 ;
00000B38  4280       799          clr.l     D0
                     800   kbhit_3:
00000B3A  4E75       801          rts
                     802   ; }
                     803   ; /*********************************************************************************************************
                     804   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     805   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     806   ; **  to allow the board to communicate with HyperTerminal Program
                     807   ; **
                     808   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     809   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     810   ; **  call _putch() also
                     811   ; *********************************************************************************************************/
                     812   ; int _putch( int c)
                     813   ; {
                     814   __putch:
00000B3C  4E56 0000  815          link      A6,#0
                     816   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     817   _putch_1:
00000B40  1039 0040  818          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  819          and.b     #2,D0
00000B4A  0C00 0002  820          cmp.b     #2,D0
00000B4E  6702       821          beq.s     _putch_3
00000B50  60EE       822          bra       _putch_1
                     823   _putch_3:
                     824   ; ;
                     825   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  826          move.l    8(A6),D0
00000B56  C03C 007F  827          and.b     #127,D0
00000B5A  13C0 0040  828          move.b    D0,4194370
00000B5E  0042      
                     829   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  830          move.l    8(A6),D0
00000B64  4E5E       831          unlk      A6
00000B66  4E75       832          rts
                     833   ; }
                     834   ; /*********************************************************************************************************
                     835   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     836   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     837   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     838   ; **
                     839   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     840   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     841   ; **  call _getch() also
                     842   ; *********************************************************************************************************/
                     843   ; int _getch( void )
                     844   ; {
                     845   __getch:
00000B68  2F02       846          move.l    D2,-(A7)
                     847   ; int c ;
                     848   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     849   _getch_1:
00000B6A  1039 0040  850          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  851          and.b     #1,D0
00000B74  0C00 0001  852          cmp.b     #1,D0
00000B78  6702       853          beq.s     _getch_3
00000B7A  60EE       854          bra       _getch_1
                     855   _getch_3:
                     856   ; ;
                     857   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  858          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  859          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  860          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       861          move.l    D0,D2
                     862   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     863   ; if(Echo)
00000B90  4AB9 0B00  864          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       865          beq.s     _getch_4
                     866   ; _putch(c);
00000B98  2F02       867          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  868          jsr       __putch
00000B9E  584F       869          addq.w    #4,A7
                     870   _getch_4:
                     871   ; return c ;
00000BA0  2002       872          move.l    D2,D0
00000BA2  241F       873          move.l    (A7)+,D2
00000BA4  4E75       874          rts
                     875   ; }
                     876   ; // flush the input stream for any unread characters
                     877   ; void FlushKeyboard(void)
                     878   ; {
                     879   _FlushKeyboard:
00000BA6  4E56 FFFC  880          link      A6,#-4
                     881   ; char c ;
                     882   ; while(1)    {
                     883   FlushKeyboard_1:
                     884   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  885          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  886          and.b     #1,D0
00000BB4  0C00 0001  887          cmp.b     #1,D0
00000BB8  6610       888          bne.s     FlushKeyboard_4
                     889   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  890          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  891          and.b     #127,D0
00000BC4  1D40 FFFF  892          move.b    D0,-1(A6)
00000BC8  6002       893          bra.s     FlushKeyboard_5
                     894   FlushKeyboard_4:
                     895   ; else
                     896   ; return ;
00000BCA  6002       897          bra.s     FlushKeyboard_6
                     898   FlushKeyboard_5:
00000BCC  60DC       899          bra       FlushKeyboard_1
                     900   FlushKeyboard_6:
00000BCE  4E5E       901          unlk      A6
00000BD0  4E75       902          rts
                     903   ; }
                     904   ; }
                     905   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     906   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     907   ; char xtod(int c)
                     908   ; {
                     909   _xtod:
00000BD2  4E56 0000  910          link      A6,#0
00000BD6  2F02       911          move.l    D2,-(A7)
00000BD8  242E 0008  912          move.l    8(A6),D2
                     913   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  914          cmp.b     #57,D2
00000BE0  6E08       915          bgt.s     xtod_1
                     916   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       917          move.b    D2,D0
00000BE4  0400 0030  918          sub.b     #48,D0
00000BE8  6014       919          bra.s     xtod_3
                     920   xtod_1:
                     921   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  922          cmp.b     #70,D2
00000BEE  6F08       923          ble.s     xtod_4
                     924   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       925          move.b    D2,D0
00000BF2  0400 0057  926          sub.b     #87,D0
00000BF6  6006       927          bra.s     xtod_3
                     928   xtod_4:
                     929   ; else
                     930   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       931          move.b    D2,D0
00000BFA  0400 0037  932          sub.b     #55,D0
                     933   xtod_3:
00000BFE  241F       934          move.l    (A7)+,D2
00000C00  4E5E       935          unlk      A6
00000C02  4E75       936          rts
                     937   ; }
                     938   ; int Get2HexDigits(char *CheckSumPtr)
                     939   ; {
                     940   _Get2HexDigits:
00000C04  4E56 0000  941          link      A6,#0
00000C08  2F02       942          move.l    D2,-(A7)
                     943   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       944          move.l    D0,-(A7)
00000C0C  4EB8 0B68  945          jsr       __getch
00000C10  2200       946          move.l    D0,D1
00000C12  201F       947          move.l    (A7)+,D0
00000C14  2F01       948          move.l    D1,-(A7)
00000C16  4EB8 0BD2  949          jsr       _xtod
00000C1A  584F       950          addq.w    #4,A7
00000C1C  C0BC 0000  951          and.l     #255,D0
00000C20  00FF      
00000C22  E980       952          asl.l     #4,D0
00000C24  2F00       953          move.l    D0,-(A7)
00000C26  2F01       954          move.l    D1,-(A7)
00000C28  4EB8 0B68  955          jsr       __getch
00000C2C  221F       956          move.l    (A7)+,D1
00000C2E  2F00       957          move.l    D0,-(A7)
00000C30  4EB8 0BD2  958          jsr       _xtod
00000C34  584F       959          addq.w    #4,A7
00000C36  2200       960          move.l    D0,D1
00000C38  201F       961          move.l    (A7)+,D0
00000C3A  C2BC 0000  962          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       963          or.l      D1,D0
00000C42  2400       964          move.l    D0,D2
                     965   ; if(CheckSumPtr)
00000C44  4AAE 0008  966          tst.l     8(A6)
00000C48  6706       967          beq.s     Get2HexDigits_1
                     968   ; *CheckSumPtr += i ;
00000C4A  206E 0008  969          move.l    8(A6),A0
00000C4E  D510       970          add.b     D2,(A0)
                     971   Get2HexDigits_1:
                     972   ; return i ;
00000C50  2002       973          move.l    D2,D0
00000C52  241F       974          move.l    (A7)+,D2
00000C54  4E5E       975          unlk      A6
00000C56  4E75       976          rts
                     977   ; }
                     978   ; int Get4HexDigits(char *CheckSumPtr)
                     979   ; {
                     980   _Get4HexDigits:
00000C58  4E56 0000  981          link      A6,#0
                     982   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  983          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  984          jsr       _Get2HexDigits
00000C64  584F       985          addq.w    #4,A7
00000C66  E180       986          asl.l     #8,D0
00000C68  2F00       987          move.l    D0,-(A7)
00000C6A  2F2E 0008  988          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  989          jsr       _Get2HexDigits
00000C72  584F       990          addq.w    #4,A7
00000C74  2200       991          move.l    D0,D1
00000C76  201F       992          move.l    (A7)+,D0
00000C78  8081       993          or.l      D1,D0
00000C7A  4E5E       994          unlk      A6
00000C7C  4E75       995          rts
                     996   ; }
                     997   ; int Get6HexDigits(char *CheckSumPtr)
                     998   ; {
                     999   _Get6HexDigits:
00000C7E  4E56 0000 1000          link      A6,#0
                    1001   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1002          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1003          jsr       _Get4HexDigits
00000C8A  584F      1004          addq.w    #4,A7
00000C8C  E180      1005          asl.l     #8,D0
00000C8E  2F00      1006          move.l    D0,-(A7)
00000C90  2F2E 0008 1007          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1008          jsr       _Get2HexDigits
00000C98  584F      1009          addq.w    #4,A7
00000C9A  2200      1010          move.l    D0,D1
00000C9C  201F      1011          move.l    (A7)+,D0
00000C9E  8081      1012          or.l      D1,D0
00000CA0  4E5E      1013          unlk      A6
00000CA2  4E75      1014          rts
                    1015   ; }
                    1016   ; int Get8HexDigits(char *CheckSumPtr)
                    1017   ; {
                    1018   _Get8HexDigits:
00000CA4  4E56 0000 1019          link      A6,#0
                    1020   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1021          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1022          jsr       _Get4HexDigits
00000CB0  584F      1023          addq.w    #4,A7
00000CB2  E180      1024          asl.l     #8,D0
00000CB4  E180      1025          asl.l     #8,D0
00000CB6  2F00      1026          move.l    D0,-(A7)
00000CB8  2F2E 0008 1027          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1028          jsr       _Get4HexDigits
00000CC0  584F      1029          addq.w    #4,A7
00000CC2  2200      1030          move.l    D0,D1
00000CC4  201F      1031          move.l    (A7)+,D0
00000CC6  8081      1032          or.l      D1,D0
00000CC8  4E5E      1033          unlk      A6
00000CCA  4E75      1034          rts
                    1035   ; }
                    1036   ; void DumpMemory(void)   // simple dump memory fn
                    1037   ; {
                    1038   _DumpMemory:
00000CCC  48E7 3C30 1039          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1040          lea       _printf.L,A2
00000CD4  3176      
00000CD6  47F9 0000 1041          lea       _putch.L,A3
00000CDA  3092      
                    1042   ; int i, j ;
                    1043   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1044   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1045          pea       @m68kde~1_5.L
00000CE0  3AA6      
00000CE2  4E92      1046          jsr       (A2)
00000CE4  584F      1047          addq.w    #4,A7
                    1048   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1049          pea       @m68kde~1_6.L
00000CEA  3AE0      
00000CEC  4E92      1050          jsr       (A2)
00000CEE  584F      1051          addq.w    #4,A7
                    1052   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1053          clr.l     -(A7)
00000CF2  4EB8 0CA4 1054          jsr       _Get8HexDigits
00000CF6  584F      1055          addq.w    #4,A7
00000CF8  2600      1056          move.l    D0,D3
                    1057   ; while(1)    {
                    1058   DumpMemory_1:
                    1059   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1060          clr.l     D5
                    1061   DumpMemory_4:
00000CFC  0C85 0000 1062          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1063          bge       DumpMemory_6
                    1064   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1065          move.l    D3,-(A7)
00000D08  4879 0000 1066          pea       @m68kde~1_7.L
00000D0C  3AF8      
00000D0E  4E92      1067          jsr       (A2)
00000D10  504F      1068          addq.w    #8,A7
                    1069   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1070          clr.l     D2
                    1071   DumpMemory_7:
00000D14  0C82 0000 1072          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1073          bge.s     DumpMemory_9
                    1074   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1075          move.l    D3,A0
00000D1E  1230 2800 1076          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1077          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1078          move.l    D1,-(A7)
00000D2A  4879 0000 1079          pea       @m68kde~1_8.L
00000D2E  3B00      
00000D30  4E92      1080          jsr       (A2)
00000D32  504F      1081          addq.w    #8,A7
                    1082   ; putchar(' ') ;
00000D34  4878 0020 1083          pea       32
00000D38  4E93      1084          jsr       (A3)
00000D3A  584F      1085          addq.w    #4,A7
00000D3C  5282      1086          addq.l    #1,D2
00000D3E  60D4      1087          bra       DumpMemory_7
                    1088   DumpMemory_9:
                    1089   ; }
                    1090   ; // now display the data as ASCII at the end
                    1091   ; printf("  ") ;
00000D40  4879 0000 1092          pea       @m68kde~1_9.L
00000D44  3B06      
00000D46  4E92      1093          jsr       (A2)
00000D48  584F      1094          addq.w    #4,A7
                    1095   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1096          clr.l     D2
                    1097   DumpMemory_10:
00000D4C  0C82 0000 1098          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1099          bge       DumpMemory_12
                    1100   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1101          move.l    D3,A0
00000D58  1030 2800 1102          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1103          and.b     #127,D0
00000D60  1800      1104          move.b    D0,D4
                    1105   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1106          cmp.b     #127,D4
00000D66  6206      1107          bhi.s     DumpMemory_15
00000D68  0C04 0020 1108          cmp.b     #32,D4
00000D6C  640A      1109          bhs.s     DumpMemory_13
                    1110   DumpMemory_15:
                    1111   ; putchar('.') ;
00000D6E  4878 002E 1112          pea       46
00000D72  4E93      1113          jsr       (A3)
00000D74  584F      1114          addq.w    #4,A7
00000D76  6012      1115          bra.s     DumpMemory_14
                    1116   DumpMemory_13:
                    1117   ; else
                    1118   ; putchar(RamPtr[j]) ;
00000D78  2043      1119          move.l    D3,A0
00000D7A  1230 2800 1120          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1121          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1122          move.l    D1,-(A7)
00000D86  4E93      1123          jsr       (A3)
00000D88  584F      1124          addq.w    #4,A7
                    1125   DumpMemory_14:
00000D8A  5282      1126          addq.l    #1,D2
00000D8C  60BE      1127          bra       DumpMemory_10
                    1128   DumpMemory_12:
                    1129   ; }
                    1130   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1131          add.l     #16,D3
00000D92  0010      
00000D94  5285      1132          addq.l    #1,D5
00000D96  6000 FF64 1133          bra       DumpMemory_4
                    1134   DumpMemory_6:
                    1135   ; }
                    1136   ; printf("\r\n") ;
00000D9A  4879 0000 1137          pea       @m68kde~1_1.L
00000D9E  3A88      
00000DA0  4E92      1138          jsr       (A2)
00000DA2  584F      1139          addq.w    #4,A7
                    1140   ; c = _getch() ;
00000DA4  4EB8 0B68 1141          jsr       __getch
00000DA8  1800      1142          move.b    D0,D4
                    1143   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1144          cmp.b     #27,D4
00000DAE  6602      1145          bne.s     DumpMemory_16
                    1146   ; break ;
00000DB0  6004      1147          bra.s     DumpMemory_3
                    1148   DumpMemory_16:
00000DB2  6000 FF46 1149          bra       DumpMemory_1
                    1150   DumpMemory_3:
00000DB6  4CDF 0C3C 1151          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1152          rts
                    1153   ; }
                    1154   ; }
                    1155   ; void FillMemory()
                    1156   ; {
                    1157   _FillMemory:
00000DBC  48E7 3820 1158          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1159          lea       _printf.L,A2
00000DC4  3176      
                    1160   ; char *StartRamPtr, *EndRamPtr ;
                    1161   ; unsigned char FillData ;
                    1162   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1163          pea       @m68kde~1_10.L
00000DCA  3B0A      
00000DCC  4E92      1164          jsr       (A2)
00000DCE  584F      1165          addq.w    #4,A7
                    1166   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1167          pea       @m68kde~1_6.L
00000DD4  3AE0      
00000DD6  4E92      1168          jsr       (A2)
00000DD8  584F      1169          addq.w    #4,A7
                    1170   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1171          clr.l     -(A7)
00000DDC  4EB8 0CA4 1172          jsr       _Get8HexDigits
00000DE0  584F      1173          addq.w    #4,A7
00000DE2  2400      1174          move.l    D0,D2
                    1175   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1176          pea       @m68kde~1_11.L
00000DE8  3B1E      
00000DEA  4E92      1177          jsr       (A2)
00000DEC  584F      1178          addq.w    #4,A7
                    1179   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1180          clr.l     -(A7)
00000DF0  4EB8 0CA4 1181          jsr       _Get8HexDigits
00000DF4  584F      1182          addq.w    #4,A7
00000DF6  2800      1183          move.l    D0,D4
                    1184   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1185          pea       @m68kde~1_12.L
00000DFC  3B34      
00000DFE  4E92      1186          jsr       (A2)
00000E00  584F      1187          addq.w    #4,A7
                    1188   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1189          clr.l     -(A7)
00000E04  4EB8 0C04 1190          jsr       _Get2HexDigits
00000E08  584F      1191          addq.w    #4,A7
00000E0A  1600      1192          move.b    D0,D3
                    1193   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1194          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1195          move.l    D3,-(A7)
00000E14  2F04      1196          move.l    D4,-(A7)
00000E16  2F02      1197          move.l    D2,-(A7)
00000E18  4879 0000 1198          pea       @m68kde~1_13.L
00000E1C  3B48      
00000E1E  4E92      1199          jsr       (A2)
00000E20  DEFC 0010 1200          add.w     #16,A7
                    1201   ; while(StartRamPtr < EndRamPtr)
                    1202   FillMemory_1:
00000E24  B484      1203          cmp.l     D4,D2
00000E26  6408      1204          bhs.s     FillMemory_3
                    1205   ; *StartRamPtr++ = FillData ;
00000E28  2042      1206          move.l    D2,A0
00000E2A  5282      1207          addq.l    #1,D2
00000E2C  1083      1208          move.b    D3,(A0)
00000E2E  60F4      1209          bra       FillMemory_1
                    1210   FillMemory_3:
00000E30  4CDF 041C 1211          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1212          rts
                    1213   ; }
                    1214   ; void Load_SRecordFile()
                    1215   ; {
                    1216   _Load_SRecordFile:
00000E36  4E56 FFDC 1217          link      A6,#-36
00000E3A  48E7 3F3C 1218          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1219          lea       -6(A6),A2
00000E42  47F8 0C04 1220          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1221          lea       _printf.L,A4
00000E4A  3176      
                    1222   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1223          clr.l     -18(A6)
00000E50  3A7C 0000 1224          move.w    #0,A5
                    1225   ; int result, ByteCount ;
                    1226   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1227   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1228   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1229          moveq     #0,D7
                    1230   ; AddressFail = 0 ;
00000E56  42AE FFEA 1231          clr.l     -22(A6)
                    1232   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1233          clr.l     _Echo.L
00000E5E  00E0      
                    1234   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1235          pea       @m68kde~1_14.L
00000E64  3B78      
00000E66  4E94      1236          jsr       (A4)
00000E68  584F      1237          addq.w    #4,A7
                    1238   ; while(1)    {
                    1239   Load_SRecordFile_1:
                    1240   ; CheckSum = 0 ;
00000E6A  4212      1241          clr.b     (A2)
                    1242   ; do {
                    1243   Load_SRecordFile_4:
                    1244   ; c = toupper(_getch()) ;
00000E6C  2F00      1245          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1246          jsr       __getch
00000E72  2200      1247          move.l    D0,D1
00000E74  201F      1248          move.l    (A7)+,D0
00000E76  2F01      1249          move.l    D1,-(A7)
00000E78  4EB9 0000 1250          jsr       _toupper
00000E7C  315A      
00000E7E  584F      1251          addq.w    #4,A7
00000E80  1C00      1252          move.b    D0,D6
                    1253   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1254          cmp.b     #27,D6
00000E86  6604      1255          bne.s     Load_SRecordFile_6
                    1256   ; return;
00000E88  6000 0132 1257          bra       Load_SRecordFile_8
                    1258   Load_SRecordFile_6:
00000E8C  0C06 0053 1259          cmp.b     #83,D6
00000E90  66DA      1260          bne       Load_SRecordFile_4
                    1261   ; }while(c != (char)('S'));   // wait for S start of header
                    1262   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1263          jsr       __getch
00000E96  1600      1264          move.b    D0,D3
                    1265   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1266          cmp.b     #48,D3
00000E9C  6706      1267          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1268          cmp.b     #53,D3
00000EA2  6604      1269          bne.s     Load_SRecordFile_9
                    1270   Load_SRecordFile_11:
                    1271   ; continue ;
00000EA4  6000 00D2 1272          bra       Load_SRecordFile_23
                    1273   Load_SRecordFile_9:
                    1274   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1275          cmp.b     #55,D3
00000EAC  6D04      1276          blt.s     Load_SRecordFile_12
                    1277   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1278          bra       Load_SRecordFile_3
                    1279   Load_SRecordFile_12:
                    1280   ; // get the bytecount
                    1281   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1282          move.l    A2,-(A7)
00000EB4  4E93      1283          jsr       (A3)
00000EB6  584F      1284          addq.w    #4,A7
00000EB8  2D40 FFF6 1285          move.l    D0,-10(A6)
                    1286   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1287   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1288          cmp.b     #49,D3
00000EC0  660E      1289          bne.s     Load_SRecordFile_14
                    1290   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1291          moveq     #2,D5
                    1292   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1293          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1294          jsr       _Get4HexDigits
00000ECA  584F      1295          addq.w    #4,A7
00000ECC  2800      1296          move.l    D0,D4
00000ECE  6020      1297          bra.s     Load_SRecordFile_17
                    1298   Load_SRecordFile_14:
                    1299   ; }
                    1300   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1301          cmp.b     #50,D3
00000ED4  660E      1302          bne.s     Load_SRecordFile_16
                    1303   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1304          moveq     #3,D5
                    1305   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1306          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1307          jsr       _Get6HexDigits
00000EDE  584F      1308          addq.w    #4,A7
00000EE0  2800      1309          move.l    D0,D4
00000EE2  600C      1310          bra.s     Load_SRecordFile_17
                    1311   Load_SRecordFile_16:
                    1312   ; }
                    1313   ; else    {
                    1314   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1315          moveq     #4,D5
                    1316   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1317          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1318          jsr       _Get8HexDigits
00000EEC  584F      1319          addq.w    #4,A7
00000EEE  2800      1320          move.l    D0,D4
                    1321   Load_SRecordFile_17:
                    1322   ; }
                    1323   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1324          move.l    D4,-4(A6)
                    1325   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1326          move.l    -10(A6),D0
00000EF8  9085      1327          sub.l     D5,D0
00000EFA  5380      1328          subq.l    #1,D0
00000EFC  2D40 FFE2 1329          move.l    D0,-30(A6)
                    1330   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1331          clr.l     D2
                    1332   Load_SRecordFile_18:
00000F02  B4AE FFE2 1333          cmp.l     -30(A6),D2
00000F06  6C1E      1334          bge.s     Load_SRecordFile_20
                    1335   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1336          move.l    A2,-(A7)
00000F0A  4E93      1337          jsr       (A3)
00000F0C  584F      1338          addq.w    #4,A7
00000F0E  2D40 FFDE 1339          move.l    D0,-34(A6)
                    1340   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1341          move.l    -34(A6),D0
00000F16  206E FFFC 1342          move.l    -4(A6),A0
00000F1A  52AE FFFC 1343          addq.l    #1,-4(A6)
00000F1E  1080      1344          move.b    D0,(A0)
                    1345   ; ByteTotal++;
00000F20  524D      1346          addq.w    #1,A5
00000F22  5282      1347          addq.l    #1,D2
00000F24  60DC      1348          bra       Load_SRecordFile_18
                    1349   Load_SRecordFile_20:
                    1350   ; }
                    1351   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1352   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1353          clr.l     -(A7)
00000F28  4E93      1354          jsr       (A3)
00000F2A  584F      1355          addq.w    #4,A7
00000F2C  1D40 FFFB 1356          move.b    D0,-5(A6)
                    1357   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1358          move.b    (A2),D0
00000F32  4600      1359          not.b     D0
00000F34  4880      1360          ext.w     D0
00000F36  C07C 00FF 1361          and.w     #255,D0
00000F3A  122E FFFB 1362          move.b    -5(A6),D1
00000F3E  4881      1363          ext.w     D1
00000F40  C27C 00FF 1364          and.w     #255,D1
00000F44  B041      1365          cmp.w     D1,D0
00000F46  6708      1366          beq.s     Load_SRecordFile_21
                    1367   ; LoadFailed = 1 ;
00000F48  7E01      1368          moveq     #1,D7
                    1369   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1370          move.l    D4,-26(A6)
                    1371   ; break;
00000F4E  602C      1372          bra.s     Load_SRecordFile_3
                    1373   Load_SRecordFile_21:
                    1374   ; }
                    1375   ; SRecordCount++ ;
00000F50  52AE FFEE 1376          addq.l    #1,-18(A6)
                    1377   ; // display feedback on progress
                    1378   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1379          move.l    -18(A6),-(A7)
00000F58  4878 0019 1380          pea       25
00000F5C  4EB9 0000 1381          jsr       LDIV
00000F60  2FC6      
00000F62  202F 0004 1382          move.l    4(A7),D0
00000F66  504F      1383          addq.w    #8,A7
00000F68  4A80      1384          tst.l     D0
00000F6A  660C      1385          bne.s     Load_SRecordFile_23
                    1386   ; putchar('.') ;
00000F6C  4878 002E 1387          pea       46
00000F70  4EB9 0000 1388          jsr       _putch
00000F74  3092      
00000F76  584F      1389          addq.w    #4,A7
                    1390   Load_SRecordFile_23:
00000F78  6000 FEF0 1391          bra       Load_SRecordFile_1
                    1392   Load_SRecordFile_3:
                    1393   ; }
                    1394   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1395          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1396          bne.s     Load_SRecordFile_25
                    1397   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1398          move.l    -26(A6),-(A7)
00000F88  4879 0000 1399          pea       @m68kde~1_15.L
00000F8C  3BA8      
00000F8E  4E94      1400          jsr       (A4)
00000F90  504F      1401          addq.w    #8,A7
00000F92  600C      1402          bra.s     Load_SRecordFile_26
                    1403   Load_SRecordFile_25:
                    1404   ; }
                    1405   ; else
                    1406   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1407          move.l    A5,-(A7)
00000F96  4879 0000 1408          pea       @m68kde~1_16.L
00000F9A  3BCE      
00000F9C  4E94      1409          jsr       (A4)
00000F9E  504F      1410          addq.w    #8,A7
                    1411   Load_SRecordFile_26:
                    1412   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1413   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1414          clr.l     D2
                    1415   Load_SRecordFile_27:
00000FA2  0C82 0006 1416          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1417          bge.s     Load_SRecordFile_29
00000FAA  5282      1418          addq.l    #1,D2
00000FAC  60F4      1419          bra       Load_SRecordFile_27
                    1420   Load_SRecordFile_29:
                    1421   ; ;
                    1422   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1423          jsr       _FlushKeyboard
                    1424   ; Echo = 1;
00000FB2  23FC 0000 1425          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1426   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1427          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1428          unlk      A6
00000FC2  4E75      1429          rts
                    1430   ; }
                    1431   ; void MemoryChange(void)
                    1432   ; {
                    1433   _MemoryChange:
00000FC4  48E7 3820 1434          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1435          lea       _printf.L,A2
00000FCC  3176      
                    1436   ; unsigned char *RamPtr,c ; // pointer to memory
                    1437   ; int Data ;
                    1438   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1439          pea       @m68kde~1_17.L
00000FD2  3BF0      
00000FD4  4E92      1440          jsr       (A2)
00000FD6  584F      1441          addq.w    #4,A7
                    1442   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1443          pea       @m68kde~1_18.L
00000FDC  3C0C      
00000FDE  4E92      1444          jsr       (A2)
00000FE0  584F      1445          addq.w    #4,A7
                    1446   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1447          pea       @m68kde~1_19.L
00000FE6  3C52      
00000FE8  4E92      1448          jsr       (A2)
00000FEA  584F      1449          addq.w    #4,A7
                    1450   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1451          clr.l     -(A7)
00000FEE  4EB8 0CA4 1452          jsr       _Get8HexDigits
00000FF2  584F      1453          addq.w    #4,A7
00000FF4  2600      1454          move.l    D0,D3
                    1455   ; while(1)    {
                    1456   MemoryChange_1:
                    1457   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1458          move.l    D3,A0
00000FF8  1210      1459          move.b    (A0),D1
00000FFA  C2BC 0000 1460          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1461          move.l    D1,-(A7)
00001002  2F03      1462          move.l    D3,-(A7)
00001004  4879 0000 1463          pea       @m68kde~1_20.L
00001008  3C64      
0000100A  4E92      1464          jsr       (A2)
0000100C  DEFC 000C 1465          add.w     #12,A7
                    1466   ; c = tolower(_getch()) ;
00001010  2F00      1467          move.l    D0,-(A7)
00001012  4EB8 0B68 1468          jsr       __getch
00001016  2200      1469          move.l    D0,D1
00001018  201F      1470          move.l    (A7)+,D0
0000101A  2F01      1471          move.l    D1,-(A7)
0000101C  4EB9 0000 1472          jsr       _tolower
00001020  30F6      
00001022  584F      1473          addq.w    #4,A7
00001024  1400      1474          move.b    D0,D2
                    1475   ; if(c == (char)(0x1b))
00001026  0C02 001B 1476          cmp.b     #27,D2
0000102A  6604      1477          bne.s     MemoryChange_4
                    1478   ; return ;                                // abort on escape
0000102C  6000 0090 1479          bra       MemoryChange_6
                    1480   MemoryChange_4:
                    1481   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1482          cmp.b     #48,D2
00001034  6506      1483          blo.s     MemoryChange_10
00001036  0C02 0039 1484          cmp.b     #57,D2
0000103A  6310      1485          bls.s     MemoryChange_9
                    1486   MemoryChange_10:
0000103C  0C02 0061 1487          cmp.b     #97,D2
00001040  6500 006E 1488          blo       MemoryChange_7
00001044  0C02 0066 1489          cmp.b     #102,D2
00001048  6200 0066 1490          bhi       MemoryChange_7
                    1491   MemoryChange_9:
                    1492   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1493          and.l     #255,D2
00001050  00FF      
00001052  2F02      1494          move.l    D2,-(A7)
00001054  4EB8 0BD2 1495          jsr       _xtod
00001058  584F      1496          addq.w    #4,A7
0000105A  C0BC 0000 1497          and.l     #255,D0
0000105E  00FF      
00001060  E980      1498          asl.l     #4,D0
00001062  2F00      1499          move.l    D0,-(A7)
00001064  2F01      1500          move.l    D1,-(A7)
00001066  4EB8 0B68 1501          jsr       __getch
0000106A  221F      1502          move.l    (A7)+,D1
0000106C  2F00      1503          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1504          jsr       _xtod
00001072  584F      1505          addq.w    #4,A7
00001074  2200      1506          move.l    D0,D1
00001076  201F      1507          move.l    (A7)+,D0
00001078  C2BC 0000 1508          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1509          or.l      D1,D0
00001080  2800      1510          move.l    D0,D4
                    1511   ; *RamPtr = (char)(Data) ;
00001082  2043      1512          move.l    D3,A0
00001084  1084      1513          move.b    D4,(A0)
                    1514   ; if(*RamPtr != Data) {
00001086  2043      1515          move.l    D3,A0
00001088  1010      1516          move.b    (A0),D0
0000108A  C0BC 0000 1517          and.l     #255,D0
0000108E  00FF      
00001090  B084      1518          cmp.l     D4,D0
00001092  671A      1519          beq.s     MemoryChange_11
                    1520   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1521          move.l    D3,A0
00001096  1210      1522          move.b    (A0),D1
00001098  C2BC 0000 1523          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1524          move.l    D1,-(A7)
000010A0  2F04      1525          move.l    D4,-(A7)
000010A2  4879 0000 1526          pea       @m68kde~1_21.L
000010A6  3C76      
000010A8  4E92      1527          jsr       (A2)
000010AA  DEFC 000C 1528          add.w     #12,A7
                    1529   MemoryChange_11:
000010AE  6008      1530          bra.s     MemoryChange_13
                    1531   MemoryChange_7:
                    1532   ; }
                    1533   ; }
                    1534   ; else if(c == (char)('-'))
000010B0  0C02 002D 1535          cmp.b     #45,D2
000010B4  6602      1536          bne.s     MemoryChange_13
                    1537   ; RamPtr -= 2 ; ;
000010B6  5583      1538          subq.l    #2,D3
                    1539   MemoryChange_13:
                    1540   ; RamPtr ++ ;
000010B8  5283      1541          addq.l    #1,D3
000010BA  6000 FF3A 1542          bra       MemoryChange_1
                    1543   MemoryChange_6:
000010BE  4CDF 041C 1544          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1545          rts
                    1546   ; }
                    1547   ; }
                    1548   ; /******************************************************************************************
                    1549   ; ** The following code is for the
                    1550   ; controller
                    1551   ; *******************************************************************************************/
                    1552   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1553   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1554   ; int TestForSPITransmitDataComplete(void)    {
                    1555   _TestForSPITransmitDataComplete:
                    1556   ; /* DONE: TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1557   ; return (SPI_Status & 0x80);
000010C4  1039 0040 1558          move.b    4227106,D0
000010C8  8022      
000010CA  C0BC 0000 1559          and.l     #255,D0
000010CE  00FF      
000010D0  C0BC 0000 1560          and.l     #128,D0
000010D4  0080      
000010D6  4E75      1561          rts
                    1562   ; }
                    1563   ; /************************************************************************************
                    1564   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1565   ; ************************************************************************************/
                    1566   ; void SPI_Init(void)
                    1567   ; {
                    1568   _SPI_Init:
                    1569   ; //DONE: TODO
                    1570   ; //
                    1571   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1572   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1573   ; //
                    1574   ; // Here are some settings we want to create
                    1575   ; //
                    1576   ; // Control Reg     - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed =  divide by 32 = approx 700Khz
                    1577   ; // Ext Reg         - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1578   ; // SPI_CS Reg      - control selection of slave SPI chips via their CS# signals
                    1579   ; // Status Reg      - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1580   ; // SPCR = {SPIE, SPE, x, MSTR, CPOL, CPHA, SPR} = 01x1_0011 = 0x53
                    1581   ; SPI_Control = 0x53;
000010D8  13FC 0053 1582          move.b    #83,4227104
000010DC  0040 8020 
                    1583   ; // SPER = {ICNT, x, x, x, x, ESPR} = 00xx_xx00 = 0x00
                    1584   ; SPI_Ext = 0x00;
000010E0  4239 0040 1585          clr.b     4227110
000010E4  8026      
                    1586   ; Disable_SPI_CS();
000010E6  13FC 00FF 1587          move.b    #255,4227112
000010EA  0040 8028 
000010EE  4E75      1588          rts
                    1589   ; // SPSR = {SPIF, WCOL, x, x, x, x, x} = 11xx_xxxx = 0xC0
                    1590   ; // Use bitwise OR because we dont want to overrite data in other bits, only ensure that SPIF and WCOL are 1
                    1591   ; //SPI_Status |= 0xC0;
                    1592   ; }
                    1593   ; /************************************************************************************
                    1594   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1595   ; ************************************************************************************/
                    1596   ; void WaitForSPITransmitComplete(void)
                    1597   ; {
                    1598   _WaitForSPITransmitComplete:
                    1599   ; // DONE: TODO : poll the status register SPIF bit looking for completion of transmission
                    1600   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1601   ; // just in case they were set
                    1602   ; // need to keep checking until data fully transmitted
                    1603   ; // printf("\r\nChecking for SPI transmit complete");
                    1604   ; while(!TestForSPITransmitDataComplete()) {}
                    1605   WaitForSPITransmitComplete_1:
000010F0  4EB8 10C4 1606          jsr       _TestForSPITransmitDataComplete
000010F4  4A80      1607          tst.l     D0
000010F6  6602      1608          bne.s     WaitForSPITransmitComplete_3
000010F8  60F6      1609          bra       WaitForSPITransmitComplete_1
                    1610   WaitForSPITransmitComplete_3:
                    1611   ; SPI_Status |= 0xC0;
000010FA  0039 00C0 1612          or.b      #192,4227106
000010FE  0040 8022 
00001102  4E75      1613          rts
                    1614   ; // printf("\r\nSPI transmit complete!");
                    1615   ; }
                    1616   ; /************************************************************************************
                    1617   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1618   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1619   ; ************************************************************************************/
                    1620   ; int WriteSPIChar(int c)
                    1621   ; {
                    1622   _WriteSPIChar:
00001104  4E56 FFFC 1623          link      A6,#-4
                    1624   ; // DONE: TODO
                    1625   ; // STEP 1 - Write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                    1626   ; // STEP 2 - wait for completion of transmission
                    1627   ; // STEP 3 - Return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                    1628   ; //          by reading fom the SPI controller Data Register.
                    1629   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                    1630   ; //
                    1631   ; // modify '0' below to return back read byte from data register
                    1632   ; // Dummy byte
                    1633   ; int received_data;
                    1634   ; // STEP 1
                    1635   ; SPI_Data = c;
00001108  202E 0008 1636          move.l    8(A6),D0
0000110C  13C0 0040 1637          move.b    D0,4227108
00001110  8024      
                    1638   ; // STEP 2
                    1639   ; WaitForSPITransmitComplete();
00001112  4EB8 10F0 1640          jsr       _WaitForSPITransmitComplete
                    1641   ; received_data = SPI_Data;
00001116  1039 0040 1642          move.b    4227108,D0
0000111A  8024      
0000111C  C0BC 0000 1643          and.l     #255,D0
00001120  00FF      
00001122  2D40 FFFC 1644          move.l    D0,-4(A6)
                    1645   ; // STEP 3
                    1646   ; // printf("\r\nchar hooray");
                    1647   ; return received_data;
00001126  202E FFFC 1648          move.l    -4(A6),D0
0000112A  4E5E      1649          unlk      A6
0000112C  4E75      1650          rts
                    1651   ; }
                    1652   ; /************************************************************************************
                    1653   ; ** User defined SPI Commands - (1) Includes Writing Data to SPI, (2) Waiting for write,
                    1654   ; ** (3) Writing commands to SPI, (4) Reading from SPI, and (5) erasing flash chip
                    1655   ; ************************************************************************************/
                    1656   ; // (1) Writing to SPI
                    1657   ; void WriteDataToSPI(unsigned char *MemAddress, int FlashAddress, int size)
                    1658   ; {
                    1659   _WriteDataToSPI:
0000112E  4E56 0000 1660          link      A6,#0
00001132  48E7 3020 1661          movem.l   D2/D3/A2,-(A7)
00001136  45F8 1104 1662          lea       _WriteSPIChar.L,A2
0000113A  262E 000C 1663          move.l    12(A6),D3
                    1664   ; int i = 0;
0000113E  4282      1665          clr.l     D2
                    1666   ; // to enable writing, send command 0x06 to flash chip
                    1667   ; WriteCommandSPI(0x06);
00001140  4878 0006 1668          pea       6
00001144  4EB9 0000 1669          jsr       _WriteCommandSPI
00001148  11DC      
0000114A  584F      1670          addq.w    #4,A7
                    1671   ; // still manually enabling/disabling CS for more complicated transmissions
                    1672   ; // since we dont want the actual internal memory cell writes yet
                    1673   ; Enable_SPI_CS();
0000114C  13FC 00FE 1674          move.b    #254,4227112
00001150  0040 8028 
                    1675   ; // getting chip to write data, Page Program to chip by sending command 0x02
                    1676   ; WriteSPIChar(0x02);
00001154  4878 0002 1677          pea       2
00001158  4E92      1678          jsr       (A2)
0000115A  584F      1679          addq.w    #4,A7
                    1680   ; // sending 3 bytes that make up the 24 bit internal flash address
                    1681   ; // gotta break it up into 3
                    1682   ; WriteSPIChar(FlashAddress >> 16);
0000115C  2203      1683          move.l    D3,D1
0000115E  E081      1684          asr.l     #8,D1
00001160  E081      1685          asr.l     #8,D1
00001162  2F01      1686          move.l    D1,-(A7)
00001164  4E92      1687          jsr       (A2)
00001166  584F      1688          addq.w    #4,A7
                    1689   ; WriteSPIChar(FlashAddress >> 8);
00001168  2203      1690          move.l    D3,D1
0000116A  E081      1691          asr.l     #8,D1
0000116C  2F01      1692          move.l    D1,-(A7)
0000116E  4E92      1693          jsr       (A2)
00001170  584F      1694          addq.w    #4,A7
                    1695   ; WriteSPIChar(FlashAddress);
00001172  2F03      1696          move.l    D3,-(A7)
00001174  4E92      1697          jsr       (A2)
00001176  584F      1698          addq.w    #4,A7
                    1699   ; // can now send up to 256 bytes of data by writing one byte at a time to
                    1700   ; // SPI controller data register
                    1701   ; for(i=0; i<size; i++)
00001178  4282      1702          clr.l     D2
                    1703   WriteDataToSPI_1:
0000117A  B4AE 0010 1704          cmp.l     16(A6),D2
0000117E  6C18      1705          bge.s     WriteDataToSPI_3
                    1706   ; {
                    1707   ; WriteSPIChar(MemAddress[i]);
00001180  206E 0008 1708          move.l    8(A6),A0
00001184  1230 2800 1709          move.b    0(A0,D2.L),D1
00001188  C2BC 0000 1710          and.l     #255,D1
0000118C  00FF      
0000118E  2F01      1711          move.l    D1,-(A7)
00001190  4E92      1712          jsr       (A2)
00001192  584F      1713          addq.w    #4,A7
00001194  5282      1714          addq.l    #1,D2
00001196  60E2      1715          bra       WriteDataToSPI_1
                    1716   WriteDataToSPI_3:
                    1717   ; }
                    1718   ; // once CS is high again, chip performs actual internal memory cell writes
                    1719   ; Disable_SPI_CS();
00001198  13FC 00FF 1720          move.b    #255,4227112
0000119C  0040 8028 
                    1721   ; WaitForSPIWriteComplete();
000011A0  4EB9 0000 1722          jsr       _WaitForSPIWriteComplete
000011A4  11AE      
000011A6  4CDF 040C 1723          movem.l   (A7)+,D2/D3/A2
000011AA  4E5E      1724          unlk      A6
000011AC  4E75      1725          rts
                    1726   ; }
                    1727   ; // (2) Waiting for write to complete
                    1728   ; void WaitForSPIWriteComplete(void)
                    1729   ; {
                    1730   _WaitForSPIWriteComplete:
                    1731   ; Enable_SPI_CS();
000011AE  13FC 00FE 1732          move.b    #254,4227112
000011B2  0040 8028 
                    1733   ; // status register (SPSR) reset value: 0x05
                    1734   ; WriteSPIChar(0x05);
000011B6  4878 0005 1735          pea       5
000011BA  4EB8 1104 1736          jsr       _WriteSPIChar
000011BE  584F      1737          addq.w    #4,A7
                    1738   ; // WriteSPIChar will return received data, if bit 0 (RFEMPTY) is high,
                    1739   ; // FIFO is empty and write is complete
                    1740   ; // printf("\r\nWAITING FOR FIFO EMPTY");
                    1741   ; while(WriteSPIChar(0x00)&0x01){
                    1742   WaitForSPIWriteComplete_1:
000011C0  42A7      1743          clr.l     -(A7)
000011C2  4EB8 1104 1744          jsr       _WriteSPIChar
000011C6  584F      1745          addq.w    #4,A7
000011C8  C0BC 0000 1746          and.l     #1,D0
000011CC  0001      
000011CE  6702      1747          beq.s     WaitForSPIWriteComplete_3
                    1748   ; }
000011D0  60EE      1749          bra       WaitForSPIWriteComplete_1
                    1750   WaitForSPIWriteComplete_3:
                    1751   ; // printf("\r\nFIFO EMPTY!");
                    1752   ; Disable_SPI_CS();
000011D2  13FC 00FF 1753          move.b    #255,4227112
000011D6  0040 8028 
000011DA  4E75      1754          rts
                    1755   ; }
                    1756   ; // (3) Writing commands to SPI
                    1757   ; void WriteCommandSPI(int cmd)
                    1758   ; {
                    1759   _WriteCommandSPI:
000011DC  4E56 0000 1760          link      A6,#0
                    1761   ; // need to enable flash chip before speaking to it
                    1762   ; // this is done by setting CS# low by writing to SPI controller CS register
                    1763   ; // need to disable this when we are finished each interaction
                    1764   ; // printf("\r\nEnabling CS");
                    1765   ; Enable_SPI_CS();
000011E0  13FC 00FE 1766          move.b    #254,4227112
000011E4  0040 8028 
                    1767   ; // printf("\r\nWriting command via WriteSPIChar");
                    1768   ; WriteSPIChar(cmd);
000011E8  2F2E 0008 1769          move.l    8(A6),-(A7)
000011EC  4EB8 1104 1770          jsr       _WriteSPIChar
000011F0  584F      1771          addq.w    #4,A7
                    1772   ; // printf("\r\nDisabling CS");
                    1773   ; Disable_SPI_CS();
000011F2  13FC 00FF 1774          move.b    #255,4227112
000011F6  0040 8028 
000011FA  4E5E      1775          unlk      A6
000011FC  4E75      1776          rts
                    1777   ; }
                    1778   ; // (4) Reading from SPI
                    1779   ; void ReadDataFromSPI(unsigned char *MemAddress, int FlashAddress, int size)
                    1780   ; {
                    1781   _ReadDataFromSPI:
000011FE  4E56 0000 1782          link      A6,#0
00001202  48E7 3820 1783          movem.l   D2/D3/D4/A2,-(A7)
00001206  45F8 1104 1784          lea       _WriteSPIChar.L,A2
0000120A  262E 000C 1785          move.l    12(A6),D3
                    1786   ; int i =0;
0000120E  4282      1787          clr.l     D2
                    1788   ; int dummy = 0;
00001210  4284      1789          clr.l     D4
                    1790   ; // still manually enabling/disabling CS for more complicated transmissions
                    1791   ; Enable_SPI_CS();
00001212  13FC 00FE 1792          move.b    #254,4227112
00001216  0040 8028 
                    1793   ; // issuing single read command 0x03
                    1794   ; WriteSPIChar(0x03);
0000121A  4878 0003 1795          pea       3
0000121E  4E92      1796          jsr       (A2)
00001220  584F      1797          addq.w    #4,A7
                    1798   ; // followed by 24 bit internal start address broken into 3 bytes
                    1799   ; WriteSPIChar(FlashAddress >> 16);
00001222  2203      1800          move.l    D3,D1
00001224  E081      1801          asr.l     #8,D1
00001226  E081      1802          asr.l     #8,D1
00001228  2F01      1803          move.l    D1,-(A7)
0000122A  4E92      1804          jsr       (A2)
0000122C  584F      1805          addq.w    #4,A7
                    1806   ; WriteSPIChar(FlashAddress >> 8);
0000122E  2203      1807          move.l    D3,D1
00001230  E081      1808          asr.l     #8,D1
00001232  2F01      1809          move.l    D1,-(A7)
00001234  4E92      1810          jsr       (A2)
00001236  584F      1811          addq.w    #4,A7
                    1812   ; WriteSPIChar(FlashAddress);
00001238  2F03      1813          move.l    D3,-(A7)
0000123A  4E92      1814          jsr       (A2)
0000123C  584F      1815          addq.w    #4,A7
                    1816   ; for(i=0; i<size; i++)
0000123E  4282      1817          clr.l     D2
                    1818   ReadDataFromSPI_1:
00001240  B4AE 0010 1819          cmp.l     16(A6),D2
00001244  6C14      1820          bge.s     ReadDataFromSPI_3
                    1821   ; {
                    1822   ; // can write dummy bytes to device
                    1823   ; // any data is fine, they are ignored by mem chip since we are in READ mode
                    1824   ; // teach write will return data stored in successive incremental locations
                    1825   ; dummy = WriteSPIChar(0x00);
00001246  42A7      1826          clr.l     -(A7)
00001248  4E92      1827          jsr       (A2)
0000124A  584F      1828          addq.w    #4,A7
0000124C  2800      1829          move.l    D0,D4
                    1830   ; MemAddress[i] = (unsigned char) dummy;
0000124E  206E 0008 1831          move.l    8(A6),A0
00001252  1184 2800 1832          move.b    D4,0(A0,D2.L)
00001256  5282      1833          addq.l    #1,D2
00001258  60E6      1834          bra       ReadDataFromSPI_1
                    1835   ReadDataFromSPI_3:
                    1836   ; }
                    1837   ; Disable_SPI_CS();
0000125A  13FC 00FF 1838          move.b    #255,4227112
0000125E  0040 8028 
00001262  4CDF 041C 1839          movem.l   (A7)+,D2/D3/D4/A2
00001266  4E5E      1840          unlk      A6
00001268  4E75      1841          rts
                    1842   ; }
                    1843   ; // (5) Erasing Flash Chip
                    1844   ; void EraseFlashChip(void)
                    1845   ; {
                    1846   _EraseFlashChip:
                    1847   ; // enabling device for writing
                    1848   ; // printf("\r\nErase Sequence: writing 06");
                    1849   ; WriteCommandSPI(0x06);
0000126A  4878 0006 1850          pea       6
0000126E  4EB8 11DC 1851          jsr       _WriteCommandSPI
00001272  584F      1852          addq.w    #4,A7
                    1853   ; // either writing hex C7 or 60 erases the chip
                    1854   ; // printf("\r\nErase Sequence: writing C7");
                    1855   ; WriteCommandSPI(0xC7);
00001274  4878 00C7 1856          pea       199
00001278  4EB8 11DC 1857          jsr       _WriteCommandSPI
0000127C  584F      1858          addq.w    #4,A7
                    1859   ; // Wait for write to complete
                    1860   ; // printf("\r\nSTARTING WAIT FOR SPI WRITE COMPLETE");
                    1861   ; WaitForSPIWriteComplete();
0000127E  4EB8 11AE 1862          jsr       _WaitForSPIWriteComplete
                    1863   ; printf("\r\nSPI flash chip has been erased!");
00001282  4879 0000 1864          pea       @m68kde~1_22.L
00001286  3CAA      
00001288  4EB9 0000 1865          jsr       _printf
0000128C  3176      
0000128E  584F      1866          addq.w    #4,A7
00001290  4E75      1867          rts
                    1868   ; }
                    1869   ; /*******************************************************************
                    1870   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1871   ; ********************************************************************/
                    1872   ; void ProgramFlashChip(void)
                    1873   ; {
                    1874   _ProgramFlashChip:
00001292  4E56 FE00 1875          link      A6,#-512
00001296  48E7 3E30 1876          movem.l   D2/D3/D4/D5/D6/A2/A3,-(A7)
0000129A  45F9 0000 1877          lea       _printf.L,A2
0000129E  3176      
000012A0  47EE FE00 1878          lea       -512(A6),A3
                    1879   ; //
                    1880   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1881   ; // TODO : then verify by reading it back and comparing to memory
                    1882   ; //
                    1883   ; unsigned char *ramPointer = 0x08000000;
000012A4  283C 0800 1884          move.l    #134217728,D4
000012A8  0000      
                    1885   ; unsigned int i = 0;
000012AA  4283      1886          clr.l     D3
                    1887   ; unsigned int j = 0;
000012AC  4282      1888          clr.l     D2
                    1889   ; unsigned int flashAddress = 0;
000012AE  4285      1890          clr.l     D5
                    1891   ; int programChipPass = 1;
000012B0  7C01      1892          moveq     #1,D6
                    1893   ; unsigned char readBuffer[256];
                    1894   ; unsigned char writeBuffer[256];
                    1895   ; printf("\r\nErasing SPI flash chip....");
000012B2  4879 0000 1896          pea       @m68kde~1_23.L
000012B6  3CCC      
000012B8  4E92      1897          jsr       (A2)
000012BA  584F      1898          addq.w    #4,A7
                    1899   ; EraseFlashChip();
000012BC  4EB8 126A 1900          jsr       _EraseFlashChip
                    1901   ; printf("\r\nWriting program to flash chip.");
000012C0  4879 0000 1902          pea       @m68kde~1_24.L
000012C4  3CEA      
000012C6  4E92      1903          jsr       (A2)
000012C8  584F      1904          addq.w    #4,A7
                    1905   ; // need to split 1024 bytes into 4 chunks of 256 bytes
                    1906   ; for (i = 0; i < 1024; i++)
000012CA  4283      1907          clr.l     D3
                    1908   ProgramFlashChip_1:
000012CC  0C83 0000 1909          cmp.l     #1024,D3
000012D0  0400      
000012D2  6400 005E 1910          bhs       ProgramFlashChip_3
                    1911   ; {
                    1912   ; for(j=0; j<256; j++)
000012D6  4282      1913          clr.l     D2
                    1914   ProgramFlashChip_4:
000012D8  0C82 0000 1915          cmp.l     #256,D2
000012DC  0100      
000012DE  6410      1916          bhs.s     ProgramFlashChip_6
                    1917   ; {
                    1918   ; writeBuffer[j] = ramPointer[j];
000012E0  2044      1919          move.l    D4,A0
000012E2  43EE FF00 1920          lea       -256(A6),A1
000012E6  13B0 2800 1921          move.b    0(A0,D2.L),0(A1,D2.L)
000012EA  2800      
000012EC  5282      1922          addq.l    #1,D2
000012EE  60E8      1923          bra       ProgramFlashChip_4
                    1924   ProgramFlashChip_6:
                    1925   ; }
                    1926   ; WriteDataToSPI(writeBuffer, flashAddress, sizeof(writeBuffer));
000012F0  4878 0100 1927          pea       256
000012F4  2F05      1928          move.l    D5,-(A7)
000012F6  486E FF00 1929          pea       -256(A6)
000012FA  4EB8 112E 1930          jsr       _WriteDataToSPI
000012FE  DEFC 000C 1931          add.w     #12,A7
                    1932   ; ramPointer = ramPointer + 256;
00001302  0684 0000 1933          add.l     #256,D4
00001306  0100      
                    1934   ; flashAddress = flashAddress + 256;
00001308  0685 0000 1935          add.l     #256,D5
0000130C  0100      
                    1936   ; // getting some feedback while its programming
                    1937   ; if((i%128) == 0) printf(". ");
0000130E  2F03      1938          move.l    D3,-(A7)
00001310  4878 0080 1939          pea       128
00001314  4EB9 0000 1940          jsr       ULDIV
00001318  2FB4      
0000131A  202F 0004 1941          move.l    4(A7),D0
0000131E  504F      1942          addq.w    #8,A7
00001320  4A80      1943          tst.l     D0
00001322  660A      1944          bne.s     ProgramFlashChip_7
00001324  4879 0000 1945          pea       @m68kde~1_25.L
00001328  3D0C      
0000132A  4E92      1946          jsr       (A2)
0000132C  584F      1947          addq.w    #4,A7
                    1948   ProgramFlashChip_7:
0000132E  5283      1949          addq.l    #1,D3
00001330  609A      1950          bra       ProgramFlashChip_1
                    1951   ProgramFlashChip_3:
                    1952   ; }
                    1953   ; printf("\r\nProgramming flash chip complete.");
00001332  4879 0000 1954          pea       @m68kde~1_26.L
00001336  3D10      
00001338  4E92      1955          jsr       (A2)
0000133A  584F      1956          addq.w    #4,A7
                    1957   ; printf("\r\nReading from flash chip.");
0000133C  4879 0000 1958          pea       @m68kde~1_27.L
00001340  3D34      
00001342  4E92      1959          jsr       (A2)
00001344  584F      1960          addq.w    #4,A7
                    1961   ; flashAddress = 0;
00001346  4285      1962          clr.l     D5
                    1963   ; ramPointer = 0x08000000;
00001348  283C 0800 1964          move.l    #134217728,D4
0000134C  0000      
                    1965   ; // need to split 1024 bytes into 4 chunks of 256 bytes
                    1966   ; for(i = 0; i<1024; i++)
0000134E  4283      1967          clr.l     D3
                    1968   ProgramFlashChip_9:
00001350  0C83 0000 1969          cmp.l     #1024,D3
00001354  0400      
00001356  6400 009A 1970          bhs       ProgramFlashChip_11
                    1971   ; {
                    1972   ; ReadDataFromSPI(readBuffer, flashAddress, sizeof(readBuffer));
0000135A  4878 0100 1973          pea       256
0000135E  2F05      1974          move.l    D5,-(A7)
00001360  2F0B      1975          move.l    A3,-(A7)
00001362  4EB8 11FE 1976          jsr       _ReadDataFromSPI
00001366  DEFC 000C 1977          add.w     #12,A7
                    1978   ; for(j = 0; j < sizeof(readBuffer); j++)
0000136A  4282      1979          clr.l     D2
                    1980   ProgramFlashChip_12:
0000136C  0C82 0000 1981          cmp.l     #256,D2
00001370  0100      
00001372  6400 004C 1982          bhs       ProgramFlashChip_14
                    1983   ; {
                    1984   ; if(ramPointer[j] != readBuffer[j])
00001376  2044      1985          move.l    D4,A0
00001378  1030 2800 1986          move.b    0(A0,D2.L),D0
0000137C  B033 2800 1987          cmp.b     0(A3,D2.L),D0
00001380  6700 003A 1988          beq       ProgramFlashChip_15
                    1989   ; {
                    1990   ; printf("\r\nERROR: Data mismatch found at address 0x%08x", &ramPointer[j]);
00001384  2204      1991          move.l    D4,D1
00001386  D282      1992          add.l     D2,D1
00001388  2F01      1993          move.l    D1,-(A7)
0000138A  4879 0000 1994          pea       @m68kde~1_28.L
0000138E  3D50      
00001390  4E92      1995          jsr       (A2)
00001392  504F      1996          addq.w    #8,A7
                    1997   ; printf("\r\nWrite Buffer: 0x%08x      Read Buffer: 0x%08x", ramPointer[j], readBuffer[j]);
00001394  1233 2800 1998          move.b    0(A3,D2.L),D1
00001398  C2BC 0000 1999          and.l     #255,D1
0000139C  00FF      
0000139E  2F01      2000          move.l    D1,-(A7)
000013A0  2044      2001          move.l    D4,A0
000013A2  1230 2800 2002          move.b    0(A0,D2.L),D1
000013A6  C2BC 0000 2003          and.l     #255,D1
000013AA  00FF      
000013AC  2F01      2004          move.l    D1,-(A7)
000013AE  4879 0000 2005          pea       @m68kde~1_29.L
000013B2  3D80      
000013B4  4E92      2006          jsr       (A2)
000013B6  DEFC 000C 2007          add.w     #12,A7
                    2008   ; programChipPass = 0;
000013BA  4286      2009          clr.l     D6
                    2010   ProgramFlashChip_15:
000013BC  5282      2011          addq.l    #1,D2
000013BE  60AC      2012          bra       ProgramFlashChip_12
                    2013   ProgramFlashChip_14:
                    2014   ; }
                    2015   ; }
                    2016   ; ramPointer = ramPointer + 256;
000013C0  0684 0000 2017          add.l     #256,D4
000013C4  0100      
                    2018   ; flashAddress = flashAddress +  256;
000013C6  0685 0000 2019          add.l     #256,D5
000013CA  0100      
                    2020   ; // getting some feedback while its programming
                    2021   ; if((i%128) == 0) printf(". ");
000013CC  2F03      2022          move.l    D3,-(A7)
000013CE  4878 0080 2023          pea       128
000013D2  4EB9 0000 2024          jsr       ULDIV
000013D6  2FB4      
000013D8  202F 0004 2025          move.l    4(A7),D0
000013DC  504F      2026          addq.w    #8,A7
000013DE  4A80      2027          tst.l     D0
000013E0  660A      2028          bne.s     ProgramFlashChip_17
000013E2  4879 0000 2029          pea       @m68kde~1_25.L
000013E6  3D0C      
000013E8  4E92      2030          jsr       (A2)
000013EA  584F      2031          addq.w    #4,A7
                    2032   ProgramFlashChip_17:
000013EC  5283      2033          addq.l    #1,D3
000013EE  6000 FF60 2034          bra       ProgramFlashChip_9
                    2035   ProgramFlashChip_11:
                    2036   ; }
                    2037   ; printf("\r\nReading from flash chip complete.");
000013F2  4879 0000 2038          pea       @m68kde~1_30.L
000013F6  3DB0      
000013F8  4E92      2039          jsr       (A2)
000013FA  584F      2040          addq.w    #4,A7
                    2041   ; if(programChipPass) printf("\r\nProgramming chip SUCCESS.\r\n");
000013FC  4A86      2042          tst.l     D6
000013FE  670C      2043          beq.s     ProgramFlashChip_19
00001400  4879 0000 2044          pea       @m68kde~1_31.L
00001404  3DD4      
00001406  4E92      2045          jsr       (A2)
00001408  584F      2046          addq.w    #4,A7
0000140A  600A      2047          bra.s     ProgramFlashChip_20
                    2048   ProgramFlashChip_19:
                    2049   ; else printf("\r\nProgramming chip FAILURE.\r\n");
0000140C  4879 0000 2050          pea       @m68kde~1_32.L
00001410  3DF2      
00001412  4E92      2051          jsr       (A2)
00001414  584F      2052          addq.w    #4,A7
                    2053   ProgramFlashChip_20:
00001416  4CDF 0C7C 2054          movem.l   (A7)+,D2/D3/D4/D5/D6/A2/A3
0000141A  4E5E      2055          unlk      A6
0000141C  4E75      2056          rts
                    2057   ; }
                    2058   ; /*************************************************************************
                    2059   ; ** Load a program from SPI Flash Chip and copy to Dram
                    2060   ; **************************************************************************/
                    2061   ; void LoadFromFlashChip(void)
                    2062   ; {
                    2063   _LoadFromFlashChip:
0000141E  4E56 FF00 2064          link      A6,#-256
00001422  48E7 3C20 2065          movem.l   D2/D3/D4/D5/A2,-(A7)
00001426  45F9 0000 2066          lea       _printf.L,A2
0000142A  3176      
                    2067   ; unsigned char *ramPointer = 0x08000000;
0000142C  2A3C 0800 2068          move.l    #134217728,D5
00001430  0000      
                    2069   ; unsigned int i = 0;
00001432  4283      2070          clr.l     D3
                    2071   ; unsigned int j = 0;
00001434  4282      2072          clr.l     D2
                    2073   ; unsigned int flashAddress = 0;
00001436  4284      2074          clr.l     D4
                    2075   ; unsigned char readBuffer[256];
                    2076   ; printf("\r\nLoading Program From SPI Flash....") ;
00001438  4879 0000 2077          pea       @m68kde~1_33.L
0000143C  3E10      
0000143E  4E92      2078          jsr       (A2)
00001440  584F      2079          addq.w    #4,A7
                    2080   ; //
                    2081   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    2082   ; //
                    2083   ; for(i = 0; i < 1024; i++)
00001442  4283      2084          clr.l     D3
                    2085   LoadFromFlashChip_1:
00001444  0C83 0000 2086          cmp.l     #1024,D3
00001448  0400      
0000144A  6400 005E 2087          bhs       LoadFromFlashChip_3
                    2088   ; {
                    2089   ; ReadDataFromSPI(readBuffer, flashAddress, sizeof(readBuffer));
0000144E  4878 0100 2090          pea       256
00001452  2F04      2091          move.l    D4,-(A7)
00001454  486E FF00 2092          pea       -256(A6)
00001458  4EB8 11FE 2093          jsr       _ReadDataFromSPI
0000145C  DEFC 000C 2094          add.w     #12,A7
                    2095   ; for(j = 0; j <sizeof(readBuffer); j++)
00001460  4282      2096          clr.l     D2
                    2097   LoadFromFlashChip_4:
00001462  0C82 0000 2098          cmp.l     #256,D2
00001466  0100      
00001468  6410      2099          bhs.s     LoadFromFlashChip_6
                    2100   ; {
                    2101   ; ramPointer[j] = readBuffer[j];
0000146A  41EE FF00 2102          lea       -256(A6),A0
0000146E  2245      2103          move.l    D5,A1
00001470  13B0 2800 2104          move.b    0(A0,D2.L),0(A1,D2.L)
00001474  2800      
00001476  5282      2105          addq.l    #1,D2
00001478  60E8      2106          bra       LoadFromFlashChip_4
                    2107   LoadFromFlashChip_6:
                    2108   ; }
                    2109   ; ramPointer = ramPointer + 256;
0000147A  0685 0000 2110          add.l     #256,D5
0000147E  0100      
                    2111   ; flashAddress = flashAddress + 256;
00001480  0684 0000 2112          add.l     #256,D4
00001484  0100      
                    2113   ; // getting some feedback while its programming
                    2114   ; if((i%128) == 0) printf(". ");
00001486  2F03      2115          move.l    D3,-(A7)
00001488  4878 0080 2116          pea       128
0000148C  4EB9 0000 2117          jsr       ULDIV
00001490  2FB4      
00001492  202F 0004 2118          move.l    4(A7),D0
00001496  504F      2119          addq.w    #8,A7
00001498  4A80      2120          tst.l     D0
0000149A  660A      2121          bne.s     LoadFromFlashChip_7
0000149C  4879 0000 2122          pea       @m68kde~1_25.L
000014A0  3D0C      
000014A2  4E92      2123          jsr       (A2)
000014A4  584F      2124          addq.w    #4,A7
                    2125   LoadFromFlashChip_7:
000014A6  5283      2126          addq.l    #1,D3
000014A8  609A      2127          bra       LoadFromFlashChip_1
                    2128   LoadFromFlashChip_3:
                    2129   ; }
                    2130   ; printf("\r\nFinished loading program from SPI flash.");
000014AA  4879 0000 2131          pea       @m68kde~1_34.L
000014AE  3E36      
000014B0  4E92      2132          jsr       (A2)
000014B2  584F      2133          addq.w    #4,A7
000014B4  4CDF 043C 2134          movem.l   (A7)+,D2/D3/D4/D5/A2
000014B8  4E5E      2135          unlk      A6
000014BA  4E75      2136          rts
                    2137   ; }
                    2138   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2139   ; // IMPORTANT
                    2140   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2141   ; // has to be done with an interrupt (IRQ Level 6)
                    2142   ; //
                    2143   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2144   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2145   ; //
                    2146   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2147   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2148   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2149   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2150   ; // program area
                    2151   ; //
                    2152   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2153   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2154   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2155   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2156   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2157   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2158   ; void DumpRegisters()
                    2159   ; {
                    2160   _DumpRegisters:
000014BC  48E7 3F3C 2161          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000014C0  45F9 0000 2162          lea       _putch.L,A2
000014C4  3092      
000014C6  47F9 0000 2163          lea       _printf.L,A3
000014CA  3176      
000014CC  49F9 0B00 2164          lea       _SR.L,A4
000014D0  012C      
000014D2  4BF9 0B00 2165          lea       _WatchPointString.L,A5
000014D6  01C2      
                    2166   ; short i, x, j, k ;
                    2167   ; unsigned char c, *BytePointer;
                    2168   ; // buld up strings for displaying watchpoints
                    2169   ; for(x = 0; x < (short)(8); x++)
000014D8  4242      2170          clr.w     D2
                    2171   DumpRegisters_1:
000014DA  0C42 0008 2172          cmp.w     #8,D2
000014DE  6C00 01C6 2173          bge       DumpRegisters_3
                    2174   ; {
                    2175   ; if(WatchPointSetOrCleared[x] == 1)
000014E2  48C2      2176          ext.l     D2
000014E4  2002      2177          move.l    D2,D0
000014E6  E588      2178          lsl.l     #2,D0
000014E8  41F9 0B00 2179          lea       _WatchPointSetOrCleared.L,A0
000014EC  01A2      
000014EE  2030 0800 2180          move.l    0(A0,D0.L),D0
000014F2  0C80 0000 2181          cmp.l     #1,D0
000014F6  0001      
000014F8  6600 0186 2182          bne       DumpRegisters_4
                    2183   ; {
                    2184   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
000014FC  48C2      2185          ext.l     D2
000014FE  2202      2186          move.l    D2,D1
00001500  E589      2187          lsl.l     #2,D1
00001502  41F9 0B00 2188          lea       _WatchPointAddress.L,A0
00001506  0182      
00001508  2F30 1800 2189          move.l    0(A0,D1.L),-(A7)
0000150C  4879 0000 2190          pea       @m68kde~1_35.L
00001510  3E62      
00001512  220D      2191          move.l    A5,D1
00001514  48C2      2192          ext.l     D2
00001516  2F00      2193          move.l    D0,-(A7)
00001518  2002      2194          move.l    D2,D0
0000151A  C1FC 0064 2195          muls      #100,D0
0000151E  D280      2196          add.l     D0,D1
00001520  201F      2197          move.l    (A7)+,D0
00001522  2F01      2198          move.l    D1,-(A7)
00001524  4EB9 0000 2199          jsr       _sprintf
00001528  3112      
0000152A  DEFC 000C 2200          add.w     #12,A7
                    2201   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000152E  48C2      2202          ext.l     D2
00001530  2002      2203          move.l    D2,D0
00001532  E588      2204          lsl.l     #2,D0
00001534  41F9 0B00 2205          lea       _WatchPointAddress.L,A0
00001538  0182      
0000153A  2A30 0800 2206          move.l    0(A0,D0.L),D5
                    2207   ; for(j = 0; j < (short)(16); j+=2)
0000153E  4243      2208          clr.w     D3
                    2209   DumpRegisters_6:
00001540  0C43 0010 2210          cmp.w     #16,D3
00001544  6C00 0082 2211          bge       DumpRegisters_8
                    2212   ; {
                    2213   ; for(k = 0; k < (short)(2); k++)
00001548  4246      2214          clr.w     D6
                    2215   DumpRegisters_9:
0000154A  0C46 0002 2216          cmp.w     #2,D6
0000154E  6C00 0052 2217          bge       DumpRegisters_11
                    2218   ; {
                    2219   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001552  2045      2220          move.l    D5,A0
00001554  48C3      2221          ext.l     D3
00001556  2203      2222          move.l    D3,D1
00001558  48C6      2223          ext.l     D6
0000155A  D286      2224          add.l     D6,D1
0000155C  1230 1800 2225          move.b    0(A0,D1.L),D1
00001560  C2BC 0000 2226          and.l     #255,D1
00001564  00FF      
00001566  2F01      2227          move.l    D1,-(A7)
00001568  4879 0000 2228          pea       @m68kde~1_8.L
0000156C  3B00      
0000156E  4879 0B00 2229          pea       _TempString.L
00001572  04E2      
00001574  4EB9 0000 2230          jsr       _sprintf
00001578  3112      
0000157A  DEFC 000C 2231          add.w     #12,A7
                    2232   ; strcat(WatchPointString[x], TempString) ;
0000157E  4879 0B00 2233          pea       _TempString.L
00001582  04E2      
00001584  220D      2234          move.l    A5,D1
00001586  48C2      2235          ext.l     D2
00001588  2F00      2236          move.l    D0,-(A7)
0000158A  2002      2237          move.l    D2,D0
0000158C  C1FC 0064 2238          muls      #100,D0
00001590  D280      2239          add.l     D0,D1
00001592  201F      2240          move.l    (A7)+,D0
00001594  2F01      2241          move.l    D1,-(A7)
00001596  4EB9 0000 2242          jsr       _strcat
0000159A  3144      
0000159C  504F      2243          addq.w    #8,A7
0000159E  5246      2244          addq.w    #1,D6
000015A0  60A8      2245          bra       DumpRegisters_9
                    2246   DumpRegisters_11:
                    2247   ; }
                    2248   ; strcat(WatchPointString[x]," ") ;
000015A2  4879 0000 2249          pea       @m68kde~1_36.L
000015A6  3E6A      
000015A8  220D      2250          move.l    A5,D1
000015AA  48C2      2251          ext.l     D2
000015AC  2F00      2252          move.l    D0,-(A7)
000015AE  2002      2253          move.l    D2,D0
000015B0  C1FC 0064 2254          muls      #100,D0
000015B4  D280      2255          add.l     D0,D1
000015B6  201F      2256          move.l    (A7)+,D0
000015B8  2F01      2257          move.l    D1,-(A7)
000015BA  4EB9 0000 2258          jsr       _strcat
000015BE  3144      
000015C0  504F      2259          addq.w    #8,A7
000015C2  5443      2260          addq.w    #2,D3
000015C4  6000 FF7A 2261          bra       DumpRegisters_6
                    2262   DumpRegisters_8:
                    2263   ; }
                    2264   ; strcat(WatchPointString[x], "  ") ;
000015C8  4879 0000 2265          pea       @m68kde~1_9.L
000015CC  3B06      
000015CE  220D      2266          move.l    A5,D1
000015D0  48C2      2267          ext.l     D2
000015D2  2F00      2268          move.l    D0,-(A7)
000015D4  2002      2269          move.l    D2,D0
000015D6  C1FC 0064 2270          muls      #100,D0
000015DA  D280      2271          add.l     D0,D1
000015DC  201F      2272          move.l    (A7)+,D0
000015DE  2F01      2273          move.l    D1,-(A7)
000015E0  4EB9 0000 2274          jsr       _strcat
000015E4  3144      
000015E6  504F      2275          addq.w    #8,A7
                    2276   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000015E8  48C2      2277          ext.l     D2
000015EA  2002      2278          move.l    D2,D0
000015EC  E588      2279          lsl.l     #2,D0
000015EE  41F9 0B00 2280          lea       _WatchPointAddress.L,A0
000015F2  0182      
000015F4  2A30 0800 2281          move.l    0(A0,D0.L),D5
                    2282   ; for(j = 0; j < (short)(16); j++)
000015F8  4243      2283          clr.w     D3
                    2284   DumpRegisters_12:
000015FA  0C43 0010 2285          cmp.w     #16,D3
000015FE  6C00 007E 2286          bge       DumpRegisters_14
                    2287   ; {
                    2288   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001602  2045      2289          move.l    D5,A0
00001604  48C3      2290          ext.l     D3
00001606  1030 3800 2291          move.b    0(A0,D3.L),D0
0000160A  C03C 007F 2292          and.b     #127,D0
0000160E  1E00      2293          move.b    D0,D7
                    2294   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001610  0C07 007F 2295          cmp.b     #127,D7
00001614  6206      2296          bhi.s     DumpRegisters_17
00001616  0C07 0020 2297          cmp.b     #32,D7
0000161A  6416      2298          bhs.s     DumpRegisters_15
                    2299   DumpRegisters_17:
                    2300   ; sprintf(TempString, ".") ;
0000161C  4879 0000 2301          pea       @m68kde~1_37.L
00001620  3E6C      
00001622  4879 0B00 2302          pea       _TempString.L
00001626  04E2      
00001628  4EB9 0000 2303          jsr       _sprintf
0000162C  3112      
0000162E  504F      2304          addq.w    #8,A7
00001630  6026      2305          bra.s     DumpRegisters_16
                    2306   DumpRegisters_15:
                    2307   ; else
                    2308   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001632  2045      2309          move.l    D5,A0
00001634  48C3      2310          ext.l     D3
00001636  1230 3800 2311          move.b    0(A0,D3.L),D1
0000163A  C2BC 0000 2312          and.l     #255,D1
0000163E  00FF      
00001640  2F01      2313          move.l    D1,-(A7)
00001642  4879 0000 2314          pea       @m68kde~1_38.L
00001646  3E6E      
00001648  4879 0B00 2315          pea       _TempString.L
0000164C  04E2      
0000164E  4EB9 0000 2316          jsr       _sprintf
00001652  3112      
00001654  DEFC 000C 2317          add.w     #12,A7
                    2318   DumpRegisters_16:
                    2319   ; strcat(WatchPointString[x], TempString) ;
00001658  4879 0B00 2320          pea       _TempString.L
0000165C  04E2      
0000165E  220D      2321          move.l    A5,D1
00001660  48C2      2322          ext.l     D2
00001662  2F00      2323          move.l    D0,-(A7)
00001664  2002      2324          move.l    D2,D0
00001666  C1FC 0064 2325          muls      #100,D0
0000166A  D280      2326          add.l     D0,D1
0000166C  201F      2327          move.l    (A7)+,D0
0000166E  2F01      2328          move.l    D1,-(A7)
00001670  4EB9 0000 2329          jsr       _strcat
00001674  3144      
00001676  504F      2330          addq.w    #8,A7
00001678  5243      2331          addq.w    #1,D3
0000167A  6000 FF7E 2332          bra       DumpRegisters_12
                    2333   DumpRegisters_14:
0000167E  6020      2334          bra.s     DumpRegisters_5
                    2335   DumpRegisters_4:
                    2336   ; }
                    2337   ; }
                    2338   ; else
                    2339   ; strcpy(WatchPointString[x], "") ;
00001680  4879 0000 2340          pea       @m68kde~1_39.L
00001684  3E72      
00001686  220D      2341          move.l    A5,D1
00001688  48C2      2342          ext.l     D2
0000168A  2F00      2343          move.l    D0,-(A7)
0000168C  2002      2344          move.l    D2,D0
0000168E  C1FC 0064 2345          muls      #100,D0
00001692  D280      2346          add.l     D0,D1
00001694  201F      2347          move.l    (A7)+,D0
00001696  2F01      2348          move.l    D1,-(A7)
00001698  4EB9 0000 2349          jsr       _strcpy
0000169C  2FA4      
0000169E  504F      2350          addq.w    #8,A7
                    2351   DumpRegisters_5:
000016A0  5242      2352          addq.w    #1,D2
000016A2  6000 FE36 2353          bra       DumpRegisters_1
                    2354   DumpRegisters_3:
                    2355   ; }
                    2356   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000016A6  2F39 0B00 2357          move.l    _a0.L,-(A7)
000016AA  0104      
000016AC  2F39 0B00 2358          move.l    _d0.L,-(A7)
000016B0  00E4      
000016B2  4879 0000 2359          pea       @m68kde~1_40.L
000016B6  3E74      
000016B8  4E93      2360          jsr       (A3)
000016BA  DEFC 000C 2361          add.w     #12,A7
                    2362   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000016BE  2F39 0B00 2363          move.l    _a1.L,-(A7)
000016C2  0108      
000016C4  2F39 0B00 2364          move.l    _d1.L,-(A7)
000016C8  00E8      
000016CA  4879 0000 2365          pea       @m68kde~1_41.L
000016CE  3E90      
000016D0  4E93      2366          jsr       (A3)
000016D2  DEFC 000C 2367          add.w     #12,A7
                    2368   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000016D6  2F39 0B00 2369          move.l    _a2.L,-(A7)
000016DA  010C      
000016DC  2F39 0B00 2370          move.l    _d2.L,-(A7)
000016E0  00EC      
000016E2  4879 0000 2371          pea       @m68kde~1_42.L
000016E6  3EAA      
000016E8  4E93      2372          jsr       (A3)
000016EA  DEFC 000C 2373          add.w     #12,A7
                    2374   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
000016EE  2F39 0B00 2375          move.l    _a3.L,-(A7)
000016F2  0110      
000016F4  2F39 0B00 2376          move.l    _d3.L,-(A7)
000016F8  00F0      
000016FA  4879 0000 2377          pea       @m68kde~1_43.L
000016FE  3EC4      
00001700  4E93      2378          jsr       (A3)
00001702  DEFC 000C 2379          add.w     #12,A7
                    2380   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001706  2F39 0B00 2381          move.l    _a4.L,-(A7)
0000170A  0114      
0000170C  2F39 0B00 2382          move.l    _d4.L,-(A7)
00001710  00F4      
00001712  4879 0000 2383          pea       @m68kde~1_44.L
00001716  3EDE      
00001718  4E93      2384          jsr       (A3)
0000171A  DEFC 000C 2385          add.w     #12,A7
                    2386   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
0000171E  2F39 0B00 2387          move.l    _a5.L,-(A7)
00001722  0118      
00001724  2F39 0B00 2388          move.l    _d5.L,-(A7)
00001728  00F8      
0000172A  4879 0000 2389          pea       @m68kde~1_45.L
0000172E  3EF8      
00001730  4E93      2390          jsr       (A3)
00001732  DEFC 000C 2391          add.w     #12,A7
                    2392   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001736  2F39 0B00 2393          move.l    _a6.L,-(A7)
0000173A  011C      
0000173C  2F39 0B00 2394          move.l    _d6.L,-(A7)
00001740  00FC      
00001742  4879 0000 2395          pea       @m68kde~1_46.L
00001746  3F12      
00001748  4E93      2396          jsr       (A3)
0000174A  DEFC 000C 2397          add.w     #12,A7
                    2398   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
0000174E  3214      2399          move.w    (A4),D1
00001750  C27C 2000 2400          and.w     #8192,D1
00001754  0C41 2000 2401          cmp.w     #8192,D1
00001758  6608      2402          bne.s     DumpRegisters_18
0000175A  2239 0B00 2403          move.l    _SSP.L,D1
0000175E  0124      
00001760  6006      2404          bra.s     DumpRegisters_19
                    2405   DumpRegisters_18:
00001762  2239 0B00 2406          move.l    _USP.L,D1
00001766  0128      
                    2407   DumpRegisters_19:
00001768  2F01      2408          move.l    D1,-(A7)
0000176A  2F39 0B00 2409          move.l    _d7.L,-(A7)
0000176E  0100      
00001770  4879 0000 2410          pea       @m68kde~1_47.L
00001774  3F2C      
00001776  4E93      2411          jsr       (A3)
00001778  DEFC 000C 2412          add.w     #12,A7
                    2413   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000177C  2F39 0B00 2414          move.l    _USP.L,-(A7)
00001780  0128      
00001782  4879 0000 2415          pea       @m68kde~1_48.L
00001786  3F46      
00001788  4E93      2416          jsr       (A3)
0000178A  504F      2417          addq.w    #8,A7
                    2418   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
0000178C  2F39 0B00 2419          move.l    _SSP.L,-(A7)
00001790  0124      
00001792  4879 0000 2420          pea       @m68kde~1_49.L
00001796  3F64      
00001798  4E93      2421          jsr       (A3)
0000179A  504F      2422          addq.w    #8,A7
                    2423   ; printf("\r\n SR = $%04X   ",SR) ;
0000179C  3214      2424          move.w    (A4),D1
0000179E  C2BC 0000 2425          and.l     #65535,D1
000017A2  FFFF      
000017A4  2F01      2426          move.l    D1,-(A7)
000017A6  4879 0000 2427          pea       @m68kde~1_50.L
000017AA  3F86      
000017AC  4E93      2428          jsr       (A3)
000017AE  504F      2429          addq.w    #8,A7
                    2430   ; // display the status word in characters etc.
                    2431   ; printf("   [") ;
000017B0  4879 0000 2432          pea       @m68kde~1_51.L
000017B4  3F98      
000017B6  4E93      2433          jsr       (A3)
000017B8  584F      2434          addq.w    #4,A7
                    2435   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000017BA  3014      2436          move.w    (A4),D0
000017BC  C07C 8000 2437          and.w     #32768,D0
000017C0  0C40 8000 2438          cmp.w     #32768,D0
000017C4  660A      2439          bne.s     DumpRegisters_20
000017C6  4878 0054 2440          pea       84
000017CA  4E92      2441          jsr       (A2)
000017CC  584F      2442          addq.w    #4,A7
000017CE  6008      2443          bra.s     DumpRegisters_21
                    2444   DumpRegisters_20:
000017D0  4878 002D 2445          pea       45
000017D4  4E92      2446          jsr       (A2)
000017D6  584F      2447          addq.w    #4,A7
                    2448   DumpRegisters_21:
                    2449   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000017D8  3014      2450          move.w    (A4),D0
000017DA  C07C 2000 2451          and.w     #8192,D0
000017DE  0C40 2000 2452          cmp.w     #8192,D0
000017E2  660A      2453          bne.s     DumpRegisters_22
000017E4  4878 0053 2454          pea       83
000017E8  4E92      2455          jsr       (A2)
000017EA  584F      2456          addq.w    #4,A7
000017EC  6008      2457          bra.s     DumpRegisters_23
                    2458   DumpRegisters_22:
000017EE  4878 0055 2459          pea       85
000017F2  4E92      2460          jsr       (A2)
000017F4  584F      2461          addq.w    #4,A7
                    2462   DumpRegisters_23:
                    2463   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000017F6  3014      2464          move.w    (A4),D0
000017F8  C07C 0400 2465          and.w     #1024,D0
000017FC  0C40 0400 2466          cmp.w     #1024,D0
00001800  660A      2467          bne.s     DumpRegisters_24
00001802  4878 0031 2468          pea       49
00001806  4E92      2469          jsr       (A2)
00001808  584F      2470          addq.w    #4,A7
0000180A  6008      2471          bra.s     DumpRegisters_25
                    2472   DumpRegisters_24:
0000180C  4878 0030 2473          pea       48
00001810  4E92      2474          jsr       (A2)
00001812  584F      2475          addq.w    #4,A7
                    2476   DumpRegisters_25:
                    2477   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001814  3014      2478          move.w    (A4),D0
00001816  C07C 0200 2479          and.w     #512,D0
0000181A  0C40 0200 2480          cmp.w     #512,D0
0000181E  660A      2481          bne.s     DumpRegisters_26
00001820  4878 0031 2482          pea       49
00001824  4E92      2483          jsr       (A2)
00001826  584F      2484          addq.w    #4,A7
00001828  6008      2485          bra.s     DumpRegisters_27
                    2486   DumpRegisters_26:
0000182A  4878 0030 2487          pea       48
0000182E  4E92      2488          jsr       (A2)
00001830  584F      2489          addq.w    #4,A7
                    2490   DumpRegisters_27:
                    2491   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001832  3014      2492          move.w    (A4),D0
00001834  C07C 0100 2493          and.w     #256,D0
00001838  0C40 0100 2494          cmp.w     #256,D0
0000183C  660A      2495          bne.s     DumpRegisters_28
0000183E  4878 0031 2496          pea       49
00001842  4E92      2497          jsr       (A2)
00001844  584F      2498          addq.w    #4,A7
00001846  6008      2499          bra.s     DumpRegisters_29
                    2500   DumpRegisters_28:
00001848  4878 0030 2501          pea       48
0000184C  4E92      2502          jsr       (A2)
0000184E  584F      2503          addq.w    #4,A7
                    2504   DumpRegisters_29:
                    2505   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001850  3014      2506          move.w    (A4),D0
00001852  C07C 0010 2507          and.w     #16,D0
00001856  0C40 0010 2508          cmp.w     #16,D0
0000185A  660A      2509          bne.s     DumpRegisters_30
0000185C  4878 0058 2510          pea       88
00001860  4E92      2511          jsr       (A2)
00001862  584F      2512          addq.w    #4,A7
00001864  6008      2513          bra.s     DumpRegisters_31
                    2514   DumpRegisters_30:
00001866  4878 002D 2515          pea       45
0000186A  4E92      2516          jsr       (A2)
0000186C  584F      2517          addq.w    #4,A7
                    2518   DumpRegisters_31:
                    2519   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
0000186E  3014      2520          move.w    (A4),D0
00001870  C07C 0008 2521          and.w     #8,D0
00001874  0C40 0008 2522          cmp.w     #8,D0
00001878  660A      2523          bne.s     DumpRegisters_32
0000187A  4878 004E 2524          pea       78
0000187E  4E92      2525          jsr       (A2)
00001880  584F      2526          addq.w    #4,A7
00001882  6008      2527          bra.s     DumpRegisters_33
                    2528   DumpRegisters_32:
00001884  4878 002D 2529          pea       45
00001888  4E92      2530          jsr       (A2)
0000188A  584F      2531          addq.w    #4,A7
                    2532   DumpRegisters_33:
                    2533   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
0000188C  3014      2534          move.w    (A4),D0
0000188E  C07C 0004 2535          and.w     #4,D0
00001892  0C40 0004 2536          cmp.w     #4,D0
00001896  660A      2537          bne.s     DumpRegisters_34
00001898  4878 005A 2538          pea       90
0000189C  4E92      2539          jsr       (A2)
0000189E  584F      2540          addq.w    #4,A7
000018A0  6008      2541          bra.s     DumpRegisters_35
                    2542   DumpRegisters_34:
000018A2  4878 002D 2543          pea       45
000018A6  4E92      2544          jsr       (A2)
000018A8  584F      2545          addq.w    #4,A7
                    2546   DumpRegisters_35:
                    2547   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000018AA  3014      2548          move.w    (A4),D0
000018AC  C07C 0002 2549          and.w     #2,D0
000018B0  0C40 0002 2550          cmp.w     #2,D0
000018B4  660A      2551          bne.s     DumpRegisters_36
000018B6  4878 0056 2552          pea       86
000018BA  4E92      2553          jsr       (A2)
000018BC  584F      2554          addq.w    #4,A7
000018BE  6008      2555          bra.s     DumpRegisters_37
                    2556   DumpRegisters_36:
000018C0  4878 002D 2557          pea       45
000018C4  4E92      2558          jsr       (A2)
000018C6  584F      2559          addq.w    #4,A7
                    2560   DumpRegisters_37:
                    2561   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000018C8  3014      2562          move.w    (A4),D0
000018CA  C07C 0001 2563          and.w     #1,D0
000018CE  0C40 0001 2564          cmp.w     #1,D0
000018D2  660A      2565          bne.s     DumpRegisters_38
000018D4  4878 0043 2566          pea       67
000018D8  4E92      2567          jsr       (A2)
000018DA  584F      2568          addq.w    #4,A7
000018DC  6008      2569          bra.s     DumpRegisters_39
                    2570   DumpRegisters_38:
000018DE  4878 002D 2571          pea       45
000018E2  4E92      2572          jsr       (A2)
000018E4  584F      2573          addq.w    #4,A7
                    2574   DumpRegisters_39:
                    2575   ; putchar(']') ;
000018E6  4878 005D 2576          pea       93
000018EA  4E92      2577          jsr       (A2)
000018EC  584F      2578          addq.w    #4,A7
                    2579   ; printf("\r\n PC = $%08X  ", PC) ;
000018EE  2F39 0B00 2580          move.l    _PC.L,-(A7)
000018F2  0120      
000018F4  4879 0000 2581          pea       @m68kde~1_52.L
000018F8  3F9E      
000018FA  4E93      2582          jsr       (A3)
000018FC  504F      2583          addq.w    #8,A7
                    2584   ; if(*(unsigned short int *)(PC) == 0x4e4e)
000018FE  2039 0B00 2585          move.l    _PC.L,D0
00001902  0120      
00001904  2040      2586          move.l    D0,A0
00001906  3010      2587          move.w    (A0),D0
00001908  0C40 4E4E 2588          cmp.w     #20046,D0
0000190C  660A      2589          bne.s     DumpRegisters_40
                    2590   ; printf("[@ BREAKPOINT]") ;
0000190E  4879 0000 2591          pea       @m68kde~1_53.L
00001912  3FAE      
00001914  4E93      2592          jsr       (A3)
00001916  584F      2593          addq.w    #4,A7
                    2594   DumpRegisters_40:
                    2595   ; printf("\r\n") ;
00001918  4879 0000 2596          pea       @m68kde~1_1.L
0000191C  3A88      
0000191E  4E93      2597          jsr       (A3)
00001920  584F      2598          addq.w    #4,A7
                    2599   ; for(i=0; i < 8; i++)    {
00001922  4244      2600          clr.w     D4
                    2601   DumpRegisters_42:
00001924  0C44 0008 2602          cmp.w     #8,D4
00001928  6C00 0040 2603          bge       DumpRegisters_44
                    2604   ; if(WatchPointSetOrCleared[i] == 1)
0000192C  48C4      2605          ext.l     D4
0000192E  2004      2606          move.l    D4,D0
00001930  E588      2607          lsl.l     #2,D0
00001932  41F9 0B00 2608          lea       _WatchPointSetOrCleared.L,A0
00001936  01A2      
00001938  2030 0800 2609          move.l    0(A0,D0.L),D0
0000193C  0C80 0000 2610          cmp.l     #1,D0
00001940  0001      
00001942  6622      2611          bne.s     DumpRegisters_45
                    2612   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001944  220D      2613          move.l    A5,D1
00001946  48C4      2614          ext.l     D4
00001948  2F00      2615          move.l    D0,-(A7)
0000194A  2004      2616          move.l    D4,D0
0000194C  C1FC 0064 2617          muls      #100,D0
00001950  D280      2618          add.l     D0,D1
00001952  201F      2619          move.l    (A7)+,D0
00001954  2F01      2620          move.l    D1,-(A7)
00001956  48C4      2621          ext.l     D4
00001958  2F04      2622          move.l    D4,-(A7)
0000195A  4879 0000 2623          pea       @m68kde~1_54.L
0000195E  3FBE      
00001960  4E93      2624          jsr       (A3)
00001962  DEFC 000C 2625          add.w     #12,A7
                    2626   DumpRegisters_45:
00001966  5244      2627          addq.w    #1,D4
00001968  60BA      2628          bra       DumpRegisters_42
                    2629   DumpRegisters_44:
0000196A  4CDF 3CFC 2630          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000196E  4E75      2631          rts
                    2632   ; }
                    2633   ; }
                    2634   ; // Trace Exception Handler
                    2635   ; void DumpRegistersandPause(void)
                    2636   ; {
                    2637   _DumpRegistersandPause:
00001970  2F0A      2638          move.l    A2,-(A7)
00001972  45F9 0000 2639          lea       _printf.L,A2
00001976  3176      
                    2640   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001978  4879 0000 2641          pea       @m68kde~1_55.L
0000197C  3FCA      
0000197E  4E92      2642          jsr       (A2)
00001980  584F      2643          addq.w    #4,A7
                    2644   ; printf("\r\nBreak Points :[Disabled]") ;
00001982  4879 0000 2645          pea       @m68kde~1_56.L
00001986  3FEA      
00001988  4E92      2646          jsr       (A2)
0000198A  584F      2647          addq.w    #4,A7
                    2648   ; DumpRegisters() ;
0000198C  4EB8 14BC 2649          jsr       _DumpRegisters
                    2650   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001990  4879 0000 2651          pea       @m68kde~1_57.L
00001994  4006      
00001996  4E92      2652          jsr       (A2)
00001998  584F      2653          addq.w    #4,A7
                    2654   ; printf("\r\nPress <ESC> to Resume Program") ;
0000199A  4879 0000 2655          pea       @m68kde~1_58.L
0000199E  4032      
000019A0  4E92      2656          jsr       (A2)
000019A2  584F      2657          addq.w    #4,A7
                    2658   ; menu() ;
000019A4  4EB9 0000 2659          jsr       _menu
000019A8  2554      
000019AA  245F      2660          move.l    (A7)+,A2
000019AC  4E75      2661          rts
                    2662   ; }
                    2663   ; void ChangeRegisters(void)
                    2664   ; {
                    2665   _ChangeRegisters:
000019AE  4E56 FFFC 2666          link      A6,#-4
000019B2  48E7 303C 2667          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000019B6  45F9 0000 2668          lea       _printf.L,A2
000019BA  3176      
000019BC  47EE FFFC 2669          lea       -4(A6),A3
000019C0  49F8 0CA4 2670          lea       _Get8HexDigits.L,A4
000019C4  4BF8 0B68 2671          lea       __getch.L,A5
                    2672   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2673   ; int reg_val ;
                    2674   ; char c, reg[3] ;
                    2675   ; reg[0] = tolower(_getch()) ;
000019C8  2F00      2676          move.l    D0,-(A7)
000019CA  4E95      2677          jsr       (A5)
000019CC  2200      2678          move.l    D0,D1
000019CE  201F      2679          move.l    (A7)+,D0
000019D0  2F01      2680          move.l    D1,-(A7)
000019D2  4EB9 0000 2681          jsr       _tolower
000019D6  30F6      
000019D8  584F      2682          addq.w    #4,A7
000019DA  1680      2683          move.b    D0,(A3)
                    2684   ; reg[1] = c = tolower(_getch()) ;
000019DC  2F00      2685          move.l    D0,-(A7)
000019DE  4E95      2686          jsr       (A5)
000019E0  2200      2687          move.l    D0,D1
000019E2  201F      2688          move.l    (A7)+,D0
000019E4  2F01      2689          move.l    D1,-(A7)
000019E6  4EB9 0000 2690          jsr       _tolower
000019EA  30F6      
000019EC  584F      2691          addq.w    #4,A7
000019EE  1400      2692          move.b    D0,D2
000019F0  1740 0001 2693          move.b    D0,1(A3)
                    2694   ; if(reg[0] == (char)('d'))  {    // change data register
000019F4  1013      2695          move.b    (A3),D0
000019F6  0C00 0064 2696          cmp.b     #100,D0
000019FA  6600 00AE 2697          bne       ChangeRegisters_1
                    2698   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000019FE  102B 0001 2699          move.b    1(A3),D0
00001A02  0C00 0037 2700          cmp.b     #55,D0
00001A06  6E0A      2701          bgt.s     ChangeRegisters_5
00001A08  102B 0001 2702          move.b    1(A3),D0
00001A0C  0C00 0030 2703          cmp.b     #48,D0
00001A10  6C0E      2704          bge.s     ChangeRegisters_3
                    2705   ChangeRegisters_5:
                    2706   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001A12  4879 0000 2707          pea       @m68kde~1_59.L
00001A16  4052      
00001A18  4E92      2708          jsr       (A2)
00001A1A  584F      2709          addq.w    #4,A7
                    2710   ; return ;
00001A1C  6000 0244 2711          bra       ChangeRegisters_6
                    2712   ChangeRegisters_3:
                    2713   ; }
                    2714   ; else {
                    2715   ; printf("\r\nD%c = ", c) ;
00001A20  4882      2716          ext.w     D2
00001A22  48C2      2717          ext.l     D2
00001A24  2F02      2718          move.l    D2,-(A7)
00001A26  4879 0000 2719          pea       @m68kde~1_60.L
00001A2A  407E      
00001A2C  4E92      2720          jsr       (A2)
00001A2E  504F      2721          addq.w    #8,A7
                    2722   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A30  42A7      2723          clr.l     -(A7)
00001A32  4E94      2724          jsr       (A4)
00001A34  584F      2725          addq.w    #4,A7
00001A36  2600      2726          move.l    D0,D3
                    2727   ; }
                    2728   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2729   ; if(c == (char)('0'))
00001A38  0C02 0030 2730          cmp.b     #48,D2
00001A3C  660A      2731          bne.s     ChangeRegisters_7
                    2732   ; d0 = reg_val ;
00001A3E  23C3 0B00 2733          move.l    D3,_d0.L
00001A42  00E4      
00001A44  6000 0060 2734          bra       ChangeRegisters_20
                    2735   ChangeRegisters_7:
                    2736   ; else if(c == (char)('1'))
00001A48  0C02 0031 2737          cmp.b     #49,D2
00001A4C  660A      2738          bne.s     ChangeRegisters_9
                    2739   ; d1 = reg_val ;
00001A4E  23C3 0B00 2740          move.l    D3,_d1.L
00001A52  00E8      
00001A54  6000 0050 2741          bra       ChangeRegisters_20
                    2742   ChangeRegisters_9:
                    2743   ; else if(c == (char)('2'))
00001A58  0C02 0032 2744          cmp.b     #50,D2
00001A5C  660A      2745          bne.s     ChangeRegisters_11
                    2746   ; d2 = reg_val ;
00001A5E  23C3 0B00 2747          move.l    D3,_d2.L
00001A62  00EC      
00001A64  6000 0040 2748          bra       ChangeRegisters_20
                    2749   ChangeRegisters_11:
                    2750   ; else if(c == (char)('3'))
00001A68  0C02 0033 2751          cmp.b     #51,D2
00001A6C  6608      2752          bne.s     ChangeRegisters_13
                    2753   ; d3 = reg_val ;
00001A6E  23C3 0B00 2754          move.l    D3,_d3.L
00001A72  00F0      
00001A74  6030      2755          bra.s     ChangeRegisters_20
                    2756   ChangeRegisters_13:
                    2757   ; else if(c == (char)('4'))
00001A76  0C02 0034 2758          cmp.b     #52,D2
00001A7A  6608      2759          bne.s     ChangeRegisters_15
                    2760   ; d4 = reg_val ;
00001A7C  23C3 0B00 2761          move.l    D3,_d4.L
00001A80  00F4      
00001A82  6022      2762          bra.s     ChangeRegisters_20
                    2763   ChangeRegisters_15:
                    2764   ; else if(c == (char)('5'))
00001A84  0C02 0035 2765          cmp.b     #53,D2
00001A88  6608      2766          bne.s     ChangeRegisters_17
                    2767   ; d5 = reg_val ;
00001A8A  23C3 0B00 2768          move.l    D3,_d5.L
00001A8E  00F8      
00001A90  6014      2769          bra.s     ChangeRegisters_20
                    2770   ChangeRegisters_17:
                    2771   ; else if(c == (char)('6'))
00001A92  0C02 0036 2772          cmp.b     #54,D2
00001A96  6608      2773          bne.s     ChangeRegisters_19
                    2774   ; d6 = reg_val ;
00001A98  23C3 0B00 2775          move.l    D3,_d6.L
00001A9C  00FC      
00001A9E  6006      2776          bra.s     ChangeRegisters_20
                    2777   ChangeRegisters_19:
                    2778   ; else
                    2779   ; d7 = reg_val ;
00001AA0  23C3 0B00 2780          move.l    D3,_d7.L
00001AA4  0100      
                    2781   ChangeRegisters_20:
00001AA6  6000 01B6 2782          bra       ChangeRegisters_51
                    2783   ChangeRegisters_1:
                    2784   ; }
                    2785   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001AAA  1013      2786          move.b    (A3),D0
00001AAC  0C00 0061 2787          cmp.b     #97,D0
00001AB0  6600 00A6 2788          bne       ChangeRegisters_21
                    2789   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001AB4  0C02 0037 2790          cmp.b     #55,D2
00001AB8  6E06      2791          bgt.s     ChangeRegisters_25
00001ABA  0C02 0030 2792          cmp.b     #48,D2
00001ABE  6C0E      2793          bge.s     ChangeRegisters_23
                    2794   ChangeRegisters_25:
                    2795   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001AC0  4879 0000 2796          pea       @m68kde~1_61.L
00001AC4  4088      
00001AC6  4E92      2797          jsr       (A2)
00001AC8  584F      2798          addq.w    #4,A7
                    2799   ; return ;
00001ACA  6000 0196 2800          bra       ChangeRegisters_6
                    2801   ChangeRegisters_23:
                    2802   ; }
                    2803   ; else {
                    2804   ; printf("\r\nA%c = ", c) ;
00001ACE  4882      2805          ext.w     D2
00001AD0  48C2      2806          ext.l     D2
00001AD2  2F02      2807          move.l    D2,-(A7)
00001AD4  4879 0000 2808          pea       @m68kde~1_62.L
00001AD8  40B6      
00001ADA  4E92      2809          jsr       (A2)
00001ADC  504F      2810          addq.w    #8,A7
                    2811   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001ADE  42A7      2812          clr.l     -(A7)
00001AE0  4E94      2813          jsr       (A4)
00001AE2  584F      2814          addq.w    #4,A7
00001AE4  2600      2815          move.l    D0,D3
                    2816   ; }
                    2817   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2818   ; if(c == (char)('0'))
00001AE6  0C02 0030 2819          cmp.b     #48,D2
00001AEA  660A      2820          bne.s     ChangeRegisters_26
                    2821   ; a0 = reg_val ;
00001AEC  23C3 0B00 2822          move.l    D3,_a0.L
00001AF0  0104      
00001AF2  6000 0060 2823          bra       ChangeRegisters_39
                    2824   ChangeRegisters_26:
                    2825   ; else if(c == (char)('1'))
00001AF6  0C02 0031 2826          cmp.b     #49,D2
00001AFA  660A      2827          bne.s     ChangeRegisters_28
                    2828   ; a1 = reg_val ;
00001AFC  23C3 0B00 2829          move.l    D3,_a1.L
00001B00  0108      
00001B02  6000 0050 2830          bra       ChangeRegisters_39
                    2831   ChangeRegisters_28:
                    2832   ; else if(c == (char)('2'))
00001B06  0C02 0032 2833          cmp.b     #50,D2
00001B0A  660A      2834          bne.s     ChangeRegisters_30
                    2835   ; a2 = reg_val ;
00001B0C  23C3 0B00 2836          move.l    D3,_a2.L
00001B10  010C      
00001B12  6000 0040 2837          bra       ChangeRegisters_39
                    2838   ChangeRegisters_30:
                    2839   ; else if(c == (char)('3'))
00001B16  0C02 0033 2840          cmp.b     #51,D2
00001B1A  6608      2841          bne.s     ChangeRegisters_32
                    2842   ; a3 = reg_val ;
00001B1C  23C3 0B00 2843          move.l    D3,_a3.L
00001B20  0110      
00001B22  6030      2844          bra.s     ChangeRegisters_39
                    2845   ChangeRegisters_32:
                    2846   ; else if(c == (char)('4'))
00001B24  0C02 0034 2847          cmp.b     #52,D2
00001B28  6608      2848          bne.s     ChangeRegisters_34
                    2849   ; a4 = reg_val ;
00001B2A  23C3 0B00 2850          move.l    D3,_a4.L
00001B2E  0114      
00001B30  6022      2851          bra.s     ChangeRegisters_39
                    2852   ChangeRegisters_34:
                    2853   ; else if(c == (char)('5'))
00001B32  0C02 0035 2854          cmp.b     #53,D2
00001B36  6608      2855          bne.s     ChangeRegisters_36
                    2856   ; a5 = reg_val ;
00001B38  23C3 0B00 2857          move.l    D3,_a5.L
00001B3C  0118      
00001B3E  6014      2858          bra.s     ChangeRegisters_39
                    2859   ChangeRegisters_36:
                    2860   ; else if(c == (char)('6'))
00001B40  0C02 0036 2861          cmp.b     #54,D2
00001B44  6608      2862          bne.s     ChangeRegisters_38
                    2863   ; a6 = reg_val ;
00001B46  23C3 0B00 2864          move.l    D3,_a6.L
00001B4A  011C      
00001B4C  6006      2865          bra.s     ChangeRegisters_39
                    2866   ChangeRegisters_38:
                    2867   ; else
                    2868   ; USP = reg_val ;
00001B4E  23C3 0B00 2869          move.l    D3,_USP.L
00001B52  0128      
                    2870   ChangeRegisters_39:
00001B54  6000 0108 2871          bra       ChangeRegisters_51
                    2872   ChangeRegisters_21:
                    2873   ; }
                    2874   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001B58  1013      2875          move.b    (A3),D0
00001B5A  0C00 0075 2876          cmp.b     #117,D0
00001B5E  6600 004E 2877          bne       ChangeRegisters_40
00001B62  0C02 0073 2878          cmp.b     #115,D2
00001B66  6600 0046 2879          bne       ChangeRegisters_40
                    2880   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001B6A  2F00      2881          move.l    D0,-(A7)
00001B6C  4E95      2882          jsr       (A5)
00001B6E  2200      2883          move.l    D0,D1
00001B70  201F      2884          move.l    (A7)+,D0
00001B72  2F01      2885          move.l    D1,-(A7)
00001B74  4EB9 0000 2886          jsr       _tolower
00001B78  30F6      
00001B7A  584F      2887          addq.w    #4,A7
00001B7C  0C80 0000 2888          cmp.l     #112,D0
00001B80  0070      
00001B82  6618      2889          bne.s     ChangeRegisters_42
                    2890   ; printf("\r\nUser SP = ") ;
00001B84  4879 0000 2891          pea       @m68kde~1_63.L
00001B88  40C0      
00001B8A  4E92      2892          jsr       (A2)
00001B8C  584F      2893          addq.w    #4,A7
                    2894   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001B8E  42A7      2895          clr.l     -(A7)
00001B90  4E94      2896          jsr       (A4)
00001B92  584F      2897          addq.w    #4,A7
00001B94  23C0 0B00 2898          move.l    D0,_USP.L
00001B98  0128      
00001B9A  600E      2899          bra.s     ChangeRegisters_43
                    2900   ChangeRegisters_42:
                    2901   ; }
                    2902   ; else {
                    2903   ; printf("\r\nIllegal Register....") ;
00001B9C  4879 0000 2904          pea       @m68kde~1_64.L
00001BA0  40CE      
00001BA2  4E92      2905          jsr       (A2)
00001BA4  584F      2906          addq.w    #4,A7
                    2907   ; return ;
00001BA6  6000 00BA 2908          bra       ChangeRegisters_6
                    2909   ChangeRegisters_43:
00001BAA  6000 00B2 2910          bra       ChangeRegisters_51
                    2911   ChangeRegisters_40:
                    2912   ; }
                    2913   ; }
                    2914   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001BAE  1013      2915          move.b    (A3),D0
00001BB0  0C00 0073 2916          cmp.b     #115,D0
00001BB4  6600 004E 2917          bne       ChangeRegisters_44
00001BB8  0C02 0073 2918          cmp.b     #115,D2
00001BBC  6600 0046 2919          bne       ChangeRegisters_44
                    2920   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001BC0  2F00      2921          move.l    D0,-(A7)
00001BC2  4E95      2922          jsr       (A5)
00001BC4  2200      2923          move.l    D0,D1
00001BC6  201F      2924          move.l    (A7)+,D0
00001BC8  2F01      2925          move.l    D1,-(A7)
00001BCA  4EB9 0000 2926          jsr       _tolower
00001BCE  30F6      
00001BD0  584F      2927          addq.w    #4,A7
00001BD2  0C80 0000 2928          cmp.l     #112,D0
00001BD6  0070      
00001BD8  6618      2929          bne.s     ChangeRegisters_46
                    2930   ; printf("\r\nSystem SP = ") ;
00001BDA  4879 0000 2931          pea       @m68kde~1_65.L
00001BDE  40E6      
00001BE0  4E92      2932          jsr       (A2)
00001BE2  584F      2933          addq.w    #4,A7
                    2934   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001BE4  42A7      2935          clr.l     -(A7)
00001BE6  4E94      2936          jsr       (A4)
00001BE8  584F      2937          addq.w    #4,A7
00001BEA  23C0 0B00 2938          move.l    D0,_SSP.L
00001BEE  0124      
00001BF0  600E      2939          bra.s     ChangeRegisters_47
                    2940   ChangeRegisters_46:
                    2941   ; }
                    2942   ; else {
                    2943   ; printf("\r\nIllegal Register....") ;
00001BF2  4879 0000 2944          pea       @m68kde~1_64.L
00001BF6  40CE      
00001BF8  4E92      2945          jsr       (A2)
00001BFA  584F      2946          addq.w    #4,A7
                    2947   ; return ;
00001BFC  6000 0064 2948          bra       ChangeRegisters_6
                    2949   ChangeRegisters_47:
00001C00  6000 005C 2950          bra       ChangeRegisters_51
                    2951   ChangeRegisters_44:
                    2952   ; }
                    2953   ; }
                    2954   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001C04  1013      2955          move.b    (A3),D0
00001C06  0C00 0070 2956          cmp.b     #112,D0
00001C0A  6620      2957          bne.s     ChangeRegisters_48
00001C0C  0C02 0063 2958          cmp.b     #99,D2
00001C10  661A      2959          bne.s     ChangeRegisters_48
                    2960   ; printf("\r\nPC = ") ;
00001C12  4879 0000 2961          pea       @m68kde~1_66.L
00001C16  40F6      
00001C18  4E92      2962          jsr       (A2)
00001C1A  584F      2963          addq.w    #4,A7
                    2964   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C1C  42A7      2965          clr.l     -(A7)
00001C1E  4E94      2966          jsr       (A4)
00001C20  584F      2967          addq.w    #4,A7
00001C22  23C0 0B00 2968          move.l    D0,_PC.L
00001C26  0120      
00001C28  6000 0034 2969          bra       ChangeRegisters_51
                    2970   ChangeRegisters_48:
                    2971   ; }
                    2972   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001C2C  1013      2973          move.b    (A3),D0
00001C2E  0C00 0073 2974          cmp.b     #115,D0
00001C32  6620      2975          bne.s     ChangeRegisters_50
00001C34  0C02 0072 2976          cmp.b     #114,D2
00001C38  661A      2977          bne.s     ChangeRegisters_50
                    2978   ; printf("\r\nSR = ") ;
00001C3A  4879 0000 2979          pea       @m68kde~1_67.L
00001C3E  40FE      
00001C40  4E92      2980          jsr       (A2)
00001C42  584F      2981          addq.w    #4,A7
                    2982   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001C44  42A7      2983          clr.l     -(A7)
00001C46  4EB8 0C58 2984          jsr       _Get4HexDigits
00001C4A  584F      2985          addq.w    #4,A7
00001C4C  33C0 0B00 2986          move.w    D0,_SR.L
00001C50  012C      
00001C52  600A      2987          bra.s     ChangeRegisters_51
                    2988   ChangeRegisters_50:
                    2989   ; }
                    2990   ; else
                    2991   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001C54  4879 0000 2992          pea       @m68kde~1_68.L
00001C58  4106      
00001C5A  4E92      2993          jsr       (A2)
00001C5C  584F      2994          addq.w    #4,A7
                    2995   ChangeRegisters_51:
                    2996   ; DumpRegisters() ;
00001C5E  4EB8 14BC 2997          jsr       _DumpRegisters
                    2998   ChangeRegisters_6:
00001C62  4CDF 3C0C 2999          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001C66  4E5E      3000          unlk      A6
00001C68  4E75      3001          rts
                    3002   ; }
                    3003   ; void BreakPointDisplay(void)
                    3004   ; {
                    3005   _BreakPointDisplay:
00001C6A  48E7 3030 3006          movem.l   D2/D3/A2/A3,-(A7)
00001C6E  45F9 0000 3007          lea       _printf.L,A2
00001C72  3176      
00001C74  47F9 0B00 3008          lea       _BreakPointAddress.L,A3
00001C78  012E      
                    3009   ; int i, BreakPointsSet = 0 ;
00001C7A  4283      3010          clr.l     D3
                    3011   ; // any break points  set
                    3012   ; for(i = 0; i < 8; i++)  {
00001C7C  4282      3013          clr.l     D2
                    3014   BreakPointDisplay_1:
00001C7E  0C82 0000 3015          cmp.l     #8,D2
00001C82  0008      
00001C84  6C1C      3016          bge.s     BreakPointDisplay_3
                    3017   ; if(BreakPointSetOrCleared[i] == 1)
00001C86  2002      3018          move.l    D2,D0
00001C88  E588      3019          lsl.l     #2,D0
00001C8A  41F9 0B00 3020          lea       _BreakPointSetOrCleared.L,A0
00001C8E  015E      
00001C90  2030 0800 3021          move.l    0(A0,D0.L),D0
00001C94  0C80 0000 3022          cmp.l     #1,D0
00001C98  0001      
00001C9A  6602      3023          bne.s     BreakPointDisplay_4
                    3024   ; BreakPointsSet = 1;
00001C9C  7601      3025          moveq     #1,D3
                    3026   BreakPointDisplay_4:
00001C9E  5282      3027          addq.l    #1,D2
00001CA0  60DC      3028          bra       BreakPointDisplay_1
                    3029   BreakPointDisplay_3:
                    3030   ; }
                    3031   ; if(BreakPointsSet == 1) {
00001CA2  0C83 0000 3032          cmp.l     #1,D3
00001CA6  0001      
00001CA8  6616      3033          bne.s     BreakPointDisplay_6
                    3034   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001CAA  4879 0000 3035          pea       @m68kde~1_69.L
00001CAE  4142      
00001CB0  4E92      3036          jsr       (A2)
00001CB2  584F      3037          addq.w    #4,A7
                    3038   ; printf("\r\n---     ---------    -----------") ;
00001CB4  4879 0000 3039          pea       @m68kde~1_70.L
00001CB8  4168      
00001CBA  4E92      3040          jsr       (A2)
00001CBC  584F      3041          addq.w    #4,A7
00001CBE  600A      3042          bra.s     BreakPointDisplay_7
                    3043   BreakPointDisplay_6:
                    3044   ; }
                    3045   ; else
                    3046   ; printf("\r\nNo BreakPoints Set") ;
00001CC0  4879 0000 3047          pea       @m68kde~1_71.L
00001CC4  418C      
00001CC6  4E92      3048          jsr       (A2)
00001CC8  584F      3049          addq.w    #4,A7
                    3050   BreakPointDisplay_7:
                    3051   ; for(i = 0; i < 8; i++)  {
00001CCA  4282      3052          clr.l     D2
                    3053   BreakPointDisplay_8:
00001CCC  0C82 0000 3054          cmp.l     #8,D2
00001CD0  0008      
00001CD2  6C00 005A 3055          bge       BreakPointDisplay_10
                    3056   ; // put opcode back, then put break point back
                    3057   ; if(BreakPointSetOrCleared[i] == 1)  {
00001CD6  2002      3058          move.l    D2,D0
00001CD8  E588      3059          lsl.l     #2,D0
00001CDA  41F9 0B00 3060          lea       _BreakPointSetOrCleared.L,A0
00001CDE  015E      
00001CE0  2030 0800 3061          move.l    0(A0,D0.L),D0
00001CE4  0C80 0000 3062          cmp.l     #1,D0
00001CE8  0001      
00001CEA  6600 003E 3063          bne       BreakPointDisplay_11
                    3064   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001CEE  2002      3065          move.l    D2,D0
00001CF0  E388      3066          lsl.l     #1,D0
00001CF2  41F9 0B00 3067          lea       _BreakPointInstruction.L,A0
00001CF6  014E      
00001CF8  2202      3068          move.l    D2,D1
00001CFA  E589      3069          lsl.l     #2,D1
00001CFC  2233 1800 3070          move.l    0(A3,D1.L),D1
00001D00  2241      3071          move.l    D1,A1
00001D02  32B0 0800 3072          move.w    0(A0,D0.L),(A1)
                    3073   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001D06  2002      3074          move.l    D2,D0
00001D08  E588      3075          lsl.l     #2,D0
00001D0A  2033 0800 3076          move.l    0(A3,D0.L),D0
00001D0E  2040      3077          move.l    D0,A0
00001D10  30BC 4E4E 3078          move.w    #20046,(A0)
                    3079   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001D14  2202      3080          move.l    D2,D1
00001D16  E589      3081          lsl.l     #2,D1
00001D18  2F33 1800 3082          move.l    0(A3,D1.L),-(A7)
00001D1C  2F02      3083          move.l    D2,-(A7)
00001D1E  4879 0000 3084          pea       @m68kde~1_72.L
00001D22  41A2      
00001D24  4E92      3085          jsr       (A2)
00001D26  DEFC 000C 3086          add.w     #12,A7
                    3087   BreakPointDisplay_11:
00001D2A  5282      3088          addq.l    #1,D2
00001D2C  609E      3089          bra       BreakPointDisplay_8
                    3090   BreakPointDisplay_10:
                    3091   ; }
                    3092   ; }
                    3093   ; printf("\r\n") ;
00001D2E  4879 0000 3094          pea       @m68kde~1_1.L
00001D32  3A88      
00001D34  4E92      3095          jsr       (A2)
00001D36  584F      3096          addq.w    #4,A7
00001D38  4CDF 0C0C 3097          movem.l   (A7)+,D2/D3/A2/A3
00001D3C  4E75      3098          rts
                    3099   ; }
                    3100   ; void WatchPointDisplay(void)
                    3101   ; {
                    3102   _WatchPointDisplay:
00001D3E  48E7 3020 3103          movem.l   D2/D3/A2,-(A7)
00001D42  45F9 0000 3104          lea       _printf.L,A2
00001D46  3176      
                    3105   ; int i ;
                    3106   ; int WatchPointsSet = 0 ;
00001D48  4283      3107          clr.l     D3
                    3108   ; // any watchpoints set
                    3109   ; for(i = 0; i < 8; i++)  {
00001D4A  4282      3110          clr.l     D2
                    3111   WatchPointDisplay_1:
00001D4C  0C82 0000 3112          cmp.l     #8,D2
00001D50  0008      
00001D52  6C1C      3113          bge.s     WatchPointDisplay_3
                    3114   ; if(WatchPointSetOrCleared[i] == 1)
00001D54  2002      3115          move.l    D2,D0
00001D56  E588      3116          lsl.l     #2,D0
00001D58  41F9 0B00 3117          lea       _WatchPointSetOrCleared.L,A0
00001D5C  01A2      
00001D5E  2030 0800 3118          move.l    0(A0,D0.L),D0
00001D62  0C80 0000 3119          cmp.l     #1,D0
00001D66  0001      
00001D68  6602      3120          bne.s     WatchPointDisplay_4
                    3121   ; WatchPointsSet = 1;
00001D6A  7601      3122          moveq     #1,D3
                    3123   WatchPointDisplay_4:
00001D6C  5282      3124          addq.l    #1,D2
00001D6E  60DC      3125          bra       WatchPointDisplay_1
                    3126   WatchPointDisplay_3:
                    3127   ; }
                    3128   ; if(WatchPointsSet == 1) {
00001D70  0C83 0000 3129          cmp.l     #1,D3
00001D74  0001      
00001D76  6616      3130          bne.s     WatchPointDisplay_6
                    3131   ; printf("\r\nNum     Address") ;
00001D78  4879 0000 3132          pea       @m68kde~1_73.L
00001D7C  41B2      
00001D7E  4E92      3133          jsr       (A2)
00001D80  584F      3134          addq.w    #4,A7
                    3135   ; printf("\r\n---     ---------") ;
00001D82  4879 0000 3136          pea       @m68kde~1_74.L
00001D86  41C4      
00001D88  4E92      3137          jsr       (A2)
00001D8A  584F      3138          addq.w    #4,A7
00001D8C  600A      3139          bra.s     WatchPointDisplay_7
                    3140   WatchPointDisplay_6:
                    3141   ; }
                    3142   ; else
                    3143   ; printf("\r\nNo WatchPoints Set") ;
00001D8E  4879 0000 3144          pea       @m68kde~1_75.L
00001D92  41D8      
00001D94  4E92      3145          jsr       (A2)
00001D96  584F      3146          addq.w    #4,A7
                    3147   WatchPointDisplay_7:
                    3148   ; for(i = 0; i < 8; i++)  {
00001D98  4282      3149          clr.l     D2
                    3150   WatchPointDisplay_8:
00001D9A  0C82 0000 3151          cmp.l     #8,D2
00001D9E  0008      
00001DA0  6C00 0038 3152          bge       WatchPointDisplay_10
                    3153   ; if(WatchPointSetOrCleared[i] == 1)
00001DA4  2002      3154          move.l    D2,D0
00001DA6  E588      3155          lsl.l     #2,D0
00001DA8  41F9 0B00 3156          lea       _WatchPointSetOrCleared.L,A0
00001DAC  01A2      
00001DAE  2030 0800 3157          move.l    0(A0,D0.L),D0
00001DB2  0C80 0000 3158          cmp.l     #1,D0
00001DB6  0001      
00001DB8  661C      3159          bne.s     WatchPointDisplay_11
                    3160   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001DBA  2202      3161          move.l    D2,D1
00001DBC  E589      3162          lsl.l     #2,D1
00001DBE  41F9 0B00 3163          lea       _WatchPointAddress.L,A0
00001DC2  0182      
00001DC4  2F30 1800 3164          move.l    0(A0,D1.L),-(A7)
00001DC8  2F02      3165          move.l    D2,-(A7)
00001DCA  4879 0000 3166          pea       @m68kde~1_72.L
00001DCE  41A2      
00001DD0  4E92      3167          jsr       (A2)
00001DD2  DEFC 000C 3168          add.w     #12,A7
                    3169   WatchPointDisplay_11:
00001DD6  5282      3170          addq.l    #1,D2
00001DD8  60C0      3171          bra       WatchPointDisplay_8
                    3172   WatchPointDisplay_10:
                    3173   ; }
                    3174   ; printf("\r\n") ;
00001DDA  4879 0000 3175          pea       @m68kde~1_1.L
00001DDE  3A88      
00001DE0  4E92      3176          jsr       (A2)
00001DE2  584F      3177          addq.w    #4,A7
00001DE4  4CDF 040C 3178          movem.l   (A7)+,D2/D3/A2
00001DE8  4E75      3179          rts
                    3180   ; }
                    3181   ; void BreakPointClear(void)
                    3182   ; {
                    3183   _BreakPointClear:
00001DEA  4E56 FFFC 3184          link      A6,#-4
00001DEE  48E7 2020 3185          movem.l   D2/A2,-(A7)
00001DF2  45F9 0000 3186          lea       _printf.L,A2
00001DF6  3176      
                    3187   ; unsigned int i ;
                    3188   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3189   ; BreakPointDisplay() ;
00001DF8  4EB8 1C6A 3190          jsr       _BreakPointDisplay
                    3191   ; printf("\r\nEnter Break Point Number: ") ;
00001DFC  4879 0000 3192          pea       @m68kde~1_76.L
00001E00  41EE      
00001E02  4E92      3193          jsr       (A2)
00001E04  584F      3194          addq.w    #4,A7
                    3195   ; i = xtod(_getch()) ;           // get break pointer number
00001E06  2F00      3196          move.l    D0,-(A7)
00001E08  4EB8 0B68 3197          jsr       __getch
00001E0C  2200      3198          move.l    D0,D1
00001E0E  201F      3199          move.l    (A7)+,D0
00001E10  2F01      3200          move.l    D1,-(A7)
00001E12  4EB8 0BD2 3201          jsr       _xtod
00001E16  584F      3202          addq.w    #4,A7
00001E18  C0BC 0000 3203          and.l     #255,D0
00001E1C  00FF      
00001E1E  2400      3204          move.l    D0,D2
                    3205   ; if((i < 0) || (i > 7))   {
00001E20  0C82 0000 3206          cmp.l     #0,D2
00001E24  0000      
00001E26  6508      3207          blo.s     BreakPointClear_3
00001E28  0C82 0000 3208          cmp.l     #7,D2
00001E2C  0007      
00001E2E  630E      3209          bls.s     BreakPointClear_1
                    3210   BreakPointClear_3:
                    3211   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001E30  4879 0000 3212          pea       @m68kde~1_77.L
00001E34  420C      
00001E36  4E92      3213          jsr       (A2)
00001E38  584F      3214          addq.w    #4,A7
                    3215   ; return ;
00001E3A  6000 0080 3216          bra       BreakPointClear_4
                    3217   BreakPointClear_1:
                    3218   ; }
                    3219   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001E3E  2002      3220          move.l    D2,D0
00001E40  E588      3221          lsl.l     #2,D0
00001E42  41F9 0B00 3222          lea       _BreakPointSetOrCleared.L,A0
00001E46  015E      
00001E48  2030 0800 3223          move.l    0(A0,D0.L),D0
00001E4C  0C80 0000 3224          cmp.l     #1,D0
00001E50  0001      
00001E52  6600 005A 3225          bne       BreakPointClear_5
                    3226   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001E56  2002      3227          move.l    D2,D0
00001E58  E588      3228          lsl.l     #2,D0
00001E5A  41F9 0B00 3229          lea       _BreakPointAddress.L,A0
00001E5E  012E      
00001E60  2D70 0800 3230          move.l    0(A0,D0.L),-4(A6)
00001E64  FFFC      
                    3231   ; BreakPointAddress[i] = 0 ;
00001E66  2002      3232          move.l    D2,D0
00001E68  E588      3233          lsl.l     #2,D0
00001E6A  41F9 0B00 3234          lea       _BreakPointAddress.L,A0
00001E6E  012E      
00001E70  42B0 0800 3235          clr.l     0(A0,D0.L)
                    3236   ; BreakPointSetOrCleared[i] = 0 ;
00001E74  2002      3237          move.l    D2,D0
00001E76  E588      3238          lsl.l     #2,D0
00001E78  41F9 0B00 3239          lea       _BreakPointSetOrCleared.L,A0
00001E7C  015E      
00001E7E  42B0 0800 3240          clr.l     0(A0,D0.L)
                    3241   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001E82  2002      3242          move.l    D2,D0
00001E84  E388      3243          lsl.l     #1,D0
00001E86  41F9 0B00 3244          lea       _BreakPointInstruction.L,A0
00001E8A  014E      
00001E8C  226E FFFC 3245          move.l    -4(A6),A1
00001E90  32B0 0800 3246          move.w    0(A0,D0.L),(A1)
                    3247   ; BreakPointInstruction[i] = 0 ;
00001E94  2002      3248          move.l    D2,D0
00001E96  E388      3249          lsl.l     #1,D0
00001E98  41F9 0B00 3250          lea       _BreakPointInstruction.L,A0
00001E9C  014E      
00001E9E  4270 0800 3251          clr.w     0(A0,D0.L)
                    3252   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001EA2  4879 0000 3253          pea       @m68kde~1_78.L
00001EA6  4228      
00001EA8  4E92      3254          jsr       (A2)
00001EAA  584F      3255          addq.w    #4,A7
00001EAC  600A      3256          bra.s     BreakPointClear_6
                    3257   BreakPointClear_5:
                    3258   ; }
                    3259   ; else
                    3260   ; printf("\r\nBreak Point wasn't Set.....") ;
00001EAE  4879 0000 3261          pea       @m68kde~1_79.L
00001EB2  4246      
00001EB4  4E92      3262          jsr       (A2)
00001EB6  584F      3263          addq.w    #4,A7
                    3264   BreakPointClear_6:
                    3265   ; BreakPointDisplay() ;
00001EB8  4EB8 1C6A 3266          jsr       _BreakPointDisplay
                    3267   ; return ;
                    3268   BreakPointClear_4:
00001EBC  4CDF 0404 3269          movem.l   (A7)+,D2/A2
00001EC0  4E5E      3270          unlk      A6
00001EC2  4E75      3271          rts
                    3272   ; }
                    3273   ; void WatchPointClear(void)
                    3274   ; {
                    3275   _WatchPointClear:
00001EC4  48E7 2020 3276          movem.l   D2/A2,-(A7)
00001EC8  45F9 0000 3277          lea       _printf.L,A2
00001ECC  3176      
                    3278   ; unsigned int i ;
                    3279   ; WatchPointDisplay() ;
00001ECE  4EB8 1D3E 3280          jsr       _WatchPointDisplay
                    3281   ; printf("\r\nEnter Watch Point Number: ") ;
00001ED2  4879 0000 3282          pea       @m68kde~1_80.L
00001ED6  4264      
00001ED8  4E92      3283          jsr       (A2)
00001EDA  584F      3284          addq.w    #4,A7
                    3285   ; i = xtod(_getch()) ;           // get watch pointer number
00001EDC  2F00      3286          move.l    D0,-(A7)
00001EDE  4EB8 0B68 3287          jsr       __getch
00001EE2  2200      3288          move.l    D0,D1
00001EE4  201F      3289          move.l    (A7)+,D0
00001EE6  2F01      3290          move.l    D1,-(A7)
00001EE8  4EB8 0BD2 3291          jsr       _xtod
00001EEC  584F      3292          addq.w    #4,A7
00001EEE  C0BC 0000 3293          and.l     #255,D0
00001EF2  00FF      
00001EF4  2400      3294          move.l    D0,D2
                    3295   ; if((i < 0) || (i > 7))   {
00001EF6  0C82 0000 3296          cmp.l     #0,D2
00001EFA  0000      
00001EFC  6508      3297          blo.s     WatchPointClear_3
00001EFE  0C82 0000 3298          cmp.l     #7,D2
00001F02  0007      
00001F04  630E      3299          bls.s     WatchPointClear_1
                    3300   WatchPointClear_3:
                    3301   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001F06  4879 0000 3302          pea       @m68kde~1_77.L
00001F0A  420C      
00001F0C  4E92      3303          jsr       (A2)
00001F0E  584F      3304          addq.w    #4,A7
                    3305   ; return ;
00001F10  6000 004E 3306          bra       WatchPointClear_4
                    3307   WatchPointClear_1:
                    3308   ; }
                    3309   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001F14  2002      3310          move.l    D2,D0
00001F16  E588      3311          lsl.l     #2,D0
00001F18  41F9 0B00 3312          lea       _WatchPointSetOrCleared.L,A0
00001F1C  01A2      
00001F1E  2030 0800 3313          move.l    0(A0,D0.L),D0
00001F22  0C80 0000 3314          cmp.l     #1,D0
00001F26  0001      
00001F28  6628      3315          bne.s     WatchPointClear_5
                    3316   ; WatchPointAddress[i] = 0 ;
00001F2A  2002      3317          move.l    D2,D0
00001F2C  E588      3318          lsl.l     #2,D0
00001F2E  41F9 0B00 3319          lea       _WatchPointAddress.L,A0
00001F32  0182      
00001F34  42B0 0800 3320          clr.l     0(A0,D0.L)
                    3321   ; WatchPointSetOrCleared[i] = 0 ;
00001F38  2002      3322          move.l    D2,D0
00001F3A  E588      3323          lsl.l     #2,D0
00001F3C  41F9 0B00 3324          lea       _WatchPointSetOrCleared.L,A0
00001F40  01A2      
00001F42  42B0 0800 3325          clr.l     0(A0,D0.L)
                    3326   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001F46  4879 0000 3327          pea       @m68kde~1_81.L
00001F4A  4282      
00001F4C  4E92      3328          jsr       (A2)
00001F4E  584F      3329          addq.w    #4,A7
00001F50  600A      3330          bra.s     WatchPointClear_6
                    3331   WatchPointClear_5:
                    3332   ; }
                    3333   ; else
                    3334   ; printf("\r\nWatch Point Was not Set.....") ;
00001F52  4879 0000 3335          pea       @m68kde~1_82.L
00001F56  42A0      
00001F58  4E92      3336          jsr       (A2)
00001F5A  584F      3337          addq.w    #4,A7
                    3338   WatchPointClear_6:
                    3339   ; WatchPointDisplay() ;
00001F5C  4EB8 1D3E 3340          jsr       _WatchPointDisplay
                    3341   ; return ;
                    3342   WatchPointClear_4:
00001F60  4CDF 0404 3343          movem.l   (A7)+,D2/A2
00001F64  4E75      3344          rts
                    3345   ; }
                    3346   ; void DisableBreakPoints(void)
                    3347   ; {
                    3348   _DisableBreakPoints:
00001F66  4E56 FFFC 3349          link      A6,#-4
00001F6A  2F02      3350          move.l    D2,-(A7)
                    3351   ; int i ;
                    3352   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3353   ; for(i = 0; i < 8; i++)  {
00001F6C  4282      3354          clr.l     D2
                    3355   DisableBreakPoints_1:
00001F6E  0C82 0000 3356          cmp.l     #8,D2
00001F72  0008      
00001F74  6C00 003E 3357          bge       DisableBreakPoints_3
                    3358   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001F78  2002      3359          move.l    D2,D0
00001F7A  E588      3360          lsl.l     #2,D0
00001F7C  41F9 0B00 3361          lea       _BreakPointSetOrCleared.L,A0
00001F80  015E      
00001F82  2030 0800 3362          move.l    0(A0,D0.L),D0
00001F86  0C80 0000 3363          cmp.l     #1,D0
00001F8A  0001      
00001F8C  6622      3364          bne.s     DisableBreakPoints_4
                    3365   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001F8E  2002      3366          move.l    D2,D0
00001F90  E588      3367          lsl.l     #2,D0
00001F92  41F9 0B00 3368          lea       _BreakPointAddress.L,A0
00001F96  012E      
00001F98  2D70 0800 3369          move.l    0(A0,D0.L),-4(A6)
00001F9C  FFFC      
                    3370   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001F9E  2002      3371          move.l    D2,D0
00001FA0  E388      3372          lsl.l     #1,D0
00001FA2  41F9 0B00 3373          lea       _BreakPointInstruction.L,A0
00001FA6  014E      
00001FA8  226E FFFC 3374          move.l    -4(A6),A1
00001FAC  32B0 0800 3375          move.w    0(A0,D0.L),(A1)
                    3376   DisableBreakPoints_4:
00001FB0  5282      3377          addq.l    #1,D2
00001FB2  60BA      3378          bra       DisableBreakPoints_1
                    3379   DisableBreakPoints_3:
00001FB4  241F      3380          move.l    (A7)+,D2
00001FB6  4E5E      3381          unlk      A6
00001FB8  4E75      3382          rts
                    3383   ; }
                    3384   ; }
                    3385   ; }
                    3386   ; void EnableBreakPoints(void)
                    3387   ; {
                    3388   _EnableBreakPoints:
00001FBA  4E56 FFFC 3389          link      A6,#-4
00001FBE  2F02      3390          move.l    D2,-(A7)
                    3391   ; int i ;
                    3392   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3393   ; for(i = 0; i < 8; i++)  {
00001FC0  4282      3394          clr.l     D2
                    3395   EnableBreakPoints_1:
00001FC2  0C82 0000 3396          cmp.l     #8,D2
00001FC6  0008      
00001FC8  6C32      3397          bge.s     EnableBreakPoints_3
                    3398   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001FCA  2002      3399          move.l    D2,D0
00001FCC  E588      3400          lsl.l     #2,D0
00001FCE  41F9 0B00 3401          lea       _BreakPointSetOrCleared.L,A0
00001FD2  015E      
00001FD4  2030 0800 3402          move.l    0(A0,D0.L),D0
00001FD8  0C80 0000 3403          cmp.l     #1,D0
00001FDC  0001      
00001FDE  6618      3404          bne.s     EnableBreakPoints_4
                    3405   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001FE0  2002      3406          move.l    D2,D0
00001FE2  E588      3407          lsl.l     #2,D0
00001FE4  41F9 0B00 3408          lea       _BreakPointAddress.L,A0
00001FE8  012E      
00001FEA  2D70 0800 3409          move.l    0(A0,D0.L),-4(A6)
00001FEE  FFFC      
                    3410   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001FF0  206E FFFC 3411          move.l    -4(A6),A0
00001FF4  30BC 4E4E 3412          move.w    #20046,(A0)
                    3413   EnableBreakPoints_4:
00001FF8  5282      3414          addq.l    #1,D2
00001FFA  60C6      3415          bra       EnableBreakPoints_1
                    3416   EnableBreakPoints_3:
00001FFC  241F      3417          move.l    (A7)+,D2
00001FFE  4E5E      3418          unlk      A6
00002000  4E75      3419          rts
                    3420   ; }
                    3421   ; }
                    3422   ; }
                    3423   ; void KillAllBreakPoints(void)
                    3424   ; {
                    3425   _KillAllBreakPoints:
00002002  4E56 FFFC 3426          link      A6,#-4
00002006  2F02      3427          move.l    D2,-(A7)
                    3428   ; int i ;
                    3429   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3430   ; for(i = 0; i < 8; i++)  {
00002008  4282      3431          clr.l     D2
                    3432   KillAllBreakPoints_1:
0000200A  0C82 0000 3433          cmp.l     #8,D2
0000200E  0008      
00002010  6C00 0052 3434          bge       KillAllBreakPoints_3
                    3435   ; // clear BP
                    3436   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002014  2002      3437          move.l    D2,D0
00002016  E588      3438          lsl.l     #2,D0
00002018  41F9 0B00 3439          lea       _BreakPointAddress.L,A0
0000201C  012E      
0000201E  2D70 0800 3440          move.l    0(A0,D0.L),-4(A6)
00002022  FFFC      
                    3441   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00002024  2002      3442          move.l    D2,D0
00002026  E388      3443          lsl.l     #1,D0
00002028  41F9 0B00 3444          lea       _BreakPointInstruction.L,A0
0000202C  014E      
0000202E  226E FFFC 3445          move.l    -4(A6),A1
00002032  32B0 0800 3446          move.w    0(A0,D0.L),(A1)
                    3447   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002036  2002      3448          move.l    D2,D0
00002038  E588      3449          lsl.l     #2,D0
0000203A  41F9 0B00 3450          lea       _BreakPointAddress.L,A0
0000203E  012E      
00002040  42B0 0800 3451          clr.l     0(A0,D0.L)
                    3452   ; BreakPointInstruction[i] = 0 ;
00002044  2002      3453          move.l    D2,D0
00002046  E388      3454          lsl.l     #1,D0
00002048  41F9 0B00 3455          lea       _BreakPointInstruction.L,A0
0000204C  014E      
0000204E  4270 0800 3456          clr.w     0(A0,D0.L)
                    3457   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002052  2002      3458          move.l    D2,D0
00002054  E588      3459          lsl.l     #2,D0
00002056  41F9 0B00 3460          lea       _BreakPointSetOrCleared.L,A0
0000205A  015E      
0000205C  42B0 0800 3461          clr.l     0(A0,D0.L)
00002060  5282      3462          addq.l    #1,D2
00002062  60A6      3463          bra       KillAllBreakPoints_1
                    3464   KillAllBreakPoints_3:
00002064  241F      3465          move.l    (A7)+,D2
00002066  4E5E      3466          unlk      A6
00002068  4E75      3467          rts
                    3468   ; }
                    3469   ; //BreakPointDisplay() ;       // display the break points
                    3470   ; }
                    3471   ; void KillAllWatchPoints(void)
                    3472   ; {
                    3473   _KillAllWatchPoints:
0000206A  2F02      3474          move.l    D2,-(A7)
                    3475   ; int i ;
                    3476   ; for(i = 0; i < 8; i++)  {
0000206C  4282      3477          clr.l     D2
                    3478   KillAllWatchPoints_1:
0000206E  0C82 0000 3479          cmp.l     #8,D2
00002072  0008      
00002074  6C20      3480          bge.s     KillAllWatchPoints_3
                    3481   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002076  2002      3482          move.l    D2,D0
00002078  E588      3483          lsl.l     #2,D0
0000207A  41F9 0B00 3484          lea       _WatchPointAddress.L,A0
0000207E  0182      
00002080  42B0 0800 3485          clr.l     0(A0,D0.L)
                    3486   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002084  2002      3487          move.l    D2,D0
00002086  E588      3488          lsl.l     #2,D0
00002088  41F9 0B00 3489          lea       _WatchPointSetOrCleared.L,A0
0000208C  01A2      
0000208E  42B0 0800 3490          clr.l     0(A0,D0.L)
00002092  5282      3491          addq.l    #1,D2
00002094  60D8      3492          bra       KillAllWatchPoints_1
                    3493   KillAllWatchPoints_3:
00002096  241F      3494          move.l    (A7)+,D2
00002098  4E75      3495          rts
                    3496   ; }
                    3497   ; //WatchPointDisplay() ;       // display the break points
                    3498   ; }
                    3499   ; void SetBreakPoint(void)
                    3500   ; {
                    3501   _SetBreakPoint:
0000209A  4E56 FFFC 3502          link      A6,#-4
0000209E  48E7 3830 3503          movem.l   D2/D3/D4/A2/A3,-(A7)
000020A2  45F9 0000 3504          lea       _printf.L,A2
000020A6  3176      
000020A8  47F9 0B00 3505          lea       _BreakPointSetOrCleared.L,A3
000020AC  015E      
                    3506   ; int i ;
                    3507   ; int BPNumber;
                    3508   ; int BPAddress;
                    3509   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3510   ; // see if any free break points
                    3511   ; for(i = 0; i < 8; i ++) {
000020AE  4282      3512          clr.l     D2
                    3513   SetBreakPoint_1:
000020B0  0C82 0000 3514          cmp.l     #8,D2
000020B4  0008      
000020B6  6C10      3515          bge.s     SetBreakPoint_3
                    3516   ; if( BreakPointSetOrCleared[i] == 0)
000020B8  2002      3517          move.l    D2,D0
000020BA  E588      3518          lsl.l     #2,D0
000020BC  2033 0800 3519          move.l    0(A3,D0.L),D0
000020C0  6602      3520          bne.s     SetBreakPoint_4
                    3521   ; break ;         // if spare BP found allow user to set it
000020C2  6004      3522          bra.s     SetBreakPoint_3
                    3523   SetBreakPoint_4:
000020C4  5282      3524          addq.l    #1,D2
000020C6  60E8      3525          bra       SetBreakPoint_1
                    3526   SetBreakPoint_3:
                    3527   ; }
                    3528   ; if(i == 8) {
000020C8  0C82 0000 3529          cmp.l     #8,D2
000020CC  0008      
000020CE  660E      3530          bne.s     SetBreakPoint_6
                    3531   ; printf("\r\nNo FREE Break Points.....") ;
000020D0  4879 0000 3532          pea       @m68kde~1_83.L
000020D4  42C0      
000020D6  4E92      3533          jsr       (A2)
000020D8  584F      3534          addq.w    #4,A7
                    3535   ; return ;
000020DA  6000 00D6 3536          bra       SetBreakPoint_15
                    3537   SetBreakPoint_6:
                    3538   ; }
                    3539   ; printf("\r\nBreak Point Address: ") ;
000020DE  4879 0000 3540          pea       @m68kde~1_84.L
000020E2  42DC      
000020E4  4E92      3541          jsr       (A2)
000020E6  584F      3542          addq.w    #4,A7
                    3543   ; BPAddress = Get8HexDigits(0) ;
000020E8  42A7      3544          clr.l     -(A7)
000020EA  4EB8 0CA4 3545          jsr       _Get8HexDigits
000020EE  584F      3546          addq.w    #4,A7
000020F0  2600      3547          move.l    D0,D3
                    3548   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
000020F2  2803      3549          move.l    D3,D4
                    3550   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
000020F4  2003      3551          move.l    D3,D0
000020F6  C0BC 0000 3552          and.l     #1,D0
000020FA  0001      
000020FC  0C80 0000 3553          cmp.l     #1,D0
00002100  0001      
00002102  660E      3554          bne.s     SetBreakPoint_9
                    3555   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002104  4879 0000 3556          pea       @m68kde~1_85.L
00002108  42F4      
0000210A  4E92      3557          jsr       (A2)
0000210C  584F      3558          addq.w    #4,A7
                    3559   ; return ;
0000210E  6000 00A2 3560          bra       SetBreakPoint_15
                    3561   SetBreakPoint_9:
                    3562   ; }
                    3563   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00002112  0C83 0000 3564          cmp.l     #32768,D3
00002116  8000      
00002118  640E      3565          bhs.s     SetBreakPoint_11
                    3566   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
0000211A  4879 0000 3567          pea       @m68kde~1_86.L
0000211E  432A      
00002120  4E92      3568          jsr       (A2)
00002122  584F      3569          addq.w    #4,A7
                    3570   ; return ;
00002124  6000 008C 3571          bra       SetBreakPoint_15
                    3572   SetBreakPoint_11:
                    3573   ; }
                    3574   ; // search for first free bp or existing same BP
                    3575   ; for(i = 0; i < 8; i++)  {
00002128  4282      3576          clr.l     D2
                    3577   SetBreakPoint_13:
0000212A  0C82 0000 3578          cmp.l     #8,D2
0000212E  0008      
00002130  6C00 0080 3579          bge       SetBreakPoint_15
                    3580   ; if(BreakPointAddress[i] == BPAddress)   {
00002134  2002      3581          move.l    D2,D0
00002136  E588      3582          lsl.l     #2,D0
00002138  41F9 0B00 3583          lea       _BreakPointAddress.L,A0
0000213C  012E      
0000213E  B6B0 0800 3584          cmp.l     0(A0,D0.L),D3
00002142  6610      3585          bne.s     SetBreakPoint_16
                    3586   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002144  2F03      3587          move.l    D3,-(A7)
00002146  4879 0000 3588          pea       @m68kde~1_87.L
0000214A  4372      
0000214C  4E92      3589          jsr       (A2)
0000214E  504F      3590          addq.w    #8,A7
                    3591   ; return ;
00002150  6000 0060 3592          bra       SetBreakPoint_15
                    3593   SetBreakPoint_16:
                    3594   ; }
                    3595   ; if(BreakPointSetOrCleared[i] == 0) {
00002154  2002      3596          move.l    D2,D0
00002156  E588      3597          lsl.l     #2,D0
00002158  2033 0800 3598          move.l    0(A3,D0.L),D0
0000215C  6600 004E 3599          bne       SetBreakPoint_18
                    3600   ; // set BP here
                    3601   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00002160  2002      3602          move.l    D2,D0
00002162  E588      3603          lsl.l     #2,D0
00002164  27BC 0000 3604          move.l    #1,0(A3,D0.L)
00002168  0001 0800 
                    3605   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
0000216C  2044      3606          move.l    D4,A0
0000216E  2002      3607          move.l    D2,D0
00002170  E388      3608          lsl.l     #1,D0
00002172  43F9 0B00 3609          lea       _BreakPointInstruction.L,A1
00002176  014E      
00002178  3390 0800 3610          move.w    (A0),0(A1,D0.L)
                    3611   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
0000217C  2F04      3612          move.l    D4,-(A7)
0000217E  4879 0000 3613          pea       @m68kde~1_88.L
00002182  43AA      
00002184  4E92      3614          jsr       (A2)
00002186  504F      3615          addq.w    #8,A7
                    3616   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00002188  2044      3617          move.l    D4,A0
0000218A  30BC 4E4E 3618          move.w    #20046,(A0)
                    3619   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
0000218E  2002      3620          move.l    D2,D0
00002190  E588      3621          lsl.l     #2,D0
00002192  41F9 0B00 3622          lea       _BreakPointAddress.L,A0
00002196  012E      
00002198  2183 0800 3623          move.l    D3,0(A0,D0.L)
                    3624   ; printf("\r\n") ;
0000219C  4879 0000 3625          pea       @m68kde~1_1.L
000021A0  3A88      
000021A2  4E92      3626          jsr       (A2)
000021A4  584F      3627          addq.w    #4,A7
                    3628   ; BreakPointDisplay() ;       // display the break points
000021A6  4EB8 1C6A 3629          jsr       _BreakPointDisplay
                    3630   ; return ;
000021AA  6006      3631          bra.s     SetBreakPoint_15
                    3632   SetBreakPoint_18:
000021AC  5282      3633          addq.l    #1,D2
000021AE  6000 FF7A 3634          bra       SetBreakPoint_13
                    3635   SetBreakPoint_15:
000021B2  4CDF 0C1C 3636          movem.l   (A7)+,D2/D3/D4/A2/A3
000021B6  4E5E      3637          unlk      A6
000021B8  4E75      3638          rts
                    3639   ; }
                    3640   ; }
                    3641   ; }
                    3642   ; void SetWatchPoint(void)
                    3643   ; {
                    3644   _SetWatchPoint:
000021BA  4E56 FFF8 3645          link      A6,#-8
000021BE  48E7 3030 3646          movem.l   D2/D3/A2/A3,-(A7)
000021C2  45F9 0000 3647          lea       _printf.L,A2
000021C6  3176      
000021C8  47F9 0B00 3648          lea       _WatchPointSetOrCleared.L,A3
000021CC  01A2      
                    3649   ; int i ;
                    3650   ; int WPNumber;
                    3651   ; int WPAddress;
                    3652   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3653   ; // see if any free break points
                    3654   ; for(i = 0; i < 8; i ++) {
000021CE  4282      3655          clr.l     D2
                    3656   SetWatchPoint_1:
000021D0  0C82 0000 3657          cmp.l     #8,D2
000021D4  0008      
000021D6  6C10      3658          bge.s     SetWatchPoint_3
                    3659   ; if( WatchPointSetOrCleared[i] == 0)
000021D8  2002      3660          move.l    D2,D0
000021DA  E588      3661          lsl.l     #2,D0
000021DC  2033 0800 3662          move.l    0(A3,D0.L),D0
000021E0  6602      3663          bne.s     SetWatchPoint_4
                    3664   ; break ;         // if spare WP found allow user to set it
000021E2  6004      3665          bra.s     SetWatchPoint_3
                    3666   SetWatchPoint_4:
000021E4  5282      3667          addq.l    #1,D2
000021E6  60E8      3668          bra       SetWatchPoint_1
                    3669   SetWatchPoint_3:
                    3670   ; }
                    3671   ; if(i == 8) {
000021E8  0C82 0000 3672          cmp.l     #8,D2
000021EC  0008      
000021EE  660E      3673          bne.s     SetWatchPoint_6
                    3674   ; printf("\r\nNo FREE Watch Points.....") ;
000021F0  4879 0000 3675          pea       @m68kde~1_89.L
000021F4  43D0      
000021F6  4E92      3676          jsr       (A2)
000021F8  584F      3677          addq.w    #4,A7
                    3678   ; return ;
000021FA  6000 008C 3679          bra       SetWatchPoint_11
                    3680   SetWatchPoint_6:
                    3681   ; }
                    3682   ; printf("\r\nWatch Point Address: ") ;
000021FE  4879 0000 3683          pea       @m68kde~1_90.L
00002202  43EC      
00002204  4E92      3684          jsr       (A2)
00002206  584F      3685          addq.w    #4,A7
                    3686   ; WPAddress = Get8HexDigits(0) ;
00002208  42A7      3687          clr.l     -(A7)
0000220A  4EB8 0CA4 3688          jsr       _Get8HexDigits
0000220E  584F      3689          addq.w    #4,A7
00002210  2600      3690          move.l    D0,D3
                    3691   ; // search for first free wp or existing same wp
                    3692   ; for(i = 0; i < 8; i++)  {
00002212  4282      3693          clr.l     D2
                    3694   SetWatchPoint_9:
00002214  0C82 0000 3695          cmp.l     #8,D2
00002218  0008      
0000221A  6C00 006C 3696          bge       SetWatchPoint_11
                    3697   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
0000221E  2002      3698          move.l    D2,D0
00002220  E588      3699          lsl.l     #2,D0
00002222  41F9 0B00 3700          lea       _WatchPointAddress.L,A0
00002226  0182      
00002228  B6B0 0800 3701          cmp.l     0(A0,D0.L),D3
0000222C  6614      3702          bne.s     SetWatchPoint_12
0000222E  4A83      3703          tst.l     D3
00002230  6710      3704          beq.s     SetWatchPoint_12
                    3705   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002232  2F03      3706          move.l    D3,-(A7)
00002234  4879 0000 3707          pea       @m68kde~1_91.L
00002238  4404      
0000223A  4E92      3708          jsr       (A2)
0000223C  504F      3709          addq.w    #8,A7
                    3710   ; return ;
0000223E  6000 0048 3711          bra       SetWatchPoint_11
                    3712   SetWatchPoint_12:
                    3713   ; }
                    3714   ; if(WatchPointSetOrCleared[i] == 0) {
00002242  2002      3715          move.l    D2,D0
00002244  E588      3716          lsl.l     #2,D0
00002246  2033 0800 3717          move.l    0(A3,D0.L),D0
0000224A  6600 0038 3718          bne       SetWatchPoint_14
                    3719   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
0000224E  2002      3720          move.l    D2,D0
00002250  E588      3721          lsl.l     #2,D0
00002252  27BC 0000 3722          move.l    #1,0(A3,D0.L)
00002256  0001 0800 
                    3723   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000225A  2F03      3724          move.l    D3,-(A7)
0000225C  4879 0000 3725          pea       @m68kde~1_92.L
00002260  443A      
00002262  4E92      3726          jsr       (A2)
00002264  504F      3727          addq.w    #8,A7
                    3728   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002266  2002      3729          move.l    D2,D0
00002268  E588      3730          lsl.l     #2,D0
0000226A  41F9 0B00 3731          lea       _WatchPointAddress.L,A0
0000226E  0182      
00002270  2183 0800 3732          move.l    D3,0(A0,D0.L)
                    3733   ; printf("\r\n") ;
00002274  4879 0000 3734          pea       @m68kde~1_1.L
00002278  3A88      
0000227A  4E92      3735          jsr       (A2)
0000227C  584F      3736          addq.w    #4,A7
                    3737   ; WatchPointDisplay() ;       // display the break points
0000227E  4EB8 1D3E 3738          jsr       _WatchPointDisplay
                    3739   ; return ;
00002282  6004      3740          bra.s     SetWatchPoint_11
                    3741   SetWatchPoint_14:
00002284  5282      3742          addq.l    #1,D2
00002286  608C      3743          bra       SetWatchPoint_9
                    3744   SetWatchPoint_11:
00002288  4CDF 0C0C 3745          movem.l   (A7)+,D2/D3/A2/A3
0000228C  4E5E      3746          unlk      A6
0000228E  4E75      3747          rts
                    3748   ; }
                    3749   ; }
                    3750   ; }
                    3751   ; void HandleBreakPoint(void)
                    3752   ; {
                    3753   _HandleBreakPoint:
00002290  4E56 FFFC 3754          link      A6,#-4
00002294  48E7 0038 3755          movem.l   A2/A3/A4,-(A7)
00002298  45F9 0B00 3756          lea       _i.L,A2
0000229C  00C4      
0000229E  47F9 0000 3757          lea       _printf.L,A3
000022A2  3176      
000022A4  49F9 0B00 3758          lea       _PC.L,A4
000022A8  0120      
                    3759   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3760   ; // now we have to put the break point back to run the instruction
                    3761   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3762   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000022AA  5594      3763          subq.l    #2,(A4)
                    3764   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000022AC  4879 0000 3765          pea       @m68kde~1_93.L
000022B0  4460      
000022B2  4E93      3766          jsr       (A3)
000022B4  584F      3767          addq.w    #4,A7
                    3768   ; printf("\r\nSingle Step : [ON]") ;
000022B6  4879 0000 3769          pea       @m68kde~1_94.L
000022BA  4474      
000022BC  4E93      3770          jsr       (A3)
000022BE  584F      3771          addq.w    #4,A7
                    3772   ; printf("\r\nBreakPoints : [Enabled]") ;
000022C0  4879 0000 3773          pea       @m68kde~1_95.L
000022C4  448A      
000022C6  4E93      3774          jsr       (A3)
000022C8  584F      3775          addq.w    #4,A7
                    3776   ; // now clear the break point (put original instruction back)
                    3777   ; ProgramBreakPointAddress = PC ;
000022CA  2D54 FFFC 3778          move.l    (A4),-4(A6)
                    3779   ; for(i = 0; i < 8; i ++) {
000022CE  4292      3780          clr.l     (A2)
                    3781   HandleBreakPoint_1:
000022D0  2012      3782          move.l    (A2),D0
000022D2  0C80 0000 3783          cmp.l     #8,D0
000022D6  0008      
000022D8  6400 0056 3784          bhs       HandleBreakPoint_3
                    3785   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000022DC  2012      3786          move.l    (A2),D0
000022DE  E588      3787          lsl.l     #2,D0
000022E0  41F9 0B00 3788          lea       _BreakPointAddress.L,A0
000022E4  012E      
000022E6  2230 0800 3789          move.l    0(A0,D0.L),D1
000022EA  B294      3790          cmp.l     (A4),D1
000022EC  6600 003E 3791          bne       HandleBreakPoint_4
                    3792   ; BreakPointAddress[i] = 0 ;
000022F0  2012      3793          move.l    (A2),D0
000022F2  E588      3794          lsl.l     #2,D0
000022F4  41F9 0B00 3795          lea       _BreakPointAddress.L,A0
000022F8  012E      
000022FA  42B0 0800 3796          clr.l     0(A0,D0.L)
                    3797   ; BreakPointSetOrCleared[i] = 0 ;
000022FE  2012      3798          move.l    (A2),D0
00002300  E588      3799          lsl.l     #2,D0
00002302  41F9 0B00 3800          lea       _BreakPointSetOrCleared.L,A0
00002306  015E      
00002308  42B0 0800 3801          clr.l     0(A0,D0.L)
                    3802   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000230C  2012      3803          move.l    (A2),D0
0000230E  E388      3804          lsl.l     #1,D0
00002310  41F9 0B00 3805          lea       _BreakPointInstruction.L,A0
00002314  014E      
00002316  226E FFFC 3806          move.l    -4(A6),A1
0000231A  32B0 0800 3807          move.w    0(A0,D0.L),(A1)
                    3808   ; BreakPointInstruction[i] = 0 ;
0000231E  2012      3809          move.l    (A2),D0
00002320  E388      3810          lsl.l     #1,D0
00002322  41F9 0B00 3811          lea       _BreakPointInstruction.L,A0
00002326  014E      
00002328  4270 0800 3812          clr.w     0(A0,D0.L)
                    3813   HandleBreakPoint_4:
0000232C  5292      3814          addq.l    #1,(A2)
0000232E  60A0      3815          bra       HandleBreakPoint_1
                    3816   HandleBreakPoint_3:
                    3817   ; }
                    3818   ; }
                    3819   ; DumpRegisters() ;
00002330  4EB8 14BC 3820          jsr       _DumpRegisters
                    3821   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002334  4879 0000 3822          pea       @m68kde~1_57.L
00002338  4006      
0000233A  4E93      3823          jsr       (A3)
0000233C  584F      3824          addq.w    #4,A7
                    3825   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
0000233E  4879 0000 3826          pea       @m68kde~1_96.L
00002342  44A4      
00002344  4E93      3827          jsr       (A3)
00002346  584F      3828          addq.w    #4,A7
                    3829   ; menu() ;
00002348  4EB9 0000 3830          jsr       _menu
0000234C  2554      
0000234E  4CDF 1C00 3831          movem.l   (A7)+,A2/A3/A4
00002352  4E5E      3832          unlk      A6
00002354  4E75      3833          rts
                    3834   ; }
                    3835   ; void UnknownCommand()
                    3836   ; {
                    3837   _UnknownCommand:
                    3838   ; printf("\r\nUnknown Command.....\r\n") ;
00002356  4879 0000 3839          pea       @m68kde~1_97.L
0000235A  44CC      
0000235C  4EB9 0000 3840          jsr       _printf
00002360  3176      
00002362  584F      3841          addq.w    #4,A7
                    3842   ; Help() ;
00002364  4EB9 0000 3843          jsr       _Help
00002368  247A      
0000236A  4E75      3844          rts
                    3845   ; }
                    3846   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3847   ; void CallDebugMonitor(void)
                    3848   ; {
                    3849   _CallDebugMonitor:
                    3850   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000236C  4879 0000 3851          pea       @m68kde~1_98.L
00002370  44E6      
00002372  4EB9 0000 3852          jsr       _printf
00002376  3176      
00002378  584F      3853          addq.w    #4,A7
                    3854   ; menu();
0000237A  4EB9 0000 3855          jsr       _menu
0000237E  2554      
00002380  4E75      3856          rts
                    3857   ; }
                    3858   ; void Breakpoint(void)
                    3859   ; {
                    3860   _Breakpoint:
00002382  2F02      3861          move.l    D2,-(A7)
                    3862   ; char c;
                    3863   ; c = toupper(_getch());
00002384  2F00      3864          move.l    D0,-(A7)
00002386  4EB8 0B68 3865          jsr       __getch
0000238A  2200      3866          move.l    D0,D1
0000238C  201F      3867          move.l    (A7)+,D0
0000238E  2F01      3868          move.l    D1,-(A7)
00002390  4EB9 0000 3869          jsr       _toupper
00002394  315A      
00002396  584F      3870          addq.w    #4,A7
00002398  1400      3871          move.b    D0,D2
                    3872   ; if( c == (char)('D'))                                      // BreakPoint Display
0000239A  0C02 0044 3873          cmp.b     #68,D2
0000239E  6608      3874          bne.s     Breakpoint_1
                    3875   ; BreakPointDisplay() ;
000023A0  4EB8 1C6A 3876          jsr       _BreakPointDisplay
000023A4  6000 0054 3877          bra       Breakpoint_10
                    3878   Breakpoint_1:
                    3879   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000023A8  0C02 004B 3880          cmp.b     #75,D2
000023AC  6630      3881          bne.s     Breakpoint_3
                    3882   ; printf("\r\nKill All Break Points...(y/n)?") ;
000023AE  4879 0000 3883          pea       @m68kde~1_99.L
000023B2  4506      
000023B4  4EB9 0000 3884          jsr       _printf
000023B8  3176      
000023BA  584F      3885          addq.w    #4,A7
                    3886   ; c = toupper(_getch());
000023BC  2F00      3887          move.l    D0,-(A7)
000023BE  4EB8 0B68 3888          jsr       __getch
000023C2  2200      3889          move.l    D0,D1
000023C4  201F      3890          move.l    (A7)+,D0
000023C6  2F01      3891          move.l    D1,-(A7)
000023C8  4EB9 0000 3892          jsr       _toupper
000023CC  315A      
000023CE  584F      3893          addq.w    #4,A7
000023D0  1400      3894          move.b    D0,D2
                    3895   ; if(c == (char)('Y'))
000023D2  0C02 0059 3896          cmp.b     #89,D2
000023D6  6604      3897          bne.s     Breakpoint_5
                    3898   ; KillAllBreakPoints() ;
000023D8  4EB8 2002 3899          jsr       _KillAllBreakPoints
                    3900   Breakpoint_5:
000023DC  601C      3901          bra.s     Breakpoint_10
                    3902   Breakpoint_3:
                    3903   ; }
                    3904   ; else if(c == (char)('S')) {
000023DE  0C02 0053 3905          cmp.b     #83,D2
000023E2  6606      3906          bne.s     Breakpoint_7
                    3907   ; SetBreakPoint() ;
000023E4  4EB8 209A 3908          jsr       _SetBreakPoint
000023E8  6010      3909          bra.s     Breakpoint_10
                    3910   Breakpoint_7:
                    3911   ; }
                    3912   ; else if(c == (char)('C')) {
000023EA  0C02 0043 3913          cmp.b     #67,D2
000023EE  6606      3914          bne.s     Breakpoint_9
                    3915   ; BreakPointClear() ;
000023F0  4EB8 1DEA 3916          jsr       _BreakPointClear
000023F4  6004      3917          bra.s     Breakpoint_10
                    3918   Breakpoint_9:
                    3919   ; }
                    3920   ; else
                    3921   ; UnknownCommand() ;
000023F6  4EB8 2356 3922          jsr       _UnknownCommand
                    3923   Breakpoint_10:
000023FA  241F      3924          move.l    (A7)+,D2
000023FC  4E75      3925          rts
                    3926   ; }
                    3927   ; void Watchpoint(void)
                    3928   ; {
                    3929   _Watchpoint:
000023FE  2F02      3930          move.l    D2,-(A7)
                    3931   ; char c;
                    3932   ; c = toupper(_getch());
00002400  2F00      3933          move.l    D0,-(A7)
00002402  4EB8 0B68 3934          jsr       __getch
00002406  2200      3935          move.l    D0,D1
00002408  201F      3936          move.l    (A7)+,D0
0000240A  2F01      3937          move.l    D1,-(A7)
0000240C  4EB9 0000 3938          jsr       _toupper
00002410  315A      
00002412  584F      3939          addq.w    #4,A7
00002414  1400      3940          move.b    D0,D2
                    3941   ; if( c == (char)('D'))                                      // WatchPoint Display
00002416  0C02 0044 3942          cmp.b     #68,D2
0000241A  6608      3943          bne.s     Watchpoint_1
                    3944   ; WatchPointDisplay() ;
0000241C  4EB8 1D3E 3945          jsr       _WatchPointDisplay
00002420  6000 0054 3946          bra       Watchpoint_10
                    3947   Watchpoint_1:
                    3948   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002424  0C02 004B 3949          cmp.b     #75,D2
00002428  6630      3950          bne.s     Watchpoint_3
                    3951   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000242A  4879 0000 3952          pea       @m68kde~1_100.L
0000242E  4528      
00002430  4EB9 0000 3953          jsr       _printf
00002434  3176      
00002436  584F      3954          addq.w    #4,A7
                    3955   ; c = toupper(_getch());
00002438  2F00      3956          move.l    D0,-(A7)
0000243A  4EB8 0B68 3957          jsr       __getch
0000243E  2200      3958          move.l    D0,D1
00002440  201F      3959          move.l    (A7)+,D0
00002442  2F01      3960          move.l    D1,-(A7)
00002444  4EB9 0000 3961          jsr       _toupper
00002448  315A      
0000244A  584F      3962          addq.w    #4,A7
0000244C  1400      3963          move.b    D0,D2
                    3964   ; if(c == (char)('Y'))
0000244E  0C02 0059 3965          cmp.b     #89,D2
00002452  6604      3966          bne.s     Watchpoint_5
                    3967   ; KillAllWatchPoints() ;
00002454  4EB8 206A 3968          jsr       _KillAllWatchPoints
                    3969   Watchpoint_5:
00002458  601C      3970          bra.s     Watchpoint_10
                    3971   Watchpoint_3:
                    3972   ; }
                    3973   ; else if(c == (char)('S')) {
0000245A  0C02 0053 3974          cmp.b     #83,D2
0000245E  6606      3975          bne.s     Watchpoint_7
                    3976   ; SetWatchPoint() ;
00002460  4EB8 21BA 3977          jsr       _SetWatchPoint
00002464  6010      3978          bra.s     Watchpoint_10
                    3979   Watchpoint_7:
                    3980   ; }
                    3981   ; else if(c == (char)('C')) {
00002466  0C02 0043 3982          cmp.b     #67,D2
0000246A  6606      3983          bne.s     Watchpoint_9
                    3984   ; WatchPointClear() ;
0000246C  4EB8 1EC4 3985          jsr       _WatchPointClear
00002470  6004      3986          bra.s     Watchpoint_10
                    3987   Watchpoint_9:
                    3988   ; }
                    3989   ; else
                    3990   ; UnknownCommand() ;
00002472  4EB8 2356 3991          jsr       _UnknownCommand
                    3992   Watchpoint_10:
00002476  241F      3993          move.l    (A7)+,D2
00002478  4E75      3994          rts
                    3995   ; }
                    3996   ; void Help(void)
                    3997   ; {
                    3998   _Help:
0000247A  48E7 2020 3999          movem.l   D2/A2,-(A7)
0000247E  45F9 0000 4000          lea       _printf.L,A2
00002482  3176      
                    4001   ; char *banner = "\r\n----------------------------------------------------------------" ;
00002484  41F9 0000 4002          lea       @m68kde~1_101.L,A0
00002488  454A      
0000248A  2408      4003          move.l    A0,D2
                    4004   ; printf(banner) ;
0000248C  2F02      4005          move.l    D2,-(A7)
0000248E  4E92      4006          jsr       (A2)
00002490  584F      4007          addq.w    #4,A7
                    4008   ; printf("\r\n  Debugger Command Summary") ;
00002492  4879 0000 4009          pea       @m68kde~1_102.L
00002496  458E      
00002498  4E92      4010          jsr       (A2)
0000249A  584F      4011          addq.w    #4,A7
                    4012   ; printf(banner) ;
0000249C  2F02      4013          move.l    D2,-(A7)
0000249E  4E92      4014          jsr       (A2)
000024A0  584F      4015          addq.w    #4,A7
                    4016   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000024A2  4879 0000 4017          pea       @m68kde~1_103.L
000024A6  45AC      
000024A8  4E92      4018          jsr       (A2)
000024AA  584F      4019          addq.w    #4,A7
                    4020   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000024AC  4879 0000 4021          pea       @m68kde~1_104.L
000024B0  45F0      
000024B2  4E92      4022          jsr       (A2)
000024B4  584F      4023          addq.w    #4,A7
                    4024   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000024B6  4879 0000 4025          pea       @m68kde~1_105.L
000024BA  4628      
000024BC  4E92      4026          jsr       (A2)
000024BE  584F      4027          addq.w    #4,A7
                    4028   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000024C0  4879 0000 4029          pea       @m68kde~1_106.L
000024C4  4662      
000024C6  4E92      4030          jsr       (A2)
000024C8  584F      4031          addq.w    #4,A7
                    4032   ; printf("\r\n  E            - Enter String into Memory") ;
000024CA  4879 0000 4033          pea       @m68kde~1_107.L
000024CE  4694      
000024D0  4E92      4034          jsr       (A2)
000024D2  584F      4035          addq.w    #4,A7
                    4036   ; printf("\r\n  F            - Fill Memory with Data") ;
000024D4  4879 0000 4037          pea       @m68kde~1_108.L
000024D8  46C0      
000024DA  4E92      4038          jsr       (A2)
000024DC  584F      4039          addq.w    #4,A7
                    4040   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000024DE  2F39 0B00 4041          move.l    _PC.L,-(A7)
000024E2  0120      
000024E4  4879 0000 4042          pea       @m68kde~1_109.L
000024E8  46EA      
000024EA  4E92      4043          jsr       (A2)
000024EC  504F      4044          addq.w    #8,A7
                    4045   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
000024EE  4879 0000 4046          pea       @m68kde~1_110.L
000024F2  4724      
000024F4  4E92      4047          jsr       (A2)
000024F6  584F      4048          addq.w    #4,A7
                    4049   ; printf("\r\n  M            - Memory Examine and Change");
000024F8  4879 0000 4050          pea       @m68kde~1_111.L
000024FC  475C      
000024FE  4E92      4051          jsr       (A2)
00002500  584F      4052          addq.w    #4,A7
                    4053   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002502  4879 0000 4054          pea       @m68kde~1_112.L
00002506  478A      
00002508  4E92      4055          jsr       (A2)
0000250A  584F      4056          addq.w    #4,A7
                    4057   ; printf("\r\n  R            - Display 68000 Registers") ;
0000250C  4879 0000 4058          pea       @m68kde~1_113.L
00002510  47C4      
00002512  4E92      4059          jsr       (A2)
00002514  584F      4060          addq.w    #4,A7
                    4061   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002516  4879 0000 4062          pea       @m68kde~1_114.L
0000251A  47F0      
0000251C  4E92      4063          jsr       (A2)
0000251E  584F      4064          addq.w    #4,A7
                    4065   ; printf("\r\n  TM           - Test Memory") ;
00002520  4879 0000 4066          pea       @m68kde~1_115.L
00002524  4822      
00002526  4E92      4067          jsr       (A2)
00002528  584F      4068          addq.w    #4,A7
                    4069   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
0000252A  4879 0000 4070          pea       @m68kde~1_116.L
0000252E  4842      
00002530  4E92      4071          jsr       (A2)
00002532  584F      4072          addq.w    #4,A7
                    4073   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002534  4879 0000 4074          pea       @m68kde~1_117.L
00002538  486A      
0000253A  4E92      4075          jsr       (A2)
0000253C  584F      4076          addq.w    #4,A7
                    4077   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000253E  4879 0000 4078          pea       @m68kde~1_118.L
00002542  48A0      
00002544  4E92      4079          jsr       (A2)
00002546  584F      4080          addq.w    #4,A7
                    4081   ; printf(banner) ;
00002548  2F02      4082          move.l    D2,-(A7)
0000254A  4E92      4083          jsr       (A2)
0000254C  584F      4084          addq.w    #4,A7
0000254E  4CDF 0404 4085          movem.l   (A7)+,D2/A2
00002552  4E75      4086          rts
                    4087   ; }
                    4088   ; void menu(void)
                    4089   ; {
                    4090   _menu:
00002554  48E7 303C 4091          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002558  45F9 0000 4092          lea       _printf.L,A2
0000255C  3176      
0000255E  47F9 0B00 4093          lea       _Trace.L,A3
00002562  00D8      
00002564  49F9 0B00 4094          lea       _x.L,A4
00002568  00C8      
0000256A  4BF9 0B00 4095          lea       _SR.L,A5
0000256E  012C      
                    4096   ; char c,c1 ;
                    4097   ; while(1)    {
                    4098   menu_1:
                    4099   ; FlushKeyboard() ;               // dump unread characters from keyboard
00002570  4EB8 0BA6 4100          jsr       _FlushKeyboard
                    4101   ; printf("\r\n#") ;
00002574  4879 0000 4102          pea       @m68kde~1_119.L
00002578  48D8      
0000257A  4E92      4103          jsr       (A2)
0000257C  584F      4104          addq.w    #4,A7
                    4105   ; c = toupper(_getch());
0000257E  2F00      4106          move.l    D0,-(A7)
00002580  4EB8 0B68 4107          jsr       __getch
00002584  2200      4108          move.l    D0,D1
00002586  201F      4109          move.l    (A7)+,D0
00002588  2F01      4110          move.l    D1,-(A7)
0000258A  4EB9 0000 4111          jsr       _toupper
0000258E  315A      
00002590  584F      4112          addq.w    #4,A7
00002592  1400      4113          move.b    D0,D2
                    4114   ; if( c == (char)('L'))                  // load s record file
00002594  0C02 004C 4115          cmp.b     #76,D2
00002598  6608      4116          bne.s     menu_4
                    4117   ; Load_SRecordFile() ;
0000259A  4EB8 0E36 4118          jsr       _Load_SRecordFile
0000259E  6000 021E 4119          bra       menu_46
                    4120   menu_4:
                    4121   ; else if( c == (char)('D'))             // dump memory
000025A2  0C02 0044 4122          cmp.b     #68,D2
000025A6  6608      4123          bne.s     menu_6
                    4124   ; DumpMemory() ;
000025A8  4EB8 0CCC 4125          jsr       _DumpMemory
000025AC  6000 0210 4126          bra       menu_46
                    4127   menu_6:
                    4128   ; else if( c == (char)('E'))             // Enter String into memory
000025B0  0C02 0045 4129          cmp.b     #69,D2
000025B4  660A      4130          bne.s     menu_8
                    4131   ; EnterString() ;
000025B6  4EB9 0000 4132          jsr       _EnterString
000025BA  2906      
000025BC  6000 0200 4133          bra       menu_46
                    4134   menu_8:
                    4135   ; else if( c == (char)('F'))             // fill memory
000025C0  0C02 0046 4136          cmp.b     #70,D2
000025C4  6608      4137          bne.s     menu_10
                    4138   ; FillMemory() ;
000025C6  4EB8 0DBC 4139          jsr       _FillMemory
000025CA  6000 01F2 4140          bra       menu_46
                    4141   menu_10:
                    4142   ; else if( c == (char)('G'))  {           // go user program
000025CE  0C02 0047 4143          cmp.b     #71,D2
000025D2  6626      4144          bne.s     menu_12
                    4145   ; printf("\r\nProgram Running.....") ;
000025D4  4879 0000 4146          pea       @m68kde~1_120.L
000025D8  48DC      
000025DA  4E92      4147          jsr       (A2)
000025DC  584F      4148          addq.w    #4,A7
                    4149   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000025DE  4879 0000 4150          pea       @m68kde~1_121.L
000025E2  48F4      
000025E4  4E92      4151          jsr       (A2)
000025E6  584F      4152          addq.w    #4,A7
                    4153   ; GoFlag = 1 ;
000025E8  23FC 0000 4154          move.l    #1,_GoFlag.L
000025EC  0001 0B00 
000025F0  00DC      
                    4155   ; go() ;
000025F2  4EB8 08B8 4156          jsr       _go
000025F6  6000 01C6 4157          bra       menu_46
                    4158   menu_12:
                    4159   ; }
                    4160   ; else if( c == (char)('M'))           // memory examine and modify
000025FA  0C02 004D 4161          cmp.b     #77,D2
000025FE  6608      4162          bne.s     menu_14
                    4163   ; MemoryChange() ;
00002600  4EB8 0FC4 4164          jsr       _MemoryChange
00002604  6000 01B8 4165          bra       menu_46
                    4166   menu_14:
                    4167   ; else if( c == (char)('P'))            // Program Flash Chip
00002608  0C02 0050 4168          cmp.b     #80,D2
0000260C  6608      4169          bne.s     menu_16
                    4170   ; ProgramFlashChip() ;
0000260E  4EB8 1292 4171          jsr       _ProgramFlashChip
00002612  6000 01AA 4172          bra       menu_46
                    4173   menu_16:
                    4174   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002616  0C02 0043 4175          cmp.b     #67,D2
0000261A  6608      4176          bne.s     menu_18
                    4177   ; LoadFromFlashChip();
0000261C  4EB8 141E 4178          jsr       _LoadFromFlashChip
00002620  6000 019C 4179          bra       menu_46
                    4180   menu_18:
                    4181   ; else if( c == (char)('R'))             // dump registers
00002624  0C02 0052 4182          cmp.b     #82,D2
00002628  6608      4183          bne.s     menu_20
                    4184   ; DumpRegisters() ;
0000262A  4EB8 14BC 4185          jsr       _DumpRegisters
0000262E  6000 018E 4186          bra       menu_46
                    4187   menu_20:
                    4188   ; else if( c == (char)('.'))           // change registers
00002632  0C02 002E 4189          cmp.b     #46,D2
00002636  6608      4190          bne.s     menu_22
                    4191   ; ChangeRegisters() ;
00002638  4EB8 19AE 4192          jsr       _ChangeRegisters
0000263C  6000 0180 4193          bra       menu_46
                    4194   menu_22:
                    4195   ; else if( c == (char)('B'))              // breakpoint command
00002640  0C02 0042 4196          cmp.b     #66,D2
00002644  6608      4197          bne.s     menu_24
                    4198   ; Breakpoint() ;
00002646  4EB8 2382 4199          jsr       _Breakpoint
0000264A  6000 0172 4200          bra       menu_46
                    4201   menu_24:
                    4202   ; else if( c == (char)('T'))  {          // Test command
0000264E  0C02 0054 4203          cmp.b     #84,D2
00002652  6600 0046 4204          bne       menu_26
                    4205   ; c1 = toupper(_getch()) ;
00002656  2F00      4206          move.l    D0,-(A7)
00002658  4EB8 0B68 4207          jsr       __getch
0000265C  2200      4208          move.l    D0,D1
0000265E  201F      4209          move.l    (A7)+,D0
00002660  2F01      4210          move.l    D1,-(A7)
00002662  4EB9 0000 4211          jsr       _toupper
00002666  315A      
00002668  584F      4212          addq.w    #4,A7
0000266A  1600      4213          move.b    D0,D3
                    4214   ; if(c1 == (char)('M'))                    // memory test
0000266C  0C03 004D 4215          cmp.b     #77,D3
00002670  6608      4216          bne.s     menu_28
                    4217   ; MemoryTest() ;
00002672  4EB9 0000 4218          jsr       _MemoryTest
00002676  2956      
00002678  601C      4219          bra.s     menu_33
                    4220   menu_28:
                    4221   ; else if( c1 == (char)('S'))              // Switch Test command
0000267A  0C03 0053 4222          cmp.b     #83,D3
0000267E  6606      4223          bne.s     menu_30
                    4224   ; SwitchTest() ;
00002680  4EB8 0AA4 4225          jsr       _SwitchTest
00002684  6010      4226          bra.s     menu_33
                    4227   menu_30:
                    4228   ; else if( c1 == (char)('D'))              // display Test command
00002686  0C03 0044 4229          cmp.b     #68,D3
0000268A  6606      4230          bne.s     menu_32
                    4231   ; TestLEDS() ;
0000268C  4EB8 0A50 4232          jsr       _TestLEDS
00002690  6004      4233          bra.s     menu_33
                    4234   menu_32:
                    4235   ; else
                    4236   ; UnknownCommand() ;
00002692  4EB8 2356 4237          jsr       _UnknownCommand
                    4238   menu_33:
00002696  6000 0126 4239          bra       menu_46
                    4240   menu_26:
                    4241   ; }
                    4242   ; else if( c == (char)(' ')) {             // Next instruction command
0000269A  0C02 0020 4243          cmp.b     #32,D2
0000269E  6636      4244          bne.s     menu_34
                    4245   ; DisableBreakPoints() ;
000026A0  4EB8 1F66 4246          jsr       _DisableBreakPoints
                    4247   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000026A4  2013      4248          move.l    (A3),D0
000026A6  0C80 0000 4249          cmp.l     #1,D0
000026AA  0001      
000026AC  661A      4250          bne.s     menu_36
000026AE  2039 0B00 4251          move.l    _GoFlag.L,D0
000026B2  00DC      
000026B4  0C80 0000 4252          cmp.l     #1,D0
000026B8  0001      
000026BA  660C      4253          bne.s     menu_36
                    4254   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000026BC  13FC 0001 4255          move.b    #1,4194314
000026C0  0040 000A 
                    4256   ; return ;
000026C4  6000 00FC 4257          bra       menu_38
                    4258   menu_36:
                    4259   ; }
                    4260   ; else
                    4261   ; printf("\r\nError: Press 'G' first to start program") ;
000026C8  4879 0000 4262          pea       @m68kde~1_122.L
000026CC  4922      
000026CE  4E92      4263          jsr       (A2)
000026D0  584F      4264          addq.w    #4,A7
000026D2  6000 00EA 4265          bra       menu_46
                    4266   menu_34:
                    4267   ; }
                    4268   ; else if( c == (char)('S')) {             // single step
000026D6  0C02 0053 4269          cmp.b     #83,D2
000026DA  6600 008C 4270          bne       menu_39
                    4271   ; if(Trace == 0) {
000026DE  2013      4272          move.l    (A3),D0
000026E0  6600 0050 4273          bne       menu_41
                    4274   ; DisableBreakPoints() ;
000026E4  4EB8 1F66 4275          jsr       _DisableBreakPoints
                    4276   ; printf("\r\nSingle Step  :[ON]") ;
000026E8  4879 0000 4277          pea       @m68kde~1_123.L
000026EC  494C      
000026EE  4E92      4278          jsr       (A2)
000026F0  584F      4279          addq.w    #4,A7
                    4280   ; printf("\r\nBreak Points :[Disabled]") ;
000026F2  4879 0000 4281          pea       @m68kde~1_56.L
000026F6  3FEA      
000026F8  4E92      4282          jsr       (A2)
000026FA  584F      4283          addq.w    #4,A7
                    4284   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
000026FC  0055 8000 4285          or.w      #32768,(A5)
                    4286   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002700  2F39 0B00 4287          move.l    _PC.L,-(A7)
00002704  0120      
00002706  4879 0000 4288          pea       @m68kde~1_124.L
0000270A  4962      
0000270C  4E92      4289          jsr       (A2)
0000270E  504F      4290          addq.w    #8,A7
                    4291   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002710  4879 0000 4292          pea       @m68kde~1_125.L
00002714  4996      
00002716  4E92      4293          jsr       (A2)
00002718  584F      4294          addq.w    #4,A7
                    4295   ; DumpRegisters() ;
0000271A  4EB8 14BC 4296          jsr       _DumpRegisters
                    4297   ; Trace = 1;
0000271E  26BC 0000 4298          move.l    #1,(A3)
00002722  0001      
                    4299   ; TraceException = 1;
00002724  13FC 0001 4300          move.b    #1,4194314
00002728  0040 000A 
                    4301   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000272C  28B8 0074 4302          move.l    116,(A4)
00002730  6032      4303          bra.s     menu_42
                    4304   menu_41:
                    4305   ; }
                    4306   ; else {
                    4307   ; Trace = 0 ;
00002732  4293      4308          clr.l     (A3)
                    4309   ; TraceException = 0 ;
00002734  4239 0040 4310          clr.b     4194314
00002738  000A      
                    4311   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000273A  28B8 0074 4312          move.l    116,(A4)
                    4313   ; EnableBreakPoints() ;
0000273E  4EB8 1FBA 4314          jsr       _EnableBreakPoints
                    4315   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002742  0255 7FFF 4316          and.w     #32767,(A5)
                    4317   ; printf("\r\nSingle Step : [OFF]") ;
00002746  4879 0000 4318          pea       @m68kde~1_126.L
0000274A  49BA      
0000274C  4E92      4319          jsr       (A2)
0000274E  584F      4320          addq.w    #4,A7
                    4321   ; printf("\r\nBreak Points :[Enabled]") ;
00002750  4879 0000 4322          pea       @m68kde~1_127.L
00002754  49D0      
00002756  4E92      4323          jsr       (A2)
00002758  584F      4324          addq.w    #4,A7
                    4325   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
0000275A  4879 0000 4326          pea       @m68kde~1_128.L
0000275E  49EA      
00002760  4E92      4327          jsr       (A2)
00002762  584F      4328          addq.w    #4,A7
                    4329   menu_42:
00002764  6000 0058 4330          bra       menu_46
                    4331   menu_39:
                    4332   ; }
                    4333   ; }
                    4334   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002768  0C02 001B 4335          cmp.b     #27,D2
0000276C  6600 0040 4336          bne       menu_43
                    4337   ; Trace = 0;
00002770  4293      4338          clr.l     (A3)
                    4339   ; TraceException = 0;
00002772  4239 0040 4340          clr.b     4194314
00002776  000A      
                    4341   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002778  28B8 0074 4342          move.l    116,(A4)
                    4343   ; EnableBreakPoints() ;
0000277C  4EB8 1FBA 4344          jsr       _EnableBreakPoints
                    4345   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002780  0255 7FFF 4346          and.w     #32767,(A5)
                    4347   ; printf("\r\nSingle Step  :[OFF]") ;
00002784  4879 0000 4348          pea       @m68kde~1_129.L
00002788  4A14      
0000278A  4E92      4349          jsr       (A2)
0000278C  584F      4350          addq.w    #4,A7
                    4351   ; printf("\r\nBreak Points :[Enabled]");
0000278E  4879 0000 4352          pea       @m68kde~1_127.L
00002792  49D0      
00002794  4E92      4353          jsr       (A2)
00002796  584F      4354          addq.w    #4,A7
                    4355   ; printf("\r\nProgram Running.....") ;
00002798  4879 0000 4356          pea       @m68kde~1_120.L
0000279C  48DC      
0000279E  4E92      4357          jsr       (A2)
000027A0  584F      4358          addq.w    #4,A7
                    4359   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000027A2  4879 0000 4360          pea       @m68kde~1_121.L
000027A6  48F4      
000027A8  4E92      4361          jsr       (A2)
000027AA  584F      4362          addq.w    #4,A7
                    4363   ; return ;
000027AC  6014      4364          bra.s     menu_38
                    4365   menu_43:
                    4366   ; }
                    4367   ; else if( c == (char)('W'))              // Watchpoint command
000027AE  0C02 0057 4368          cmp.b     #87,D2
000027B2  6606      4369          bne.s     menu_45
                    4370   ; Watchpoint() ;
000027B4  4EB8 23FE 4371          jsr       _Watchpoint
000027B8  6004      4372          bra.s     menu_46
                    4373   menu_45:
                    4374   ; else
                    4375   ; UnknownCommand() ;
000027BA  4EB8 2356 4376          jsr       _UnknownCommand
                    4377   menu_46:
000027BE  6000 FDB0 4378          bra       menu_1
                    4379   menu_38:
000027C2  4CDF 3C0C 4380          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000027C6  4E75      4381          rts
                    4382   ; }
                    4383   ; }
                    4384   ; void PrintErrorMessageandAbort(char *string) {
                    4385   _PrintErrorMessageandAbort:
000027C8  4E56 0000 4386          link      A6,#0
                    4387   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000027CC  4879 0000 4388          pea       @m68kde~1_130.L
000027D0  4A2A      
000027D2  4EB9 0000 4389          jsr       _printf
000027D6  3176      
000027D8  584F      4390          addq.w    #4,A7
                    4391   ; printf("%s\r\n", string) ;
000027DA  2F2E 0008 4392          move.l    8(A6),-(A7)
000027DE  4879 0000 4393          pea       @m68kde~1_131.L
000027E2  4A46      
000027E4  4EB9 0000 4394          jsr       _printf
000027E8  3176      
000027EA  504F      4395          addq.w    #8,A7
                    4396   ; menu() ;
000027EC  4EB8 2554 4397          jsr       _menu
000027F0  4E5E      4398          unlk      A6
000027F2  4E75      4399          rts
                    4400   ; }
                    4401   ; void IRQMessage(int level) {
                    4402   _IRQMessage:
000027F4  4E56 0000 4403          link      A6,#0
                    4404   ; printf("\r\n\r\nProgram ABORT !!!!!");
000027F8  4879 0000 4405          pea       @m68kde~1_132.L
000027FC  4A4C      
000027FE  4EB9 0000 4406          jsr       _printf
00002802  3176      
00002804  584F      4407          addq.w    #4,A7
                    4408   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002806  2F2E 0008 4409          move.l    8(A6),-(A7)
0000280A  4879 0000 4410          pea       @m68kde~1_133.L
0000280E  4A64      
00002810  4EB9 0000 4411          jsr       _printf
00002814  3176      
00002816  504F      4412          addq.w    #8,A7
                    4413   ; menu() ;
00002818  4EB8 2554 4414          jsr       _menu
0000281C  4E5E      4415          unlk      A6
0000281E  4E75      4416          rts
                    4417   ; }
                    4418   ; void UnhandledIRQ1(void) {
                    4419   _UnhandledIRQ1:
                    4420   ; IRQMessage(1);
00002820  4878 0001 4421          pea       1
00002824  4EB8 27F4 4422          jsr       _IRQMessage
00002828  584F      4423          addq.w    #4,A7
0000282A  4E75      4424          rts
                    4425   ; }
                    4426   ; void UnhandledIRQ2(void) {
                    4427   _UnhandledIRQ2:
                    4428   ; IRQMessage(2);
0000282C  4878 0002 4429          pea       2
00002830  4EB8 27F4 4430          jsr       _IRQMessage
00002834  584F      4431          addq.w    #4,A7
00002836  4E75      4432          rts
                    4433   ; }
                    4434   ; void UnhandledIRQ3(void){
                    4435   _UnhandledIRQ3:
                    4436   ; IRQMessage(3);
00002838  4878 0003 4437          pea       3
0000283C  4EB8 27F4 4438          jsr       _IRQMessage
00002840  584F      4439          addq.w    #4,A7
00002842  4E75      4440          rts
                    4441   ; }
                    4442   ; void UnhandledIRQ4(void) {
                    4443   _UnhandledIRQ4:
                    4444   ; IRQMessage(4);
00002844  4878 0004 4445          pea       4
00002848  4EB8 27F4 4446          jsr       _IRQMessage
0000284C  584F      4447          addq.w    #4,A7
0000284E  4E75      4448          rts
                    4449   ; }
                    4450   ; void UnhandledIRQ5(void) {
                    4451   _UnhandledIRQ5:
                    4452   ; IRQMessage(5);
00002850  4878 0005 4453          pea       5
00002854  4EB8 27F4 4454          jsr       _IRQMessage
00002858  584F      4455          addq.w    #4,A7
0000285A  4E75      4456          rts
                    4457   ; }
                    4458   ; void UnhandledIRQ6(void) {
                    4459   _UnhandledIRQ6:
                    4460   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
0000285C  4879 0000 4461          pea       @m68kde~1_134.L
00002860  4A88      
00002862  4EB8 27C8 4462          jsr       _PrintErrorMessageandAbort
00002866  584F      4463          addq.w    #4,A7
                    4464   ; menu() ;
00002868  4EB8 2554 4465          jsr       _menu
0000286C  4E75      4466          rts
                    4467   ; }
                    4468   ; void UnhandledIRQ7(void) {
                    4469   _UnhandledIRQ7:
                    4470   ; IRQMessage(7);
0000286E  4878 0007 4471          pea       7
00002872  4EB8 27F4 4472          jsr       _IRQMessage
00002876  584F      4473          addq.w    #4,A7
00002878  4E75      4474          rts
                    4475   ; }
                    4476   ; void UnhandledTrap(void) {
                    4477   _UnhandledTrap:
                    4478   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
0000287A  4879 0000 4479          pea       @m68kde~1_135.L
0000287E  4AC8      
00002880  4EB8 27C8 4480          jsr       _PrintErrorMessageandAbort
00002884  584F      4481          addq.w    #4,A7
00002886  4E75      4482          rts
                    4483   ; }
                    4484   ; void BusError() {
                    4485   _BusError:
                    4486   ; PrintErrorMessageandAbort("BUS Error!") ;
00002888  4879 0000 4487          pea       @m68kde~1_136.L
0000288C  4ADE      
0000288E  4EB8 27C8 4488          jsr       _PrintErrorMessageandAbort
00002892  584F      4489          addq.w    #4,A7
00002894  4E75      4490          rts
                    4491   ; }
                    4492   ; void AddressError() {
                    4493   _AddressError:
                    4494   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002896  4879 0000 4495          pea       @m68kde~1_137.L
0000289A  4AEA      
0000289C  4EB8 27C8 4496          jsr       _PrintErrorMessageandAbort
000028A0  584F      4497          addq.w    #4,A7
000028A2  4E75      4498          rts
                    4499   ; }
                    4500   ; void IllegalInstruction() {
                    4501   _IllegalInstruction:
                    4502   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000028A4  4879 0000 4503          pea       @m68kde~1_138.L
000028A8  4AFA      
000028AA  4EB8 27C8 4504          jsr       _PrintErrorMessageandAbort
000028AE  584F      4505          addq.w    #4,A7
000028B0  4E75      4506          rts
                    4507   ; }
                    4508   ; void Dividebyzero() {
                    4509   _Dividebyzero:
                    4510   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000028B2  4879 0000 4511          pea       @m68kde~1_139.L
000028B6  4B0E      
000028B8  4EB8 27C8 4512          jsr       _PrintErrorMessageandAbort
000028BC  584F      4513          addq.w    #4,A7
000028BE  4E75      4514          rts
                    4515   ; }
                    4516   ; void Check() {
                    4517   _Check:
                    4518   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000028C0  4879 0000 4519          pea       @m68kde~1_140.L
000028C4  4B1E      
000028C6  4EB8 27C8 4520          jsr       _PrintErrorMessageandAbort
000028CA  584F      4521          addq.w    #4,A7
000028CC  4E75      4522          rts
                    4523   ; }
                    4524   ; void Trapv() {
                    4525   _Trapv:
                    4526   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000028CE  4879 0000 4527          pea       @m68kde~1_141.L
000028D2  4B30      
000028D4  4EB8 27C8 4528          jsr       _PrintErrorMessageandAbort
000028D8  584F      4529          addq.w    #4,A7
000028DA  4E75      4530          rts
                    4531   ; }
                    4532   ; void PrivError() {
                    4533   _PrivError:
                    4534   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000028DC  4879 0000 4535          pea       @m68kde~1_142.L
000028E0  4B42      
000028E2  4EB8 27C8 4536          jsr       _PrintErrorMessageandAbort
000028E6  584F      4537          addq.w    #4,A7
000028E8  4E75      4538          rts
                    4539   ; }
                    4540   ; void UnitIRQ() {
                    4541   _UnitIRQ:
                    4542   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
000028EA  4879 0000 4543          pea       @m68kde~1_143.L
000028EE  4B56      
000028F0  4EB8 27C8 4544          jsr       _PrintErrorMessageandAbort
000028F4  584F      4545          addq.w    #4,A7
000028F6  4E75      4546          rts
                    4547   ; }
                    4548   ; void Spurious() {
                    4549   _Spurious:
                    4550   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
000028F8  4879 0000 4551          pea       @m68kde~1_144.L
000028FC  4B68      
000028FE  4EB8 27C8 4552          jsr       _PrintErrorMessageandAbort
00002902  584F      4553          addq.w    #4,A7
00002904  4E75      4554          rts
                    4555   ; }
                    4556   ; void EnterString(void)
                    4557   ; {
                    4558   _EnterString:
00002906  4E56 FFFC 4559          link      A6,#-4
0000290A  2F02      4560          move.l    D2,-(A7)
                    4561   ; unsigned char *Start;
                    4562   ; unsigned char c;
                    4563   ; printf("\r\nStart Address in Memory: ") ;
0000290C  4879 0000 4564          pea       @m68kde~1_145.L
00002910  4B76      
00002912  4EB9 0000 4565          jsr       _printf
00002916  3176      
00002918  584F      4566          addq.w    #4,A7
                    4567   ; Start = Get8HexDigits(0) ;
0000291A  42A7      4568          clr.l     -(A7)
0000291C  4EB8 0CA4 4569          jsr       _Get8HexDigits
00002920  584F      4570          addq.w    #4,A7
00002922  2400      4571          move.l    D0,D2
                    4572   ; printf("\r\nEnter String (ESC to end) :") ;
00002924  4879 0000 4573          pea       @m68kde~1_146.L
00002928  4B92      
0000292A  4EB9 0000 4574          jsr       _printf
0000292E  3176      
00002930  584F      4575          addq.w    #4,A7
                    4576   ; while((c = getchar()) != 0x1b)
                    4577   EnterString_1:
00002932  4EB9 0000 4578          jsr       _getch
00002936  30BE      
00002938  1D40 FFFF 4579          move.b    D0,-1(A6)
0000293C  0C00 001B 4580          cmp.b     #27,D0
00002940  670A      4581          beq.s     EnterString_3
                    4582   ; *Start++ = c ;
00002942  2042      4583          move.l    D2,A0
00002944  5282      4584          addq.l    #1,D2
00002946  10AE FFFF 4585          move.b    -1(A6),(A0)
0000294A  60E6      4586          bra       EnterString_1
                    4587   EnterString_3:
                    4588   ; *Start = 0x00;  // terminate with a null
0000294C  2042      4589          move.l    D2,A0
0000294E  4210      4590          clr.b     (A0)
00002950  241F      4591          move.l    (A7)+,D2
00002952  4E5E      4592          unlk      A6
00002954  4E75      4593          rts
                    4594   ; }
                    4595   ; void MemoryTest(void)
                    4596   ; {
                    4597   _MemoryTest:
00002956  4E56 FFFC 4598          link      A6,#-4
0000295A  48E7 3F3C 4599          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000295E  45F9 0000 4600          lea       _printf.L,A2
00002962  3176      
                    4601   ; unsigned int bit_num = 0;
00002964  3A7C 0000 4602          move.w    #0,A5
                    4603   ; unsigned int test_pattern = 0;
00002968  4284      4604          clr.l     D4
                    4605   ; unsigned int write_data = 0;
0000296A  387C 0000 4606          move.w    #0,A4
                    4607   ; unsigned int start_addr = 0;
0000296E  4283      4608          clr.l     D3
                    4609   ; unsigned int end_addr = 0;
00002970  4285      4610          clr.l     D5
                    4611   ; unsigned int *addr_point = NULL;
00002972  4282      4612          clr.l     D2
                    4613   ; unsigned int counter = 2000;
00002974  367C 07D0 4614          move.w    #2000,A3
                    4615   ; unsigned int fail = 0;
00002978  42AE FFFC 4616          clr.l     -4(A6)
                    4617   ; char test_option = 'X';
0000297C  7E58      4618          moveq     #88,D7
                    4619   ; char select_pattern = 'X';
0000297E  7C58      4620          moveq     #88,D6
                    4621   ; //prompting user for test option BYTES, WORDS, or LONG WORDS
                    4622   ; while(test_option == 'X'){
                    4623   MemoryTest_1:
00002980  0C07 0058 4624          cmp.b     #88,D7
00002984  6600 003C 4625          bne       MemoryTest_3
                    4626   ; FlushKeyboard();
00002988  4EB8 0BA6 4627          jsr       _FlushKeyboard
                    4628   ; printf("\r\nPlease enter a number to choose one of the following test options:"
0000298C  4879 0000 4629          pea       @m68kde~1_147.L
00002990  4BB0      
00002992  4E92      4630          jsr       (A2)
00002994  584F      4631          addq.w    #4,A7
                    4632   ; "\r\n1 - Bytes"
                    4633   ; "\r\n2 - Words"
                    4634   ; "\r\n3 - Long Words\r\n");
                    4635   ; //scanf("%d", &test_option);
                    4636   ; test_option = (char)(_getch());
00002996  4EB8 0B68 4637          jsr       __getch
0000299A  1E00      4638          move.b    D0,D7
                    4639   ; if((test_option != '1' && test_option != '2' && test_option != '3') || test_option == 'X'){
0000299C  0C07 0031 4640          cmp.b     #49,D7
000029A0  670C      4641          beq.s     MemoryTest_7
000029A2  0C07 0032 4642          cmp.b     #50,D7
000029A6  6706      4643          beq.s     MemoryTest_7
000029A8  0C07 0033 4644          cmp.b     #51,D7
000029AC  6606      4645          bne.s     MemoryTest_6
                    4646   MemoryTest_7:
000029AE  0C07 0058 4647          cmp.b     #88,D7
000029B2  660C      4648          bne.s     MemoryTest_4
                    4649   MemoryTest_6:
                    4650   ; printf("\r\nInvalid Selection\r\n");
000029B4  4879 0000 4651          pea       @m68kde~1_148.L
000029B8  4C1E      
000029BA  4E92      4652          jsr       (A2)
000029BC  584F      4653          addq.w    #4,A7
                    4654   ; test_option = 0;
000029BE  7E00      4655          moveq     #0,D7
                    4656   MemoryTest_4:
000029C0  60BE      4657          bra       MemoryTest_1
                    4658   MemoryTest_3:
                    4659   ; }
                    4660   ; }
                    4661   ; //assigning bit_num based on test_option
                    4662   ; switch(test_option){
000029C2  4887      4663          ext.w     D7
000029C4  48C7      4664          ext.l     D7
000029C6  0C87 0000 4665          cmp.l     #50,D7
000029CA  0032      
000029CC  6728      4666          beq.s     MemoryTest_11
000029CE  6E0C      4667          bgt.s     MemoryTest_14
000029D0  0C87 0000 4668          cmp.l     #49,D7
000029D4  0031      
000029D6  670E      4669          beq.s     MemoryTest_10
000029D8  6000 003C 4670          bra       MemoryTest_8
                    4671   MemoryTest_14:
000029DC  0C87 0000 4672          cmp.l     #51,D7
000029E0  0033      
000029E2  6722      4673          beq.s     MemoryTest_12
000029E4  6030      4674          bra.s     MemoryTest_8
                    4675   MemoryTest_10:
                    4676   ; case '1':
                    4677   ; printf("\r\nYou have selected test option BYTES\r\n");
000029E6  4879 0000 4678          pea       @m68kde~1_149.L
000029EA  4C34      
000029EC  4E92      4679          jsr       (A2)
000029EE  584F      4680          addq.w    #4,A7
                    4681   ; bit_num = 8;
000029F0  3A7C 0008 4682          move.w    #8,A5
                    4683   ; break;
000029F4  602A      4684          bra.s     MemoryTest_9
                    4685   MemoryTest_11:
                    4686   ; case '2':
                    4687   ; printf("\r\nYou have selected test option WORDS\r\n");
000029F6  4879 0000 4688          pea       @m68kde~1_150.L
000029FA  4C5C      
000029FC  4E92      4689          jsr       (A2)
000029FE  584F      4690          addq.w    #4,A7
                    4691   ; bit_num = 16;
00002A00  3A7C 0010 4692          move.w    #16,A5
                    4693   ; break;
00002A04  601A      4694          bra.s     MemoryTest_9
                    4695   MemoryTest_12:
                    4696   ; case '3':
                    4697   ; printf("\r\nYou have selected test option LONG WORDS\r\n");
00002A06  4879 0000 4698          pea       @m68kde~1_151.L
00002A0A  4C84      
00002A0C  4E92      4699          jsr       (A2)
00002A0E  584F      4700          addq.w    #4,A7
                    4701   ; bit_num = 32;
00002A10  3A7C 0020 4702          move.w    #32,A5
                    4703   ; break;
00002A14  600A      4704          bra.s     MemoryTest_9
                    4705   MemoryTest_8:
                    4706   ; default:
                    4707   ; printf("\r\nException - invalid test option\r\n");
00002A16  4879 0000 4708          pea       @m68kde~1_152.L
00002A1A  4CB2      
00002A1C  4E92      4709          jsr       (A2)
00002A1E  584F      4710          addq.w    #4,A7
                    4711   ; break;
                    4712   MemoryTest_9:
                    4713   ; }
                    4714   ; //prompting user to enter test pattern
                    4715   ; while(select_pattern == 'X'){
                    4716   MemoryTest_15:
00002A20  0C06 0058 4717          cmp.b     #88,D6
00002A24  6600 0042 4718          bne       MemoryTest_17
                    4719   ; FlushKeyboard();
00002A28  4EB8 0BA6 4720          jsr       _FlushKeyboard
                    4721   ; printf("\r\nPlease enter a number to choose one of the following test patterns:"
00002A2C  4879 0000 4722          pea       @m68kde~1_153.L
00002A30  4CD6      
00002A32  4E92      4723          jsr       (A2)
00002A34  584F      4724          addq.w    #4,A7
                    4725   ; "\r\n1 - 55"
                    4726   ; "\r\n2 - AA"
                    4727   ; "\r\n3 - FF"
                    4728   ; "\r\n4 - 00\r\n");
                    4729   ; //scanf("%d", &select_pattern);
                    4730   ; select_pattern = (char)_getch();
00002A36  4EB8 0B68 4731          jsr       __getch
00002A3A  1C00      4732          move.b    D0,D6
                    4733   ; if((select_pattern != '1' && select_pattern != '2' && select_pattern != '3' && select_pattern != '4') || select_pattern == 'X'){
00002A3C  0C06 0031 4734          cmp.b     #49,D6
00002A40  6712      4735          beq.s     MemoryTest_21
00002A42  0C06 0032 4736          cmp.b     #50,D6
00002A46  670C      4737          beq.s     MemoryTest_21
00002A48  0C06 0033 4738          cmp.b     #51,D6
00002A4C  6706      4739          beq.s     MemoryTest_21
00002A4E  0C06 0034 4740          cmp.b     #52,D6
00002A52  6606      4741          bne.s     MemoryTest_20
                    4742   MemoryTest_21:
00002A54  0C06 0058 4743          cmp.b     #88,D6
00002A58  660C      4744          bne.s     MemoryTest_18
                    4745   MemoryTest_20:
                    4746   ; printf("\r\nInvalid Selection\r\n");
00002A5A  4879 0000 4747          pea       @m68kde~1_148.L
00002A5E  4C1E      
00002A60  4E92      4748          jsr       (A2)
00002A62  584F      4749          addq.w    #4,A7
                    4750   ; select_pattern = 0;
00002A64  4206      4751          clr.b     D6
                    4752   MemoryTest_18:
00002A66  60B8      4753          bra       MemoryTest_15
                    4754   MemoryTest_17:
                    4755   ; }
                    4756   ; }
                    4757   ; //assigning write_data based on test_pattern
                    4758   ; switch(select_pattern){
00002A68  4886      4759          ext.w     D6
00002A6A  48C6      4760          ext.l     D6
00002A6C  2006      4761          move.l    D6,D0
00002A6E  0480 0000 4762          sub.l     #49,D0
00002A72  0031      
00002A74  6500 005E 4763          blo       MemoryTest_22
00002A78  0C80 0000 4764          cmp.l     #4,D0
00002A7C  0004      
00002A7E  6400 0054 4765          bhs       MemoryTest_22
00002A82  E380      4766          asl.l     #1,D0
00002A84  303B 0806 4767          move.w    MemoryTest_24(PC,D0.L),D0
00002A88  4EFB 0002 4768          jmp       MemoryTest_24(PC,D0.W)
                    4769   MemoryTest_24:
00002A8C  0008      4770          dc.w      MemoryTest_25-MemoryTest_24
00002A8E  0018      4771          dc.w      MemoryTest_26-MemoryTest_24
00002A90  002A      4772          dc.w      MemoryTest_27-MemoryTest_24
00002A92  003C      4773          dc.w      MemoryTest_28-MemoryTest_24
                    4774   MemoryTest_25:
                    4775   ; case '1':
                    4776   ; printf("\r\nYou have selected test pattern 55\r\n");
00002A94  4879 0000 4777          pea       @m68kde~1_154.L
00002A98  4D3E      
00002A9A  4E92      4778          jsr       (A2)
00002A9C  584F      4779          addq.w    #4,A7
                    4780   ; test_pattern = 0x55;
00002A9E  7855      4781          moveq     #85,D4
                    4782   ; break;
00002AA0  6000 003C 4783          bra       MemoryTest_23
                    4784   MemoryTest_26:
                    4785   ; case '2':
                    4786   ; printf("\r\nYou have selected test pattern AA\r\n");
00002AA4  4879 0000 4787          pea       @m68kde~1_155.L
00002AA8  4D64      
00002AAA  4E92      4788          jsr       (A2)
00002AAC  584F      4789          addq.w    #4,A7
                    4790   ; test_pattern = 0xAA;
00002AAE  283C 0000 4791          move.l    #170,D4
00002AB2  00AA      
                    4792   ; break;
00002AB4  6028      4793          bra.s     MemoryTest_23
                    4794   MemoryTest_27:
                    4795   ; case '3':
                    4796   ; printf("\r\nYou have selected test pattern FF\r\n");
00002AB6  4879 0000 4797          pea       @m68kde~1_156.L
00002ABA  4D8A      
00002ABC  4E92      4798          jsr       (A2)
00002ABE  584F      4799          addq.w    #4,A7
                    4800   ; test_pattern = 0xFF;
00002AC0  283C 0000 4801          move.l    #255,D4
00002AC4  00FF      
                    4802   ; break;
00002AC6  6016      4803          bra.s     MemoryTest_23
                    4804   MemoryTest_28:
                    4805   ; case '4':
                    4806   ; printf("\r\nYou have selected test pattern 00\r\n");
00002AC8  4879 0000 4807          pea       @m68kde~1_157.L
00002ACC  4DB0      
00002ACE  4E92      4808          jsr       (A2)
00002AD0  584F      4809          addq.w    #4,A7
                    4810   ; test_pattern = 0x00;
00002AD2  4284      4811          clr.l     D4
                    4812   MemoryTest_22:
                    4813   ; default:
                    4814   ; printf("\r\nException - invalid test pattern\r\n");
00002AD4  4879 0000 4815          pea       @m68kde~1_158.L
00002AD8  4DD6      
00002ADA  4E92      4816          jsr       (A2)
00002ADC  584F      4817          addq.w    #4,A7
                    4818   ; break;
                    4819   MemoryTest_23:
                    4820   ; }
                    4821   ; //create appropriate data set based on select_pattern and test_option
                    4822   ; // ie, if select_pattern is AA and test_option is BYTES, write_data must be AAAA
                    4823   ; switch(test_option){
00002ADE  4887      4824          ext.w     D7
00002AE0  48C7      4825          ext.l     D7
00002AE2  0C87 0000 4826          cmp.l     #50,D7
00002AE6  0032      
00002AE8  6720      4827          beq.s     MemoryTest_33
00002AEA  6E0C      4828          bgt.s     MemoryTest_36
00002AEC  0C87 0000 4829          cmp.l     #49,D7
00002AF0  0031      
00002AF2  6710      4830          beq.s     MemoryTest_32
00002AF4  6000 0040 4831          bra       MemoryTest_30
                    4832   MemoryTest_36:
00002AF8  0C87 0000 4833          cmp.l     #51,D7
00002AFC  0033      
00002AFE  6718      4834          beq.s     MemoryTest_34
00002B00  6000 0034 4835          bra       MemoryTest_30
                    4836   MemoryTest_32:
                    4837   ; case '1':
                    4838   ; write_data = test_pattern;
00002B04  2844      4839          move.l    D4,A4
                    4840   ; break;
00002B06  6000 0038 4841          bra       MemoryTest_31
                    4842   MemoryTest_33:
                    4843   ; case '2':
                    4844   ; write_data = test_pattern | test_pattern << 8;
00002B0A  2004      4845          move.l    D4,D0
00002B0C  2204      4846          move.l    D4,D1
00002B0E  E189      4847          lsl.l     #8,D1
00002B10  8081      4848          or.l      D1,D0
00002B12  2840      4849          move.l    D0,A4
                    4850   ; break;
00002B14  6000 002A 4851          bra       MemoryTest_31
                    4852   MemoryTest_34:
                    4853   ; case '3':
                    4854   ; write_data = (test_pattern | (test_pattern << 8) | (test_pattern << 16) | (test_pattern << 24));
00002B18  2004      4855          move.l    D4,D0
00002B1A  2204      4856          move.l    D4,D1
00002B1C  E189      4857          lsl.l     #8,D1
00002B1E  8081      4858          or.l      D1,D0
00002B20  2204      4859          move.l    D4,D1
00002B22  E189      4860          lsl.l     #8,D1
00002B24  E189      4861          lsl.l     #8,D1
00002B26  8081      4862          or.l      D1,D0
00002B28  2204      4863          move.l    D4,D1
00002B2A  E189      4864          lsl.l     #8,D1
00002B2C  E189      4865          lsl.l     #8,D1
00002B2E  E189      4866          lsl.l     #8,D1
00002B30  8081      4867          or.l      D1,D0
00002B32  2840      4868          move.l    D0,A4
                    4869   ; break;
00002B34  600A      4870          bra.s     MemoryTest_31
                    4871   MemoryTest_30:
                    4872   ; default:
                    4873   ; printf("\r\nException - could not generate write_data\r\n");
00002B36  4879 0000 4874          pea       @m68kde~1_159.L
00002B3A  4DFC      
00002B3C  4E92      4875          jsr       (A2)
00002B3E  584F      4876          addq.w    #4,A7
                    4877   ; break;
                    4878   MemoryTest_31:
                    4879   ; }
                    4880   ; //prompting user to enter start address
                    4881   ; while(!start_addr){
                    4882   MemoryTest_37:
00002B40  4A83      4883          tst.l     D3
00002B42  6600 0076 4884          bne       MemoryTest_39
                    4885   ; FlushKeyboard();
00002B46  4EB8 0BA6 4886          jsr       _FlushKeyboard
                    4887   ; printf("\r\nPlease enter a starting address from 0900_0000 to 097f_ffff\r\n");
00002B4A  4879 0000 4888          pea       @m68kde~1_160.L
00002B4E  4E2A      
00002B50  4E92      4889          jsr       (A2)
00002B52  584F      4890          addq.w    #4,A7
                    4891   ; start_addr = Get8HexDigits(0);
00002B54  42A7      4892          clr.l     -(A7)
00002B56  4EB8 0CA4 4893          jsr       _Get8HexDigits
00002B5A  584F      4894          addq.w    #4,A7
00002B5C  2600      4895          move.l    D0,D3
                    4896   ; if(start_addr<0x09000000 || start_addr>0x097fffff){
00002B5E  0C83 0900 4897          cmp.l     #150994944,D3
00002B62  0000      
00002B64  6508      4898          blo.s     MemoryTest_42
00002B66  0C83 097F 4899          cmp.l     #159383551,D3
00002B6A  FFFF      
00002B6C  6310      4900          bls.s     MemoryTest_40
                    4901   MemoryTest_42:
                    4902   ; printf("\r\nStart address is invalid\r\n");
00002B6E  4879 0000 4903          pea       @m68kde~1_161.L
00002B72  4E6A      
00002B74  4E92      4904          jsr       (A2)
00002B76  584F      4905          addq.w    #4,A7
                    4906   ; start_addr = 0;
00002B78  4283      4907          clr.l     D3
00002B7A  6000 003C 4908          bra       MemoryTest_44
                    4909   MemoryTest_40:
                    4910   ; } else if(bit_num>8 && start_addr % 2 != 0){
00002B7E  200D      4911          move.l    A5,D0
00002B80  0C80 0000 4912          cmp.l     #8,D0
00002B84  0008      
00002B86  6324      4913          bls.s     MemoryTest_43
00002B88  2F03      4914          move.l    D3,-(A7)
00002B8A  4878 0002 4915          pea       2
00002B8E  4EB9 0000 4916          jsr       ULDIV
00002B92  2FB4      
00002B94  202F 0004 4917          move.l    4(A7),D0
00002B98  504F      4918          addq.w    #8,A7
00002B9A  4A80      4919          tst.l     D0
00002B9C  670E      4920          beq.s     MemoryTest_43
                    4921   ; printf("\r\nFor words or long words, please enter an even numbered address\r\n");
00002B9E  4879 0000 4922          pea       @m68kde~1_162.L
00002BA2  4E88      
00002BA4  4E92      4923          jsr       (A2)
00002BA6  584F      4924          addq.w    #4,A7
                    4925   ; start_addr = 0;
00002BA8  4283      4926          clr.l     D3
00002BAA  600C      4927          bra.s     MemoryTest_44
                    4928   MemoryTest_43:
                    4929   ; } else{
                    4930   ; printf("\r\nThe chosen starting address is: %x\r\n", start_addr);
00002BAC  2F03      4931          move.l    D3,-(A7)
00002BAE  4879 0000 4932          pea       @m68kde~1_163.L
00002BB2  4ECC      
00002BB4  4E92      4933          jsr       (A2)
00002BB6  504F      4934          addq.w    #8,A7
                    4935   MemoryTest_44:
00002BB8  6086      4936          bra       MemoryTest_37
                    4937   MemoryTest_39:
                    4938   ; }
                    4939   ; }
                    4940   ; //prompting user to enter end address
                    4941   ; while(!end_addr){
                    4942   MemoryTest_45:
00002BBA  4A85      4943          tst.l     D5
00002BBC  6600 0074 4944          bne       MemoryTest_47
                    4945   ; FlushKeyboard();
00002BC0  4EB8 0BA6 4946          jsr       _FlushKeyboard
                    4947   ; printf("\r\nPlease enter an end address from %x to 097f_ffff\r\n", start_addr);
00002BC4  2F03      4948          move.l    D3,-(A7)
00002BC6  4879 0000 4949          pea       @m68kde~1_164.L
00002BCA  4EF4      
00002BCC  4E92      4950          jsr       (A2)
00002BCE  504F      4951          addq.w    #8,A7
                    4952   ; end_addr = Get8HexDigits(0);
00002BD0  42A7      4953          clr.l     -(A7)
00002BD2  4EB8 0CA4 4954          jsr       _Get8HexDigits
00002BD6  584F      4955          addq.w    #4,A7
00002BD8  2A00      4956          move.l    D0,D5
                    4957   ; if(end_addr<start_addr || end_addr>0x097fffff){
00002BDA  BA83      4958          cmp.l     D3,D5
00002BDC  6508      4959          blo.s     MemoryTest_50
00002BDE  0C85 097F 4960          cmp.l     #159383551,D5
00002BE2  FFFF      
00002BE4  6310      4961          bls.s     MemoryTest_48
                    4962   MemoryTest_50:
                    4963   ; printf("\r\nEnd address is invalid\r\n");
00002BE6  4879 0000 4964          pea       @m68kde~1_165.L
00002BEA  4F2A      
00002BEC  4E92      4965          jsr       (A2)
00002BEE  584F      4966          addq.w    #4,A7
                    4967   ; end_addr = 0;
00002BF0  4285      4968          clr.l     D5
00002BF2  6000 003C 4969          bra       MemoryTest_52
                    4970   MemoryTest_48:
                    4971   ; } else if(bit_num>8 && end_addr % 2 != 0){
00002BF6  200D      4972          move.l    A5,D0
00002BF8  0C80 0000 4973          cmp.l     #8,D0
00002BFC  0008      
00002BFE  6324      4974          bls.s     MemoryTest_51
00002C00  2F05      4975          move.l    D5,-(A7)
00002C02  4878 0002 4976          pea       2
00002C06  4EB9 0000 4977          jsr       ULDIV
00002C0A  2FB4      
00002C0C  202F 0004 4978          move.l    4(A7),D0
00002C10  504F      4979          addq.w    #8,A7
00002C12  4A80      4980          tst.l     D0
00002C14  670E      4981          beq.s     MemoryTest_51
                    4982   ; printf("\r\nFor words or long words, please enter an even numbered address\r\n");
00002C16  4879 0000 4983          pea       @m68kde~1_162.L
00002C1A  4E88      
00002C1C  4E92      4984          jsr       (A2)
00002C1E  584F      4985          addq.w    #4,A7
                    4986   ; end_addr = 0;
00002C20  4285      4987          clr.l     D5
00002C22  600C      4988          bra.s     MemoryTest_52
                    4989   MemoryTest_51:
                    4990   ; } else{
                    4991   ; printf("\r\nThe chosen ending address is: %x\r\n", end_addr);
00002C24  2F05      4992          move.l    D5,-(A7)
00002C26  4879 0000 4993          pea       @m68kde~1_166.L
00002C2A  4F46      
00002C2C  4E92      4994          jsr       (A2)
00002C2E  504F      4995          addq.w    #8,A7
                    4996   MemoryTest_52:
00002C30  6088      4997          bra       MemoryTest_45
                    4998   MemoryTest_47:
                    4999   ; }
                    5000   ; }
                    5001   ; FlushKeyboard();
00002C32  4EB8 0BA6 5002          jsr       _FlushKeyboard
                    5003   ; //set address pointer to start pointer
                    5004   ; addr_point = start_addr;
00002C36  2403      5005          move.l    D3,D2
                    5006   ; //writing data
                    5007   ; while(addr_point<end_addr){
                    5008   MemoryTest_53:
00002C38  B485      5009          cmp.l     D5,D2
00002C3A  6428      5010          bhs.s     MemoryTest_55
                    5011   ; *addr_point++ = write_data;
00002C3C  2042      5012          move.l    D2,A0
00002C3E  5882      5013          addq.l    #4,D2
00002C40  208C      5014          move.l    A4,(A0)
                    5015   ; counter++;
00002C42  524B      5016          addq.w    #1,A3
                    5017   ; if(counter >= 50000){
00002C44  200B      5018          move.l    A3,D0
00002C46  0C80 0000 5019          cmp.l     #50000,D0
00002C4A  C350      
00002C4C  6514      5020          blo.s     MemoryTest_56
                    5021   ; printf("\r\nWriting %x into address %x\r\n", write_data, addr_point);
00002C4E  2F02      5022          move.l    D2,-(A7)
00002C50  2F0C      5023          move.l    A4,-(A7)
00002C52  4879 0000 5024          pea       @m68kde~1_167.L
00002C56  4F6C      
00002C58  4E92      5025          jsr       (A2)
00002C5A  DEFC 000C 5026          add.w     #12,A7
                    5027   ; counter = 1;
00002C5E  367C 0001 5028          move.w    #1,A3
                    5029   MemoryTest_56:
00002C62  60D4      5030          bra       MemoryTest_53
                    5031   MemoryTest_55:
                    5032   ; }
                    5033   ; }
                    5034   ; printf("\r\nWriting completed. Will now start reading.\r\n");
00002C64  4879 0000 5035          pea       @m68kde~1_168.L
00002C68  4F8C      
00002C6A  4E92      5036          jsr       (A2)
00002C6C  584F      5037          addq.w    #4,A7
                    5038   ; addr_point = start_addr;
00002C6E  2403      5039          move.l    D3,D2
                    5040   ; counter = 1;
00002C70  367C 0001 5041          move.w    #1,A3
                    5042   ; //reading data
                    5043   ; while(addr_point<end_addr){
                    5044   MemoryTest_58:
00002C74  B485      5045          cmp.l     D5,D2
00002C76  6400 004E 5046          bhs       MemoryTest_60
                    5047   ; if(*addr_point != write_data){
00002C7A  2042      5048          move.l    D2,A0
00002C7C  200C      5049          move.l    A4,D0
00002C7E  B090      5050          cmp.l     (A0),D0
00002C80  671E      5051          beq.s     MemoryTest_61
                    5052   ; printf("\r\nAn Error has occurred: data at address %x expected to be %x, instead is reading %x\r\n", addr_point, write_data, *addr_point);
00002C82  2042      5053          move.l    D2,A0
00002C84  2F10      5054          move.l    (A0),-(A7)
00002C86  2F0C      5055          move.l    A4,-(A7)
00002C88  2F02      5056          move.l    D2,-(A7)
00002C8A  4879 0000 5057          pea       @m68kde~1_169.L
00002C8E  4FBC      
00002C90  4E92      5058          jsr       (A2)
00002C92  DEFC 0010 5059          add.w     #16,A7
                    5060   ; fail = 1;
00002C96  2D7C 0000 5061          move.l    #1,-4(A6)
00002C9A  0001 FFFC 
                    5062   ; break;
00002C9E  6026      5063          bra.s     MemoryTest_60
                    5064   MemoryTest_61:
                    5065   ; }
                    5066   ; counter++;
00002CA0  524B      5067          addq.w    #1,A3
                    5068   ; if(counter >= 50000){
00002CA2  200B      5069          move.l    A3,D0
00002CA4  0C80 0000 5070          cmp.l     #50000,D0
00002CA8  C350      
00002CAA  6516      5071          blo.s     MemoryTest_63
                    5072   ; printf("\r\nReading data value %x from address %x\r\n", *addr_point, addr_point);
00002CAC  2F02      5073          move.l    D2,-(A7)
00002CAE  2042      5074          move.l    D2,A0
00002CB0  2F10      5075          move.l    (A0),-(A7)
00002CB2  4879 0000 5076          pea       @m68kde~1_170.L
00002CB6  5014      
00002CB8  4E92      5077          jsr       (A2)
00002CBA  DEFC 000C 5078          add.w     #12,A7
                    5079   ; counter = 1;
00002CBE  367C 0001 5080          move.w    #1,A3
                    5081   MemoryTest_63:
                    5082   ; }
                    5083   ; addr_point++;
00002CC2  5882      5084          addq.l    #4,D2
00002CC4  60AE      5085          bra       MemoryTest_58
                    5086   MemoryTest_60:
                    5087   ; }
                    5088   ; if(fail == 1){
00002CC6  202E FFFC 5089          move.l    -4(A6),D0
00002CCA  0C80 0000 5090          cmp.l     #1,D0
00002CCE  0001      
00002CD0  660C      5091          bne.s     MemoryTest_65
                    5092   ; printf("\r\nMemory test failed.\r\n");
00002CD2  4879 0000 5093          pea       @m68kde~1_171.L
00002CD6  503E      
00002CD8  4E92      5094          jsr       (A2)
00002CDA  584F      5095          addq.w    #4,A7
00002CDC  600A      5096          bra.s     MemoryTest_66
                    5097   MemoryTest_65:
                    5098   ; } else {
                    5099   ; printf("\r\nMemory test successful.\r\n");
00002CDE  4879 0000 5100          pea       @m68kde~1_172.L
00002CE2  5056      
00002CE4  4E92      5101          jsr       (A2)
00002CE6  584F      5102          addq.w    #4,A7
                    5103   MemoryTest_66:
00002CE8  4CDF 3CFC 5104          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002CEC  4E5E      5105          unlk      A6
00002CEE  4E75      5106          rts
                    5107   ; }
                    5108   ; }
                    5109   ; void main(void)
                    5110   ; {
                    5111   _main:
00002CF0  4E56 FFF4 5112          link      A6,#-12
00002CF4  48E7 3030 5113          movem.l   D2/D3/A2/A3,-(A7)
00002CF8  45F8 0A30 5114          lea       _InstallExceptionHandler.L,A2
00002CFC  47F9 0000 5115          lea       _printf.L,A3
00002D00  3176      
                    5116   ; char c ;
                    5117   ; int i, j ;
                    5118   ; char *BugMessage = "CPEN412 - Lab 3";
00002D02  41F9 0000 5119          lea       @m68kde~1_173.L,A0
00002D06  5072      
00002D08  2608      5120          move.l    A0,D3
                    5121   ; char *CopyrightMessage = "Ryan Nedjabat 67501510; Anna Yun 94902673";
00002D0A  41F9 0000 5122          lea       @m68kde~1_174.L,A0
00002D0E  5082      
00002D10  2D48 FFFC 5123          move.l    A0,-4(A6)
                    5124   ; KillAllBreakPoints() ;
00002D14  4EB8 2002 5125          jsr       _KillAllBreakPoints
                    5126   ; i = x = y = z = PortA_Count = 0;
00002D18  42B9 0B00 5127          clr.l     _PortA_Count.L
00002D1C  00D4      
00002D1E  42B9 0B00 5128          clr.l     _z.L
00002D22  00D0      
00002D24  42B9 0B00 5129          clr.l     _y.L
00002D28  00CC      
00002D2A  42B9 0B00 5130          clr.l     _x.L
00002D2E  00C8      
00002D30  4282      5131          clr.l     D2
                    5132   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002D32  42B9 0B00 5133          clr.l     _GoFlag.L
00002D36  00DC      
00002D38  42B9 0B00 5134          clr.l     _Trace.L
00002D3C  00D8      
                    5135   ; Echo = 1 ;
00002D3E  23FC 0000 5136          move.l    #1,_Echo.L
00002D42  0001 0B00 
00002D46  00E0      
                    5137   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002D48  42B9 0B00 5138          clr.l     _d7.L
00002D4C  0100      
00002D4E  42B9 0B00 5139          clr.l     _d6.L
00002D52  00FC      
00002D54  42B9 0B00 5140          clr.l     _d5.L
00002D58  00F8      
00002D5A  42B9 0B00 5141          clr.l     _d4.L
00002D5E  00F4      
00002D60  42B9 0B00 5142          clr.l     _d3.L
00002D64  00F0      
00002D66  42B9 0B00 5143          clr.l     _d2.L
00002D6A  00EC      
00002D6C  42B9 0B00 5144          clr.l     _d1.L
00002D70  00E8      
00002D72  42B9 0B00 5145          clr.l     _d0.L
00002D76  00E4      
                    5146   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002D78  42B9 0B00 5147          clr.l     _a6.L
00002D7C  011C      
00002D7E  42B9 0B00 5148          clr.l     _a5.L
00002D82  0118      
00002D84  42B9 0B00 5149          clr.l     _a4.L
00002D88  0114      
00002D8A  42B9 0B00 5150          clr.l     _a3.L
00002D8E  0110      
00002D90  42B9 0B00 5151          clr.l     _a2.L
00002D94  010C      
00002D96  42B9 0B00 5152          clr.l     _a1.L
00002D9A  0108      
00002D9C  42B9 0B00 5153          clr.l     _a0.L
00002DA0  0104      
                    5154   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002DA2  23FC 0800 5155          move.l    #134217728,_PC.L
00002DA6  0000 0B00 
00002DAA  0120      
00002DAC  23FC 0C00 5156          move.l    #201326592,_SSP.L
00002DB0  0000 0B00 
00002DB4  0124      
00002DB6  23FC 0C00 5157          move.l    #201326592,_USP.L
00002DBA  0000 0B00 
00002DBE  0128      
                    5158   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002DC0  33FC 2000 5159          move.w    #8192,_SR.L
00002DC4  0B00 012C 
                    5160   ; // Initialise Breakpoint variables
                    5161   ; for(i = 0; i < 8; i++)  {
00002DC8  4282      5162          clr.l     D2
                    5163   main_1:
00002DCA  0C82 0000 5164          cmp.l     #8,D2
00002DCE  0008      
00002DD0  6C00 004C 5165          bge       main_3
                    5166   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002DD4  2002      5167          move.l    D2,D0
00002DD6  E588      5168          lsl.l     #2,D0
00002DD8  41F9 0B00 5169          lea       _BreakPointAddress.L,A0
00002DDC  012E      
00002DDE  42B0 0800 5170          clr.l     0(A0,D0.L)
                    5171   ; WatchPointAddress[i] = 0 ;
00002DE2  2002      5172          move.l    D2,D0
00002DE4  E588      5173          lsl.l     #2,D0
00002DE6  41F9 0B00 5174          lea       _WatchPointAddress.L,A0
00002DEA  0182      
00002DEC  42B0 0800 5175          clr.l     0(A0,D0.L)
                    5176   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002DF0  2002      5177          move.l    D2,D0
00002DF2  E388      5178          lsl.l     #1,D0
00002DF4  41F9 0B00 5179          lea       _BreakPointInstruction.L,A0
00002DF8  014E      
00002DFA  4270 0800 5180          clr.w     0(A0,D0.L)
                    5181   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002DFE  2002      5182          move.l    D2,D0
00002E00  E588      5183          lsl.l     #2,D0
00002E02  41F9 0B00 5184          lea       _BreakPointSetOrCleared.L,A0
00002E06  015E      
00002E08  42B0 0800 5185          clr.l     0(A0,D0.L)
                    5186   ; WatchPointSetOrCleared[i] = 0;
00002E0C  2002      5187          move.l    D2,D0
00002E0E  E588      5188          lsl.l     #2,D0
00002E10  41F9 0B00 5189          lea       _WatchPointSetOrCleared.L,A0
00002E14  01A2      
00002E16  42B0 0800 5190          clr.l     0(A0,D0.L)
00002E1A  5282      5191          addq.l    #1,D2
00002E1C  60AC      5192          bra       main_1
                    5193   main_3:
                    5194   ; }
                    5195   ; Init_RS232() ;     // initialise the RS232 port
00002E1E  4EB8 0B12 5196          jsr       _Init_RS232
                    5197   ; Init_LCD() ;
00002E22  4EB8 095E 5198          jsr       _Init_LCD
                    5199   ; for( i = 32; i < 48; i++)
00002E26  7420      5200          moveq     #32,D2
                    5201   main_4:
00002E28  0C82 0000 5202          cmp.l     #48,D2
00002E2C  0030      
00002E2E  6C0E      5203          bge.s     main_6
                    5204   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002E30  2F02      5205          move.l    D2,-(A7)
00002E32  4878 287A 5206          pea       _UnhandledTrap.L
00002E36  4E92      5207          jsr       (A2)
00002E38  504F      5208          addq.w    #8,A7
00002E3A  5282      5209          addq.l    #1,D2
00002E3C  60EA      5210          bra       main_4
                    5211   main_6:
                    5212   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002E3E  4878 002F 5213          pea       47
00002E42  4878 2554 5214          pea       _menu.L
00002E46  4E92      5215          jsr       (A2)
00002E48  504F      5216          addq.w    #8,A7
                    5217   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002E4A  4878 0019 5218          pea       25
00002E4E  4878 2820 5219          pea       _UnhandledIRQ1.L
00002E52  4E92      5220          jsr       (A2)
00002E54  504F      5221          addq.w    #8,A7
                    5222   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002E56  4878 001A 5223          pea       26
00002E5A  4878 282C 5224          pea       _UnhandledIRQ2.L
00002E5E  4E92      5225          jsr       (A2)
00002E60  504F      5226          addq.w    #8,A7
                    5227   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002E62  4878 001B 5228          pea       27
00002E66  4878 2838 5229          pea       _UnhandledIRQ3.L
00002E6A  4E92      5230          jsr       (A2)
00002E6C  504F      5231          addq.w    #8,A7
                    5232   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002E6E  4878 001C 5233          pea       28
00002E72  4878 2844 5234          pea       _UnhandledIRQ4.L
00002E76  4E92      5235          jsr       (A2)
00002E78  504F      5236          addq.w    #8,A7
                    5237   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002E7A  4878 001D 5238          pea       29
00002E7E  4878 2850 5239          pea       _UnhandledIRQ5.L
00002E82  4E92      5240          jsr       (A2)
00002E84  504F      5241          addq.w    #8,A7
                    5242   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002E86  4878 001E 5243          pea       30
00002E8A  4878 285C 5244          pea       _UnhandledIRQ6.L
00002E8E  4E92      5245          jsr       (A2)
00002E90  504F      5246          addq.w    #8,A7
                    5247   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002E92  4878 001F 5248          pea       31
00002E96  4878 286E 5249          pea       _UnhandledIRQ7.L
00002E9A  4E92      5250          jsr       (A2)
00002E9C  504F      5251          addq.w    #8,A7
                    5252   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002E9E  4878 002E 5253          pea       46
00002EA2  4878 2290 5254          pea       _HandleBreakPoint.L
00002EA6  4E92      5255          jsr       (A2)
00002EA8  504F      5256          addq.w    #8,A7
                    5257   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002EAA  4878 001D 5258          pea       29
00002EAE  4878 1970 5259          pea       _DumpRegistersandPause.L
00002EB2  4E92      5260          jsr       (A2)
00002EB4  504F      5261          addq.w    #8,A7
                    5262   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002EB6  4878 0002 5263          pea       2
00002EBA  4878 2888 5264          pea       _BusError.L
00002EBE  4E92      5265          jsr       (A2)
00002EC0  504F      5266          addq.w    #8,A7
                    5267   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002EC2  4878 0003 5268          pea       3
00002EC6  4878 2896 5269          pea       _AddressError.L
00002ECA  4E92      5270          jsr       (A2)
00002ECC  504F      5271          addq.w    #8,A7
                    5272   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002ECE  4878 0004 5273          pea       4
00002ED2  4878 28A4 5274          pea       _IllegalInstruction.L
00002ED6  4E92      5275          jsr       (A2)
00002ED8  504F      5276          addq.w    #8,A7
                    5277   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002EDA  4878 0005 5278          pea       5
00002EDE  4878 28B2 5279          pea       _Dividebyzero.L
00002EE2  4E92      5280          jsr       (A2)
00002EE4  504F      5281          addq.w    #8,A7
                    5282   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002EE6  4878 0006 5283          pea       6
00002EEA  4878 28C0 5284          pea       _Check.L
00002EEE  4E92      5285          jsr       (A2)
00002EF0  504F      5286          addq.w    #8,A7
                    5287   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002EF2  4878 0007 5288          pea       7
00002EF6  4878 28CE 5289          pea       _Trapv.L
00002EFA  4E92      5290          jsr       (A2)
00002EFC  504F      5291          addq.w    #8,A7
                    5292   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002EFE  4878 0008 5293          pea       8
00002F02  4878 28DC 5294          pea       _PrivError.L
00002F06  4E92      5295          jsr       (A2)
00002F08  504F      5296          addq.w    #8,A7
                    5297   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002F0A  4878 000F 5298          pea       15
00002F0E  4878 28EA 5299          pea       _UnitIRQ.L
00002F12  4E92      5300          jsr       (A2)
00002F14  504F      5301          addq.w    #8,A7
                    5302   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002F16  4878 0018 5303          pea       24
00002F1A  4878 28C0 5304          pea       _Check.L
00002F1E  4E92      5305          jsr       (A2)
00002F20  504F      5306          addq.w    #8,A7
                    5307   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002F22  4EB8 0BA6 5308          jsr       _FlushKeyboard
                    5309   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002F26  4239 0040 5310          clr.b     4194314
00002F2A  000A      
                    5311   ; SPI_Init();
00002F2C  4EB8 10D8 5312          jsr       _SPI_Init
                    5313   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5314   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5315   main_7:
00002F30  1039 0040 5316          move.b    4194306,D0
00002F34  0002      
00002F36  C03C 0002 5317          and.b     #2,D0
00002F3A  0C00 0002 5318          cmp.b     #2,D0
00002F3E  662A      5319          bne.s     main_9
                    5320   ; LoadFromFlashChip();
00002F40  4EB8 141E 5321          jsr       _LoadFromFlashChip
                    5322   ; printf("\r\nRunning.....") ;
00002F44  4879 0000 5323          pea       @m68kde~1_175.L
00002F48  50AC      
00002F4A  4E93      5324          jsr       (A3)
00002F4C  584F      5325          addq.w    #4,A7
                    5326   ; Oline1("Running.....") ;
00002F4E  4879 0000 5327          pea       @m68kde~1_176.L
00002F52  50BC      
00002F54  4EB8 0A02 5328          jsr       _Oline1
00002F58  584F      5329          addq.w    #4,A7
                    5330   ; GoFlag = 1;
00002F5A  23FC 0000 5331          move.l    #1,_GoFlag.L
00002F5E  0001 0B00 
00002F62  00DC      
                    5332   ; go() ;
00002F64  4EB8 08B8 5333          jsr       _go
00002F68  60C6      5334          bra       main_7
                    5335   main_9:
                    5336   ; }
                    5337   ; // otherwise start the debug monitor
                    5338   ; Oline0(BugMessage) ;
00002F6A  2F03      5339          move.l    D3,-(A7)
00002F6C  4EB8 09D4 5340          jsr       _Oline0
00002F70  584F      5341          addq.w    #4,A7
                    5342   ; Oline1("By: PJ Davies") ;
00002F72  4879 0000 5343          pea       @m68kde~1_177.L
00002F76  50CA      
00002F78  4EB8 0A02 5344          jsr       _Oline1
00002F7C  584F      5345          addq.w    #4,A7
                    5346   ; printf("\r\n%s", BugMessage) ;
00002F7E  2F03      5347          move.l    D3,-(A7)
00002F80  4879 0000 5348          pea       @m68kde~1_178.L
00002F84  50D8      
00002F86  4E93      5349          jsr       (A3)
00002F88  504F      5350          addq.w    #8,A7
                    5351   ; printf("\r\n%s", CopyrightMessage) ;
00002F8A  2F2E FFFC 5352          move.l    -4(A6),-(A7)
00002F8E  4879 0000 5353          pea       @m68kde~1_178.L
00002F92  50D8      
00002F94  4E93      5354          jsr       (A3)
00002F96  504F      5355          addq.w    #8,A7
                    5356   ; menu();
00002F98  4EB8 2554 5357          jsr       _menu
00002F9C  4CDF 0C0C 5358          movem.l   (A7)+,D2/D3/A2/A3
00002FA0  4E5E      5359          unlk      A6
00002FA2  4E75      5360          rts
                    5361   ; }
                    5362   _strcpy:
00002FA4  206F 0004 5363          move.l    (4,A7),A0
00002FA8  226F 0008 5364          move.l    (8,A7),A1
00002FAC  2008      5365          move.l    A0,D0
                    5366   strcpy_1:
00002FAE  10D9      5367          move.b    (A1)+,(A0)+
00002FB0  66FC      5368          bne.s     strcpy_1
00002FB2  4E75      5369          rts
                    5370   ULDIV:
00002FB4  4E56 0000 5371          link    A6,#0
00002FB8  48E7 C000 5372          movem.l D0/D1,-(A7)
00002FBC  222E 0008 5373          move.l  8(A6),D1
00002FC0  202E 000C 5374          move.l  12(A6),D0
00002FC4  6036      5375          bra.s   ldiv_3
                    5376   LDIV:
00002FC6  4E56 0000 5377          link    A6,#0
00002FCA  48E7 C000 5378          movem.l D0/D1,-(A7)
00002FCE  222E 0008 5379          move.l  8(A6),D1
00002FD2  202E 000C 5380          move.l  12(A6),D0
00002FD6  4A80      5381          tst.l   D0
00002FD8  6A0E      5382          bpl.s   ldiv_1
00002FDA  4480      5383          neg.l   D0
00002FDC  4A81      5384          tst.l   D1
00002FDE  6A14      5385          bpl.s   ldiv_2
00002FE0  4481      5386          neg.l   D1
00002FE2  612A      5387          bsr.s   dodiv
00002FE4  4481      5388          neg.l   D1
00002FE6  6016      5389          bra.s   ldiv_4
                    5390   ldiv_1:
00002FE8  4A81      5391          tst.l   D1
00002FEA  6A10      5392          bpl.s   ldiv_3
00002FEC  4481      5393          neg.l   D1
00002FEE  611E      5394          bsr.s   dodiv
00002FF0  4480      5395          neg.l   D0
00002FF2  600A      5396          bra.s   ldiv_4
                    5397   ldiv_2:
00002FF4  6118      5398          bsr.s   dodiv
00002FF6  4480      5399          neg.l   D0
00002FF8  4481      5400          neg.l   D1
00002FFA  6002      5401          bra.s   ldiv_4
                    5402   ldiv_3:
00002FFC  6110      5403          bsr.s   dodiv
                    5404   ldiv_4:
00002FFE  2D40 0008 5405          move.l  D0,8(A6)
00003002  2D41 000C 5406          move.l  D1,12(A6)
00003006  4CDF 0003 5407          movem.l (A7)+,D0/D1
0000300A  4E5E      5408          unlk    A6
0000300C  4E75      5409          rts
                    5410   dodiv:
0000300E  0C81 0000 5411          cmpi.l  #$FFFF,D1
00003012  FFFF      
00003014  6236      5412          bhi.s   dodiv_2
00003016  0C80 0000 5413          cmpi.l  #$FFFF,D0
0000301A  FFFF      
0000301C  6210      5414          bhi.s   dodiv_1
0000301E  80C1      5415          divu    D1,D0
00003020  2200      5416          move.l  D0,D1
00003022  4241      5417          clr.w   D1
00003024  4841      5418          swap    D1
00003026  0280 0000 5419          andi.l  #$FFFF,D0
0000302A  FFFF      
0000302C  4E75      5420          rts
                    5421   dodiv_1:
0000302E  48A7 A000 5422          movem.w D0/D2,-(A7)
00003032  4240      5423          clr.w   D0
00003034  4840      5424          swap    D0
00003036  80C1      5425          divu    D1,D0
00003038  3400      5426          move.w  D0,D2
0000303A  301F      5427          move.w  (A7)+,D0
0000303C  80C1      5428          divu    D1,D0
0000303E  4840      5429          swap    D0
00003040  4281      5430          clr.l   D1
00003042  3200      5431          move.w  D0,D1
00003044  3002      5432          move.w  D2,D0
00003046  4840      5433          swap    D0
00003048  341F      5434          move.w  (A7)+,D2
0000304A  4E75      5435          rts
                    5436   dodiv_2:
0000304C  48E7 3800 5437          movem.l D2/D3/D4,-(A7)
00003050  2401      5438          move.l  D1,D2
00003052  4242      5439          clr.w   D2
00003054  4842      5440          swap    D2
00003056  5282      5441          addq.l  #1,D2
00003058  2600      5442          move.l  D0,D3
0000305A  2801      5443          move.l  D1,D4
0000305C  2202      5444          move.l  D2,D1
0000305E  61CE      5445          bsr.s   dodiv_1
00003060  2204      5446          move.l  D4,D1
00003062  82C2      5447          divu    D2,D1
00003064  80C1      5448          divu    D1,D0
00003066  0280 0000 5449          andi.l  #$FFFF,D0
0000306A  FFFF      
                    5450   dodiv_3:
0000306C  2204      5451          move.l  D4,D1
0000306E  2404      5452          move.l  D4,D2
00003070  4842      5453          swap    D2
00003072  C2C0      5454          mulu    D0,D1
00003074  C4C0      5455          mulu    D0,D2
00003076  4842      5456          swap    D2
00003078  D282      5457          add.l   D2,D1
0000307A  9283      5458          sub.l   D3,D1
0000307C  620A      5459          bhi.s   dodiv_4
0000307E  4481      5460          neg.l   D1
00003080  B881      5461          cmp.l   D1,D4
00003082  6208      5462          bhi.s   dodiv_5
00003084  5280      5463          addq.l  #1,D0
00003086  60E4      5464          bra.s   dodiv_3
                    5465   dodiv_4:
00003088  5380      5466          subq.l  #1,D0
0000308A  60E0      5467          bra.s   dodiv_3
                    5468   dodiv_5:
0000308C  4CDF 001C 5469          movem.l (A7)+,D2/D3/D4
00003090  4E75      5470          rts
                    5471   _putch:
00003092  4E56 0000 5472          link      A6,#0
00003096  2F02      5473          move.l    D2,-(A7)
00003098  242E 0008 5474          move.l    8(A6),D2
0000309C  0C82 0000 5475          cmp.l     #10,D2
000030A0  000A      
000030A2  660A      5476          bne.s     putch_1
000030A4  4878 000D 5477          pea       13
000030A8  4EB8 0B3C 5478          jsr       __putch
000030AC  584F      5479          addq.w    #4,A7
                    5480   putch_1:
000030AE  2F02      5481          move.l    D2,-(A7)
000030B0  4EB8 0B3C 5482          jsr       __putch
000030B4  584F      5483          addq.w    #4,A7
000030B6  2002      5484          move.l    D2,D0
000030B8  241F      5485          move.l    (A7)+,D2
000030BA  4E5E      5486          unlk      A6
000030BC  4E75      5487          rts
                    5488   _getch:
000030BE  2F02      5489          move.l    D2,-(A7)
000030C0  2439 0B00 5490          move.l    __ungetbuf.L,D2
000030C4  00C0      
000030C6  2039 0B00 5491          move.l    __ungetbuf.L,D0
000030CA  00C0      
000030CC  0C80 FFFF 5492          cmp.l     #-1,D0
000030D0  FFFF      
000030D2  670C      5493          beq.s     getch_1
000030D4  23FC FFFF 5494          move.l    #-1,__ungetbuf.L
000030D8  FFFF 0B00 
000030DC  00C0      
000030DE  6010      5495          bra.s     getch_3
                    5496   getch_1:
000030E0  4EB8 0B68 5497          jsr       __getch
000030E4  2400      5498          move.l    D0,D2
000030E6  0C80 0000 5499          cmp.l     #13,D0
000030EA  000D      
000030EC  6602      5500          bne.s     getch_3
000030EE  740A      5501          moveq     #10,D2
                    5502   getch_3:
000030F0  2002      5503          move.l    D2,D0
000030F2  241F      5504          move.l    (A7)+,D2
000030F4  4E75      5505          rts
                    5506   _tolower:
000030F6  202F 0004 5507          move.l    4(A7),D0
000030FA  0C80 0000 5508          cmp.l     #'A',D0
000030FE  0041      
00003100  6D0E      5509          blt.s     tolower_1
00003102  0C80 0000 5510          cmp.l     #'Z',D0
00003106  005A      
00003108  6E06      5511          bgt.s     tolower_1
0000310A  0680 0000 5512          add.l     #$20,D0
0000310E  0020      
                    5513   tolower_1:
00003110  4E75      5514          rts
                    5515   _sprintf:
00003112  4E56 FFFC 5516          link      A6,#-4
00003116  2F02      5517          move.l    D2,-(A7)
00003118  41EE 000C 5518          lea       12(A6),A0
0000311C  5848      5519          addq.w    #4,A0
0000311E  2408      5520          move.l    A0,D2
00003120  2F02      5521          move.l    D2,-(A7)
00003122  2F2E 000C 5522          move.l    12(A6),-(A7)
00003126  2F2E 0008 5523          move.l    8(A6),-(A7)
0000312A  4EB9 0000 5524          jsr       _doprint
0000312E  324C      
00003130  DEFC 000C 5525          add.w     #12,A7
00003134  2D40 FFFC 5526          move.l    D0,-4(A6)
00003138  4282      5527          clr.l     D2
0000313A  202E FFFC 5528          move.l    -4(A6),D0
0000313E  241F      5529          move.l    (A7)+,D2
00003140  4E5E      5530          unlk      A6
00003142  4E75      5531          rts
                    5532   _strcat:
00003144  206F 0004 5533          move.l    (4,A7),A0
00003148  226F 0008 5534          move.l    (8,A7),A1
0000314C  2008      5535          move.l    A0,D0
                    5536   strcat_1:
0000314E  4A18      5537          tst.b     (A0)+
00003150  66FC      5538          bne.s     strcat_1
00003152  5388      5539          subq.l    #1,A0
                    5540   strcat_2:
00003154  10D9      5541          move.b    (A1)+,(A0)+
00003156  66FC      5542          bne.s     strcat_2
00003158  4E75      5543          rts
                    5544   _toupper:
0000315A  202F 0004 5545          move.l    4(A7),D0
0000315E  0C80 0000 5546          cmp.l     #'a',D0
00003162  0061      
00003164  6D0E      5547          blt.s     toupper_1
00003166  0C80 0000 5548          cmp.l     #'z',D0
0000316A  007A      
0000316C  6E06      5549          bgt.s     toupper_1
0000316E  0480 0000 5550          sub.l     #$20,D0
00003172  0020      
                    5551   toupper_1:
00003174  4E75      5552          rts
                    5553   _printf:
00003176  4E56 FFFC 5554          link      A6,#-4
0000317A  2F02      5555          move.l    D2,-(A7)
0000317C  41EE 0008 5556          lea       8(A6),A0
00003180  5848      5557          addq.w    #4,A0
00003182  2408      5558          move.l    A0,D2
00003184  2F02      5559          move.l    D2,-(A7)
00003186  2F2E 0008 5560          move.l    8(A6),-(A7)
0000318A  42A7      5561          clr.l     -(A7)
0000318C  4EB9 0000 5562          jsr       _doprint
00003190  324C      
00003192  DEFC 000C 5563          add.w     #12,A7
00003196  2D40 FFFC 5564          move.l    D0,-4(A6)
0000319A  4282      5565          clr.l     D2
0000319C  202E FFFC 5566          move.l    -4(A6),D0
000031A0  241F      5567          move.l    (A7)+,D2
000031A2  4E5E      5568          unlk      A6
000031A4  4E75      5569          rts
                    5570   @doprint_copy:
000031A6  4E56 0000 5571          link      A6,#0
000031AA  206E 0008 5572          move.l    8(A6),A0
000031AE  4A90      5573          tst.l     (A0)
000031B0  6710      5574          beq.s     @doprint_copy_1
000031B2  202E 000C 5575          move.l    12(A6),D0
000031B6  206E 0008 5576          move.l    8(A6),A0
000031BA  2250      5577          move.l    (A0),A1
000031BC  5290      5578          addq.l    #1,(A0)
000031BE  1280      5579          move.b    D0,(A1)
000031C0  600A      5580          bra.s     @doprint_copy_2
                    5581   @doprint_copy_1:
000031C2  2F2E 000C 5582          move.l    12(A6),-(A7)
000031C6  4EB8 3092 5583          jsr       _putch
000031CA  584F      5584          addq.w    #4,A7
                    5585   @doprint_copy_2:
000031CC  4E5E      5586          unlk      A6
000031CE  4E75      5587          rts
                    5588   @doprint_getval:
000031D0  4E56 0000 5589          link      A6,#0
000031D4  48E7 3000 5590          movem.l   D2/D3,-(A7)
000031D8  262E 0008 5591          move.l    8(A6),D3
000031DC  4282      5592          clr.l     D2
000031DE  2043      5593          move.l    D3,A0
000031E0  2050      5594          move.l    (A0),A0
000031E2  1010      5595          move.b    (A0),D0
000031E4  0C00 002A 5596          cmp.b     #42,D0
000031E8  6612      5597          bne.s     @doprint_getval_1
000031EA  206E 000C 5598          move.l    12(A6),A0
000031EE  2250      5599          move.l    (A0),A1
000031F0  5890      5600          addq.l    #4,(A0)
000031F2  2411      5601          move.l    (A1),D2
000031F4  2043      5602          move.l    D3,A0
000031F6  5290      5603          addq.l    #1,(A0)
000031F8  6000 0048 5604          bra       @doprint_getval_5
                    5605   @doprint_getval_1:
000031FC  7001      5606          moveq     #1,D0
000031FE  2043      5607          move.l    D3,A0
00003200  2050      5608          move.l    (A0),A0
00003202  1210      5609          move.b    (A0),D1
00003204  4881      5610          ext.w     D1
00003206  48C1      5611          ext.l     D1
00003208  D081      5612          add.l     D1,D0
0000320A  41F9 0000 5613          lea       __ctype.L,A0
0000320E  50EA      
00003210  1030 0800 5614          move.b    0(A0,D0.L),D0
00003214  C03C 0004 5615          and.b     #4,D0
00003218  6728      5616          beq.s     @doprint_getval_5
0000321A  2F02      5617          move.l    D2,-(A7)
0000321C  4878 000A 5618          pea       10
00003220  4EB9 0000 5619          jsr       LMUL
00003224  39E8      
00003226  2017      5620          move.l    (A7),D0
00003228  504F      5621          addq.w    #8,A7
0000322A  2043      5622          move.l    D3,A0
0000322C  2250      5623          move.l    (A0),A1
0000322E  5290      5624          addq.l    #1,(A0)
00003230  1211      5625          move.b    (A1),D1
00003232  4881      5626          ext.w     D1
00003234  48C1      5627          ext.l     D1
00003236  D081      5628          add.l     D1,D0
00003238  0480 0000 5629          sub.l     #48,D0
0000323C  0030      
0000323E  2400      5630          move.l    D0,D2
00003240  60BA      5631          bra       @doprint_getval_1
                    5632   @doprint_getval_5:
00003242  2002      5633          move.l    D2,D0
00003244  4CDF 000C 5634          movem.l   (A7)+,D2/D3
00003248  4E5E      5635          unlk      A6
0000324A  4E75      5636          rts
                    5637   _doprint:
0000324C  4E56 FFCC 5638          link      A6,#-52
00003250  48E7 3F3C 5639          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003254  45EE 0008 5640          lea       8(A6),A2
00003258  47F8 31A6 5641          lea       @doprint_copy.L,A3
0000325C  49F9 0000 5642          lea       _ultoa.L,A4
00003260  3974      
00003262  4286      5643          clr.l     D6
                    5644   doprint_1:
00003264  206E 000C 5645          move.l    12(A6),A0
00003268  4A10      5646          tst.b     (A0)
0000326A  6700 05EA 5647          beq       doprint_3
0000326E  206E 000C 5648          move.l    12(A6),A0
00003272  1010      5649          move.b    (A0),D0
00003274  0C00 0025 5650          cmp.b     #37,D0
00003278  671C      5651          beq.s     doprint_4
0000327A  206E 000C 5652          move.l    12(A6),A0
0000327E  52AE 000C 5653          addq.l    #1,12(A6)
00003282  1210      5654          move.b    (A0),D1
00003284  4881      5655          ext.w     D1
00003286  48C1      5656          ext.l     D1
00003288  2F01      5657          move.l    D1,-(A7)
0000328A  2F0A      5658          move.l    A2,-(A7)
0000328C  4E93      5659          jsr       (A3)
0000328E  504F      5660          addq.w    #8,A7
00003290  5286      5661          addq.l    #1,D6
00003292  6000 05BE 5662          bra       doprint_2
                    5663   doprint_4:
00003296  52AE 000C 5664          addq.l    #1,12(A6)
0000329A  422E FFD3 5665          clr.b     -45(A6)
0000329E  422E FFD2 5666          clr.b     -46(A6)
000032A2  422E FFD0 5667          clr.b     -48(A6)
000032A6  422E FFCF 5668          clr.b     -49(A6)
000032AA  422E FFCE 5669          clr.b     -50(A6)
000032AE  422E FFCD 5670          clr.b     -51(A6)
000032B2  42AE FFFC 5671          clr.l     -4(A6)
000032B6  7AFF      5672          moveq     #-1,D5
000032B8  41EE FFDC 5673          lea       -36(A6),A0
000032BC  2608      5674          move.l    A0,D3
000032BE  2408      5675          move.l    A0,D2
                    5676   doprint_6:
000032C0  206E 000C 5677          move.l    12(A6),A0
000032C4  1010      5678          move.b    (A0),D0
000032C6  4880      5679          ext.w     D0
000032C8  48C0      5680          ext.l     D0
000032CA  0C80 0000 5681          cmp.l     #43,D0
000032CE  002B      
000032D0  6730      5682          beq.s     doprint_12
000032D2  6E18      5683          bgt.s     doprint_15
000032D4  0C80 0000 5684          cmp.l     #35,D0
000032D8  0023      
000032DA  6700 003E 5685          beq       doprint_14
000032DE  6E00 0046 5686          bgt       doprint_9
000032E2  0C80 0000 5687          cmp.l     #32,D0
000032E6  0020      
000032E8  6724      5688          beq.s     doprint_13
000032EA  603A      5689          bra.s     doprint_9
                    5690   doprint_15:
000032EC  0C80 0000 5691          cmp.l     #45,D0
000032F0  002D      
000032F2  6702      5692          beq.s     doprint_11
000032F4  6030      5693          bra.s     doprint_9
                    5694   doprint_11:
000032F6  1D7C 0001 5695          move.b    #1,-51(A6)
000032FA  FFCD      
000032FC  52AE 000C 5696          addq.l    #1,12(A6)
00003300  6026      5697          bra.s     doprint_7
                    5698   doprint_12:
00003302  1D7C 0001 5699          move.b    #1,-50(A6)
00003306  FFCE      
00003308  52AE 000C 5700          addq.l    #1,12(A6)
0000330C  601A      5701          bra.s     doprint_7
                    5702   doprint_13:
0000330E  1D7C 0001 5703          move.b    #1,-49(A6)
00003312  FFCF      
00003314  52AE 000C 5704          addq.l    #1,12(A6)
00003318  600E      5705          bra.s     doprint_7
                    5706   doprint_14:
0000331A  1D7C 0001 5707          move.b    #1,-48(A6)
0000331E  FFD0      
00003320  52AE 000C 5708          addq.l    #1,12(A6)
00003324  6002      5709          bra.s     doprint_7
                    5710   doprint_9:
00003326  6002      5711          bra.s     doprint_8
                    5712   doprint_7:
00003328  6096      5713          bra       doprint_6
                    5714   doprint_8:
0000332A  206E 000C 5715          move.l    12(A6),A0
0000332E  1010      5716          move.b    (A0),D0
00003330  0C00 0030 5717          cmp.b     #48,D0
00003334  660A      5718          bne.s     doprint_16
00003336  52AE 000C 5719          addq.l    #1,12(A6)
0000333A  1D7C 0001 5720          move.b    #1,-46(A6)
0000333E  FFD2      
                    5721   doprint_16:
00003340  486E 0010 5722          pea       16(A6)
00003344  486E 000C 5723          pea       12(A6)
00003348  4EB8 31D0 5724          jsr       @doprint_getval
0000334C  504F      5725          addq.w    #8,A7
0000334E  2A40      5726          move.l    D0,A5
00003350  206E 000C 5727          move.l    12(A6),A0
00003354  1010      5728          move.b    (A0),D0
00003356  0C00 002E 5729          cmp.b     #46,D0
0000335A  6614      5730          bne.s     doprint_18
0000335C  52AE 000C 5731          addq.l    #1,12(A6)
00003360  486E 0010 5732          pea       16(A6)
00003364  486E 000C 5733          pea       12(A6)
00003368  4EB8 31D0 5734          jsr       @doprint_getval
0000336C  504F      5735          addq.w    #8,A7
0000336E  2A00      5736          move.l    D0,D5
                    5737   doprint_18:
00003370  206E 000C 5738          move.l    12(A6),A0
00003374  1010      5739          move.b    (A0),D0
00003376  0C00 006C 5740          cmp.b     #108,D0
0000337A  660A      5741          bne.s     doprint_20
0000337C  52AE 000C 5742          addq.l    #1,12(A6)
00003380  1D7C 0001 5743          move.b    #1,-45(A6)
00003384  FFD3      
                    5744   doprint_20:
00003386  206E 000C 5745          move.l    12(A6),A0
0000338A  1010      5746          move.b    (A0),D0
0000338C  4880      5747          ext.w     D0
0000338E  48C0      5748          ext.l     D0
00003390  0C80 0000 5749          cmp.l     #111,D0
00003394  006F      
00003396  6700 00D8 5750          beq       doprint_27
0000339A  6E34      5751          bgt.s     doprint_33
0000339C  0C80 0000 5752          cmp.l     #100,D0
000033A0  0064      
000033A2  6700 0054 5753          beq       doprint_24
000033A6  6E1C      5754          bgt.s     doprint_34
000033A8  0C80 0000 5755          cmp.l     #99,D0
000033AC  0063      
000033AE  6700 0130 5756          beq       doprint_30
000033B2  6E00 0174 5757          bgt       doprint_22
000033B6  0C80 0000 5758          cmp.l     #88,D0
000033BA  0058      
000033BC  6700 00EA 5759          beq       doprint_28
000033C0  6000 0166 5760          bra       doprint_22
                    5761   doprint_34:
000033C4  0C80 0000 5762          cmp.l     #105,D0
000033C8  0069      
000033CA  672C      5763          beq.s     doprint_24
000033CC  6000 015A 5764          bra       doprint_22
                    5765   doprint_33:
000033D0  0C80 0000 5766          cmp.l     #117,D0
000033D4  0075      
000033D6  6700 0060 5767          beq       doprint_26
000033DA  6E0E      5768          bgt.s     doprint_35
000033DC  0C80 0000 5769          cmp.l     #115,D0
000033E0  0073      
000033E2  6700 0124 5770          beq       doprint_31
000033E6  6000 0140 5771          bra       doprint_22
                    5772   doprint_35:
000033EA  0C80 0000 5773          cmp.l     #120,D0
000033EE  0078      
000033F0  6700 00B6 5774          beq       doprint_28
000033F4  6000 0132 5775          bra       doprint_22
                    5776   doprint_24:
000033F8  4A2E FFD3 5777          tst.b     -45(A6)
000033FC  671C      5778          beq.s     doprint_36
000033FE  4878 000A 5779          pea       10
00003402  2F03      5780          move.l    D3,-(A7)
00003404  206E 0010 5781          move.l    16(A6),A0
00003408  58AE 0010 5782          addq.l    #4,16(A6)
0000340C  2F10      5783          move.l    (A0),-(A7)
0000340E  4EB9 0000 5784          jsr       _ltoa
00003412  38F0      
00003414  DEFC 000C 5785          add.w     #12,A7
00003418  601A      5786          bra.s     doprint_37
                    5787   doprint_36:
0000341A  4878 000A 5788          pea       10
0000341E  2F03      5789          move.l    D3,-(A7)
00003420  206E 0010 5790          move.l    16(A6),A0
00003424  58AE 0010 5791          addq.l    #4,16(A6)
00003428  2F10      5792          move.l    (A0),-(A7)
0000342A  4EB9 0000 5793          jsr       _ltoa
0000342E  38F0      
00003430  DEFC 000C 5794          add.w     #12,A7
                    5795   doprint_37:
00003434  6000 0100 5796          bra       doprint_23
                    5797   doprint_26:
00003438  4A2E FFD3 5798          tst.b     -45(A6)
0000343C  6718      5799          beq.s     doprint_38
0000343E  4878 000A 5800          pea       10
00003442  2F03      5801          move.l    D3,-(A7)
00003444  206E 0010 5802          move.l    16(A6),A0
00003448  58AE 0010 5803          addq.l    #4,16(A6)
0000344C  2F10      5804          move.l    (A0),-(A7)
0000344E  4E94      5805          jsr       (A4)
00003450  DEFC 000C 5806          add.w     #12,A7
00003454  6016      5807          bra.s     doprint_39
                    5808   doprint_38:
00003456  4878 000A 5809          pea       10
0000345A  2F03      5810          move.l    D3,-(A7)
0000345C  206E 0010 5811          move.l    16(A6),A0
00003460  58AE 0010 5812          addq.l    #4,16(A6)
00003464  2F10      5813          move.l    (A0),-(A7)
00003466  4E94      5814          jsr       (A4)
00003468  DEFC 000C 5815          add.w     #12,A7
                    5816   doprint_39:
0000346C  6000 00C8 5817          bra       doprint_23
                    5818   doprint_27:
00003470  4A2E FFD3 5819          tst.b     -45(A6)
00003474  6718      5820          beq.s     doprint_40
00003476  4878 0008 5821          pea       8
0000347A  2F03      5822          move.l    D3,-(A7)
0000347C  206E 0010 5823          move.l    16(A6),A0
00003480  58AE 0010 5824          addq.l    #4,16(A6)
00003484  2F10      5825          move.l    (A0),-(A7)
00003486  4E94      5826          jsr       (A4)
00003488  DEFC 000C 5827          add.w     #12,A7
0000348C  6016      5828          bra.s     doprint_41
                    5829   doprint_40:
0000348E  4878 0008 5830          pea       8
00003492  2F03      5831          move.l    D3,-(A7)
00003494  206E 0010 5832          move.l    16(A6),A0
00003498  58AE 0010 5833          addq.l    #4,16(A6)
0000349C  2F10      5834          move.l    (A0),-(A7)
0000349E  4E94      5835          jsr       (A4)
000034A0  DEFC 000C 5836          add.w     #12,A7
                    5837   doprint_41:
000034A4  6000 0090 5838          bra       doprint_23
                    5839   doprint_28:
000034A8  4A2E FFD3 5840          tst.b     -45(A6)
000034AC  6718      5841          beq.s     doprint_42
000034AE  4878 0010 5842          pea       16
000034B2  2F03      5843          move.l    D3,-(A7)
000034B4  206E 0010 5844          move.l    16(A6),A0
000034B8  58AE 0010 5845          addq.l    #4,16(A6)
000034BC  2F10      5846          move.l    (A0),-(A7)
000034BE  4E94      5847          jsr       (A4)
000034C0  DEFC 000C 5848          add.w     #12,A7
000034C4  6016      5849          bra.s     doprint_43
                    5850   doprint_42:
000034C6  4878 0010 5851          pea       16
000034CA  2F03      5852          move.l    D3,-(A7)
000034CC  206E 0010 5853          move.l    16(A6),A0
000034D0  58AE 0010 5854          addq.l    #4,16(A6)
000034D4  2F10      5855          move.l    (A0),-(A7)
000034D6  4E94      5856          jsr       (A4)
000034D8  DEFC 000C 5857          add.w     #12,A7
                    5858   doprint_43:
000034DC  6000 0058 5859          bra       doprint_23
                    5860   doprint_30:
000034E0  206E 0010 5861          move.l    16(A6),A0
000034E4  58AE 0010 5862          addq.l    #4,16(A6)
000034E8  2010      5863          move.l    (A0),D0
000034EA  2042      5864          move.l    D2,A0
000034EC  5282      5865          addq.l    #1,D2
000034EE  1080      5866          move.b    D0,(A0)
000034F0  2042      5867          move.l    D2,A0
000034F2  4210      5868          clr.b     (A0)
000034F4  200D      5869          move.l    A5,D0
000034F6  6704      5870          beq.s     doprint_44
000034F8  200D      5871          move.l    A5,D0
000034FA  6006      5872          bra.s     doprint_45
                    5873   doprint_44:
000034FC  7001      5874          moveq     #1,D0
000034FE  4880      5875          ext.w     D0
00003500  48C0      5876          ext.l     D0
                    5877   doprint_45:
00003502  2A00      5878          move.l    D0,D5
00003504  6000 0030 5879          bra       doprint_23
                    5880   doprint_31:
00003508  206E 0010 5881          move.l    16(A6),A0
0000350C  58AE 0010 5882          addq.l    #4,16(A6)
00003510  2610      5883          move.l    (A0),D3
00003512  0C85 FFFF 5884          cmp.l     #-1,D5
00003516  FFFF      
00003518  660C      5885          bne.s     doprint_46
0000351A  2F03      5886          move.l    D3,-(A7)
0000351C  4EB9 0000 5887          jsr       _strlen
00003520  3A76      
00003522  584F      5888          addq.w    #4,A7
00003524  2A00      5889          move.l    D0,D5
                    5890   doprint_46:
00003526  600E      5891          bra.s     doprint_23
                    5892   doprint_22:
00003528  206E 000C 5893          move.l    12(A6),A0
0000352C  2242      5894          move.l    D2,A1
0000352E  5282      5895          addq.l    #1,D2
00003530  1290      5896          move.b    (A0),(A1)
00003532  2042      5897          move.l    D2,A0
00003534  4210      5898          clr.b     (A0)
                    5899   doprint_23:
00003536  2F03      5900          move.l    D3,-(A7)
00003538  4EB9 0000 5901          jsr       _strlen
0000353C  3A76      
0000353E  584F      5902          addq.w    #4,A7
00003540  1800      5903          move.b    D0,D4
00003542  206E 000C 5904          move.l    12(A6),A0
00003546  1010      5905          move.b    (A0),D0
00003548  0C00 0073 5906          cmp.b     #115,D0
0000354C  661C      5907          bne.s     doprint_48
0000354E  0C85 0000 5908          cmp.l     #0,D5
00003552  0000      
00003554  6D14      5909          blt.s     doprint_48
00003556  4884      5910          ext.w     D4
00003558  48C4      5911          ext.l     D4
0000355A  B885      5912          cmp.l     D5,D4
0000355C  6F04      5913          ble.s     doprint_50
0000355E  2005      5914          move.l    D5,D0
00003560  6006      5915          bra.s     doprint_51
                    5916   doprint_50:
00003562  1004      5917          move.b    D4,D0
00003564  4880      5918          ext.w     D0
00003566  48C0      5919          ext.l     D0
                    5920   doprint_51:
00003568  1800      5921          move.b    D0,D4
                    5922   doprint_48:
0000356A  206E 000C 5923          move.l    12(A6),A0
0000356E  1010      5924          move.b    (A0),D0
00003570  0C00 0058 5925          cmp.b     #88,D0
00003574  6600 0026 5926          bne       doprint_56
00003578  41EE FFDC 5927          lea       -36(A6),A0
0000357C  2408      5928          move.l    A0,D2
                    5929   doprint_54:
0000357E  2042      5930          move.l    D2,A0
00003580  4A10      5931          tst.b     (A0)
00003582  6718      5932          beq.s     doprint_56
00003584  2042      5933          move.l    D2,A0
00003586  1210      5934          move.b    (A0),D1
00003588  4881      5935          ext.w     D1
0000358A  48C1      5936          ext.l     D1
0000358C  2F01      5937          move.l    D1,-(A7)
0000358E  4EB8 315A 5938          jsr       _toupper
00003592  584F      5939          addq.w    #4,A7
00003594  2042      5940          move.l    D2,A0
00003596  1080      5941          move.b    D0,(A0)
00003598  5282      5942          addq.l    #1,D2
0000359A  60E2      5943          bra       doprint_54
                    5944   doprint_56:
0000359C  7E00      5945          moveq     #0,D7
0000359E  41EE FFD4 5946          lea       -44(A6),A0
000035A2  2408      5947          move.l    A0,D2
000035A4  206E 000C 5948          move.l    12(A6),A0
000035A8  1010      5949          move.b    (A0),D0
000035AA  0C00 0064 5950          cmp.b     #100,D0
000035AE  670E      5951          beq.s     doprint_59
000035B0  206E 000C 5952          move.l    12(A6),A0
000035B4  1010      5953          move.b    (A0),D0
000035B6  0C00 0069 5954          cmp.b     #105,D0
000035BA  6600 0068 5955          bne       doprint_65
                    5956   doprint_59:
000035BE  102E FFCE 5957          move.b    -50(A6),D0
000035C2  4880      5958          ext.w     D0
000035C4  48C0      5959          ext.l     D0
000035C6  4A80      5960          tst.l     D0
000035C8  660C      5961          bne.s     doprint_62
000035CA  2043      5962          move.l    D3,A0
000035CC  1010      5963          move.b    (A0),D0
000035CE  0C00 002D 5964          cmp.b     #45,D0
000035D2  6600 0028 5965          bne       doprint_60
                    5966   doprint_62:
000035D6  2043      5967          move.l    D3,A0
000035D8  1010      5968          move.b    (A0),D0
000035DA  0C00 002D 5969          cmp.b     #45,D0
000035DE  660E      5970          bne.s     doprint_63
000035E0  2043      5971          move.l    D3,A0
000035E2  5283      5972          addq.l    #1,D3
000035E4  2242      5973          move.l    D2,A1
000035E6  5282      5974          addq.l    #1,D2
000035E8  1290      5975          move.b    (A0),(A1)
000035EA  5304      5976          subq.b    #1,D4
000035EC  6008      5977          bra.s     doprint_64
                    5978   doprint_63:
000035EE  2042      5979          move.l    D2,A0
000035F0  5282      5980          addq.l    #1,D2
000035F2  10BC 002B 5981          move.b    #43,(A0)
                    5982   doprint_64:
000035F6  5287      5983          addq.l    #1,D7
000035F8  6000 002A 5984          bra       doprint_65
                    5985   doprint_60:
000035FC  4A2E FFCF 5986          tst.b     -49(A6)
00003600  6722      5987          beq.s     doprint_65
00003602  2043      5988          move.l    D3,A0
00003604  1010      5989          move.b    (A0),D0
00003606  0C00 002D 5990          cmp.b     #45,D0
0000360A  660E      5991          bne.s     doprint_67
0000360C  2043      5992          move.l    D3,A0
0000360E  5283      5993          addq.l    #1,D3
00003610  2242      5994          move.l    D2,A1
00003612  5282      5995          addq.l    #1,D2
00003614  1290      5996          move.b    (A0),(A1)
00003616  5304      5997          subq.b    #1,D4
00003618  6008      5998          bra.s     doprint_68
                    5999   doprint_67:
0000361A  2042      6000          move.l    D2,A0
0000361C  5282      6001          addq.l    #1,D2
0000361E  10BC 0020 6002          move.b    #32,(A0)
                    6003   doprint_68:
00003622  5287      6004          addq.l    #1,D7
                    6005   doprint_65:
00003624  4A2E FFD0 6006          tst.b     -48(A6)
00003628  6700 005A 6007          beq       doprint_77
0000362C  206E 000C 6008          move.l    12(A6),A0
00003630  1010      6009          move.b    (A0),D0
00003632  4880      6010          ext.w     D0
00003634  48C0      6011          ext.l     D0
00003636  0C80 0000 6012          cmp.l     #111,D0
0000363A  006F      
0000363C  671A      6013          beq.s     doprint_73
0000363E  6E0C      6014          bgt.s     doprint_76
00003640  0C80 0000 6015          cmp.l     #88,D0
00003644  0058      
00003646  6710      6016          beq.s     doprint_73
00003648  6000 003A 6017          bra       doprint_77
                    6018   doprint_76:
0000364C  0C80 0000 6019          cmp.l     #120,D0
00003650  0078      
00003652  6704      6020          beq.s     doprint_73
00003654  6000 002E 6021          bra       doprint_77
                    6022   doprint_73:
00003658  2042      6023          move.l    D2,A0
0000365A  5282      6024          addq.l    #1,D2
0000365C  10BC 0030 6025          move.b    #48,(A0)
00003660  5287      6026          addq.l    #1,D7
00003662  206E 000C 6027          move.l    12(A6),A0
00003666  1010      6028          move.b    (A0),D0
00003668  0C00 0078 6029          cmp.b     #120,D0
0000366C  670C      6030          beq.s     doprint_79
0000366E  206E 000C 6031          move.l    12(A6),A0
00003672  1010      6032          move.b    (A0),D0
00003674  0C00 0058 6033          cmp.b     #88,D0
00003678  660A      6034          bne.s     doprint_77
                    6035   doprint_79:
0000367A  2042      6036          move.l    D2,A0
0000367C  5282      6037          addq.l    #1,D2
0000367E  10BC 0078 6038          move.b    #120,(A0)
00003682  5287      6039          addq.l    #1,D7
                    6040   doprint_77:
00003684  2042      6041          move.l    D2,A0
00003686  4210      6042          clr.b     (A0)
00003688  206E 000C 6043          move.l    12(A6),A0
0000368C  1010      6044          move.b    (A0),D0
0000368E  4880      6045          ext.w     D0
00003690  48C0      6046          ext.l     D0
00003692  0C80 0000 6047          cmp.l     #105,D0
00003696  0069      
00003698  6700 0076 6048          beq       doprint_82
0000369C  6E42      6049          bgt.s     doprint_93
0000369E  0C80 0000 6050          cmp.l     #99,D0
000036A2  0063      
000036A4  6700 0084 6051          beq       doprint_96
000036A8  6E1C      6052          bgt.s     doprint_94
000036AA  0C80 0000 6053          cmp.l     #88,D0
000036AE  0058      
000036B0  6700 005E 6054          beq       doprint_82
000036B4  6E00 0184 6055          bgt       doprint_80
000036B8  0C80 0000 6056          cmp.l     #69,D0
000036BC  0045      
000036BE  6700 0050 6057          beq       doprint_82
000036C2  6000 0176 6058          bra       doprint_80
                    6059   doprint_94:
000036C6  0C80 0000 6060          cmp.l     #101,D0
000036CA  0065      
000036CC  6700 0042 6061          beq       doprint_82
000036D0  6E00 0168 6062          bgt       doprint_80
000036D4  0C80 0000 6063          cmp.l     #100,D0
000036D8  0064      
000036DA  6734      6064          beq.s     doprint_82
000036DC  6000 015C 6065          bra       doprint_80
                    6066   doprint_93:
000036E0  0C80 0000 6067          cmp.l     #117,D0
000036E4  0075      
000036E6  6728      6068          beq.s     doprint_82
000036E8  6E1A      6069          bgt.s     doprint_95
000036EA  0C80 0000 6070          cmp.l     #115,D0
000036EE  0073      
000036F0  6700 0038 6071          beq       doprint_96
000036F4  6E00 0144 6072          bgt       doprint_80
000036F8  0C80 0000 6073          cmp.l     #111,D0
000036FC  006F      
000036FE  6710      6074          beq.s     doprint_82
00003700  6000 0138 6075          bra       doprint_80
                    6076   doprint_95:
00003704  0C80 0000 6077          cmp.l     #120,D0
00003708  0078      
0000370A  6704      6078          beq.s     doprint_82
0000370C  6000 012C 6079          bra       doprint_80
                    6080   doprint_82:
00003710  4A2E FFD2 6081          tst.b     -46(A6)
00003714  6714      6082          beq.s     doprint_96
00003716  4A2E FFCD 6083          tst.b     -51(A6)
0000371A  660E      6084          bne.s     doprint_96
0000371C  200D      6085          move.l    A5,D0
0000371E  9087      6086          sub.l     D7,D0
00003720  4884      6087          ext.w     D4
00003722  48C4      6088          ext.l     D4
00003724  9084      6089          sub.l     D4,D0
00003726  2D40 FFFC 6090          move.l    D0,-4(A6)
                    6091   doprint_96:
0000372A  202E FFFC 6092          move.l    -4(A6),D0
0000372E  0C80 0000 6093          cmp.l     #0,D0
00003732  0000      
00003734  6C04      6094          bge.s     doprint_98
00003736  42AE FFFC 6095          clr.l     -4(A6)
                    6096   doprint_98:
0000373A  4A2E FFCD 6097          tst.b     -51(A6)
0000373E  6600 0030 6098          bne       doprint_104
00003742  1004      6099          move.b    D4,D0
00003744  4880      6100          ext.w     D0
00003746  48C0      6101          ext.l     D0
00003748  D0AE FFFC 6102          add.l     -4(A6),D0
0000374C  D087      6103          add.l     D7,D0
0000374E  1D40 FFD1 6104          move.b    D0,-47(A6)
                    6105   doprint_102:
00003752  102E FFD1 6106          move.b    -47(A6),D0
00003756  4880      6107          ext.w     D0
00003758  48C0      6108          ext.l     D0
0000375A  220D      6109          move.l    A5,D1
0000375C  534D      6110          subq.w    #1,A5
0000375E  B081      6111          cmp.l     D1,D0
00003760  6C0E      6112          bge.s     doprint_104
00003762  4878 0020 6113          pea       32
00003766  2F0A      6114          move.l    A2,-(A7)
00003768  4E93      6115          jsr       (A3)
0000376A  504F      6116          addq.w    #8,A7
0000376C  5286      6117          addq.l    #1,D6
0000376E  60E2      6118          bra       doprint_102
                    6119   doprint_104:
00003770  41EE FFD4 6120          lea       -44(A6),A0
00003774  2408      6121          move.l    A0,D2
                    6122   doprint_105:
00003776  2042      6123          move.l    D2,A0
00003778  4A10      6124          tst.b     (A0)
0000377A  6716      6125          beq.s     doprint_107
0000377C  2042      6126          move.l    D2,A0
0000377E  5282      6127          addq.l    #1,D2
00003780  1210      6128          move.b    (A0),D1
00003782  4881      6129          ext.w     D1
00003784  48C1      6130          ext.l     D1
00003786  2F01      6131          move.l    D1,-(A7)
00003788  2F0A      6132          move.l    A2,-(A7)
0000378A  4E93      6133          jsr       (A3)
0000378C  504F      6134          addq.w    #8,A7
0000378E  5286      6135          addq.l    #1,D6
00003790  60E4      6136          bra       doprint_105
                    6137   doprint_107:
00003792  202E FFFC 6138          move.l    -4(A6),D0
00003796  1D40 FFD1 6139          move.b    D0,-47(A6)
                    6140   doprint_108:
0000379A  102E FFD1 6141          move.b    -47(A6),D0
0000379E  532E FFD1 6142          subq.b    #1,-47(A6)
000037A2  4A00      6143          tst.b     D0
000037A4  670E      6144          beq.s     doprint_110
000037A6  4878 0030 6145          pea       48
000037AA  2F0A      6146          move.l    A2,-(A7)
000037AC  4E93      6147          jsr       (A3)
000037AE  504F      6148          addq.w    #8,A7
000037B0  5286      6149          addq.l    #1,D6
000037B2  60E6      6150          bra       doprint_108
                    6151   doprint_110:
000037B4  2043      6152          move.l    D3,A0
000037B6  4A10      6153          tst.b     (A0)
000037B8  6700 0048 6154          beq       doprint_113
000037BC  206E 000C 6155          move.l    12(A6),A0
000037C0  1010      6156          move.b    (A0),D0
000037C2  4880      6157          ext.w     D0
000037C4  48C0      6158          ext.l     D0
000037C6  0C80 0000 6159          cmp.l     #115,D0
000037CA  0073      
000037CC  670C      6160          beq.s     doprint_116
000037CE  6E18      6161          bgt.s     doprint_119
000037D0  0C80 0000 6162          cmp.l     #99,D0
000037D4  0063      
000037D6  6702      6163          beq.s     doprint_116
000037D8  600E      6164          bra.s     doprint_119
                    6165   doprint_116:
000037DA  2005      6166          move.l    D5,D0
000037DC  5385      6167          subq.l    #1,D5
000037DE  0C80 0000 6168          cmp.l     #0,D0
000037E2  0000      
000037E4  6E02      6169          bgt.s     doprint_119
000037E6  6016      6170          bra.s     doprint_115
                    6171   doprint_119:
000037E8  2043      6172          move.l    D3,A0
000037EA  5283      6173          addq.l    #1,D3
000037EC  1210      6174          move.b    (A0),D1
000037EE  4881      6175          ext.w     D1
000037F0  48C1      6176          ext.l     D1
000037F2  2F01      6177          move.l    D1,-(A7)
000037F4  2F0A      6178          move.l    A2,-(A7)
000037F6  4E93      6179          jsr       (A3)
000037F8  504F      6180          addq.w    #8,A7
000037FA  5286      6181          addq.l    #1,D6
000037FC  6002      6182          bra.s     doprint_112
                    6183   doprint_115:
000037FE  6002      6184          bra.s     doprint_113
                    6185   doprint_112:
00003800  60B2      6186          bra       doprint_110
                    6187   doprint_113:
00003802  4A2E FFCD 6188          tst.b     -51(A6)
00003806  6700 0030 6189          beq       doprint_125
0000380A  1004      6190          move.b    D4,D0
0000380C  4880      6191          ext.w     D0
0000380E  48C0      6192          ext.l     D0
00003810  D0AE FFFC 6193          add.l     -4(A6),D0
00003814  D087      6194          add.l     D7,D0
00003816  1D40 FFD1 6195          move.b    D0,-47(A6)
                    6196   doprint_123:
0000381A  102E FFD1 6197          move.b    -47(A6),D0
0000381E  4880      6198          ext.w     D0
00003820  48C0      6199          ext.l     D0
00003822  220D      6200          move.l    A5,D1
00003824  534D      6201          subq.w    #1,A5
00003826  B081      6202          cmp.l     D1,D0
00003828  6C0E      6203          bge.s     doprint_125
0000382A  4878 0020 6204          pea       32
0000382E  2F0A      6205          move.l    A2,-(A7)
00003830  4E93      6206          jsr       (A3)
00003832  504F      6207          addq.w    #8,A7
00003834  5386      6208          subq.l    #1,D6
00003836  60E2      6209          bra       doprint_123
                    6210   doprint_125:
00003838  6014      6211          bra.s     doprint_81
                    6212   doprint_80:
0000383A  206E 000C 6213          move.l    12(A6),A0
0000383E  1210      6214          move.b    (A0),D1
00003840  4881      6215          ext.w     D1
00003842  48C1      6216          ext.l     D1
00003844  2F01      6217          move.l    D1,-(A7)
00003846  2F0A      6218          move.l    A2,-(A7)
00003848  4E93      6219          jsr       (A3)
0000384A  504F      6220          addq.w    #8,A7
0000384C  5286      6221          addq.l    #1,D6
                    6222   doprint_81:
0000384E  52AE 000C 6223          addq.l    #1,12(A6)
                    6224   doprint_2:
00003852  6000 FA10 6225          bra       doprint_1
                    6226   doprint_3:
00003856  4A92      6227          tst.l     (A2)
00003858  6710      6228          beq.s     doprint_126
0000385A  4201      6229          clr.b     D1
0000385C  C2BC 0000 6230          and.l     #255,D1
00003860  00FF      
00003862  2F01      6231          move.l    D1,-(A7)
00003864  2F0A      6232          move.l    A2,-(A7)
00003866  4E93      6233          jsr       (A3)
00003868  504F      6234          addq.w    #8,A7
                    6235   doprint_126:
0000386A  2006      6236          move.l    D6,D0
0000386C  4CDF 3CFC 6237          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003870  4E5E      6238          unlk      A6
00003872  4E75      6239          rts
                    6240   @itoa_convert:
00003874  4E56 0000 6241          link      A6,#0
00003878  48E7 3C00 6242          movem.l   D2/D3/D4/D5,-(A7)
0000387C  242E 0008 6243          move.l    8(A6),D2
00003880  262E 0010 6244          move.l    16(A6),D3
00003884  2A2E 000C 6245          move.l    12(A6),D5
00003888  2F05      6246          move.l    D5,-(A7)
0000388A  2F03      6247          move.l    D3,-(A7)
0000388C  4EB8 2FB4 6248          jsr       ULDIV
00003890  202F 0004 6249          move.l    4(A7),D0
00003894  504F      6250          addq.w    #8,A7
00003896  2800      6251          move.l    D0,D4
00003898  BA83      6252          cmp.l     D3,D5
0000389A  651C      6253          blo.s     @itoa_convert_1
0000389C  2F03      6254          move.l    D3,-(A7)
0000389E  2F05      6255          move.l    D5,-(A7)
000038A0  2F03      6256          move.l    D3,-(A7)
000038A2  4EB8 2FB4 6257          jsr       ULDIV
000038A6  2217      6258          move.l    (A7),D1
000038A8  504F      6259          addq.w    #8,A7
000038AA  2F01      6260          move.l    D1,-(A7)
000038AC  2F02      6261          move.l    D2,-(A7)
000038AE  4EB8 3874 6262          jsr       @itoa_convert
000038B2  DEFC 000C 6263          add.w     #12,A7
000038B6  2400      6264          move.l    D0,D2
                    6265   @itoa_convert_1:
000038B8  0C84 0000 6266          cmp.l     #9,D4
000038BC  0009      
000038BE  6E0E      6267          bgt.s     @itoa_convert_3
000038C0  2004      6268          move.l    D4,D0
000038C2  7230      6269          moveq     #48,D1
000038C4  C2BC 0000 6270          and.l     #255,D1
000038C8  00FF      
000038CA  D081      6271          add.l     D1,D0
000038CC  6012      6272          bra.s     @itoa_convert_4
                    6273   @itoa_convert_3:
000038CE  2004      6274          move.l    D4,D0
000038D0  7261      6275          moveq     #97,D1
000038D2  C2BC 0000 6276          and.l     #255,D1
000038D6  00FF      
000038D8  D081      6277          add.l     D1,D0
000038DA  0480 0000 6278          sub.l     #10,D0
000038DE  000A      
                    6279   @itoa_convert_4:
000038E0  2042      6280          move.l    D2,A0
000038E2  1080      6281          move.b    D0,(A0)
000038E4  2002      6282          move.l    D2,D0
000038E6  5280      6283          addq.l    #1,D0
000038E8  4CDF 003C 6284          movem.l   (A7)+,D2/D3/D4/D5
000038EC  4E5E      6285          unlk      A6
000038EE  4E75      6286          rts
                    6287   _ltoa:
000038F0  4E56 0000 6288          link      A6,#0
000038F4  48E7 3C00 6289          movem.l   D2/D3/D4/D5,-(A7)
000038F8  242E 0008 6290          move.l    8(A6),D2
000038FC  262E 000C 6291          move.l    12(A6),D3
00003900  2A2E 0010 6292          move.l    16(A6),D5
00003904  2803      6293          move.l    D3,D4
00003906  0C85 0000 6294          cmp.l     #2,D5
0000390A  0002      
0000390C  6D08      6295          blt.s     ltoa_3
0000390E  0C85 0000 6296          cmp.l     #36,D5
00003912  0024      
00003914  6F06      6297          ble.s     ltoa_1
                    6298   ltoa_3:
00003916  2003      6299          move.l    D3,D0
00003918  6000 0052 6300          bra       ltoa_4
                    6301   ltoa_1:
0000391C  0C85 0000 6302          cmp.l     #10,D5
00003920  000A      
00003922  6600 0032 6303          bne       ltoa_5
00003926  0C82 0000 6304          cmp.l     #0,D2
0000392A  0000      
0000392C  6C28      6305          bge.s     ltoa_5
0000392E  2002      6306          move.l    D2,D0
00003930  4480      6307          neg.l     D0
00003932  2400      6308          move.l    D0,D2
00003934  0C82 0000 6309          cmp.l     #0,D2
00003938  0000      
0000393A  6C12      6310          bge.s     ltoa_7
0000393C  4879 0000 6311          pea       @itoa_1.L
00003940  50DE      
00003942  2F03      6312          move.l    D3,-(A7)
00003944  4EB8 2FA4 6313          jsr       _strcpy
00003948  504F      6314          addq.w    #8,A7
0000394A  2003      6315          move.l    D3,D0
0000394C  601E      6316          bra.s     ltoa_4
                    6317   ltoa_7:
0000394E  2044      6318          move.l    D4,A0
00003950  5284      6319          addq.l    #1,D4
00003952  10BC 002D 6320          move.b    #45,(A0)
                    6321   ltoa_5:
00003956  2F05      6322          move.l    D5,-(A7)
00003958  2F02      6323          move.l    D2,-(A7)
0000395A  2F04      6324          move.l    D4,-(A7)
0000395C  4EB8 3874 6325          jsr       @itoa_convert
00003960  DEFC 000C 6326          add.w     #12,A7
00003964  2800      6327          move.l    D0,D4
00003966  2044      6328          move.l    D4,A0
00003968  4210      6329          clr.b     (A0)
0000396A  2003      6330          move.l    D3,D0
                    6331   ltoa_4:
0000396C  4CDF 003C 6332          movem.l   (A7)+,D2/D3/D4/D5
00003970  4E5E      6333          unlk      A6
00003972  4E75      6334          rts
                    6335   _ultoa:
00003974  4E56 0000 6336          link      A6,#0
00003978  48E7 3800 6337          movem.l   D2/D3/D4,-(A7)
0000397C  262E 0010 6338          move.l    16(A6),D3
00003980  282E 000C 6339          move.l    12(A6),D4
00003984  2404      6340          move.l    D4,D2
00003986  0C83 0000 6341          cmp.l     #2,D3
0000398A  0002      
0000398C  6D08      6342          blt.s     ultoa_3
0000398E  0C83 0000 6343          cmp.l     #36,D3
00003992  0024      
00003994  6F04      6344          ble.s     ultoa_1
                    6345   ultoa_3:
00003996  2004      6346          move.l    D4,D0
00003998  6018      6347          bra.s     ultoa_4
                    6348   ultoa_1:
0000399A  2F03      6349          move.l    D3,-(A7)
0000399C  2F2E 0008 6350          move.l    8(A6),-(A7)
000039A0  2F02      6351          move.l    D2,-(A7)
000039A2  4EB8 3874 6352          jsr       @itoa_convert
000039A6  DEFC 000C 6353          add.w     #12,A7
000039AA  2400      6354          move.l    D0,D2
000039AC  2042      6355          move.l    D2,A0
000039AE  4210      6356          clr.b     (A0)
000039B0  2004      6357          move.l    D4,D0
                    6358   ultoa_4:
000039B2  4CDF 001C 6359          movem.l   (A7)+,D2/D3/D4
000039B6  4E5E      6360          unlk      A6
000039B8  4E75      6361          rts
                    6362   _itoa:
000039BA  4E56 0000 6363          link      A6,#0
000039BE  2F2E 0010 6364          move.l    16(A6),-(A7)
000039C2  2F2E 000C 6365          move.l    12(A6),-(A7)
000039C6  2F2E 0008 6366          move.l    8(A6),-(A7)
000039CA  4EB8 38F0 6367          jsr       _ltoa
000039CE  DEFC 000C 6368          add.w     #12,A7
000039D2  4E5E      6369          unlk      A6
000039D4  4E75      6370          rts
                    6371   ULMUL:
000039D6  4E56 0000 6372          link    A6,#0
000039DA  48E7 C000 6373          movem.l D0/D1,-(A7)
000039DE  222E 0008 6374          move.l  8(A6),D1
000039E2  202E 000C 6375          move.l  12(A6),D0
000039E6  602C      6376          bra.s   lmul_3
                    6377   LMUL:
000039E8  4E56 0000 6378          link    A6,#0
000039EC  48E7 C000 6379          movem.l D0/D1,-(A7)
000039F0  222E 0008 6380          move.l  8(A6),D1
000039F4  202E 000C 6381          move.l  12(A6),D0
000039F8  4A80      6382          tst.l   D0
000039FA  6A0A      6383          bpl.s   lmul_1
000039FC  4480      6384          neg.l   D0
000039FE  4A81      6385          tst.l   D1
00003A00  6A0A      6386          bpl.s   lmul_2
00003A02  4481      6387          neg.l   D1
00003A04  600E      6388          bra.s   lmul_3
                    6389   lmul_1:
00003A06  4A81      6390          tst.l   D1
00003A08  6A0A      6391          bpl.s   lmul_3
00003A0A  4481      6392          neg.l   D1
                    6393   lmul_2:
00003A0C  6114      6394          bsr.s   domul
00003A0E  4481      6395          neg.l   D1
00003A10  4080      6396          negx.l  D0
00003A12  6002      6397          bra.s   lmul_4
                    6398   lmul_3:
00003A14  610C      6399          bsr.s   domul
                    6400   lmul_4:
00003A16  2D41 0008 6401          move.l  D1,8(A6)
00003A1A  4CDF 0003 6402          movem.l (A7)+,D0/D1
00003A1E  4E5E      6403          unlk    A6
00003A20  4E75      6404          rts
                    6405   domul:
00003A22  0C81 0000 6406          cmpi.l  #$FFFF,D1
00003A26  FFFF      
00003A28  620C      6407          bhi.s   domul_1
00003A2A  0C80 0000 6408          cmpi.l  #$FFFF,D0
00003A2E  FFFF      
00003A30  620E      6409          bhi.s   domul_2
00003A32  C2C0      6410          mulu    D0,D1
00003A34  4E75      6411          rts
                    6412   domul_1:
00003A36  0C80 0000 6413          cmpi.l  #$FFFF,D0
00003A3A  FFFF      
00003A3C  6218      6414          bhi.s   domul_4
00003A3E  6002      6415          bra.s   domul_3
                    6416   domul_2
00003A40  C141      6417          exg     D0,D1
                    6418   domul_3:
00003A42  2F02      6419          move.l  D2,-(A7)
00003A44  2401      6420          move.l  D1,D2
00003A46  4842      6421          swap    D2
00003A48  C2C0      6422          mulu    D0,D1
00003A4A  C4C0      6423          mulu    D0,D2
00003A4C  4842      6424          swap    D2
00003A4E  4242      6425          clr.w   D2
00003A50  D282      6426          add.l   D2,D1
00003A52  241F      6427          move.l  (A7)+,D2
00003A54  4E75      6428          rts
                    6429   domul_4:
00003A56  48E7 3000 6430          movem.l D2/D3,-(A7)
00003A5A  2401      6431          move.l  D1,D2
00003A5C  2601      6432          move.l  D1,D3
00003A5E  C2C0      6433          mulu    D0,D1
00003A60  4842      6434          swap    D2
00003A62  C4C0      6435          mulu    D0,D2
00003A64  4840      6436          swap    D0
00003A66  C6C0      6437          mulu    D0,D3
00003A68  D483      6438          add.l   D3,D2
00003A6A  4842      6439          swap    D2
00003A6C  4242      6440          clr.w   D2
00003A6E  D282      6441          add.l   D2,D1
00003A70  4CDF 000C 6442          movem.l (A7)+,D2/D3
00003A74  4E75      6443          rts
                    6444   _strlen:
00003A76  206F 0004 6445          move.l    (4,A7),A0
00003A7A  2248      6446          move.l    A0,A1
                    6447   strlen_1:
00003A7C  4A19      6448          tst.b     (A1)+
00003A7E  66FC      6449          bne       strlen_1
00003A80  2009      6450          move.l    A1,D0
00003A82  9088      6451          sub.l     A0,D0
00003A84  5380      6452          subq.l    #1,D0
00003A86  4E75      6453          rts
                    6454          section   const
                    6455   
                    6456   @m68kde~1_1:
00003A88  0D0A 00   6457          dc.b      13,10,0
                    6458   @m68kde~1_2:
00003A8C  0D53 7769 6459          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00003A90  7463 6865 
00003A94  7320 5357 
00003A98  5B        
00003A99  372D 305D 6460          dc.b      55,45,48,93,32,61,32,0
00003A9D  203D 2000 
                    6461   @m68kde~1_3:
00003AA2  3000      6462          dc.b      48,0
                    6463   @m68kde~1_4:
00003AA4  3100      6464          dc.b      49,0
                    6465   @m68kde~1_5:
00003AA6  0D0A 4475 6466          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00003AAA  6D70 204D 
00003AAE  656D 6F72 
00003AB2  79        
00003AB3  2042 6C6F 6467          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00003AB7  636B 3A20 
00003ABB  3C45 5343 
00003ABF  3E20      
00003AC1  746F 2041 6468          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00003AC5  626F 7274 
00003AC9  2C20 3C53 
00003ACD  50        
00003ACE  4143 453E 6469          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00003AD2  2074 6F20 
00003AD6  436F 6E74 
00003ADA  69        
00003ADB  6E75 6500 6470          dc.b      110,117,101,0
                    6471   @m68kde~1_6:
00003AE0  0D0A 456E 6472          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00003AE4  7465 7220 
00003AE8  5374 6172 
00003AEC  74        
00003AED  2041 6464 6473          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003AF1  7265 7373 
00003AF5  3A20 00   
                    6474   @m68kde~1_7:
00003AF8  0D0A 2530 6475          dc.b      13,10,37,48,56,120,32,0
00003AFC  3878 2000 
                    6476   @m68kde~1_8:
00003B00  2530 3258 6477          dc.b      37,48,50,88,0
00003B04  00        
                    6478   @m68kde~1_9:
00003B06  2020 00   6479          dc.b      32,32,0
                    6480   @m68kde~1_10:
00003B0A  0D0A 4669 6481          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00003B0E  6C6C 204D 
00003B12  656D 6F72 
00003B16  79        
00003B17  2042 6C6F 6482          dc.b      32,66,108,111,99,107,0
00003B1B  636B 00   
                    6483   @m68kde~1_11:
00003B1E  0D0A 456E 6484          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00003B22  7465 7220 
00003B26  456E 6420 
00003B2A  41        
00003B2B  6464 7265 6485          dc.b      100,100,114,101,115,115,58,32,0
00003B2F  7373 3A20 
00003B33  00        
                    6486   @m68kde~1_12:
00003B34  0D0A 456E 6487          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00003B38  7465 7220 
00003B3C  4669 6C6C 
00003B40  20        
00003B41  4461 7461 6488          dc.b      68,97,116,97,58,32,0
00003B45  3A20 00   
                    6489   @m68kde~1_13:
00003B48  0D0A 4669 6490          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00003B4C  6C6C 696E 
00003B50  6720 4164 
00003B54  64        
00003B55  7265 7373 6491          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00003B59  6573 205B 
00003B5D  2425 3038 
00003B61  58        
00003B62  202D 2024 6492          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00003B66  2530 3858 
00003B6A  5D20 7769 
00003B6E  7468      
00003B70  2024 2530 6493          dc.b      32,36,37,48,50,88,0
00003B74  3258 00   
                    6494   @m68kde~1_14:
00003B78  0D0A 5573 6495          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00003B7C  6520 4879 
00003B80  7065 7254 
00003B84  65        
00003B85  726D 696E 6496          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00003B89  616C 2074 
00003B8D  6F20 5365 
00003B91  6E64 2054 6497          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00003B95  6578 7420 
00003B99  4669 6C65 
00003B9D  2028 2E68 6498          dc.b      32,40,46,104,101,120,41,13,10,0
00003BA1  6578 290D 
00003BA5  0A00      
                    6499   @m68kde~1_15:
00003BA8  0D0A 4C6F 6500          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00003BAC  6164 2046 
00003BB0  6169 6C65 
00003BB4  64        
00003BB5  2061 7420 6501          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00003BB9  4164 6472 
00003BBD  6573 7320 
00003BC1  3D        
00003BC2  205B 2425 6502          dc.b      32,91,36,37,48,56,88,93,13,10,0
00003BC6  3038 585D 
00003BCA  0D0A 00   
                    6503   @m68kde~1_16:
00003BCE  0D0A 5375 6504          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00003BD2  6363 6573 
00003BD6  733A 2044 
00003BDA  6F        
00003BDB  776E 6C6F 6505          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00003BDF  6164 6564 
00003BE3  2025 6420 
00003BE7  6279 7465 6506          dc.b      98,121,116,101,115,13,10,0
00003BEB  730D 0A00 
                    6507   @m68kde~1_17:
00003BF0  0D0A 4578 6508          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00003BF4  616D 696E 
00003BF8  6520 616E 
00003BFC  64        
00003BFD  2043 6861 6509          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00003C01  6E67 6520 
00003C05  4D65 6D6F 
00003C09  72        
00003C0A  7900      6510          dc.b      121,0
                    6511   @m68kde~1_18:
00003C0C  0D0A 3C45 6512          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00003C10  5343 3E20 
00003C14  746F 2053 
00003C18  746F      
00003C1A  702C 203C 6513          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00003C1E  5350 4143 
00003C22  453E 2074 
00003C26  6F20      
00003C28  4164 7661 6514          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00003C2C  6E63 652C 
00003C30  2027 2D27 
00003C34  2074      
00003C36  6F20 476F 6515          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00003C3A  2042 6163 
00003C3E  6B2C 203C 
00003C42  4441      
00003C44  5441 3E20 6516          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00003C48  746F 2063 
00003C4C  6861 6E67 
00003C50  65        
00003C51  00        6517          dc.b      0
                    6518   @m68kde~1_19:
00003C52  0D0A 456E 6519          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00003C56  7465 7220 
00003C5A  4164 6472 
00003C5E  65        
00003C5F  7373 3A20 6520          dc.b      115,115,58,32,0
00003C63  00        
                    6521   @m68kde~1_20:
00003C64  0D0A 5B25 6522          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00003C68  3038 785D 
00003C6C  203A 2025 
00003C70  3032 78   
00003C73  2020 00   6523          dc.b      32,32,0
                    6524   @m68kde~1_21:
00003C76  0D0A 5761 6525          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00003C7A  726E 696E 
00003C7E  6720 4368 
00003C82  61        
00003C83  6E67 6520 6526          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00003C87  4661 696C 
00003C8B  6564 3A20 
00003C8F  57        
00003C90  726F 7465 6527          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00003C94  205B 2530 
00003C98  3278 5D2C 
00003C9C  20        
00003C9D  5265 6164 6528          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00003CA1  205B 2530 
00003CA5  3278 5D00 
                    6529   @m68kde~1_22:
00003CAA  0D0A 5350 6530          dc.b      13,10,83,80,73,32,102,108,97,115,104,32,99,104
00003CAE  4920 666C 
00003CB2  6173 6820 
00003CB6  6368      
00003CB8  6970 2068 6531          dc.b      105,112,32,104,97,115,32,98,101,101,110,32,101
00003CBC  6173 2062 
00003CC0  6565 6E20 
00003CC4  65        
00003CC5  7261 7365 6532          dc.b      114,97,115,101,100,33,0
00003CC9  6421 00   
                    6533   @m68kde~1_23:
00003CCC  0D0A 4572 6534          dc.b      13,10,69,114,97,115,105,110,103,32,83,80,73
00003CD0  6173 696E 
00003CD4  6720 5350 
00003CD8  49        
00003CD9  2066 6C61 6535          dc.b      32,102,108,97,115,104,32,99,104,105,112,46,46
00003CDD  7368 2063 
00003CE1  6869 702E 
00003CE5  2E        
00003CE6  2E2E 00   6536          dc.b      46,46,0
                    6537   @m68kde~1_24:
00003CEA  0D0A 5772 6538          dc.b      13,10,87,114,105,116,105,110,103,32,112,114
00003CEE  6974 696E 
00003CF2  6720 7072 
00003CF6  6F67 7261 6539          dc.b      111,103,114,97,109,32,116,111,32,102,108,97
00003CFA  6D20 746F 
00003CFE  2066 6C61 
00003D02  7368 2063 6540          dc.b      115,104,32,99,104,105,112,46,0
00003D06  6869 702E 
00003D0A  00        
                    6541   @m68kde~1_25:
00003D0C  2E20 00   6542          dc.b      46,32,0
                    6543   @m68kde~1_26:
00003D10  0D0A 5072 6544          dc.b      13,10,80,114,111,103,114,97,109,109,105,110
00003D14  6F67 7261 
00003D18  6D6D 696E 
00003D1C  6720 666C 6545          dc.b      103,32,102,108,97,115,104,32,99,104,105,112
00003D20  6173 6820 
00003D24  6368 6970 
00003D28  2063 6F6D 6546          dc.b      32,99,111,109,112,108,101,116,101,46,0
00003D2C  706C 6574 
00003D30  652E 00   
                    6547   @m68kde~1_27:
00003D34  0D0A 5265 6548          dc.b      13,10,82,101,97,100,105,110,103,32,102,114,111
00003D38  6164 696E 
00003D3C  6720 6672 
00003D40  6F        
00003D41  6D20 666C 6549          dc.b      109,32,102,108,97,115,104,32,99,104,105,112
00003D45  6173 6820 
00003D49  6368 6970 
00003D4D  2E00      6550          dc.b      46,0
                    6551   @m68kde~1_28:
00003D50  0D0A 4552 6552          dc.b      13,10,69,82,82,79,82,58,32,68,97,116,97,32,109
00003D54  524F 523A 
00003D58  2044 6174 
00003D5C  6120 6D   
00003D5F  6973 6D61 6553          dc.b      105,115,109,97,116,99,104,32,102,111,117,110
00003D63  7463 6820 
00003D67  666F 756E 
00003D6B  6420 6174 6554          dc.b      100,32,97,116,32,97,100,100,114,101,115,115
00003D6F  2061 6464 
00003D73  7265 7373 
00003D77  2030 7825 6555          dc.b      32,48,120,37,48,56,120,0
00003D7B  3038 7800 
                    6556   @m68kde~1_29:
00003D80  0D0A 5772 6557          dc.b      13,10,87,114,105,116,101,32,66,117,102,102,101
00003D84  6974 6520 
00003D88  4275 6666 
00003D8C  65        
00003D8D  723A 2030 6558          dc.b      114,58,32,48,120,37,48,56,120,32,32,32,32,32
00003D91  7825 3038 
00003D95  7820 2020 
00003D99  2020      
00003D9B  2052 6561 6559          dc.b      32,82,101,97,100,32,66,117,102,102,101,114,58
00003D9F  6420 4275 
00003DA3  6666 6572 
00003DA7  3A        
00003DA8  2030 7825 6560          dc.b      32,48,120,37,48,56,120,0
00003DAC  3038 7800 
                    6561   @m68kde~1_30:
00003DB0  0D0A 5265 6562          dc.b      13,10,82,101,97,100,105,110,103,32,102,114,111
00003DB4  6164 696E 
00003DB8  6720 6672 
00003DBC  6F        
00003DBD  6D20 666C 6563          dc.b      109,32,102,108,97,115,104,32,99,104,105,112
00003DC1  6173 6820 
00003DC5  6368 6970 
00003DC9  2063 6F6D 6564          dc.b      32,99,111,109,112,108,101,116,101,46,0
00003DCD  706C 6574 
00003DD1  652E 00   
                    6565   @m68kde~1_31:
00003DD4  0D0A 5072 6566          dc.b      13,10,80,114,111,103,114,97,109,109,105,110
00003DD8  6F67 7261 
00003DDC  6D6D 696E 
00003DE0  6720 6368 6567          dc.b      103,32,99,104,105,112,32,83,85,67,67,69,83,83
00003DE4  6970 2053 
00003DE8  5543 4345 
00003DEC  5353      
00003DEE  2E0D 0A00 6568          dc.b      46,13,10,0
                    6569   @m68kde~1_32:
00003DF2  0D0A 5072 6570          dc.b      13,10,80,114,111,103,114,97,109,109,105,110
00003DF6  6F67 7261 
00003DFA  6D6D 696E 
00003DFE  6720 6368 6571          dc.b      103,32,99,104,105,112,32,70,65,73,76,85,82,69
00003E02  6970 2046 
00003E06  4149 4C55 
00003E0A  5245      
00003E0C  2E0D 0A00 6572          dc.b      46,13,10,0
                    6573   @m68kde~1_33:
00003E10  0D0A 4C6F 6574          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00003E14  6164 696E 
00003E18  6720 5072 
00003E1C  6F        
00003E1D  6772 616D 6575          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00003E21  2046 726F 
00003E25  6D20 5350 
00003E29  49        
00003E2A  2046 6C61 6576          dc.b      32,70,108,97,115,104,46,46,46,46,0
00003E2E  7368 2E2E 
00003E32  2E2E 00   
                    6577   @m68kde~1_34:
00003E36  0D0A 4669 6578          dc.b      13,10,70,105,110,105,115,104,101,100,32,108
00003E3A  6E69 7368 
00003E3E  6564 206C 
00003E42  6F61 6469 6579          dc.b      111,97,100,105,110,103,32,112,114,111,103,114
00003E46  6E67 2070 
00003E4A  726F 6772 
00003E4E  616D 2066 6580          dc.b      97,109,32,102,114,111,109,32,83,80,73,32,102
00003E52  726F 6D20 
00003E56  5350 4920 
00003E5A  66        
00003E5B  6C61 7368 6581          dc.b      108,97,115,104,46,0
00003E5F  2E00      
                    6582   @m68kde~1_35:
00003E62  2425 3038 6583          dc.b      36,37,48,56,88,32,32,0
00003E66  5820 2000 
                    6584   @m68kde~1_36:
00003E6A  2000      6585          dc.b      32,0
                    6586   @m68kde~1_37:
00003E6C  2E00      6587          dc.b      46,0
                    6588   @m68kde~1_38:
00003E6E  2563 00   6589          dc.b      37,99,0
                    6590   @m68kde~1_39:
00003E72  00        6591          dc.b      0
                    6592   @m68kde~1_40:
00003E74  0D0A 0D0A 6593          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00003E78  2044 3020 
00003E7C  3D20 2425 
00003E80  3038 58   
00003E83  2020 4130 6594          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00003E87  203D 2024 
00003E8B  2530 3858 
00003E8F  00        
                    6595   @m68kde~1_41:
00003E90  0D0A 2044 6596          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00003E94  3120 3D20 
00003E98  2425 3038 
00003E9C  5820 20   
00003E9F  4131 203D 6597          dc.b      65,49,32,61,32,36,37,48,56,88,0
00003EA3  2024 2530 
00003EA7  3858 00   
                    6598   @m68kde~1_42:
00003EAA  0D0A 2044 6599          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00003EAE  3220 3D20 
00003EB2  2425 3038 
00003EB6  5820 20   
00003EB9  4132 203D 6600          dc.b      65,50,32,61,32,36,37,48,56,88,0
00003EBD  2024 2530 
00003EC1  3858 00   
                    6601   @m68kde~1_43:
00003EC4  0D0A 2044 6602          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00003EC8  3320 3D20 
00003ECC  2425 3038 
00003ED0  5820 20   
00003ED3  4133 203D 6603          dc.b      65,51,32,61,32,36,37,48,56,88,0
00003ED7  2024 2530 
00003EDB  3858 00   
                    6604   @m68kde~1_44:
00003EDE  0D0A 2044 6605          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00003EE2  3420 3D20 
00003EE6  2425 3038 
00003EEA  5820 20   
00003EED  4134 203D 6606          dc.b      65,52,32,61,32,36,37,48,56,88,0
00003EF1  2024 2530 
00003EF5  3858 00   
                    6607   @m68kde~1_45:
00003EF8  0D0A 2044 6608          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00003EFC  3520 3D20 
00003F00  2425 3038 
00003F04  5820 20   
00003F07  4135 203D 6609          dc.b      65,53,32,61,32,36,37,48,56,88,0
00003F0B  2024 2530 
00003F0F  3858 00   
                    6610   @m68kde~1_46:
00003F12  0D0A 2044 6611          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00003F16  3620 3D20 
00003F1A  2425 3038 
00003F1E  5820 20   
00003F21  4136 203D 6612          dc.b      65,54,32,61,32,36,37,48,56,88,0
00003F25  2024 2530 
00003F29  3858 00   
                    6613   @m68kde~1_47:
00003F2C  0D0A 2044 6614          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00003F30  3720 3D20 
00003F34  2425 3038 
00003F38  5820 20   
00003F3B  4137 203D 6615          dc.b      65,55,32,61,32,36,37,48,56,88,0
00003F3F  2024 2530 
00003F43  3858 00   
                    6616   @m68kde~1_48:
00003F46  0D0A 0D0A 6617          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00003F4A  5553 5020 
00003F4E  3D20 2425 
00003F52  3038 58   
00003F55  2020 2841 6618          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00003F59  3729 2055 
00003F5D  7365 7220 
00003F61  5350      
00003F63  00        6619          dc.b      0
                    6620   @m68kde~1_49:
00003F64  0D0A 5353 6621          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00003F68  5020 3D20 
00003F6C  2425 3038 
00003F70  5820 20   
00003F73  2841 3729 6622          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00003F77  2053 7570 
00003F7B  6572 7669 
00003F7F  73        
00003F80  6F72 2053 6623          dc.b      111,114,32,83,80,0
00003F84  5000      
                    6624   @m68kde~1_50:
00003F86  0D0A 2053 6625          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00003F8A  5220 3D20 
00003F8E  2425 3034 
00003F92  5820 20   
00003F95  2000      6626          dc.b      32,0
                    6627   @m68kde~1_51:
00003F98  2020 205B 6628          dc.b      32,32,32,91,0
00003F9C  00        
                    6629   @m68kde~1_52:
00003F9E  0D0A 2050 6630          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00003FA2  4320 3D20 
00003FA6  2425 3038 
00003FAA  5820 20   
00003FAD  00        6631          dc.b      0
                    6632   @m68kde~1_53:
00003FAE  5B40 2042 6633          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00003FB2  5245 414B 
00003FB6  504F 494E 
00003FBA  545D 00   
                    6634   @m68kde~1_54:
00003FBE  0D0A 5750 6635          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00003FC2  2564 203D 
00003FC6  2025 7300 
                    6636   @m68kde~1_55:
00003FCA  0D0A 0D0A 6637          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00003FCE  0D0A 0D0A 
00003FD2  0D0A 0D0A 
00003FD6  5369 6E   
00003FD9  676C 6520 6638          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00003FDD  5374 6570 
00003FE1  2020 3A5B 
00003FE5  4F        
00003FE6  4E5D 00   6639          dc.b      78,93,0
                    6640   @m68kde~1_56:
00003FEA  0D0A 4272 6641          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003FEE  6561 6B20 
00003FF2  506F 696E 
00003FF6  74        
00003FF7  7320 3A5B 6642          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00003FFB  4469 7361 
00003FFF  626C 6564 
00004003  5D        
00004004  00        6643          dc.b      0
                    6644   @m68kde~1_57:
00004006  0D0A 5072 6645          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
0000400A  6573 7320 
0000400E  3C53 5041 
00004012  4345      
00004014  3E20 746F 6646          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00004018  2045 7865 
0000401C  6375 7465 
00004020  20        
00004021  4E65 7874 6647          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004025  2049 6E73 
00004029  7472 7563 
0000402D  7469 6F6E 6648          dc.b      116,105,111,110,0
00004031  00        
                    6649   @m68kde~1_58:
00004032  0D0A 5072 6650          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004036  6573 7320 
0000403A  3C45 5343 
0000403E  3E20      
00004040  746F 2052 6651          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004044  6573 756D 
00004048  6520 5072 
0000404C  6F67 7261 6652          dc.b      111,103,114,97,109,0
00004050  6D00      
                    6653   @m68kde~1_59:
00004052  0D0A 496C 6654          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004056  6C65 6761 
0000405A  6C20 4461 
0000405E  74        
0000405F  6120 5265 6655          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004063  6769 7374 
00004067  6572 203A 
0000406B  20        
0000406C  5573 6520 6656          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004070  4430 2D44 
00004074  372E 2E2E 
00004078  2E2E      
0000407A  0D0A 00   6657          dc.b      13,10,0
                    6658   @m68kde~1_60:
0000407E  0D0A 4425 6659          dc.b      13,10,68,37,99,32,61,32,0
00004082  6320 3D20 
00004086  00        
                    6660   @m68kde~1_61:
00004088  0D0A 496C 6661          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
0000408C  6C65 6761 
00004090  6C20 4164 
00004094  64        
00004095  7265 7373 6662          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004099  2052 6567 
0000409D  6973 7465 
000040A1  7220 3A20 6663          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000040A5  5573 6520 
000040A9  4130 2D41 
000040AD  372E      
000040AF  2E2E 2E2E 6664          dc.b      46,46,46,46,13,10,0
000040B3  0D0A 00   
                    6665   @m68kde~1_62:
000040B6  0D0A 4125 6666          dc.b      13,10,65,37,99,32,61,32,0
000040BA  6320 3D20 
000040BE  00        
                    6667   @m68kde~1_63:
000040C0  0D0A 5573 6668          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
000040C4  6572 2053 
000040C8  5020 3D20 
000040CC  00        
                    6669   @m68kde~1_64:
000040CE  0D0A 496C 6670          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000040D2  6C65 6761 
000040D6  6C20 5265 
000040DA  67        
000040DB  6973 7465 6671          dc.b      105,115,116,101,114,46,46,46,46,0
000040DF  722E 2E2E 
000040E3  2E00      
                    6672   @m68kde~1_65:
000040E6  0D0A 5379 6673          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
000040EA  7374 656D 
000040EE  2053 5020 
000040F2  3D        
000040F3  2000      6674          dc.b      32,0
                    6675   @m68kde~1_66:
000040F6  0D0A 5043 6676          dc.b      13,10,80,67,32,61,32,0
000040FA  203D 2000 
                    6677   @m68kde~1_67:
000040FE  0D0A 5352 6678          dc.b      13,10,83,82,32,61,32,0
00004102  203D 2000 
                    6679   @m68kde~1_68:
00004106  0D0A 496C 6680          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000410A  6C65 6761 
0000410E  6C20 5265 
00004112  67        
00004113  6973 7465 6681          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004117  723A 2055 
0000411B  7365 2041 
0000411F  30        
00004120  2D41 372C 6682          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004124  2044 302D 
00004128  4437 2C20 
0000412C  5353 50   
0000412F  2C20 5553 6683          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004133  502C 2050 
00004137  4320 6F72 
0000413B  2053      
0000413D  520D 0A00 6684          dc.b      82,13,10,0
                    6685   @m68kde~1_69:
00004142  0D0A 0D0A 6686          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004146  4E75 6D20 
0000414A  2020 2020 
0000414E  4164      
00004150  6472 6573 6687          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004154  7320 2020 
00004158  2020 2049 
0000415C  6E        
0000415D  7374 7275 6688          dc.b      115,116,114,117,99,116,105,111,110,0
00004161  6374 696F 
00004165  6E00      
                    6689   @m68kde~1_70:
00004168  0D0A 2D2D 6690          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000416C  2D20 2020 
00004170  2020 2D2D 
00004174  2D2D 2D   
00004177  2D2D 2D2D 6691          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
0000417B  2020 2020 
0000417F  2D2D 2D2D 
00004183  2D2D 2D   
00004186  2D2D 2D2D 6692          dc.b      45,45,45,45,0
0000418A  00        
                    6693   @m68kde~1_71:
0000418C  0D0A 4E6F 6694          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004190  2042 7265 
00004194  616B 506F 
00004198  69        
00004199  6E74 7320 6695          dc.b      110,116,115,32,83,101,116,0
0000419D  5365 7400 
                    6696   @m68kde~1_72:
000041A2  0D0A 2533 6697          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000041A6  6420 2020 
000041AA  2020 2425 
000041AE  3038 78   
000041B1  00        6698          dc.b      0
                    6699   @m68kde~1_73:
000041B2  0D0A 4E75 6700          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000041B6  6D20 2020 
000041BA  2020 4164 
000041BE  6472      
000041C0  6573 7300 6701          dc.b      101,115,115,0
                    6702   @m68kde~1_74:
000041C4  0D0A 2D2D 6703          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000041C8  2D20 2020 
000041CC  2020 2D2D 
000041D0  2D2D 2D   
000041D3  2D2D 2D2D 6704          dc.b      45,45,45,45,0
000041D7  00        
                    6705   @m68kde~1_75:
000041D8  0D0A 4E6F 6706          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000041DC  2057 6174 
000041E0  6368 506F 
000041E4  69        
000041E5  6E74 7320 6707          dc.b      110,116,115,32,83,101,116,0
000041E9  5365 7400 
                    6708   @m68kde~1_76:
000041EE  0D0A 456E 6709          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
000041F2  7465 7220 
000041F6  4272 6561 
000041FA  6B        
000041FB  2050 6F69 6710          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000041FF  6E74 204E 
00004203  756D 6265 
00004207  72        
00004208  3A20 00   6711          dc.b      58,32,0
                    6712   @m68kde~1_77:
0000420C  0D0A 496C 6713          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004210  6C65 6761 
00004214  6C20 5261 
00004218  6E        
00004219  6765 203A 6714          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
0000421D  2055 7365 
00004221  2030 202D 
00004225  2037      
00004227  00        6715          dc.b      0
                    6716   @m68kde~1_78:
00004228  0D0A 4272 6717          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000422C  6561 6B20 
00004230  506F 696E 
00004234  74        
00004235  2043 6C65 6718          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004239  6172 6564 
0000423D  2E2E 2E2E 
00004241  2E        
00004242  0D0A 00   6719          dc.b      13,10,0
                    6720   @m68kde~1_79:
00004246  0D0A 4272 6721          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000424A  6561 6B20 
0000424E  506F 696E 
00004252  74        
00004253  2077 6173 6722          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004257  6E27 7420 
0000425B  5365 742E 
0000425F  2E        
00004260  2E2E 2E00 6723          dc.b      46,46,46,0
                    6724   @m68kde~1_80:
00004264  0D0A 456E 6725          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004268  7465 7220 
0000426C  5761 7463 
00004270  68        
00004271  2050 6F69 6726          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004275  6E74 204E 
00004279  756D 6265 
0000427D  72        
0000427E  3A20 00   6727          dc.b      58,32,0
                    6728   @m68kde~1_81:
00004282  0D0A 5761 6729          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004286  7463 6820 
0000428A  506F 696E 
0000428E  74        
0000428F  2043 6C65 6730          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004293  6172 6564 
00004297  2E2E 2E2E 
0000429B  2E        
0000429C  0D0A 00   6731          dc.b      13,10,0
                    6732   @m68kde~1_82:
000042A0  0D0A 5761 6733          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000042A4  7463 6820 
000042A8  506F 696E 
000042AC  74        
000042AD  2057 6173 6734          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000042B1  206E 6F74 
000042B5  2053 6574 
000042B9  2E        
000042BA  2E2E 2E2E 6735          dc.b      46,46,46,46,0
000042BE  00        
                    6736   @m68kde~1_83:
000042C0  0D0A 4E6F 6737          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000042C4  2046 5245 
000042C8  4520 4272 
000042CC  6561      
000042CE  6B20 506F 6738          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000042D2  696E 7473 
000042D6  2E2E 2E2E 
000042DA  2E        
000042DB  00        6739          dc.b      0
                    6740   @m68kde~1_84:
000042DC  0D0A 4272 6741          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000042E0  6561 6B20 
000042E4  506F 696E 
000042E8  74        
000042E9  2041 6464 6742          dc.b      32,65,100,100,114,101,115,115,58,32,0
000042ED  7265 7373 
000042F1  3A20 00   
                    6743   @m68kde~1_85:
000042F4  0D0A 4572 6744          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000042F8  726F 7220 
000042FC  3A20 4272 
00004300  65        
00004301  616B 2050 6745          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004305  6F69 6E74 
00004309  7320 4341 
0000430D  4E        
0000430E  4E4F 5420 6746          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004312  6265 2073 
00004316  6574 2061 
0000431A  74        
0000431B  204F 4444 6747          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
0000431F  2061 6464 
00004323  7265 7373 
00004327  65        
00004328  7300      6748          dc.b      115,0
                    6749   @m68kde~1_86:
0000432A  0D0A 4572 6750          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000432E  726F 7220 
00004332  3A20 4272 
00004336  65        
00004337  616B 2050 6751          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000433B  6F69 6E74 
0000433F  7320 4341 
00004343  4E        
00004344  4E4F 5420 6752          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004348  6265 2073 
0000434C  6574 2066 
00004350  6F        
00004351  7220 524F 6753          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004355  4D20 696E 
00004359  2052 616E 
0000435D  67        
0000435E  6520 3A20 6754          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004362  5B24 302D 
00004366  2430 3030 
0000436A  3037 46   
0000436D  4646 5D00 6755          dc.b      70,70,93,0
                    6756   @m68kde~1_87:
00004372  0D0A 4572 6757          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004376  726F 723A 
0000437A  2042 7265 
0000437E  61        
0000437F  6B20 506F 6758          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004383  696E 7420 
00004387  416C 7265 
0000438B  6164 7920 6759          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
0000438F  4578 6973 
00004393  7473 2061 
00004397  74        
00004398  2041 6464 6760          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
0000439C  7265 7373 
000043A0  203A 2025 
000043A4  30        
000043A5  3878 0D0A 6761          dc.b      56,120,13,10,0
000043A9  00        
                    6762   @m68kde~1_88:
000043AA  0D0A 4272 6763          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000043AE  6561 6B20 
000043B2  506F 696E 
000043B6  74        
000043B7  2053 6574 6764          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000043BB  2061 7420 
000043BF  4164 6472 
000043C3  65        
000043C4  7373 3A20 6765          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000043C8  5B24 2530 
000043CC  3878 5D00 
                    6766   @m68kde~1_89:
000043D0  0D0A 4E6F 6767          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
000043D4  2046 5245 
000043D8  4520 5761 
000043DC  7463      
000043DE  6820 506F 6768          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
000043E2  696E 7473 
000043E6  2E2E 2E2E 
000043EA  2E        
000043EB  00        6769          dc.b      0
                    6770   @m68kde~1_90:
000043EC  0D0A 5761 6771          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000043F0  7463 6820 
000043F4  506F 696E 
000043F8  74        
000043F9  2041 6464 6772          dc.b      32,65,100,100,114,101,115,115,58,32,0
000043FD  7265 7373 
00004401  3A20 00   
                    6773   @m68kde~1_91:
00004404  0D0A 4572 6774          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004408  726F 723A 
0000440C  2057 6174 
00004410  63        
00004411  6820 506F 6775          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004415  696E 7420 
00004419  416C 7265 
0000441D  6164 7920 6776          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004421  5365 7420 
00004425  6174 2041 
00004429  64        
0000442A  6472 6573 6777          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
0000442E  7320 3A20 
00004432  2530 3878 
00004436  0D        
00004437  0A00      6778          dc.b      10,0
                    6779   @m68kde~1_92:
0000443A  0D0A 5761 6780          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000443E  7463 6820 
00004442  506F 696E 
00004446  74        
00004447  2053 6574 6781          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
0000444B  2061 7420 
0000444F  4164 6472 
00004453  65        
00004454  7373 3A20 6782          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004458  5B24 2530 
0000445C  3878 5D00 
                    6783   @m68kde~1_93:
00004460  0D0A 0D0A 6784          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004464  0D0A 0D0A 
00004468  4042 5245 
0000446C  414B 50   
0000446F  4F49 4E54 6785          dc.b      79,73,78,84,0
00004473  00        
                    6786   @m68kde~1_94:
00004474  0D0A 5369 6787          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004478  6E67 6C65 
0000447C  2053 7465 
00004480  70        
00004481  203A 205B 6788          dc.b      32,58,32,91,79,78,93,0
00004485  4F4E 5D00 
                    6789   @m68kde~1_95:
0000448A  0D0A 4272 6790          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
0000448E  6561 6B50 
00004492  6F69 6E74 
00004496  73        
00004497  203A 205B 6791          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
0000449B  456E 6162 
0000449F  6C65 645D 
000044A3  00        
                    6792   @m68kde~1_96:
000044A4  0D0A 5072 6793          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000044A8  6573 7320 
000044AC  3C45 5343 
000044B0  3E20      
000044B2  746F 2052 6794          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000044B6  6573 756D 
000044BA  6520 5573 
000044BE  6572 2050 6795          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
000044C2  726F 6772 
000044C6  616D 0D0A 
000044CA  00        
                    6796   @m68kde~1_97:
000044CC  0D0A 556E 6797          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
000044D0  6B6E 6F77 
000044D4  6E20 436F 
000044D8  6D        
000044D9  6D61 6E64 6798          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
000044DD  2E2E 2E2E 
000044E1  2E0D 0A00 
                    6799   @m68kde~1_98:
000044E6  0D0A 5072 6800          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
000044EA  6F67 7261 
000044EE  6D20 456E 
000044F2  64        
000044F3  6564 2028 6801          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
000044F7  5452 4150 
000044FB  2023 3135 
000044FF  292E      
00004501  2E2E 2E00 6802          dc.b      46,46,46,0
                    6803   @m68kde~1_99:
00004506  0D0A 4B69 6804          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
0000450A  6C6C 2041 
0000450E  6C6C 2042 
00004512  72        
00004513  6561 6B20 6805          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004517  506F 696E 
0000451B  7473 2E2E 
0000451F  2E        
00004520  2879 2F6E 6806          dc.b      40,121,47,110,41,63,0
00004524  293F 00   
                    6807   @m68kde~1_100:
00004528  0D0A 4B69 6808          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
0000452C  6C6C 2041 
00004530  6C6C 2057 
00004534  61        
00004535  7463 6820 6809          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004539  506F 696E 
0000453D  7473 2E2E 
00004541  2E        
00004542  2879 2F6E 6810          dc.b      40,121,47,110,41,63,0
00004546  293F 00   
                    6811   @m68kde~1_101:
0000454A  0D0A 2D2D 6812          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
0000454E  2D2D 2D2D 
00004552  2D2D 2D2D 
00004556  2D2D 2D   
00004559  2D2D 2D2D 6813          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000455D  2D2D 2D2D 
00004561  2D2D 2D2D 
00004565  2D2D 2D   
00004568  2D2D 2D2D 6814          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000456C  2D2D 2D2D 
00004570  2D2D 2D2D 
00004574  2D2D 2D   
00004577  2D2D 2D2D 6815          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000457B  2D2D 2D2D 
0000457F  2D2D 2D2D 
00004583  2D2D 2D   
00004586  2D2D 2D2D 6816          dc.b      45,45,45,45,45,45,0
0000458A  2D2D 00   
                    6817   @m68kde~1_102:
0000458E  0D0A 2020 6818          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004592  4465 6275 
00004596  6767 6572 
0000459A  20        
0000459B  436F 6D6D 6819          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
0000459F  616E 6420 
000045A3  5375 6D6D 
000045A7  6172 7900 6820          dc.b      97,114,121,0
                    6821   @m68kde~1_103:
000045AC  0D0A 2020 6822          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
000045B0  2E28 7265 
000045B4  6729 2020 
000045B8  2020      
000045BA  2020 202D 6823          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
000045BE  2043 6861 
000045C2  6E67 6520 
000045C6  5265      
000045C8  6769 7374 6824          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
000045CC  6572 733A 
000045D0  2065 2E67 
000045D4  2041 302D 6825          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
000045D8  4137 2C44 
000045DC  302D 4437 
000045E0  2C50 43   
000045E3  2C53 5350 6826          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
000045E7  2C55 5350 
000045EB  2C53 5200 
                    6827   @m68kde~1_104:
000045F0  0D0A 2020 6828          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
000045F4  4244 2F42 
000045F8  532F 4243 
000045FC  2F42 4B   
000045FF  2020 2D20 6829          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004603  4272 6561 
00004607  6B20 506F 
0000460B  69        
0000460C  6E74 3A20 6830          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004610  4469 7370 
00004614  6C61 792F 
00004618  53        
00004619  6574 2F43 6831          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
0000461D  6C65 6172 
00004621  2F4B 696C 
00004625  6C        
00004626  00        6832          dc.b      0
                    6833   @m68kde~1_105:
00004628  0D0A 2020 6834          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
0000462C  4320 2020 
00004630  2020 2020 
00004634  2020 20   
00004637  2020 2D20 6835          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
0000463B  436F 7079 
0000463F  2050 726F 
00004643  67        
00004644  7261 6D20 6836          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004648  6672 6F6D 
0000464C  2046 6C61 
00004650  73        
00004651  6820 746F 6837          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00004655  204D 6169 
00004659  6E20 4D65 
0000465D  6D        
0000465E  6F72 7900 6838          dc.b      111,114,121,0
                    6839   @m68kde~1_106:
00004662  0D0A 2020 6840          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004666  4420 2020 
0000466A  2020 2020 
0000466E  2020 20   
00004671  2020 2D20 6841          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004675  4475 6D70 
00004679  204D 656D 
0000467D  6F        
0000467E  7279 2043 6842          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00004682  6F6E 7465 
00004686  6E74 7320 
0000468A  746F 2053 6843          dc.b      116,111,32,83,99,114,101,101,110,0
0000468E  6372 6565 
00004692  6E00      
                    6844   @m68kde~1_107:
00004694  0D0A 2020 6845          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00004698  4520 2020 
0000469C  2020 2020 
000046A0  2020 20   
000046A3  2020 2D20 6846          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
000046A7  456E 7465 
000046AB  7220 5374 
000046AF  72        
000046B0  696E 6720 6847          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
000046B4  696E 746F 
000046B8  204D 656D 
000046BC  6F72 7900 6848          dc.b      111,114,121,0
                    6849   @m68kde~1_108:
000046C0  0D0A 2020 6850          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
000046C4  4620 2020 
000046C8  2020 2020 
000046CC  2020 20   
000046CF  2020 2D20 6851          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
000046D3  4669 6C6C 
000046D7  204D 656D 
000046DB  6F        
000046DC  7279 2077 6852          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
000046E0  6974 6820 
000046E4  4461 7461 
000046E8  00        
                    6853   @m68kde~1_109:
000046EA  0D0A 2020 6854          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
000046EE  4720 2020 
000046F2  2020 2020 
000046F6  2020 20   
000046F9  2020 2D20 6855          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
000046FD  476F 2050 
00004701  726F 6772 
00004705  61        
00004706  6D20 5374 6856          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
0000470A  6172 7469 
0000470E  6E67 2061 
00004712  74        
00004713  2041 6464 6857          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00004717  7265 7373 
0000471B  3A20 2425 
0000471F  30        
00004720  3858 00   6858          dc.b      56,88,0
                    6859   @m68kde~1_110:
00004724  0D0A 2020 6860          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004728  4C20 2020 
0000472C  2020 2020 
00004730  2020 20   
00004733  2020 2D20 6861          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004737  4C6F 6164 
0000473B  2050 726F 
0000473F  67        
00004740  7261 6D20 6862          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004744  282E 4845 
00004748  5820 6669 
0000474C  6C        
0000474D  6529 2066 6863          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00004751  726F 6D20 
00004755  4C61 7074 
00004759  6F        
0000475A  7000      6864          dc.b      112,0
                    6865   @m68kde~1_111:
0000475C  0D0A 2020 6866          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00004760  4D20 2020 
00004764  2020 2020 
00004768  2020 20   
0000476B  2020 2D20 6867          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
0000476F  4D65 6D6F 
00004773  7279 2045 
00004777  78        
00004778  616D 696E 6868          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
0000477C  6520 616E 
00004780  6420 4368 
00004784  61        
00004785  6E67 6500 6869          dc.b      110,103,101,0
                    6870   @m68kde~1_112:
0000478A  0D0A 2020 6871          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
0000478E  5020 2020 
00004792  2020 2020 
00004796  2020 20   
00004799  2020 2D20 6872          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
0000479D  5072 6F67 
000047A1  7261 6D20 
000047A5  46        
000047A6  6C61 7368 6873          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
000047AA  204D 656D 
000047AE  6F72 7920 
000047B2  7769 7468 6874          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
000047B6  2055 7365 
000047BA  7220 5072 
000047BE  6F67 7261 6875          dc.b      111,103,114,97,109,0
000047C2  6D00      
                    6876   @m68kde~1_113:
000047C4  0D0A 2020 6877          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
000047C8  5220 2020 
000047CC  2020 2020 
000047D0  2020 20   
000047D3  2020 2D20 6878          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
000047D7  4469 7370 
000047DB  6C61 7920 
000047DF  36        
000047E0  3830 3030 6879          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
000047E4  2052 6567 
000047E8  6973 7465 
000047EC  72        
000047ED  7300      6880          dc.b      115,0
                    6881   @m68kde~1_114:
000047F0  0D0A 2020 6882          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
000047F4  5320 2020 
000047F8  2020 2020 
000047FC  2020 20   
000047FF  2020 2D20 6883          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00004803  546F 6767 
00004807  6C65 204F 
0000480B  4E        
0000480C  2F4F 4646 6884          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00004810  2053 696E 
00004814  676C 6520 
00004818  53        
00004819  7465 7020 6885          dc.b      116,101,112,32,77,111,100,101,0
0000481D  4D6F 6465 
00004821  00        
                    6886   @m68kde~1_115:
00004822  0D0A 2020 6887          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004826  544D 2020 
0000482A  2020 2020 
0000482E  2020 20   
00004831  2020 2D20 6888          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004835  5465 7374 
00004839  204D 656D 
0000483D  6F        
0000483E  7279 00   6889          dc.b      114,121,0
                    6890   @m68kde~1_116:
00004842  0D0A 2020 6891          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004846  5453 2020 
0000484A  2020 2020 
0000484E  2020 20   
00004851  2020 2D20 6892          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004855  5465 7374 
00004859  2053 7769 
0000485D  74        
0000485E  6368 6573 6893          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004862  3A20 5357 
00004866  372D 3000 
                    6894   @m68kde~1_117:
0000486A  0D0A 2020 6895          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
0000486E  5444 2020 
00004872  2020 2020 
00004876  2020 20   
00004879  2020 2D20 6896          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
0000487D  5465 7374 
00004881  2044 6973 
00004885  70        
00004886  6C61 7973 6897          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
0000488A  3A20 4C45 
0000488E  4473 2061 
00004892  6E        
00004893  6420 372D 6898          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004897  5365 676D 
0000489B  656E 7400 
                    6899   @m68kde~1_118:
000048A0  0D0A 2020 6900          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
000048A4  5744 2F57 
000048A8  532F 5743 
000048AC  2F57 4B   
000048AF  2020 2D20 6901          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
000048B3  5761 7463 
000048B7  6820 506F 
000048BB  696E      
000048BD  743A 2044 6902          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
000048C1  6973 706C 
000048C5  6179 2F53 
000048C9  65        
000048CA  742F 436C 6903          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
000048CE  6561 722F 
000048D2  4B69 6C6C 
000048D6  00        
                    6904   @m68kde~1_119:
000048D8  0D0A 2300 6905          dc.b      13,10,35,0
                    6906   @m68kde~1_120:
000048DC  0D0A 5072 6907          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
000048E0  6F67 7261 
000048E4  6D20 5275 
000048E8  6E        
000048E9  6E69 6E67 6908          dc.b      110,105,110,103,46,46,46,46,46,0
000048ED  2E2E 2E2E 
000048F1  2E00      
                    6909   @m68kde~1_121:
000048F4  0D0A 5072 6910          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
000048F8  6573 7320 
000048FC  3C52 4553 
00004900  4554      
00004902  3E20 6275 6911          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00004906  7474 6F6E 
0000490A  203C 4B65 
0000490E  79        
0000490F  303E 206F 6912          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00004913  6E20 4445 
00004917  3120 746F 
0000491B  2073      
0000491D  746F 7000 6913          dc.b      116,111,112,0
                    6914   @m68kde~1_122:
00004922  0D0A 4572 6915          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00004926  726F 723A 
0000492A  2050 7265 
0000492E  73        
0000492F  7320 2747 6916          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00004933  2720 6669 
00004937  7273 7420 
0000493B  74        
0000493C  6F20 7374 6917          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00004940  6172 7420 
00004944  7072 6F67 
00004948  7261 6D00 6918          dc.b      114,97,109,0
                    6919   @m68kde~1_123:
0000494C  0D0A 5369 6920          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004950  6E67 6C65 
00004954  2053 7465 
00004958  70        
00004959  2020 3A5B 6921          dc.b      32,32,58,91,79,78,93,0
0000495D  4F4E 5D00 
                    6922   @m68kde~1_124:
00004962  0D0A 5072 6923          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00004966  6573 7320 
0000496A  2747 2720 
0000496E  74        
0000496F  6F20 5472 6924          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00004973  6163 6520 
00004977  5072 6F67 
0000497B  72        
0000497C  616D 2066 6925          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00004980  726F 6D20 
00004984  6164 6472 
00004988  6573 7320 6926          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
0000498C  2425 582E 
00004990  2E2E 2E2E 
00004994  00        
                    6927   @m68kde~1_125:
00004996  0D0A 5075 6928          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
0000499A  7368 203C 
0000499E  5245 5345 
000049A2  5420      
000049A4  4275 7474 6929          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
000049A8  6F6E 3E20 
000049AC  746F 2053 
000049B0  74        
000049B1  6F70 2E2E 6930          dc.b      111,112,46,46,46,46,46,0
000049B5  2E2E 2E00 
                    6931   @m68kde~1_126:
000049BA  0D0A 5369 6932          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000049BE  6E67 6C65 
000049C2  2053 7465 
000049C6  70        
000049C7  203A 205B 6933          dc.b      32,58,32,91,79,70,70,93,0
000049CB  4F46 465D 
000049CF  00        
                    6934   @m68kde~1_127:
000049D0  0D0A 4272 6935          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000049D4  6561 6B20 
000049D8  506F 696E 
000049DC  74        
000049DD  7320 3A5B 6936          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
000049E1  456E 6162 
000049E5  6C65 645D 
000049E9  00        
                    6937   @m68kde~1_128:
000049EA  0D0A 5072 6938          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000049EE  6573 7320 
000049F2  3C45 5343 
000049F6  3E20      
000049F8  746F 2052 6939          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000049FC  6573 756D 
00004A00  6520 5573 
00004A04  6572 2050 6940          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00004A08  726F 6772 
00004A0C  616D 2E2E 
00004A10  2E        
00004A11  2E2E 00   6941          dc.b      46,46,0
                    6942   @m68kde~1_129:
00004A14  0D0A 5369 6943          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004A18  6E67 6C65 
00004A1C  2053 7465 
00004A20  70        
00004A21  2020 3A5B 6944          dc.b      32,32,58,91,79,70,70,93,0
00004A25  4F46 465D 
00004A29  00        
                    6945   @m68kde~1_130:
00004A2A  0D0A 0D0A 6946          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004A2E  5072 6F67 
00004A32  7261 6D20 
00004A36  41        
00004A37  424F 5254 6947          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004A3B  2021 2121 
00004A3F  2121 210D 
00004A43  0A00      
                    6948   @m68kde~1_131:
00004A46  2573 0D0A 6949          dc.b      37,115,13,10,0
00004A4A  00        
                    6950   @m68kde~1_132:
00004A4C  0D0A 0D0A 6951          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004A50  5072 6F67 
00004A54  7261 6D20 
00004A58  41        
00004A59  424F 5254 6952          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004A5D  2021 2121 
00004A61  2121 00   
                    6953   @m68kde~1_133:
00004A64  0D0A 556E 6954          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004A68  6861 6E64 
00004A6C  6C65 6420 
00004A70  49        
00004A71  6E74 6572 6955          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004A75  7275 7074 
00004A79  3A20 4952 
00004A7D  5125 6420 6956          dc.b      81,37,100,32,33,33,33,33,33,0
00004A81  2121 2121 
00004A85  2100      
                    6957   @m68kde~1_134:
00004A88  4144 4452 6958          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004A8C  4553 5320 
00004A90  4552 524F 
00004A94  523A 20   
00004A97  3136 206F 6959          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004A9B  7220 3332 
00004A9F  2042 6974 
00004AA3  2054      
00004AA5  7261 6E73 6960          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004AA9  6665 7220 
00004AAD  746F 2F66 
00004AB1  726F 6D20 6961          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004AB5  616E 204F 
00004AB9  4444 2041 
00004ABD  64        
00004ABE  6472 6573 6962          dc.b      100,114,101,115,115,46,46,46,46,0
00004AC2  732E 2E2E 
00004AC6  2E00      
                    6963   @m68kde~1_135:
00004AC8  556E 6861 6964          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004ACC  6E64 6C65 
00004AD0  6420 5472 
00004AD4  6170 2021 6965          dc.b      97,112,32,33,33,33,33,33,0
00004AD8  2121 2121 
00004ADC  00        
                    6966   @m68kde~1_136:
00004ADE  4255 5320 6967          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004AE2  4572 726F 
00004AE6  7221 00   
                    6968   @m68kde~1_137:
00004AEA  4144 4452 6969          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004AEE  4553 5320 
00004AF2  4572 726F 
00004AF6  7221      
00004AF8  00        6970          dc.b      0
                    6971   @m68kde~1_138:
00004AFA  494C 4C45 6972          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004AFE  4741 4C20 
00004B02  494E 5354 
00004B06  5255 43   
00004B09  5449 4F4E 6973          dc.b      84,73,79,78,0
00004B0D  00        
                    6974   @m68kde~1_139:
00004B0E  4449 5649 6975          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004B12  4445 2042 
00004B16  5920 5A45 
00004B1A  524F 00   
                    6976   @m68kde~1_140:
00004B1E  2743 484B 6977          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004B22  2720 494E 
00004B26  5354 5255 
00004B2A  4354 49   
00004B2D  4F4E 00   6978          dc.b      79,78,0
                    6979   @m68kde~1_141:
00004B30  5452 4150 6980          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004B34  5620 494E 
00004B38  5354 5255 
00004B3C  4354 49   
00004B3F  4F4E 00   6981          dc.b      79,78,0
                    6982   @m68kde~1_142:
00004B42  5052 4956 6983          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004B46  494C 4547 
00004B4A  4520 5649 
00004B4E  4F4C 41   
00004B51  5449 4F4E 6984          dc.b      84,73,79,78,0
00004B55  00        
                    6985   @m68kde~1_143:
00004B56  554E 494E 6986          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004B5A  4954 4941 
00004B5E  4C49 5345 
00004B62  4420 49   
00004B65  5251 00   6987          dc.b      82,81,0
                    6988   @m68kde~1_144:
00004B68  5350 5552 6989          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004B6C  494F 5553 
00004B70  2049 5251 
00004B74  00        
                    6990   @m68kde~1_145:
00004B76  0D0A 5374 6991          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004B7A  6172 7420 
00004B7E  4164 6472 
00004B82  65        
00004B83  7373 2069 6992          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00004B87  6E20 4D65 
00004B8B  6D6F 7279 
00004B8F  3A20 00   6993          dc.b      58,32,0
                    6994   @m68kde~1_146:
00004B92  0D0A 456E 6995          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00004B96  7465 7220 
00004B9A  5374 7269 
00004B9E  6E        
00004B9F  6720 2845 6996          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00004BA3  5343 2074 
00004BA7  6F20 656E 
00004BAB  64        
00004BAC  2920 3A00 6997          dc.b      41,32,58,0
                    6998   @m68kde~1_147:
00004BB0  0D0A 506C 6999          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00004BB4  6561 7365 
00004BB8  2065 6E74 
00004BBC  65        
00004BBD  7220 6120 7000          dc.b      114,32,97,32,110,117,109,98,101,114,32,116,111
00004BC1  6E75 6D62 
00004BC5  6572 2074 
00004BC9  6F        
00004BCA  2063 686F 7001          dc.b      32,99,104,111,111,115,101,32,111,110,101,32
00004BCE  6F73 6520 
00004BD2  6F6E 6520 
00004BD6  6F66 2074 7002          dc.b      111,102,32,116,104,101,32,102,111,108,108,111
00004BDA  6865 2066 
00004BDE  6F6C 6C6F 
00004BE2  7769 6E67 7003          dc.b      119,105,110,103,32,116,101,115,116,32,111,112
00004BE6  2074 6573 
00004BEA  7420 6F70 
00004BEE  7469 6F6E 7004          dc.b      116,105,111,110,115,58,13,10,49,32,45,32,66
00004BF2  733A 0D0A 
00004BF6  3120 2D20 
00004BFA  42        
00004BFB  7974 6573 7005          dc.b      121,116,101,115,13,10,50,32,45,32,87,111,114
00004BFF  0D0A 3220 
00004C03  2D20 576F 
00004C07  72        
00004C08  6473 0D0A 7006          dc.b      100,115,13,10,51,32,45,32,76,111,110,103,32
00004C0C  3320 2D20 
00004C10  4C6F 6E67 
00004C14  20        
00004C15  576F 7264 7007          dc.b      87,111,114,100,115,13,10,0
00004C19  730D 0A00 
                    7008   @m68kde~1_148:
00004C1E  0D0A 496E 7009          dc.b      13,10,73,110,118,97,108,105,100,32,83,101,108
00004C22  7661 6C69 
00004C26  6420 5365 
00004C2A  6C        
00004C2B  6563 7469 7010          dc.b      101,99,116,105,111,110,13,10,0
00004C2F  6F6E 0D0A 
00004C33  00        
                    7011   @m68kde~1_149:
00004C34  0D0A 596F 7012          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00004C38  7520 6861 
00004C3C  7665 2073 
00004C40  65        
00004C41  6C65 6374 7013          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00004C45  6564 2074 
00004C49  6573 7420 
00004C4D  6F70 7469 7014          dc.b      111,112,116,105,111,110,32,66,89,84,69,83,13
00004C51  6F6E 2042 
00004C55  5954 4553 
00004C59  0D        
00004C5A  0A00      7015          dc.b      10,0
                    7016   @m68kde~1_150:
00004C5C  0D0A 596F 7017          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00004C60  7520 6861 
00004C64  7665 2073 
00004C68  65        
00004C69  6C65 6374 7018          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00004C6D  6564 2074 
00004C71  6573 7420 
00004C75  6F70 7469 7019          dc.b      111,112,116,105,111,110,32,87,79,82,68,83,13
00004C79  6F6E 2057 
00004C7D  4F52 4453 
00004C81  0D        
00004C82  0A00      7020          dc.b      10,0
                    7021   @m68kde~1_151:
00004C84  0D0A 596F 7022          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00004C88  7520 6861 
00004C8C  7665 2073 
00004C90  65        
00004C91  6C65 6374 7023          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00004C95  6564 2074 
00004C99  6573 7420 
00004C9D  6F70 7469 7024          dc.b      111,112,116,105,111,110,32,76,79,78,71,32,87
00004CA1  6F6E 204C 
00004CA5  4F4E 4720 
00004CA9  57        
00004CAA  4F52 4453 7025          dc.b      79,82,68,83,13,10,0
00004CAE  0D0A 00   
                    7026   @m68kde~1_152:
00004CB2  0D0A 4578 7027          dc.b      13,10,69,120,99,101,112,116,105,111,110,32,45
00004CB6  6365 7074 
00004CBA  696F 6E20 
00004CBE  2D        
00004CBF  2069 6E76 7028          dc.b      32,105,110,118,97,108,105,100,32,116,101,115
00004CC3  616C 6964 
00004CC7  2074 6573 
00004CCB  7420 6F70 7029          dc.b      116,32,111,112,116,105,111,110,13,10,0
00004CCF  7469 6F6E 
00004CD3  0D0A 00   
                    7030   @m68kde~1_153:
00004CD6  0D0A 506C 7031          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00004CDA  6561 7365 
00004CDE  2065 6E74 
00004CE2  65        
00004CE3  7220 6120 7032          dc.b      114,32,97,32,110,117,109,98,101,114,32,116,111
00004CE7  6E75 6D62 
00004CEB  6572 2074 
00004CEF  6F        
00004CF0  2063 686F 7033          dc.b      32,99,104,111,111,115,101,32,111,110,101,32
00004CF4  6F73 6520 
00004CF8  6F6E 6520 
00004CFC  6F66 2074 7034          dc.b      111,102,32,116,104,101,32,102,111,108,108,111
00004D00  6865 2066 
00004D04  6F6C 6C6F 
00004D08  7769 6E67 7035          dc.b      119,105,110,103,32,116,101,115,116,32,112,97
00004D0C  2074 6573 
00004D10  7420 7061 
00004D14  7474 6572 7036          dc.b      116,116,101,114,110,115,58,13,10,49,32,45,32
00004D18  6E73 3A0D 
00004D1C  0A31 202D 
00004D20  20        
00004D21  3535 0D0A 7037          dc.b      53,53,13,10,50,32,45,32,65,65,13,10,51,32,45
00004D25  3220 2D20 
00004D29  4141 0D0A 
00004D2D  3320 2D   
00004D30  2046 460D 7038          dc.b      32,70,70,13,10,52,32,45,32,48,48,13,10,0
00004D34  0A34 202D 
00004D38  2030 300D 
00004D3C  0A00      
                    7039   @m68kde~1_154:
00004D3E  0D0A 596F 7040          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00004D42  7520 6861 
00004D46  7665 2073 
00004D4A  65        
00004D4B  6C65 6374 7041          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00004D4F  6564 2074 
00004D53  6573 7420 
00004D57  7061 7474 7042          dc.b      112,97,116,116,101,114,110,32,53,53,13,10,0
00004D5B  6572 6E20 
00004D5F  3535 0D0A 
00004D63  00        
                    7043   @m68kde~1_155:
00004D64  0D0A 596F 7044          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00004D68  7520 6861 
00004D6C  7665 2073 
00004D70  65        
00004D71  6C65 6374 7045          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00004D75  6564 2074 
00004D79  6573 7420 
00004D7D  7061 7474 7046          dc.b      112,97,116,116,101,114,110,32,65,65,13,10,0
00004D81  6572 6E20 
00004D85  4141 0D0A 
00004D89  00        
                    7047   @m68kde~1_156:
00004D8A  0D0A 596F 7048          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00004D8E  7520 6861 
00004D92  7665 2073 
00004D96  65        
00004D97  6C65 6374 7049          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00004D9B  6564 2074 
00004D9F  6573 7420 
00004DA3  7061 7474 7050          dc.b      112,97,116,116,101,114,110,32,70,70,13,10,0
00004DA7  6572 6E20 
00004DAB  4646 0D0A 
00004DAF  00        
                    7051   @m68kde~1_157:
00004DB0  0D0A 596F 7052          dc.b      13,10,89,111,117,32,104,97,118,101,32,115,101
00004DB4  7520 6861 
00004DB8  7665 2073 
00004DBC  65        
00004DBD  6C65 6374 7053          dc.b      108,101,99,116,101,100,32,116,101,115,116,32
00004DC1  6564 2074 
00004DC5  6573 7420 
00004DC9  7061 7474 7054          dc.b      112,97,116,116,101,114,110,32,48,48,13,10,0
00004DCD  6572 6E20 
00004DD1  3030 0D0A 
00004DD5  00        
                    7055   @m68kde~1_158:
00004DD6  0D0A 4578 7056          dc.b      13,10,69,120,99,101,112,116,105,111,110,32,45
00004DDA  6365 7074 
00004DDE  696F 6E20 
00004DE2  2D        
00004DE3  2069 6E76 7057          dc.b      32,105,110,118,97,108,105,100,32,116,101,115
00004DE7  616C 6964 
00004DEB  2074 6573 
00004DEF  7420 7061 7058          dc.b      116,32,112,97,116,116,101,114,110,13,10,0
00004DF3  7474 6572 
00004DF7  6E0D 0A00 
                    7059   @m68kde~1_159:
00004DFC  0D0A 4578 7060          dc.b      13,10,69,120,99,101,112,116,105,111,110,32,45
00004E00  6365 7074 
00004E04  696F 6E20 
00004E08  2D        
00004E09  2063 6F75 7061          dc.b      32,99,111,117,108,100,32,110,111,116,32,103
00004E0D  6C64 206E 
00004E11  6F74 2067 
00004E15  656E 6572 7062          dc.b      101,110,101,114,97,116,101,32,119,114,105,116
00004E19  6174 6520 
00004E1D  7772 6974 
00004E21  655F 6461 7063          dc.b      101,95,100,97,116,97,13,10,0
00004E25  7461 0D0A 
00004E29  00        
                    7064   @m68kde~1_160:
00004E2A  0D0A 506C 7065          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00004E2E  6561 7365 
00004E32  2065 6E74 
00004E36  65        
00004E37  7220 6120 7066          dc.b      114,32,97,32,115,116,97,114,116,105,110,103
00004E3B  7374 6172 
00004E3F  7469 6E67 
00004E43  2061 6464 7067          dc.b      32,97,100,100,114,101,115,115,32,102,114,111
00004E47  7265 7373 
00004E4B  2066 726F 
00004E4F  6D20 3039 7068          dc.b      109,32,48,57,48,48,95,48,48,48,48,32,116,111
00004E53  3030 5F30 
00004E57  3030 3020 
00004E5B  746F      
00004E5D  2030 3937 7069          dc.b      32,48,57,55,102,95,102,102,102,102,13,10,0
00004E61  665F 6666 
00004E65  6666 0D0A 
00004E69  00        
                    7070   @m68kde~1_161:
00004E6A  0D0A 5374 7071          dc.b      13,10,83,116,97,114,116,32,97,100,100,114,101
00004E6E  6172 7420 
00004E72  6164 6472 
00004E76  65        
00004E77  7373 2069 7072          dc.b      115,115,32,105,115,32,105,110,118,97,108,105
00004E7B  7320 696E 
00004E7F  7661 6C69 
00004E83  640D 0A00 7073          dc.b      100,13,10,0
                    7074   @m68kde~1_162:
00004E88  0D0A 466F 7075          dc.b      13,10,70,111,114,32,119,111,114,100,115,32,111
00004E8C  7220 776F 
00004E90  7264 7320 
00004E94  6F        
00004E95  7220 6C6F 7076          dc.b      114,32,108,111,110,103,32,119,111,114,100,115
00004E99  6E67 2077 
00004E9D  6F72 6473 
00004EA1  2C20 706C 7077          dc.b      44,32,112,108,101,97,115,101,32,101,110,116
00004EA5  6561 7365 
00004EA9  2065 6E74 
00004EAD  6572 2061 7078          dc.b      101,114,32,97,110,32,101,118,101,110,32,110
00004EB1  6E20 6576 
00004EB5  656E 206E 
00004EB9  756D 6265 7079          dc.b      117,109,98,101,114,101,100,32,97,100,100,114
00004EBD  7265 6420 
00004EC1  6164 6472 
00004EC5  6573 730D 7080          dc.b      101,115,115,13,10,0
00004EC9  0A00      
                    7081   @m68kde~1_163:
00004ECC  0D0A 5468 7082          dc.b      13,10,84,104,101,32,99,104,111,115,101,110,32
00004ED0  6520 6368 
00004ED4  6F73 656E 
00004ED8  20        
00004ED9  7374 6172 7083          dc.b      115,116,97,114,116,105,110,103,32,97,100,100
00004EDD  7469 6E67 
00004EE1  2061 6464 
00004EE5  7265 7373 7084          dc.b      114,101,115,115,32,105,115,58,32,37,120,13,10
00004EE9  2069 733A 
00004EED  2025 780D 
00004EF1  0A        
00004EF2  00        7085          dc.b      0
                    7086   @m68kde~1_164:
00004EF4  0D0A 506C 7087          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00004EF8  6561 7365 
00004EFC  2065 6E74 
00004F00  65        
00004F01  7220 616E 7088          dc.b      114,32,97,110,32,101,110,100,32,97,100,100,114
00004F05  2065 6E64 
00004F09  2061 6464 
00004F0D  72        
00004F0E  6573 7320 7089          dc.b      101,115,115,32,102,114,111,109,32,37,120,32
00004F12  6672 6F6D 
00004F16  2025 7820 
00004F1A  746F 2030 7090          dc.b      116,111,32,48,57,55,102,95,102,102,102,102,13
00004F1E  3937 665F 
00004F22  6666 6666 
00004F26  0D        
00004F27  0A00      7091          dc.b      10,0
                    7092   @m68kde~1_165:
00004F2A  0D0A 456E 7093          dc.b      13,10,69,110,100,32,97,100,100,114,101,115,115
00004F2E  6420 6164 
00004F32  6472 6573 
00004F36  73        
00004F37  2069 7320 7094          dc.b      32,105,115,32,105,110,118,97,108,105,100,13
00004F3B  696E 7661 
00004F3F  6C69 640D 
00004F43  0A00      7095          dc.b      10,0
                    7096   @m68kde~1_166:
00004F46  0D0A 5468 7097          dc.b      13,10,84,104,101,32,99,104,111,115,101,110,32
00004F4A  6520 6368 
00004F4E  6F73 656E 
00004F52  20        
00004F53  656E 6469 7098          dc.b      101,110,100,105,110,103,32,97,100,100,114,101
00004F57  6E67 2061 
00004F5B  6464 7265 
00004F5F  7373 2069 7099          dc.b      115,115,32,105,115,58,32,37,120,13,10,0
00004F63  733A 2025 
00004F67  780D 0A00 
                    7100   @m68kde~1_167:
00004F6C  0D0A 5772 7101          dc.b      13,10,87,114,105,116,105,110,103,32,37,120,32
00004F70  6974 696E 
00004F74  6720 2578 
00004F78  20        
00004F79  696E 746F 7102          dc.b      105,110,116,111,32,97,100,100,114,101,115,115
00004F7D  2061 6464 
00004F81  7265 7373 
00004F85  2025 780D 7103          dc.b      32,37,120,13,10,0
00004F89  0A00      
                    7104   @m68kde~1_168:
00004F8C  0D0A 5772 7105          dc.b      13,10,87,114,105,116,105,110,103,32,99,111,109
00004F90  6974 696E 
00004F94  6720 636F 
00004F98  6D        
00004F99  706C 6574 7106          dc.b      112,108,101,116,101,100,46,32,87,105,108,108
00004F9D  6564 2E20 
00004FA1  5769 6C6C 
00004FA5  206E 6F77 7107          dc.b      32,110,111,119,32,115,116,97,114,116,32,114
00004FA9  2073 7461 
00004FAD  7274 2072 
00004FB1  6561 6469 7108          dc.b      101,97,100,105,110,103,46,13,10,0
00004FB5  6E67 2E0D 
00004FB9  0A00      
                    7109   @m68kde~1_169:
00004FBC  0D0A 416E 7110          dc.b      13,10,65,110,32,69,114,114,111,114,32,104,97
00004FC0  2045 7272 
00004FC4  6F72 2068 
00004FC8  61        
00004FC9  7320 6F63 7111          dc.b      115,32,111,99,99,117,114,114,101,100,58,32,100
00004FCD  6375 7272 
00004FD1  6564 3A20 
00004FD5  64        
00004FD6  6174 6120 7112          dc.b      97,116,97,32,97,116,32,97,100,100,114,101,115
00004FDA  6174 2061 
00004FDE  6464 7265 
00004FE2  73        
00004FE3  7320 2578 7113          dc.b      115,32,37,120,32,101,120,112,101,99,116,101
00004FE7  2065 7870 
00004FEB  6563 7465 
00004FEF  6420 746F 7114          dc.b      100,32,116,111,32,98,101,32,37,120,44,32,105
00004FF3  2062 6520 
00004FF7  2578 2C20 
00004FFB  69        
00004FFC  6E73 7465 7115          dc.b      110,115,116,101,97,100,32,105,115,32,114,101
00005000  6164 2069 
00005004  7320 7265 
00005008  6164 696E 7116          dc.b      97,100,105,110,103,32,37,120,13,10,0
0000500C  6720 2578 
00005010  0D0A 00   
                    7117   @m68kde~1_170:
00005014  0D0A 5265 7118          dc.b      13,10,82,101,97,100,105,110,103,32,100,97,116
00005018  6164 696E 
0000501C  6720 6461 
00005020  74        
00005021  6120 7661 7119          dc.b      97,32,118,97,108,117,101,32,37,120,32,102,114
00005025  6C75 6520 
00005029  2578 2066 
0000502D  72        
0000502E  6F6D 2061 7120          dc.b      111,109,32,97,100,100,114,101,115,115,32,37
00005032  6464 7265 
00005036  7373 2025 
0000503A  780D 0A00 7121          dc.b      120,13,10,0
                    7122   @m68kde~1_171:
0000503E  0D0A 4D65 7123          dc.b      13,10,77,101,109,111,114,121,32,116,101,115
00005042  6D6F 7279 
00005046  2074 6573 
0000504A  7420 6661 7124          dc.b      116,32,102,97,105,108,101,100,46,13,10,0
0000504E  696C 6564 
00005052  2E0D 0A00 
                    7125   @m68kde~1_172:
00005056  0D0A 4D65 7126          dc.b      13,10,77,101,109,111,114,121,32,116,101,115
0000505A  6D6F 7279 
0000505E  2074 6573 
00005062  7420 7375 7127          dc.b      116,32,115,117,99,99,101,115,115,102,117,108
00005066  6363 6573 
0000506A  7366 756C 
0000506E  2E0D 0A00 7128          dc.b      46,13,10,0
                    7129   @m68kde~1_173:
00005072  4350 454E 7130          dc.b      67,80,69,78,52,49,50,32,45,32,76,97,98,32,51
00005076  3431 3220 
0000507A  2D20 4C61 
0000507E  6220 33   
00005081  00        7131          dc.b      0
                    7132   @m68kde~1_174:
00005082  5279 616E 7133          dc.b      82,121,97,110,32,78,101,100,106,97,98,97,116
00005086  204E 6564 
0000508A  6A61 6261 
0000508E  74        
0000508F  2036 3735 7134          dc.b      32,54,55,53,48,49,53,49,48,59,32,65,110,110
00005093  3031 3531 
00005097  303B 2041 
0000509B  6E6E      
0000509D  6120 5975 7135          dc.b      97,32,89,117,110,32,57,52,57,48,50,54,55,51
000050A1  6E20 3934 
000050A5  3930 3236 
000050A9  3733      
000050AB  00        7136          dc.b      0
                    7137   @m68kde~1_175:
000050AC  0D0A 5275 7138          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000050B0  6E6E 696E 
000050B4  672E 2E2E 
000050B8  2E        
000050B9  2E00      7139          dc.b      46,0
                    7140   @m68kde~1_176:
000050BC  5275 6E6E 7141          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000050C0  696E 672E 
000050C4  2E2E 2E2E 
000050C8  00        
                    7142   @m68kde~1_177:
000050CA  4279 3A20 7143          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
000050CE  504A 2044 
000050D2  6176 6965 
000050D6  73        
000050D7  00        7144          dc.b      0
                    7145   @m68kde~1_178:
000050D8  0D0A 2573 7146          dc.b      13,10,37,115,0
000050DC  00        
                    7147   @itoa_1:
000050DE  2D32 3134 7148          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
000050E2  3734 3833 
000050E6  3634 3800 
                    7149   __ctype:
000050EA  0040 4040 7150          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
000050EE  4040 4040 
000050F2  4040 5050 
000050F6  5050 50   
000050F9  4040 4040 7151          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
000050FD  4040 4040 
00005101  4040 4040 
00005105  4040 40   
00005108  4040 40D0 7152          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
0000510C  A0A0 A0A0 
00005110  A0A0 A0A0 
00005114  A0A0 A0A0 7153          dc.b      160,160,160,160,160,160,160,140,140,140,140
00005118  A0A0 A08C 
0000511C  8C8C 8C   
0000511F  8C8C 8C8C 7154          dc.b      140,140,140,140,140,140,160,160,160,160,160
00005123  8C8C A0A0 
00005127  A0A0 A0   
0000512A  A0A0 8A8A 7155          dc.b      160,160,138,138,138,138,138,138,130,130,130
0000512E  8A8A 8A8A 
00005132  8282 82   
00005135  8282 8282 7156          dc.b      130,130,130,130,130,130,130,130,130,130,130
00005139  8282 8282 
0000513D  8282 82   
00005140  8282 8282 7157          dc.b      130,130,130,130,130,130,160,160,160,160,160
00005144  8282 A0A0 
00005148  A0A0 A0   
0000514B  A089 8989 7158          dc.b      160,137,137,137,137,137,137,129,129,129,129
0000514F  8989 8981 
00005153  8181 81   
00005156  8181 8181 7159          dc.b      129,129,129,129,129,129,129,129,129,129,129
0000515A  8181 8181 
0000515E  8181 81   
00005161  8181 8181 7160          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005165  81A0 A0A0 
00005169  A040 0000 
0000516D  00        
0000516E  0000 0000 7161          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005172  0000 0000 
00005176  0000 0000 
0000517A  0000 0000 
0000517E  0000 0000 
00005182  0000      
00005184  0000 0000 7162          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005188  0000 0000 
0000518C  0000 0000 
00005190  0000 0000 
00005194  0000 0000 
00005198  0000      
0000519A  0000 0000 7163          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000519E  0000 0000 
000051A2  0000 0000 
000051A6  0000 0000 
000051AA  0000 0000 
000051AE  0000      
000051B0  0000 0000 7164          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000051B4  0000 0000 
000051B8  0000 0000 
000051BC  0000 0000 
000051C0  0000 0000 
000051C4  0000      
000051C6  0000 0000 7165          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000051CA  0000 0000 
000051CE  0000 0000 
000051D2  0000 0000 
000051D6  0000 0000 
000051DA  0000      
000051DC  0000 0000 7166          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000051E0  0000 0000 
000051E4  0000 0000 
000051E8  0000 00   
                    7167          section   data
000051EC            7168                   align
          0000 51EC 7169   DataStart       equ       *
                    7170   
                    7171   *********************************************************************************************************
                    7172   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7173   * to ram as part of the CStart routine in this file
                    7174   *********************************************************************************************************
                    7175   
                    7176          section   bss
000051EC            7177                   align
          0000 51EC 7178   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7179   
                    7180   *********************************************************************************************************
                    7181   * Section for Uninitialised Data held in ROM as constants
                    7182   *********************************************************************************************************
                    7183   
0B000000            7184                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0000 7185   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7186   
                    7187   
0B000000            7188   bss             org       bss
                    7189   
                    7190   *********************************************************************************************************
                    7191   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7192   * install the exception handler using the C function InstallExceptionHandler()
                    7193   *********************************************************************************************************
                    7194   
                    7195   
                    7196   
0B000000            7197   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            7198   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            7199   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            7200   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            7201   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            7202   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            7203   VCheck           ds.l    1      ditto
0B00001C            7204   VTrapV           ds.l    1      ditto
0B000020            7205   VPrivilege       ds.l    1      ditto
0B000024            7206   VTrace           ds.l    1
0B000028            7207   VLine1010emul    ds.l    1
0B00002C            7208   VLine1111emul    ds.l    1
0B000030            7209   VUnassigned1     ds.l    1
0B000034            7210   VUnassigned2     ds.l    1
0B000038            7211   VUnassigned3     ds.l    1
0B00003C            7212   VUninit_IRQ      ds.l    1
0B000040            7213   VUnassigned4     ds.l    1
0B000044            7214   VUnassigned5     ds.l    1
0B000048            7215   VUnassigned6     ds.l    1
0B00004C            7216   VUnassigned7     ds.l    1
0B000050            7217   VUnassigned8     ds.l    1
0B000054            7218   VUnassigned9     ds.l    1
0B000058            7219   VUnassigned10    ds.l    1
0B00005C            7220   VUnassigned11    ds.l    1
0B000060            7221   VSpuriousIRQ     ds.l    1
                    7222   
                    7223   * Interrupt handlers Vector 25-31
0B000064            7224   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            7225   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            7226   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            7227   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            7228   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            7229   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            7230   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7231   
                    7232   * Trap Handler vectors 32-47
0B000080            7233   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            7234   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            7235   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            7236   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            7237   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            7238   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            7239   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            7240   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7241   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7242   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7243   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7244   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7245   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7246   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7247   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7248   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7249   
                    7250   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7251   
                    7252   ***********************************************************************************************************
                    7253   * Other Variables
                    7254   ***********************************************************************************************************
                    7255   *__DebugA5       ds.l    1
                    7256   *__UserA5        ds.l    1
                    7257   
                    7258   ***********************************************************************************************************
0B0000C0            7259   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7260   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7261   __heap:         ds.l    0       ; pointers for malloc functions
                    7262   
                    7263   *__himem:       ds.l    himem            ; highest memory location + 1
                    7264   *__stklen:      ds.l    stklen           ; default stack size
                    7265   
                    7266   *********************************************************************************************************
                    7267   * Section for Heap
                    7268   *********************************************************************************************************
                    7269   
                    7270   _i:
0B0000C4            7271          ds.b      4
                    7272   _x:
0B0000C8            7273          ds.b      4
                    7274   _y:
0B0000CC            7275          ds.b      4
                    7276   _z:
0B0000D0            7277          ds.b      4
                    7278   _PortA_Count:
0B0000D4            7279          ds.b      4
                    7280   _Trace:
0B0000D8            7281          ds.b      4
                    7282   _GoFlag:
0B0000DC            7283          ds.b      4
                    7284   _Echo:
0B0000E0            7285          ds.b      4
                    7286   _d0:
0B0000E4            7287          ds.b      4
                    7288   _d1:
0B0000E8            7289          ds.b      4
                    7290   _d2:
0B0000EC            7291          ds.b      4
                    7292   _d3:
0B0000F0            7293          ds.b      4
                    7294   _d4:
0B0000F4            7295          ds.b      4
                    7296   _d5:
0B0000F8            7297          ds.b      4
                    7298   _d6:
0B0000FC            7299          ds.b      4
                    7300   _d7:
0B000100            7301          ds.b      4
                    7302   _a0:
0B000104            7303          ds.b      4
                    7304   _a1:
0B000108            7305          ds.b      4
                    7306   _a2:
0B00010C            7307          ds.b      4
                    7308   _a3:
0B000110            7309          ds.b      4
                    7310   _a4:
0B000114            7311          ds.b      4
                    7312   _a5:
0B000118            7313          ds.b      4
                    7314   _a6:
0B00011C            7315          ds.b      4
                    7316   _PC:
0B000120            7317          ds.b      4
                    7318   _SSP:
0B000124            7319          ds.b      4
                    7320   _USP:
0B000128            7321          ds.b      4
                    7322   _SR:
0B00012C            7323          ds.b      2
                    7324   _BreakPointAddress:
0B00012E            7325          ds.b      32
                    7326   _BreakPointInstruction:
0B00014E            7327          ds.b      16
                    7328   _BreakPointSetOrCleared:
0B00015E            7329          ds.b      32
                    7330   _InstructionSize:
0B00017E            7331          ds.b      4
                    7332   _WatchPointAddress:
0B000182            7333          ds.b      32
                    7334   _WatchPointSetOrCleared:
0B0001A2            7335          ds.b      32
                    7336   _WatchPointString:
0B0001C2            7337          ds.b      800
                    7338   _TempString:
0B0004E2            7339          ds.b      100
                    7340          section   heap
0B000546            7341                   align
          0B00 0546 7342   bssEnd          equ *                   end of storage space for unitialised variables
                    7343   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0546 7344   heap   equ       *
0B000546            7345                    align
          0000 0000

Assembly errors: 0
